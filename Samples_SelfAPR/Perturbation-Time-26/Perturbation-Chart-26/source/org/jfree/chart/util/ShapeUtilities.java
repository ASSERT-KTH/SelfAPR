[P1_Replace_Type]^private static final int SQRT2 =  ( int )  Math.pow ( 2.0, 0.5 ) ;^391^^^^^386^396^private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^[CLASS] ShapeUtilities   [VARIABLES] 
[P3_Replace_Literal]^private static final float SQRT2 =  ( float )  Math.pow ( 14.0, 0.5 ) ;^391^^^^^386^396^private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^[CLASS] ShapeUtilities   [VARIABLES] 
[P3_Replace_Literal]^private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 2.5 ) ;^391^^^^^386^396^private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^[CLASS] ShapeUtilities   [VARIABLES] 
[P7_Replace_Invocation]^private static final float SQRT2 =  ( float )  Math.max ( 2.0, 0.5 ) ;^391^^^^^386^396^private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^[CLASS] ShapeUtilities   [VARIABLES] 
[P8_Replace_Mix]^private static final int SQRT2 =  ( int )  Math.pow ( 1.0d, 0.5 ) ;^391^^^^^386^396^private static final float SQRT2 =  ( float )  Math.pow ( 2.0, 0.5 ) ;^[CLASS] ShapeUtilities   [VARIABLES] 
[P2_Replace_Operator]^if  ( shape  >  Cloneable )  {^105^^^^^103^114^if  ( shape instanceof Cloneable )  {^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P5_Replace_Variable]^if  ( result instanceof Cloneable )  {^105^^^^^103^114^if  ( shape instanceof Cloneable )  {^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P15_Unwrap_Block]^try {    return ((java.awt.Shape) (org.jfree.chart.util.ObjectUtilities.clone(shape)));} catch (java.lang.CloneNotSupportedException cnse) {};^105^106^107^108^^103^114^if  ( shape instanceof Cloneable )  { try { return  ( Shape )  ObjectUtilities.clone ( shape ) ; }^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P16_Remove_Block]^^105^106^107^108^^103^114^if  ( shape instanceof Cloneable )  { try { return  ( Shape )  ObjectUtilities.clone ( shape ) ; }^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P13_Insert_Block]^if  ( shape instanceof Cloneable )  {     try {         return  (  ( Shape )   ( clone ( shape )  )  ) ;     } catch  ( CloneNotSupportedException cnse )  {     } }^106^^^^^103^114^[Delete]^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P5_Replace_Variable]^return  ( Shape )  ObjectUtilities.clone ( result ) ;^107^^^^^103^114^return  ( Shape )  ObjectUtilities.clone ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P14_Delete_Statement]^^107^^^^^103^114^return  ( Shape )  ObjectUtilities.clone ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P5_Replace_Variable]^return shape;^113^^^^^103^114^return result;^[CLASS] ShapeUtilities  [METHOD] clone [RETURN_TYPE] Shape   Shape shape [VARIABLES] Shape  result  shape  boolean  float  SQRT2  CloneNotSupportedException  cnse  
[P2_Replace_Operator]^if  ( s1 instanceof Line2D || s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  |  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1 instanceof Line2D && s2  &  Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  >=  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  &&  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  <<  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  ==  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  &  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( s1  <  Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^if  ( s2 instanceof Line2D && s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^if  ( s1 instanceof Line2D && s1 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Line2D ) {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  (  s2 instanceof Line2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Ellipse2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s2 instanceof Ellipse2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Arc2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s2 instanceof Arc2D )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof Polygon )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s2 instanceof Polygon )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s1 instanceof GeneralPath )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^if  ( s2 instanceof GeneralPath )  {^130^^^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P15_Unwrap_Block]^return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Line2D) (s1)), ((java.awt.geom.Line2D) (s2)));^130^131^132^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  { return equal (  ( Line2D )  s1,  ( Line2D )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P16_Remove_Block]^^130^131^132^^^129^149^if  ( s1 instanceof Line2D && s2 instanceof Line2D )  { return equal (  ( Line2D )  s1,  ( Line2D )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Ellipse2D || s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <<  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Ellipse2D && s2  &&  Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <=  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ||  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  |  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >>  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  &  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s2 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Ellipse2D ) {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  (  s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Arc2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s2 instanceof Arc2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Polygon )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s2 instanceof Polygon )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s2 instanceof GeneralPath )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s2 instanceof Ellipse2D ) {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P15_Unwrap_Block]^return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Ellipse2D) (s1)), ((java.awt.geom.Ellipse2D) (s2)));^133^134^135^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  { return equal (  ( Ellipse2D )  s1,  ( Ellipse2D )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P16_Remove_Block]^^133^134^135^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  { return equal (  ( Ellipse2D )  s1,  ( Ellipse2D )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Arc2D || s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  !=  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Arc2D && s2  ^  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >=  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ||  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  &  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s2 instanceof Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s1 instanceof Arc2D && s1 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Arc2D ) {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  (  s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Polygon )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s2 instanceof Polygon )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s2 instanceof GeneralPath )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^else {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P9_Replace_Statement]^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P15_Unwrap_Block]^return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.Arc2D) (s1)), ((java.awt.geom.Arc2D) (s2)));^136^137^138^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  { return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P16_Remove_Block]^^136^137^138^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  { return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon || s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ==  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon && s2  <=  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <<  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  |  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s1 instanceof Polygon && s1 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof Polygon ) {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  (  s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s2 instanceof GeneralPath )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s2 instanceof Polygon ) {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P9_Replace_Statement]^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P15_Unwrap_Block]^return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.Polygon) (s1)), ((java.awt.Polygon) (s2)));^139^140^141^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  { return equal (  ( Polygon )  s1,  ( Polygon )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P16_Remove_Block]^^139^140^141^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  { return equal (  ( Polygon )  s1,  ( Polygon )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath || s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  <  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s1 instanceof GeneralPath && s1 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s2 instanceof GeneralPath && s1 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  ( s1 instanceof GeneralPath ) {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P6_Replace_Expression]^else if  (  s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s2 instanceof GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P9_Replace_Statement]^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P15_Unwrap_Block]^return org.jfree.chart.util.ShapeUtilities.equal(((java.awt.geom.GeneralPath) (s1)), ((java.awt.geom.GeneralPath) (s2)));^142^143^144^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  { return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P16_Remove_Block]^^142^143^144^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  { return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^return ObjectUtilities.equal (  s2 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^return ObjectUtilities.equal ( s1 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^return ObjectUtilities.equal ( s2, s1 ) ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P7_Replace_Invocation]^return ObjectUtilities .createUpTriangle ( SQRT2 )  ;^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P14_Delete_Statement]^^147^^^^^129^149^return ObjectUtilities.equal ( s1, s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P14_Delete_Statement]^^143^^^^^129^149^return equal (  ( GeneralPath )  s1,  ( GeneralPath )  s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P14_Delete_Statement]^^140^^^^^129^149^return equal (  ( Polygon )  s1,  ( Polygon )  s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >=  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  ==  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s1 instanceof GeneralPath && s1 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P14_Delete_Statement]^^137^^^^^129^149^return equal (  ( Arc2D )  s1,  ( Arc2D )  s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ||  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon && s2  ^  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  &&  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <=  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s2 instanceof Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^else {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  &  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s2 instanceof GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^else {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ||  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  >=  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s1 instanceof GeneralPath ) {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P14_Delete_Statement]^^134^^^^^129^149^return equal (  ( Ellipse2D )  s1,  ( Ellipse2D )  s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Arc2D && s2  !=  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ==  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon && s2  >=  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >=  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  !=  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  ||  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  |  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon && s2  &  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ^  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  &  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  |  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  &  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P14_Delete_Statement]^^131^^^^^129^149^return equal (  ( Line2D )  s1,  ( Line2D )  s2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Ellipse2D && s2  >>  Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ==  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  &&  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >=  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  !=  Ellipse2D && s2 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s1 instanceof Ellipse2D && s1 instanceof Ellipse2D )  {^133^^^^^129^149^else if  ( s1 instanceof Ellipse2D && s2 instanceof Ellipse2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Arc2D && s2  &&  Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <=  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s1 instanceof Arc2D ) {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  !=  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon && s2  |  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >>  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof Polygon && s2  ==  Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P5_Replace_Variable]^else if  ( s2 instanceof Polygon && s1 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ^  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P8_Replace_Mix]^if  ( s2 instanceof GeneralPath ) {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  |  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <<  Arc2D && s2 instanceof Arc2D )  {^136^^^^^129^149^else if  ( s1 instanceof Arc2D && s2 instanceof Arc2D )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  &&  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  >>  Polygon && s2 instanceof Polygon )  {^139^^^^^129^149^else if  ( s1 instanceof Polygon && s2 instanceof Polygon )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  ==  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  >>  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1  <=  GeneralPath && s2 instanceof GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^else if  ( s1 instanceof GeneralPath && s2  >  GeneralPath )  {^142^^^^^129^149^else if  ( s1 instanceof GeneralPath && s2 instanceof GeneralPath )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Shape s1 Shape s2 [VARIABLES] float  SQRT2  Shape  s1  s2  boolean  
[P2_Replace_Operator]^if  ( l1 != null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P6_Replace_Expression]^if  ( l2 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P8_Replace_Mix]^if  ( l1 == true )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( a2 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( a1 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( e2 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( p2 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( p1 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( e1 == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( seg1 != seg2 )  {^161^^^^^160^174^if  ( l1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P15_Unwrap_Block]^return l2 == null;^161^162^163^^^160^174^if  ( l1 == null )  { return  ( l2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P16_Remove_Block]^^161^162^163^^^160^174^if  ( l1 == null )  { return  ( l2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^161^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P2_Replace_Operator]^return  ( l2 != null ) ;^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P5_Replace_Variable]^return  ( l1 == null ) ;^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P8_Replace_Mix]^return true ;^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( l1 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( a2 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( a1 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( e2 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( p2 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( p1 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( e1 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P12_Insert_Condition]^if  ( l2 == null )  { return  ( l2 == null ) ; }^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P8_Replace_Mix]^return  ( l2 != null ) ;;^162^^^^^160^174^return  ( l2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P2_Replace_Operator]^if  ( l2 != null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P5_Replace_Variable]^if  ( l1 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P8_Replace_Mix]^if  ( l2 == false )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( a2 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( a1 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( e2 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( p2 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( p1 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( e1 == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^164^^^^^160^174^if  ( l2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P15_Unwrap_Block]^return false;^164^165^166^^^160^174^if  ( l2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P16_Remove_Block]^^164^165^166^^^160^174^if  ( l2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^164^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P3_Replace_Literal]^return true;^165^^^^^160^174^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P7_Replace_Invocation]^if  ( !l1 .getP2 (  )  .equals ( l2^167^^^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^167^^^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^167^^^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^167^^^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P15_Unwrap_Block]^return false;^167^168^169^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P16_Remove_Block]^^167^168^169^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P3_Replace_Literal]^return true;^168^^^^^160^174^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^167^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P5_Replace_Variable]^if  ( !l1.getP1 (  ) .equals ( l1.getP1 (  )  )  )  {^167^^^^^160^174^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P7_Replace_Invocation]^if  ( !l1 .getP1 (  )  .equals ( l2^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P8_Replace_Mix]^if  ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P9_Replace_Statement]^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P15_Unwrap_Block]^return false;^170^171^172^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P16_Remove_Block]^^170^171^172^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P3_Replace_Literal]^return true;^171^^^^^160^174^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^170^^^^^160^174^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P5_Replace_Variable]^if  ( !l1.getP2 (  ) .equals ( l1.getP2 (  )  )  )  {^170^^^^^160^174^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P3_Replace_Literal]^return false;^173^^^^^160^174^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Line2D l1 Line2D l2 [VARIABLES] float  SQRT2  Line2D  l1  l2  boolean  
[P2_Replace_Operator]^if  ( e1 != null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P6_Replace_Expression]^if  ( e2 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P8_Replace_Mix]^if  ( e1 == this )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( l1 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( a2 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( a1 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( p2 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( p1 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( l2 == null )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( seg1 != seg2 )  {^186^^^^^185^196^if  ( e1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P15_Unwrap_Block]^return e2 == null;^186^187^188^^^185^196^if  ( e1 == null )  { return  ( e2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P16_Remove_Block]^^186^187^188^^^185^196^if  ( e1 == null )  { return  ( e2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^186^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P2_Replace_Operator]^return  ( e2 != null ) ;^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P5_Replace_Variable]^return  ( e1 == null ) ;^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P8_Replace_Mix]^return  ( e2 !=e1 ) ;;^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( l1 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( a2 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( a1 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( e2 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( p2 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( p1 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( e1 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P12_Insert_Condition]^if  ( l2 == null )  { return  ( e2 == null ) ; }^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P8_Replace_Mix]^return  ( e1 != null ) ;;^187^^^^^185^196^return  ( e2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P2_Replace_Operator]^if  ( e2 != null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P5_Replace_Variable]^if  ( e1 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P8_Replace_Mix]^if  ( e2 == true )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( l1 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( a2 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( a1 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( p2 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( p1 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( l2 == null )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( seg1 != seg2 )  {^189^^^^^185^196^if  ( e2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P15_Unwrap_Block]^return false;^189^190^191^^^185^196^if  ( e2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P16_Remove_Block]^^189^190^191^^^185^196^if  ( e2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^189^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P3_Replace_Literal]^return true;^190^^^^^185^196^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P8_Replace_Mix]^if  ( !e1 .getMaxX (  )  .equals ( e2^192^^^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^192^^^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^192^^^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P9_Replace_Statement]^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^192^^^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P15_Unwrap_Block]^return false;^192^193^194^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P16_Remove_Block]^^192^193^194^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P3_Replace_Literal]^return true;^193^^^^^185^196^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^192^^^^^185^196^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P5_Replace_Variable]^if  ( !e1.getFrame (  ) .equals ( e1.getFrame (  )  )  )  {^192^^^^^185^196^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P3_Replace_Literal]^return false;^195^^^^^185^196^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Ellipse2D e1 Ellipse2D e2 [VARIABLES] float  SQRT2  Ellipse2D  e1  e2  boolean  
[P2_Replace_Operator]^if  ( a1 != null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P6_Replace_Expression]^if  ( a2 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^if  ( a1 == true )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( l1 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( e2 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( p2 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( p1 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( e1 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( l2 == null )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( seg1 != seg2 )  {^208^^^^^207^227^if  ( a1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P15_Unwrap_Block]^return a2 == null;^208^209^210^^^207^227^if  ( a1 == null )  { return  ( a2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P16_Remove_Block]^^208^209^210^^^207^227^if  ( a1 == null )  { return  ( a2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^208^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P2_Replace_Operator]^return  ( a2 != null ) ;^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^return  ( a1 == null ) ;^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^return  ( a2 != null ) ;;^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( l1 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( a2 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( a1 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( e2 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( p2 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( p1 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( e1 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( base == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P12_Insert_Condition]^if  ( l2 == null )  { return  ( a2 == null ) ; }^209^^^^^207^227^return  ( a2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P2_Replace_Operator]^if  ( a2 != null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a1 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^if  ( a2 == false )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( l1 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( e2 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( p2 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( p1 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( e1 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( l2 == null )  {^211^^^^^207^227^if  ( a2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P15_Unwrap_Block]^return false;^211^212^213^^^207^227^if  ( a2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P16_Remove_Block]^^211^212^213^^^207^227^if  ( a2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^211^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P3_Replace_Literal]^return true;^212^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^if  ( !a1 .getMaxX (  )  .equals ( a2^214^^^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( !l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  {^214^^^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( !e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  {^214^^^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( !l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  {^214^^^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P15_Unwrap_Block]^return false;^214^215^216^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P16_Remove_Block]^^214^215^216^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P3_Replace_Literal]^return true;^215^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^214^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( !a1.getFrame (  ) .equals ( a1.getFrame (  )  )  )  {^214^^^^^207^227^if  ( !a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P2_Replace_Operator]^if  ( a1.getAngleStart (  )  >= a2.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a2.getAngleStart (  )  != a1.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P7_Replace_Invocation]^if  ( a1 .getAngleExtent (  )   != a2^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P15_Unwrap_Block]^return false;^217^218^219^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P16_Remove_Block]^^217^218^219^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^217^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P3_Replace_Literal]^return true;^218^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a2.getAngleStart (  )  != a2.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a1.getAngleStart (  )  != a1.getAngleStart (  )  )  {^217^^^^^207^227^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P2_Replace_Operator]^if  ( a1.getAngleExtent (  )  == a2.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a2.getAngleExtent (  )  != a1.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^if  ( a1 .getAngleStart (  )   != a2^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P15_Unwrap_Block]^return false;^220^221^222^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P16_Remove_Block]^^220^221^222^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^220^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P3_Replace_Literal]^return true;^221^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^if  ( a2.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a1.getAngleExtent (  )  != a1.getAngleExtent (  )  )  {^220^^^^^207^227^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P2_Replace_Operator]^if  ( a1.getArcType (  )  == a2.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a2.getArcType (  )  != a1.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P8_Replace_Mix]^if  ( a1.getArcType (  )  = a2.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( a1.getAngleStart (  )  != a2.getAngleStart (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P9_Replace_Statement]^if  ( a1.getAngleExtent (  )  != a2.getAngleExtent (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P15_Unwrap_Block]^return false;^223^224^225^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P16_Remove_Block]^^223^224^225^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^223^^^^^207^227^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P3_Replace_Literal]^return true;^224^^^^^207^227^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a2.getArcType (  )  != a2.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P7_Replace_Invocation]^if  ( a1 .getAngleStart (  )   != a2^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P5_Replace_Variable]^if  ( a1.getArcType (  )  != a1.getArcType (  )  )  {^223^^^^^207^227^if  ( a1.getArcType (  )  != a2.getArcType (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P3_Replace_Literal]^return false;^226^^^^^207^227^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Arc2D a1 Arc2D a2 [VARIABLES] float  SQRT2  Arc2D  a1  a2  boolean  
[P2_Replace_Operator]^if  ( p1 != null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P6_Replace_Expression]^if  ( p2 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^if  ( p1 == false )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( l1 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( a2 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( a1 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( e2 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( e1 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( l2 == null )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( seg1 != seg2 )  {^239^^^^^238^255^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P15_Unwrap_Block]^return p2 == null;^239^240^241^^^238^255^if  ( p1 == null )  { return  ( p2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P16_Remove_Block]^^239^240^241^^^238^255^if  ( p1 == null )  { return  ( p2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^239^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P2_Replace_Operator]^return  ( p2 != null ) ;^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^return  ( p1 == null ) ;^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^return  (p1 != null ) ;;^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( l1 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( a2 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( a1 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( e2 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( p2 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( p1 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( e1 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P12_Insert_Condition]^if  ( l2 == null )  { return  ( p2 == null ) ; }^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^return  ( p2 != null ) ;;^240^^^^^238^255^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P2_Replace_Operator]^if  ( p2 != null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( p1 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^if  ( p2 == false )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( l1 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( a2 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( a1 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( anchor == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( e2 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( shape == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( e1 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( base == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( l2 == null )  {^242^^^^^238^255^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P15_Unwrap_Block]^return false;^242^243^244^^^238^255^if  ( p2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P16_Remove_Block]^^242^243^244^^^238^255^if  ( p2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^242^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P3_Replace_Literal]^return true;^243^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P2_Replace_Operator]^if  ( p1.npoints == p2.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( p2.npoints != p1.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( p1.npoints != p2.npoints.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( p2 != p1.npoints.npoints )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^if  ( p1.npoints != 2 )  {^245^^^^^238^255^if  ( p1.npoints != p2.npoints )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P15_Unwrap_Block]^return false;^245^246^247^^^238^255^if  ( p1.npoints != p2.npoints )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P16_Remove_Block]^^245^246^247^^^238^255^if  ( p1.npoints != p2.npoints )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^245^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P3_Replace_Literal]^return true;^246^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.xpoints, p1.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.xpoints.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals (  p2.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p2.xpoints.xpoints, p1 )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p2, p1.xpoints.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p2.xpoints, p1.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^if  ( !Arrays.equals ( p2.xpoints, p2.xpoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( !Arrays.equals ( d1, d2 )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^248^^^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P15_Unwrap_Block]^return false;^248^249^250^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P16_Remove_Block]^^248^249^250^^^238^255^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P3_Replace_Literal]^return true;^249^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^248^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.ypoints.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals (  p2.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p2.ypoints, p1.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P8_Replace_Mix]^if  ( Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( !Arrays.equals ( d1, d2 )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P9_Replace_Statement]^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P15_Unwrap_Block]^return false;^251^252^253^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P16_Remove_Block]^^251^252^253^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P3_Replace_Literal]^return true;^252^^^^^238^255^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.ypoints, p1.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P5_Replace_Variable]^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints.ypoints )  )  {^251^^^^^238^255^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^251^^^^^238^255^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P3_Replace_Literal]^return false;^254^^^^^238^255^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   Polygon p1 Polygon p2 [VARIABLES] float  SQRT2  Polygon  p1  p2  boolean  
[P2_Replace_Operator]^if  ( p1 != null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P6_Replace_Expression]^if  ( p2 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^if  ( p1 == true )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( l1 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( a2 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( a1 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( anchor == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( e2 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( shape == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( e1 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( base == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( l2 == null )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( seg1 != seg2 )  {^267^^^^^252^282^if  ( p1 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P15_Unwrap_Block]^return p2 == null;^267^268^269^^^252^282^if  ( p1 == null )  { return  ( p2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P16_Remove_Block]^^267^268^269^^^252^282^if  ( p1 == null )  { return  ( p2 == null ) ; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^267^^^^^252^282^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^return  ( p2 != null ) ;^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^return  ( p1 == null ) ;^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^return  ( p2 != this  ) ;;^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( l1 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( a2 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( a1 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( e2 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( p2 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( p1 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( e1 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( l2 == null )  { return  ( p2 == null ) ; }^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^return false ;^268^^^^^253^283^return  ( p2 == null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( p2 != null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( p1 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^if  ( p2 == false )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( l1 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( a2 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( a1 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( anchor == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( e2 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( shape == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( e1 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( base == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( l2 == null )  {^270^^^^^255^285^if  ( p2 == null )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P15_Unwrap_Block]^return false;^270^271^272^^^255^285^if  ( p2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P16_Remove_Block]^^270^271^272^^^255^285^if  ( p2 == null )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^270^^^^^255^285^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^return true;^271^^^^^256^286^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( p1.getWindingRule (  )  > p2.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( p2.getWindingRule (  )  != p1.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P15_Unwrap_Block]^return false;^273^274^275^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P16_Remove_Block]^^273^274^275^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( iterator1.isDone (  )  )  !=  ( iterator2.isDone (  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^273^^^^^258^288^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^return true;^274^^^^^259^289^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( p2.getWindingRule (  )  != p2.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( p1.getWindingRule (  )  != p1.getWindingRule (  )  )  {^273^^^^^258^288^if  ( p1.getWindingRule (  )  != p2.getWindingRule (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^PathIterator iterator1 = p1.lineTo ( null ) ;^276^^^^^261^291^PathIterator iterator1 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^PathIterator iterator1 = p1 .lineTo ( SQRT2 , SQRT2 )  ;^276^^^^^261^291^PathIterator iterator1 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^PathIterator iterator1 = p2.getPathIterator ( null ) ;^276^^^^^261^291^PathIterator iterator1 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^PathIterator iterator2 = p1.getPathIterator ( null ) ;PathIterator iterator1 = p1.getPathIterator ( null ) ;^276^^^^^261^291^PathIterator iterator1 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^276^277^^^^261^291^PathIterator iterator1 = p1.getPathIterator ( null ) ; PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^PathIterator iterator2 = p2.getPathIterator ( null ) ;^277^^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^PathIterator iterator2 = p1.lineTo ( null ) ;^277^^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^PathIterator iterator2 = p1 .lineTo ( SQRT2 , SQRT2 )  ;^277^^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^PathIterator iterator2 = p2.lineTo ( null ) ;^277^^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^PathIterator iterator1 = p1.getPathIterator ( null ) ;PathIterator iterator2 = p1.getPathIterator ( null ) ;^277^^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^277^278^^^^262^292^PathIterator iterator2 = p1.getPathIterator ( null ) ; double[] d1 = new double[6];^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^double[] d1 = new double[seg1];^278^^^^^263^293^double[] d1 = new double[6];^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^double[] d2 = new double[6];double[] d1 = new double[6];^278^^^^^263^293^double[] d1 = new double[6];^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^double[] d2 = new double[5];^279^^^^^264^294^double[] d2 = new double[6];^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^double[] d1 = new double[6];double[] d2 = new double[6];^279^^^^^264^294^double[] d2 = new double[6];^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^boolean done = iterator1.isDone (  )  || iterator2.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^boolean done = iterator2.isDone (  )  && iterator2.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^boolean done = iterator1.isDone (  )  && iterator1.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^boolean done = iterator2.isDone (  )  && iterator1.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^boolean done = iterator1.currentSegment (  )  && iterator2.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^boolean done = iterator1 .currentSegment ( d1 )   && iterator2^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^boolean done = iterator1.currentSegment (  )  && iterator1.isDone (  ) ;^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  { boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ; }^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^280^^^^^265^295^boolean done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( iterator1.isDone (  )  == iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( iterator2.isDone (  )  != iterator1.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^if  ( iterator1.currentSegment (  )  != iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^if  ( iterator1 .currentSegment ( d1 )   != iterator2^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P15_Unwrap_Block]^return false;^282^283^284^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P16_Remove_Block]^^282^283^284^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getAngleExtent (  )  )  !=  ( a2.getAngleExtent (  )  )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getAngleStart (  )  )  !=  ( a2.getAngleStart (  )  )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( p1.getWindingRule (  )  )  !=  ( p2.getWindingRule (  )  )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^282^^^^^267^297^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^return true;^283^^^^^268^298^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( seg1 == seg2 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( seg2 != seg1 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^if  ( seg1 = seg2 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( l1 == null )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( a1 == null )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( e2 == null )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( p1 == null )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( e1 == null )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P15_Unwrap_Block]^return false;^287^288^289^^^272^302^if  ( seg1 != seg2 )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P16_Remove_Block]^^287^288^289^^^272^302^if  ( seg1 != seg2 )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( a1.getArcType (  )  )  !=  ( a2.getArcType (  )  )  )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( base == null )  {     return null; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^287^^^^^272^302^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^return true;^288^^^^^273^303^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( !Arrays.equals (  d2 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( !Arrays.equals ( d1 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( !Arrays.equals ( d2, d1 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( !Arrays.equals ( p1.xpoints, p2.xpoints )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P9_Replace_Statement]^if  ( !Arrays.equals ( p1.ypoints, p2.ypoints )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P15_Unwrap_Block]^return false;^290^291^292^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P16_Remove_Block]^^290^291^292^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  { return false; }^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( equals ( p1.ypoints, p2.ypoints )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( a1.getFrame (  ) .equals ( a2.getFrame (  )  )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( equals ( p1.xpoints, p2.xpoints )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP2 (  ) .equals ( l2.getP2 (  )  )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( e1.getFrame (  ) .equals ( e2.getFrame (  )  )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( l1.getP1 (  ) .equals ( l2.getP1 (  )  )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^return true;^291^^^^^276^306^return false;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^done = iterator1.isDone (  )  || iterator2.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^done = iterator2.isDone (  )  && iterator1.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^done = iterator1.currentSegment (  )  && iterator2.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^done =  iterator2.isDone (  )  && iterator2.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  { done = iterator1.isDone (  )  && iterator2.isDone (  ) ; }^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P1_Replace_Type]^long  seg1 = iterator1.currentSegment ( d1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^int seg1 = iterator2.currentSegment ( d1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^int seg1 = d1.currentSegment ( iterator1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^int seg2 = iterator2.currentSegment ( d2 ) ;int seg1 = iterator1.currentSegment ( d1 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P1_Replace_Type]^short  seg2 = iterator2.currentSegment ( d2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^int seg2 = iterator2.currentSegment ( d1 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^int seg2 = d2.currentSegment ( iterator2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^int seg2 = iterator2 .next (  )  ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^int seg2 = iterator1 .next (  )  ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^int seg1 = iterator1.currentSegment ( d1 ) ;int seg2 = iterator2.currentSegment ( d2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( iterator2.isDone (  )  != iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^if  ( iterator1.isDone (  )  != iterator1.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^int seg1 = iterator1 .next (  )  ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^int seg1 = iterator2 .next (  )  ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^int seg2 = iterator1.currentSegment ( d2 ) ;^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^286^^^^^271^301^int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P13_Insert_Block]^if  ( ! ( equals ( d1, d2 )  )  )  {     return false; }^290^^^^^275^305^[Delete]^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^iterator1.currentSegment (  ) ;^293^^^^^278^308^iterator1.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^293^^^^^278^308^iterator1.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^iterator2.next (  ) ;iterator1.next (  ) ;^293^^^^^278^308^iterator1.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P12_Insert_Condition]^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  { iterator1.next (  ) ; iterator2.next (  ) ; }^293^294^^^^278^308^iterator1.next (  ) ; iterator2.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^iterator2.currentSegment (  ) ;^294^^^^^279^309^iterator2.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^294^^^^^279^309^iterator2.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P11_Insert_Donor_Statement]^iterator1.next (  ) ;iterator2.next (  ) ;^294^^^^^279^309^iterator2.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^done = iterator1.isDone (  )  && iterator1.isDone (  ) ;^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^done = iterator1 .currentSegment ( d1 )   && iterator2^295^^^^^280^310^done = iterator1.isDone (  )  && iterator2.isDone (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( iterator1.isDone (  )  >= iterator2.isDone (  )  )  {^282^^^^^267^297^if  ( iterator1.isDone (  )  != iterator2.isDone (  )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( seg1 <= seg2 )  {^287^^^^^272^302^if  ( seg1 != seg2 )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P8_Replace_Mix]^if  ( Arrays.equals ( d1, d2 )  )  {^290^^^^^275^305^if  ( !Arrays.equals ( d1, d2 )  )  {^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P5_Replace_Variable]^int seg1 = iterator1.currentSegment ( d2 ) ;^285^^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P14_Delete_Statement]^^285^286^^^^270^300^int seg1 = iterator1.currentSegment ( d1 ) ; int seg2 = iterator2.currentSegment ( d2 ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P7_Replace_Invocation]^iterator2 .currentSegment ( d1 )  ;^294^^^^^279^309^iterator2.next (  ) ;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P3_Replace_Literal]^return false;^297^^^^^282^312^return true;^[CLASS] ShapeUtilities  [METHOD] equal [RETURN_TYPE] boolean   GeneralPath p1 GeneralPath p2 [VARIABLES] boolean  done  float  SQRT2  GeneralPath  p1  p2  double[]  d1  d2  PathIterator  iterator1  iterator2  int  seg1  seg2  
[P2_Replace_Operator]^if  ( shape != null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P8_Replace_Mix]^if  ( shape == true )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( l1 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( a2 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( a1 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( anchor == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( e2 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( p2 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( p1 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( e1 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( base == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P9_Replace_Statement]^if  ( l2 == null )  {^312^^^^^309^318^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Null 'shape' argument.");^312^313^314^^^309^318^if  ( shape == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P16_Remove_Block]^^312^313^314^^^309^318^if  ( shape == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P13_Insert_Block]^if  ( anchor == null )  {     throw new IllegalArgumentException ( "Null 'anchor' argument." ) ; }^312^^^^^309^318^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Null 'anchor' argument." )   ;^313^^^^^309^318^throw new IllegalArgumentException  (" ")  ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P13_Insert_Block]^if  ( shape == null )  {     throw new IllegalArgumentException ( "Null 'shape' argument." ) ; }^313^^^^^309^318^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P13_Insert_Block]^if  ( anchor == null )  {     throw new IllegalArgumentException ( "Null 'anchor' argument." ) ; }^313^^^^^309^318^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P8_Replace_Mix]^return ;^313^^^^^309^318^throw new IllegalArgumentException  (" ")  ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance (  transY ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( transY, transX ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform .getRotateInstance ( transX , transX , transY )  ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P11_Insert_Donor_Statement]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P11_Insert_Donor_Statement]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^315^316^^^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P14_Delete_Statement]^^315^316^317^318^^309^318^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ; return transform.createTransformedShape ( shape ) ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P5_Replace_Variable]^return shape.createTransformedShape ( transform ) ;^317^^^^^309^318^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P7_Replace_Invocation]^return transform.getTranslateInstance ( shape ) ;^317^^^^^309^318^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P7_Replace_Invocation]^return transform .getTranslateInstance ( transY , transY )  ;^317^^^^^309^318^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P14_Delete_Statement]^^317^318^^^^309^318^return transform.createTransformedShape ( shape ) ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape double transX double transY [VARIABLES] AffineTransform  transform  Shape  shape  boolean  float  SQRT2  double  transX  transY  
[P2_Replace_Operator]^if  ( shape != null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P8_Replace_Mix]^if  ( shape == this )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( l1 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( a2 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( a1 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( anchor == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( e2 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( p2 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( p1 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( e1 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( base == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( l2 == null )  {^336^^^^^332^347^if  ( shape == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Null 'shape' argument.");^336^337^338^^^332^347^if  ( shape == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P16_Remove_Block]^^336^337^338^^^332^347^if  ( shape == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P13_Insert_Block]^if  ( anchor == null )  {     throw new IllegalArgumentException ( "Null 'anchor' argument." ) ; }^336^^^^^332^347^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Null 'anchor' argument." )   ;^337^^^^^332^347^throw new IllegalArgumentException  (" ")  ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P13_Insert_Block]^if  ( shape == null )  {     throw new IllegalArgumentException ( "Null 'shape' argument." ) ; }^337^^^^^332^347^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P13_Insert_Block]^if  ( anchor == null )  {     throw new IllegalArgumentException ( "Null 'anchor' argument." ) ; }^337^^^^^332^347^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P2_Replace_Operator]^if  ( anchor != null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P8_Replace_Mix]^if  ( anchor == true )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( l1 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( a2 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( a1 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( e2 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( p2 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( shape == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( p1 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( e1 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( base == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P9_Replace_Statement]^if  ( l2 == null )  {^339^^^^^332^347^if  ( anchor == null )  {^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Null 'anchor' argument.");^339^340^341^^^332^347^if  ( anchor == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P16_Remove_Block]^^339^340^341^^^332^347^if  ( anchor == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P13_Insert_Block]^if  ( shape == null )  {     throw new IllegalArgumentException ( "Null 'shape' argument." ) ; }^339^^^^^332^347^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "Null 'shape' argument." )   ;^340^^^^^332^347^throw new IllegalArgumentException  (" ")  ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P13_Insert_Block]^if  ( shape == null )  {     throw new IllegalArgumentException ( "Null 'shape' argument." ) ; }^340^^^^^332^347^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P13_Insert_Block]^if  ( anchor == null )  {     throw new IllegalArgumentException ( "Null 'anchor' argument." ) ; }^340^^^^^332^347^[Delete]^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P8_Replace_Mix]^return ;^340^^^^^332^347^throw new IllegalArgumentException  (" ")  ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  )  ) ;^342^343^^^^332^347^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  ) , anchor ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^Point2D shapePoint = RectangleAnchor.coordinates ( anchor.getBounds2D (  ) , anchor ) ;^342^343^^^^332^347^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  ) , anchor ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P14_Delete_Statement]^^342^343^^^^332^347^Point2D anchorPoint = RectangleAnchor.coordinates ( shape.getBounds2D (  ) , anchor ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P2_Replace_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX  !=  anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P2_Replace_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY   instanceof   anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationY - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationX - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  )  - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationY - anchorPoint.getX (  ) , locationX - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - locationY.getX (  ) , anchorPoint - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform .getRotateInstance ( locationY , locationY , locationY )   ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.equals (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint .getY (  )  , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.equals (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint .getX (  )   ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P11_Insert_Donor_Statement]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P2_Replace_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX  &  anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P2_Replace_Operator]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY  ||  anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^AffineTransform transform = AffineTransform.getTranslateInstance ( anchorPoint - locationX.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^AffineTransform transform = AffineTransform .getRotateInstance ( locationX , locationX , locationY )   ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P14_Delete_Statement]^^344^345^346^347^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ; return transform.createTransformedShape ( shape ) ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P11_Insert_Donor_Statement]^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^344^345^^^^332^347^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^locationX - anchorPoint.equals (  ) , locationY - anchorPoint.getY (  )  ) ;^345^^^^^332^347^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P14_Delete_Statement]^^345^^^^^332^347^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P11_Insert_Donor_Statement]^AffineTransform transform = AffineTransform.getTranslateInstance ( locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^345^^^^^332^347^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.equals (  )  ) ;^345^^^^^332^347^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P8_Replace_Mix]^locationX - anchorPoint.getX (  ) , locationY - anchorPoint .getX (  )   ) ;^345^^^^^332^347^locationX - anchorPoint.getX (  ) , locationY - anchorPoint.getY (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P5_Replace_Variable]^return shape.createTransformedShape ( transform ) ;^346^^^^^332^347^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P7_Replace_Invocation]^return transform.getTranslateInstance ( shape ) ;^346^^^^^332^347^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P8_Replace_Mix]^return transform .getTranslateInstance ( locationY , locationX )  ;^346^^^^^332^347^return transform.createTransformedShape ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P14_Delete_Statement]^^346^347^^^^332^347^return transform.createTransformedShape ( shape ) ; }^[CLASS] ShapeUtilities  [METHOD] createTranslatedShape [RETURN_TYPE] Shape   Shape shape RectangleAnchor anchor double locationX double locationY [VARIABLES] Shape  shape  boolean  Point2D  anchorPoint  double  locationX  locationY  AffineTransform  transform  RectangleAnchor  anchor  float  SQRT2  
[P2_Replace_Operator]^if  ( base != null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^if  ( result == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P8_Replace_Mix]^if  ( base == true )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( l1 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( a2 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( a1 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( anchor == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( e2 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( p2 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( shape == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( p1 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( e1 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P9_Replace_Statement]^if  ( l2 == null )  {^362^^^^^360^368^if  ( base == null )  {^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P15_Unwrap_Block]^return null;^362^363^364^^^360^368^if  ( base == null )  { return null; }^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P16_Remove_Block]^^362^363^364^^^360^368^if  ( base == null )  { return null; }^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( a1 == null )  {     return a2 == null; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  (  ( p1.npoints )  !=  ( p2.npoints )  )  {     return false; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( p1 == null )  {     return p2 == null; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( p2 == null )  {     return false; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( l2 == null )  {     return false; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( a2 == null )  {     return false; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( e2 == null )  {     return false; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( l1 == null )  {     return l2 == null; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( seg1 != seg2 )  {     return false; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P13_Insert_Block]^if  ( e1 == null )  {     return e2 == null; }^362^^^^^360^368^[Delete]^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P8_Replace_Mix]^return this;^363^^^^^360^368^return null;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance (  x, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle,  y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( y, x, angle ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( x, angle, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P11_Insert_Donor_Statement]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, SQRT2, y ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, x ) ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P7_Replace_Invocation]^AffineTransform rotate = AffineTransform .getTranslateInstance ( angle , angle )  ;^365^^^^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P14_Delete_Statement]^^365^366^367^368^^360^368^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ; Shape result = rotate.createTransformedShape ( base ) ; return result; }^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^Shape result = base.createTransformedShape ( rotate ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P7_Replace_Invocation]^Shape result = rotate.getTranslateInstance ( base ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^Shape result = rotate.createTransformedShape ( result ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P8_Replace_Mix]^Shape result = rotate.getTranslateInstance ( result ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P14_Delete_Statement]^^366^367^368^^^360^368^Shape result = rotate.createTransformedShape ( base ) ; return result; }^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P11_Insert_Donor_Statement]^return transform.createTransformedShape ( shape ) ;Shape result = rotate.createTransformedShape ( base ) ;^366^^^^^360^368^Shape result = rotate.createTransformedShape ( base ) ;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P5_Replace_Variable]^return base;^367^^^^^360^368^return result;^[CLASS] ShapeUtilities  [METHOD] rotateShape [RETURN_TYPE] Shape   Shape base double angle float x float y [VARIABLES] AffineTransform  rotate  Shape  base  result  boolean  float  SQRT2  x  y  double  angle  
[P7_Replace_Invocation]^AffineTransform saved = g2.draw (  ) ;^382^^^^^379^388^AffineTransform saved = g2.getTransform (  ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P8_Replace_Mix]^AffineTransform saved = g2 .setTransform ( saved )  ;^382^^^^^379^388^AffineTransform saved = g2.getTransform (  ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance (  x, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle,  y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( y, x, angle ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, y, x ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P7_Replace_Invocation]^AffineTransform rotate = AffineTransform .getTranslateInstance ( angle , angle )  ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^AffineTransform transform = AffineTransform.getTranslateInstance ( transX, transY ) ;AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, SQRT2 ) ;^383^^^^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P14_Delete_Statement]^^383^384^385^386^^379^388^AffineTransform rotate = AffineTransform.getRotateInstance ( angle, x, y ) ; g2.transform ( rotate ) ; g2.draw ( shape ) ; g2.setTransform ( saved ) ; }^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^g2.transform ( saved ) ;^384^^^^^379^388^g2.transform ( rotate ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P7_Replace_Invocation]^g2 .getTransform (  )  ;^384^^^^^379^388^g2.transform ( rotate ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P14_Delete_Statement]^^384^385^386^^388^379^388^g2.transform ( rotate ) ; g2.draw ( shape ) ; g2.setTransform ( saved ) ; }^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^g2.setTransform ( saved ) ;g2.transform ( rotate ) ;^384^^^^^379^388^g2.transform ( rotate ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^g2.draw ( shape ) ;g2.transform ( rotate ) ;^384^^^^^379^388^g2.transform ( rotate ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P14_Delete_Statement]^^385^386^^^^379^388^g2.draw ( shape ) ; g2.setTransform ( saved ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^g2.setTransform ( saved ) ;g2.draw ( shape ) ;^385^^^^^379^388^g2.draw ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^g2.transform ( rotate ) ;g2.draw ( shape ) ;^385^^^^^379^388^g2.draw ( shape ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P5_Replace_Variable]^g2.setTransform ( rotate ) ;^386^^^^^379^388^g2.setTransform ( saved ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P14_Delete_Statement]^^386^387^388^^^379^388^g2.setTransform ( saved ) ;  }^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^g2.transform ( rotate ) ;g2.setTransform ( saved ) ;^386^^^^^379^388^g2.setTransform ( saved ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^g2.draw ( shape ) ;g2.setTransform ( saved ) ;^386^^^^^379^388^g2.setTransform ( saved ) ;^[CLASS] ShapeUtilities  [METHOD] drawRotatedShape [RETURN_TYPE] void   Graphics2D g2 Shape shape double angle float x float y [VARIABLES] AffineTransform  rotate  saved  Shape  shape  boolean  float  SQRT2  x  y  double  angle  Graphics2D  g2  
[P11_Insert_Donor_Statement]^GeneralPath result = new GeneralPath (  ) ;GeneralPath p0 = new GeneralPath (  ) ;^402^^^^^401^417^GeneralPath p0 = new GeneralPath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.moveTo ( -l  ==  t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.moveTo ( -l - t, -l  ==  t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( -x - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( -l - y, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( -l -  -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^403^404^^^^401^417^p0.moveTo ( -l - t, -l + t ) ; p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.moveTo ( -l - t, -l + t ) ;^403^^^^^401^417^p0.moveTo ( -l - t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( -l + t,  ^ l  ^  t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -y + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l +  -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( -x + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -l + t, -l - t ) ;^404^^^^^401^417^p0.lineTo ( -l + t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( 0.0f, -t - SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f, -y * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f, -t * y ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( x , y )  ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( 0.0f, -t * SQRT2 ) ;^405^^^^^401^417^p0.lineTo ( 0.0f, -t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l - t, -l  ||  t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l - t,  | l  |  t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l - y, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l -  -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t - l, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^406^407^^^^401^417^p0.lineTo ( l - t, -l - t ) ; p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( l - t, -l - t ) ;^406^^^^^401^417^p0.lineTo ( l - t, -l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l + t, -l  >  t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l + t, -l  <  t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l + y, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l +  -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t + l, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( SQRT2 , y )  ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( l + t, -l + t ) ;^407^^^^^401^417^p0.lineTo ( l + t, -l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo / ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t * y, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t *  0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( SQRT2 * t, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^408^409^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ; p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( t * SQRT2, 0.0f ) ;^408^^^^^401^417^p0.lineTo ( t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l + t, l   instanceof   t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l + y, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l + t - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l +  l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( l , SQRT2 )  ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^409^410^^^^401^417^p0.lineTo ( l + t, l - t ) ; p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( l + t, l - t ) ;^409^^^^^401^417^p0.lineTo ( l + t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l   instanceof   t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( l - t, l  !=  t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l - t + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l -  l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t - l, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( t , y )  ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( l - y, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( l - t, l + t ) ;^410^^^^^401^417^p0.lineTo ( l - t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( 0.0f, t / SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f, y * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f, t * y ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f, SQRT2 * t ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^411^412^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ; p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( 0.0f, t * SQRT2 ) ;^411^^^^^401^417^p0.lineTo ( 0.0f, t * SQRT2 ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( -l + t, l  &  t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l + t, y + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l + y, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l + t + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l +  l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l + l, t + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( SQRT2 , x )  ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .moveTo ( t , l )  ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -l + t, l + t ) ;^412^^^^^401^417^p0.lineTo ( -l + t, l + t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( -l   instanceof   t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo ( -l - t, l  ==  t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l - y, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l - t - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l -  l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( -l - t, y - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^413^414^^^^401^417^p0.lineTo ( -l - t, l - t ) ; p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -l - t, l - t ) ;^413^^^^^401^417^p0.lineTo ( -l - t, l - t ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P2_Replace_Operator]^p0.lineTo + ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -y * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -t * y, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -t *  0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^414^415^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ; p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -t * SQRT2, 0.0f ) ;^414^^^^^401^417^p0.lineTo ( -t * SQRT2, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^415^^^^^401^417^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.closePath (  ) ;p0.closePath (  ) ;^415^^^^^401^417^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiagonalCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^GeneralPath result = new GeneralPath (  ) ;GeneralPath p0 = new GeneralPath (  ) ;^428^^^^^427^443^GeneralPath p0 = new GeneralPath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( -l, y ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( - t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( -l ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .lineTo ( y , SQRT2 )  ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .lineTo ( l , t )  ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.moveTo ( -l, t ) ;^429^^^^^427^443^p0.moveTo ( -l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -t, x ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .moveTo ( l , t )  ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^430^431^^^^427^443^p0.lineTo ( -t, t ) ; p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -t, t ) ;^430^^^^^427^443^p0.lineTo ( -t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -t ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( t , x )  ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -t, l ) ;^431^^^^^427^443^p0.lineTo ( -t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t, y ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l, t ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( t, l ) ;^432^^^^^427^443^p0.lineTo ( t, l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^433^434^^^^427^443^p0.lineTo ( t, t ) ; p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( t, t ) ;^433^^^^^427^443^p0.lineTo ( t, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l, y ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t, l ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^434^435^^^^427^443^p0.lineTo ( l, t ) ; p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( l, t ) ;^434^^^^^427^443^p0.lineTo ( l, t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( l, -x ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( l, -y ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( l, -t ) ;^435^^^^^427^443^p0.lineTo ( l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( x , l )  ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( x, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( t, -t ) ;^436^^^^^427^443^p0.lineTo ( t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( t, -x ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .moveTo ( t , t )  ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( t, -l ) ;^437^^^^^427^443^p0.lineTo ( t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( -t, -y ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -t, -l ) ;^438^^^^^427^443^p0.lineTo ( -t, -l ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -t, -y ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -t, -t ) ;^439^^^^^427^443^p0.lineTo ( -t, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -l, -y ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( l , t )  ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( -l, -x ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -l, -t ) ;^440^^^^^427^443^p0.lineTo ( -l, -t ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^441^442^^^^427^443^p0.closePath (  ) ; return p0;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.closePath (  ) ;p0.closePath (  ) ;^441^^^^^427^443^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createRegularCross [RETURN_TYPE] Shape   float l float t [VARIABLES] float  SQRT2  l  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^GeneralPath result = new GeneralPath (  ) ;GeneralPath p0 = new GeneralPath (  ) ;^453^^^^^452^460^GeneralPath p0 = new GeneralPath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( 0.0f, -y ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.moveTo ( 0.0f, -s ) ;^454^^^^^452^460^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( x, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( s, 0.0f ) ;^455^^^^^452^460^p0.lineTo ( s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f, y ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( 0.0f ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( t , s )  ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( 0.0f, x ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^456^457^^^^452^460^p0.lineTo ( 0.0f, s ) ; p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( 0.0f, s ) ;^456^^^^^452^460^p0.lineTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^457^458^^^^452^460^p0.lineTo ( -s, 0.0f ) ; p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -s, 0.0f ) ;^457^^^^^452^460^p0.lineTo ( -s, 0.0f ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^458^459^^^^452^460^p0.closePath (  ) ; return p0;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.closePath (  ) ;p0.closePath (  ) ;^458^^^^^452^460^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDiamond [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^GeneralPath result = new GeneralPath (  ) ;GeneralPath p0 = new GeneralPath (  ) ;^470^^^^^469^476^GeneralPath p0 = new GeneralPath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( 0.0f, -y ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^471^472^^^^469^476^p0.moveTo ( 0.0f, -s ) ; p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.moveTo ( 0.0f, -s ) ;^471^^^^^469^476^p0.moveTo ( 0.0f, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( y, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P7_Replace_Invocation]^p0 .moveTo ( t , x )  ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .moveTo ( s , l )  ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^472^473^^^^469^476^p0.lineTo ( s, s ) ; p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( s, s ) ;^472^^^^^469^476^p0.lineTo ( s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -s, y ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( -s, x ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -s, s ) ;^473^^^^^469^476^p0.lineTo ( -s, s ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^474^475^^^^469^476^p0.closePath (  ) ; return p0;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.closePath (  ) ;p0.closePath (  ) ;^474^^^^^469^476^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createUpTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^GeneralPath result = new GeneralPath (  ) ;GeneralPath p0 = new GeneralPath (  ) ;^486^^^^^485^492^GeneralPath p0 = new GeneralPath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( 0.0f, y ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.moveTo ( 0.0f ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .lineTo ( l , l )  ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^487^488^^^^485^492^p0.moveTo ( 0.0f, s ) ; p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.moveTo ( 0.0f, s ) ;^487^^^^^485^492^p0.moveTo ( 0.0f, s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( x, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo (  -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0 .moveTo ( y , y )  ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, -s ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( s, -s ) ;^488^^^^^485^492^p0.lineTo ( s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( -s, -x ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P5_Replace_Variable]^p0.lineTo ( - -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P8_Replace_Mix]^p0.lineTo ( -s, -y ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^489^490^^^^485^492^p0.lineTo ( -s, -s ) ; p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, -s ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -l ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -l ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( 0.0f, s ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, 0.0f ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, s ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, -t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, s ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, -s ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, -t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -s, s ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, t * SQRT2 ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l, t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( l, -t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, l ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( 0.0f, -t * SQRT2 ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( t, l ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t, t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l, -t ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^p0.lineTo ( s, 0.0f ) ;p0.lineTo ( -s, -s ) ;^489^^^^^485^492^p0.lineTo ( -s, -s ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P14_Delete_Statement]^^490^^^^^485^492^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^result.closePath (  ) ;p0.closePath (  ) ;^490^^^^^485^492^p0.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createDownTriangle [RETURN_TYPE] Shape   float s [VARIABLES] float  SQRT2  l  s  t  x  y  GeneralPath  p0  boolean  
[P11_Insert_Donor_Statement]^GeneralPath p0 = new GeneralPath (  ) ;GeneralPath result = new GeneralPath (  ) ;^505^^^^^504^529^GeneralPath result = new GeneralPath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int x1 =  ( int )  line.getX1 (  ) ;^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dy =  ( float )  Math.cos ( theta )  * width;float x1 =  ( float )  line.getX1 (  ) ;^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y2 =  ( float )  line.getY2 (  ) ;float x1 =  ( float )  line.getX1 (  ) ;^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x2 =  ( float )  line.getX2 (  ) ;float x1 =  ( float )  line.getX1 (  ) ;^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dx =  ( float )  Math.sin ( theta )  * width;float x1 =  ( float )  line.getX1 (  ) ;^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y1 =  ( float )  line.getY1 (  ) ;float x1 =  ( float )  line.getX1 (  ) ;^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^506^^^^^504^529^float x1 =  ( float )  line.getX1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int x2 =  ( int )  line.getX2 (  ) ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^float x2 =  ( float )  line .getP2 (  )  ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dy =  ( float )  Math.cos ( theta )  * width;float x2 =  ( float )  line.getX2 (  ) ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y2 =  ( float )  line.getY2 (  ) ;float x2 =  ( float )  line.getX2 (  ) ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dx =  ( float )  Math.sin ( theta )  * width;float x2 =  ( float )  line.getX2 (  ) ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y1 =  ( float )  line.getY1 (  ) ;float x2 =  ( float )  line.getX2 (  ) ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x1 =  ( float )  line.getX1 (  ) ;float x2 =  ( float )  line.getX2 (  ) ;^507^^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^507^508^^^^504^529^float x2 =  ( float )  line.getX2 (  ) ; float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int y1 =  ( int )  line.getY1 (  ) ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dy =  ( float )  Math.cos ( theta )  * width;float y1 =  ( float )  line.getY1 (  ) ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y2 =  ( float )  line.getY2 (  ) ;float y1 =  ( float )  line.getY1 (  ) ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x2 =  ( float )  line.getX2 (  ) ;float y1 =  ( float )  line.getY1 (  ) ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dx =  ( float )  Math.sin ( theta )  * width;float y1 =  ( float )  line.getY1 (  ) ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x1 =  ( float )  line.getX1 (  ) ;float y1 =  ( float )  line.getY1 (  ) ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^float y1 =  ( float )  line .getP1 (  )  ;^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^508^^^^^504^529^float y1 =  ( float )  line.getY1 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int y2 =  ( int )  line.getY2 (  ) ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^float y2 =  ( float )  line .getP2 (  )  ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dy =  ( float )  Math.cos ( theta )  * width;float y2 =  ( float )  line.getY2 (  ) ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x2 =  ( float )  line.getX2 (  ) ;float y2 =  ( float )  line.getY2 (  ) ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dx =  ( float )  Math.sin ( theta )  * width;float y2 =  ( float )  line.getY2 (  ) ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y1 =  ( float )  line.getY1 (  ) ;float y2 =  ( float )  line.getY2 (  ) ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x1 =  ( float )  line.getX1 (  ) ;float y2 =  ( float )  line.getY2 (  ) ;^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^509^^^^^504^529^float y2 =  ( float )  line.getY2 (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2 - x1 )  <= 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2  >>  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2   instanceof   x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2  >=  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2  ||  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2  |  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2  <  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^if  (  ( x2  &&  x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^if  (  ( width - x1 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^if  (  ( x2 - y2 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^if  (  ( x1 - x2 )  != 0.0 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x2 - x1 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( y2 - y1 / x2 - x1 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( y2 - y1 )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( float sin(theta) * width )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( float cos(theta) * width )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x1 - dx )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( y1 + dy )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x1 + dx )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( y1 - dy )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x2 + dx )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( y2 - dy )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x2 - dx )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( y2 + dy )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x1 - width / 2.0F )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( width / 2.0F )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x1 + width / 2.0F )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x2 + width / 2.0F )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P6_Replace_Expression]^if  ( x2 - width / 2.0F )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^if  (  ( x2 - x1 )  != 1.0d )  {^510^^^^^504^529^if  (  ( x2 - x1 )  != 0.0 )  {^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1  <<  width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1 - width + 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - y2 / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - width / 2.0f, y2 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - width / 2.0f ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( width - x1 / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - y1 / 2.0f, width ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.moveTo ( y1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.moveTo ( x1 - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x1 + width * 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y2 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + x / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + width / 2.0f, x ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + width / 2.0f ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y1 + width / 2.0f, x1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( width + x1 / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + y1 / 2.0f, width ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.lineTo ( x1 + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2 + width + 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + y1 / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + width / 2.0f, x1 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + width / 2.0f ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y2 + width / 2.0f, x2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + y2 / 2.0f, width ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( width + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^524^525^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ; result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.lineTo ( x2 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2  <=  width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2 - width + 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y1 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - y / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - width / 2.0f, width ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - width / 2.0f ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - y2 / 2.0f, width ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x2 - x1 / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^525^526^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ; result.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( t * SQRT2, 0.0f ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -t * SQRT2, 0.0f ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;result.lineTo ( x2 - width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^526^^^^^504^529^result.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.closePath (  ) ;result.closePath (  ) ;^526^^^^^504^529^result.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2 - y1 )  -  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2  &&  y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2  !=  x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( x1 - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - x2 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - y1 )  /  ( x - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - y )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( x2 - y1 )  /  ( y2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - x1 )  /  ( x2 - y1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - x2 )  /  ( y1 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( x1 - y1 )  /  ( x2 - y2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^double theta = Math .sin ( theta )   ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^double theta = Math.atan (  ( x - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int dx =  ( int )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^float + dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^float dx =  ( float )  Math.sin ( width )  * theta;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^float dx =  ( float )  Math.atan ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^float dx =  ( float )  Math .min ( theta , theta )   * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^float dx =  ( float )  Math.atan ( theta )  * y;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dy =  ( float )  Math.cos ( theta )  * width;float dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y2 =  ( float )  line.getY2 (  ) ;float dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x2 =  ( float )  line.getX2 (  ) ;float dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y1 =  ( float )  line.getY1 (  ) ;float dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x1 =  ( float )  line.getX1 (  ) ;float dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P1_Replace_Type]^int dy =  ( int )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^float / dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^float dy =  ( float )  Math.cos ( theta )  * x2;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^float dy =  ( float )  Math.cos ( width )  * theta;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^float dy =  ( float )  Math.sin ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^float dy =  ( float )  Math.cos ( theta )  * y;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y2 =  ( float )  line.getY2 (  ) ;float dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x2 =  ( float )  line.getX2 (  ) ;float dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float dx =  ( float )  Math.sin ( theta )  * width;float dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float y1 =  ( float )  line.getY1 (  ) ;float dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^float x1 =  ( float )  line.getX1 (  ) ;float dy =  ( float )  Math.cos ( theta )  * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2  <<  y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2  <<  x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y1 - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - width )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - y1 )  /  ( y2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y1 - y2 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - y1 )  /  ( x1 - x2 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^double theta = Math.atan (  ( width - y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^512^513^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width; float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^float dy =  ( float )  Math .pow ( theta , theta )   * width;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^513^514^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width; result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1  ^  dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1 - dx, y1   instanceof   dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - x, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - dx, y2 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - dx, y1 + x2 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 -  y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - dx + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( dx - x1, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - dy, y1 + dx ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( y1 - dx, x1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - dx, dy + y1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result .lineTo ( s , y2 )  ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;result.moveTo ( x1 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x1 + dx, y1  ||  dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y2 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + y2, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dx, y2 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dx, y1 - y2 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 +  y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dx - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( dy + dx, y1 - x1 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + y1, dx - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dx, dy - y1 ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .moveTo ( t , y )  ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x1 + dx, x1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.lineTo ( x1 + dx, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2 + dx, y2  <  dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + y2, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + dx, y - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + dx, y2 - x ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 +  y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + dx - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( dy + dx, y2 - x2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( dx + x2, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y2 + dx, x2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + dx, dy - y2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x2 + dx, y2 - y2 ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - dx, y2 + dy ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.lineTo ( x2 + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2  ||  dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2 - dx, y2  <  dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - x1, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - dx, y2 + x1 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 -  y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - dx + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( dx - x2, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - dx, dy + y2 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .moveTo ( y , dy )  ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x2 - y1, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - width / 2.0f, y1 ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 - width / 2.0f, y2 ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, l + t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.moveTo ( x1 - dx, y1 + dy ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + width / 2.0f, y2 ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x2 + dx, y2 - dy ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, l + t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.moveTo ( -l - t, -l + t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l - t, l - t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l - t, -l - t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, l - t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + dx, y1 - dy ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( -l + t, -l - t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.lineTo ( l + t, -l + t ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^result.lineTo ( x1 + width / 2.0f, y1 ) ;result.lineTo ( x2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^518^^^^^504^529^result.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P11_Insert_Donor_Statement]^p0.closePath (  ) ;result.closePath (  ) ;^518^^^^^504^529^result.closePath (  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2  !=  y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2   instanceof   x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - width )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^float / dx =  ( float )  Math.sin ( theta )  * width;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^float dx =  ( float )  Math.sin ( theta )  * x2;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^float dx =  ( float )  Math.sin ( theta )  * y;^512^^^^^504^529^float dx =  ( float )  Math.sin ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^float dy =  ( float )  Math.cos ( theta )  * y2;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^float dy =  ( float )  Math .pow ( theta , theta )   * y2;^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2 - y1 )  *  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2  >>  y1 )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^double theta = Math.atan (  ( y2 - y1 )  /  ( x2  ^  x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^double theta = Math.atan (  ( y2 - y1 )  /  ( y - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^double theta = Math.atan (  ( y2 - x )  /  ( x2 - x1 )  ) ;^511^^^^^504^529^double theta = Math.atan (  ( y2 - y1 )  /  ( x2 - x1 )  ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^513^^^^^504^529^float dy =  ( float )  Math.cos ( theta )  * width;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1  <=  dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1 - dx, y1  &  dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x2 - dx, y1 + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - dx, y1 + x1 ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.moveTo ( x1 - dx, y + dy ) ;^514^^^^^504^529^result.moveTo ( x1 - dx, y1 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x1 + dx, y1   instanceof   dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + x2, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dx, y - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y1 + dx, x1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + dy, y1 - dx ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .moveTo ( y2 , width )  ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x1 + x1, y1 - dy ) ;^515^^^^^504^529^result.lineTo ( x1 + dx, y1 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2 + dx, y2  &  dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y + dx, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + y, y2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + dx, x2 - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + y2, dx - dy ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + dy, y2 - dx ) ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .moveTo ( y , SQRT2 )  ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result .moveTo ( dy , l )  ;^516^^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^516^517^^^^504^529^result.lineTo ( x2 + dx, y2 - dy ) ; result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2  <  dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2 - dx, y2  ==  dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( y2 - dx, y2 + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - dx, y + dy ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - dx, y2 + x ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( dy - dx, y2 + x2 ) ;^517^^^^^504^529^result.lineTo ( x2 - dx, y2 + dy ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1  ==  width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.moveTo ( x1 - width - 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x - width / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - y / 2.0f, y1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( x1 - width / 2.0f, width ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.moveTo ( y1 - width / 2.0f, x1 ) ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .lineTo ( y , l )  ;^522^^^^^504^529^result.moveTo ( x1 - width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x1 + width - 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x + width / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + y2 / 2.0f, y1 ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .moveTo ( l , x1 )  ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x1 + width / 2.0f, width ) ;^523^^^^^504^529^result.lineTo ( x1 + width / 2.0f, y1 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x1 + width / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 + width / 2.0f, y1 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( width + x2 / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result.lineTo ( x2 + x2 / 2.0f, y2 ) ;^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P14_Delete_Statement]^^524^^^^^504^529^result.lineTo ( x2 + width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P2_Replace_Operator]^result.lineTo ( x2   instanceof   width / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( x2 - width / 2.0f, x ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^result.lineTo ( width - x2 / 2.0f, y2 ) ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P7_Replace_Invocation]^result .moveTo ( dx , y1 )  ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P8_Replace_Mix]^result .moveTo ( dy , y )  ;^525^^^^^504^529^result.lineTo ( x2 - width / 2.0f, y2 ) ;^[CLASS] ShapeUtilities  [METHOD] createLineRegion [RETURN_TYPE] Shape   Line2D line float width [VARIABLES] boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  GeneralPath  result  Line2D  line  double  theta  
[P5_Replace_Variable]^x = Math.max ( area.getMinX (  ) , Math.min ( y, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^x = Math.max ( area.getMinX (  ) , Math.min ( x.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^x = Math.max ( area.getMinX (  ) , Math.min (  area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^x = Math.max ( x.getMinX (  ) , Math.min ( area, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^x = Math.max ( area .getMinY (  )  , Math.min ( x, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^x = Math.max ( area.getMinX (  ) , Math.max ( x, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^x = Math.max ( area.getMinX (  ) , Math.min ( x, area .getMaxY (  )   )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P8_Replace_Mix]^x =  Math.max ( null.getMinX (  ) , Math.min ( x, null.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P11_Insert_Donor_Statement]^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P14_Delete_Statement]^^547^^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P14_Delete_Statement]^^547^548^^^^544^551^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ; y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^y = Math.max ( area.getMinY (  ) , Math.min ( x, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^y = Math.max ( area.getMinY (  ) , Math.min ( y.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^y = Math.max ( area.getMinY (  ) , Math.min (  area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^y = Math.max ( y.getMinY (  ) , Math.min ( area, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^y = Math.max ( area.getMinY (  ) , Math.max ( y, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P8_Replace_Mix]^y =  Math.max ( null.getMinY (  ) , Math.min ( y, null.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P11_Insert_Donor_Statement]^x = Math.max ( area.getMinX (  ) , Math.min ( x, area.getMaxX (  )  )  ) ;y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^y = Math.max ( area .getMinX (  )  , Math.min ( y, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P8_Replace_Mix]^y = Math.max ( area.getMinY (  ) , Math.max ( x, area.getMaxY (  )  )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P14_Delete_Statement]^^548^549^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ; return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^y = Math.max ( area.getMinY (  ) , Math .sin ( x )   ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P7_Replace_Invocation]^y = Math.max ( area.getMinY (  ) , Math.min ( y, area .getMaxX (  )   )  ) ;^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P14_Delete_Statement]^^548^^^^^544^551^y = Math.max ( area.getMinY (  ) , Math.min ( y, area.getMaxY (  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P4_Replace_Constructor]^return new Point2D.Double (  y ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P4_Replace_Constructor]^return new Point2D.Double ( x ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P5_Replace_Variable]^return new Point2D.Double ( y, x ) ;^549^^^^^544^551^return new Point2D.Double ( x, y ) ;^[CLASS] ShapeUtilities  [METHOD] getPointInRectangle [RETURN_TYPE] Point2D   double x double y Rectangle2D area [VARIABLES] Rectangle2D  area  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  x  y  
[P1_Replace_Type]^int x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^double x0 = rect2.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P8_Replace_Mix]^double x0 = rect1 .getY (  )  ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^564^565^^^^562^575^double x0 = rect1.getX (  ) ; double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;double x0 = rect1.getX (  ) ;^564^^^^^562^575^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P1_Replace_Type]^int y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^double y0 = rect2.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^double y0 = rect1 .getX (  )  ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^565^566^^^^562^575^double y0 = rect1.getY (  ) ; double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;double y0 = rect1.getY (  ) ;^565^^^^^562^575^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P1_Replace_Type]^int x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P8_Replace_Mix]^double x = rect1.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double x = rect2.getX (  ) ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^double x = rect2 .getY (  )  ;^566^^^^^562^575^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^566^567^^^^562^575^double x = rect2.getX (  ) ; double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P1_Replace_Type]^int y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^double y = rect1.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double y = rect2.getY (  ) ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^double y = rect2 .getX (  )  ;^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^567^^^^^562^575^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P1_Replace_Type]^int w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^double w = rect1.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^double w = rect2 .getMinX (  )  ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double w = rect2.getWidth (  ) ;^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^568^^^^^562^575^double w = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P1_Replace_Type]^int h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^double h = rect1.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^double h = rect2 .getMinX (  )  ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P8_Replace_Mix]^double h = rect1 .getMinX (  )  ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;double h = rect2.getHeight (  ) ;^569^^^^^562^575^double h = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  ||  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x > x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  &&  ( y > y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x  &  w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0  ^  rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y  &  h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P2_Replace_Operator]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0  >  rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( y >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= y0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y0 >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y >= y ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + y0 )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect2.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + y0 )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( y >= x0 )  &&  ( x >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x0 >= x )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= y )  &&  ( x0 >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= y0 )  &&  ( y >= x0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= w )  &&  ( y >= y0 ) &&  (  ( x + x0 )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + h.getWidth (  )  )  ) &&  (  ( y + rect1 )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^return  (  ( x >= x0 )  &&  ( y >= h ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + y0 )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1 .getMinX (  )   )  )  ) ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P8_Replace_Mix]^return  (  ( x ;^571^572^573^^^562^575^return  (  ( x >= x0 )  &&  ( y >= y0 ) &&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^&&  (  ( x + w )  <=  ( x0 + rect2.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^572^573^^^^562^575^&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^&&  (  ( x + w )  <=  ( x0 + rect1 .getMinX (  )   )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^572^573^^^^562^575^&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^572^573^^^^562^575^&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^572^573^^^^562^575^&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P5_Replace_Variable]^&&  (  ( y + h )  <=  ( y0 + rect2.getHeight (  )  )  )  ) ;^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P7_Replace_Invocation]^&&  (  ( y + h )  <=  ( y0 + rect1 .getMinX (  )   )  )  ) ;^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P8_Replace_Mix]^&&  (  ( y + h )  <=  ( y0 + rect2 .getMinX (  )   )  )  ) ;^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P14_Delete_Statement]^^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&&  (  ( x + w )  <=  ( x0 + rect1.getWidth (  )  )  ) &&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^573^^^^^562^575^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;^[CLASS] ShapeUtilities  [METHOD] contains [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  h  w  x  x0  y  y0  
[P1_Replace_Type]^int x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^double x0 = rect2.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P7_Replace_Invocation]^double x0 = rect1 .getY (  )  ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;double x0 = rect1.getX (  ) ;^589^^^^^587^598^double x0 = rect1.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P1_Replace_Type]^float y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^double y0 = rect2.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;double y0 = rect1.getY (  ) ;^590^^^^^587^598^double y0 = rect1.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P1_Replace_Type]^int x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^double x = rect1.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double x = rect2.getX (  ) ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P7_Replace_Invocation]^double x = rect2 .getY (  )  ;^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^592^^^^^587^598^double x = rect2.getX (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P1_Replace_Type]^int width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^double width = rect1.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double width = rect2.getWidth (  ) ;^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^593^^^^^587^598^double width = rect2.getWidth (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P1_Replace_Type]^float y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^double y = rect1.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double y = rect2.getY (  ) ;^594^^^^^587^598^double y = rect2.getY (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^594^595^^^^587^598^double y = rect2.getY (  ) ; double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P1_Replace_Type]^float height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P8_Replace_Mix]^double height = rect1.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double width = rect2.getWidth (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x = rect2.getX (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y = rect2.getY (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double w = rect2.getWidth (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&& y <= y0 + rect1.getHeight (  )  ) ;double height = rect2.getHeight (  ) ;^595^^^^^587^598^double height = rect2.getHeight (  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width >= x0 || y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width > x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x  <=  width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width >= x0 && y + height > y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width >= x0 && y  ^  height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width >= x0 && y + height >= y0 && x < x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width >= x0 && y + height >= y0 && x <= x0  <=  rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P2_Replace_Operator]^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0  >=  rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( y0 + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + y0 >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= y0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= x0 && y + y0 >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= x0 && y + height >= y && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect2.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x0 + width >= x && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + y >= x0 && width + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= height && y + x0 >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= x0 && y0 + height >= y && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= x0 && height + y >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= y0 && y + height >= x0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^return  ( x + width >= x0 && y + height >= rect1 && x <= x0 + y0.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P8_Replace_Mix]^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1 .getMinX (  )  && y <= y0 + rect1.getHeight (  )  ) ;^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^596^597^^^^587^598^return  ( x + width >= x0 && y + height >= y0 && x <= x0 + rect1.getWidth (  ) && y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P5_Replace_Variable]^&& y <= y0 + rect2.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P8_Replace_Mix]^&& y <= y0 + rect2 .getMinX (  )   ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P14_Delete_Statement]^^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^&&  (  ( y + h )  <=  ( y0 + rect1.getHeight (  )  )  )  ) ;&& y <= y0 + rect1.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double y0 = rect1.getY (  ) ;&& y <= y0 + rect1.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double h = rect2.getHeight (  ) ;&& y <= y0 + rect1.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double height = rect2.getHeight (  ) ;&& y <= y0 + rect1.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
[P11_Insert_Donor_Statement]^double x0 = rect1.getX (  ) ;&& y <= y0 + rect1.getHeight (  )  ) ;^597^^^^^587^598^&& y <= y0 + rect1.getHeight (  )  ) ;^[CLASS] ShapeUtilities  [METHOD] intersects [RETURN_TYPE] boolean   Rectangle2D rect1 Rectangle2D rect2 [VARIABLES] Rectangle2D  rect1  rect2  boolean  float  SQRT2  dx  dy  l  s  t  width  x  x1  x2  y  y1  y2  double  height  width  x  x0  y  y0  
