[P2_Replace_Operator]^if  ( base.length (  )  <= start.length (  )  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^if  ( base.length() + 4  < start.length() + 4  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P5_Replace_Variable]^if  ( start.length (  )  < base.length (  )  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P9_Replace_Statement]^if  ( base.length (  )  < end.length (  )  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P15_Unwrap_Block]^return false;^67^68^69^^^66^71^if  ( base.length (  )  < start.length (  )  )  { return false; }^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P16_Remove_Block]^^67^68^69^^^66^71^if  ( base.length (  )  < start.length (  )  )  { return false; }^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P13_Insert_Block]^if  (  ( base.length (  )  )  <  ( end.length (  )  )  )  {     return false; }^67^^^^^66^71^[Delete]^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return true;^68^^^^^66^71^return false;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^if  ( base.length() + 9  < start.length() + 9  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P5_Replace_Variable]^if  ( start.length (  )  < start.length (  )  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^if  ( base.length() - 5  < start.length() - 5  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P5_Replace_Variable]^if  ( base.length (  )  < base.length (  )  )  {^67^^^^^66^71^if  ( base.length (  )  < start.length (  )  )  {^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( false, 0, start, 0, start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( true, 5, start, 5, start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( true, -3, start, -3, start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( true, 0, start, 0, start.length() - 7  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P5_Replace_Variable]^return base.regionMatches ( true, 0,  0, start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P5_Replace_Variable]^return start.regionMatches ( true, 0, base, 0, start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P8_Replace_Mix]^return base .length (  )  ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P12_Insert_Condition]^if  ( base.length (  )  < start.length (  )  )  { return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ; }^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( true, , start, , start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( true, 0, start, 0, start.length() - 0  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P14_Delete_Statement]^^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P3_Replace_Literal]^return base.regionMatches ( true, 0, start, 0, start.length() + 2  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P5_Replace_Variable]^return base.regionMatches ( true, 0, base, 0, start.length (  )  ) ;^70^^^^^66^71^return base.regionMatches ( true, 0, start, 0, start.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] startsWithIgnoreCase [RETURN_TYPE] boolean   String base String start [VARIABLES] boolean  String  base  start  
[P2_Replace_Operator]^if  ( base.length (  )  <= end.length (  )  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^if  ( base.length() - 3  < end.length() - 3  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^if  ( end.length (  )  < base.length (  )  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P9_Replace_Statement]^if  ( base.length (  )  < start.length (  )  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P15_Unwrap_Block]^return false;^83^84^85^^^82^88^if  ( base.length (  )  < end.length (  )  )  { return false; }^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P16_Remove_Block]^^83^84^85^^^82^88^if  ( base.length (  )  < end.length (  )  )  { return false; }^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P13_Insert_Block]^if  (  ( base.length (  )  )  <  ( start.length (  )  )  )  {     return false; }^83^^^^^82^88^[Delete]^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return true;^84^^^^^82^88^return false;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^if  ( base.length() - 5  < end.length() - 5  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^if  ( end.length (  )  < end.length (  )  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^if  ( base.length() - 1  < end.length() - 1  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^if  ( base.length (  )  < base.length (  )  )  {^83^^^^^82^88^if  ( base.length (  )  < end.length (  )  )  {^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P2_Replace_Operator]^return base.regionMatches ( true, base.length (  )   <=  end.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return base.regionMatches ( false, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return base.regionMatches ( true, base.length() - 0  - end.length() - 0 , end, 0, end.length() - 0  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^return base.regionMatches ( true.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^return base.regionMatches ( true, base.length (  )  - end.length (  ) ,  0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^return end.regionMatches ( true, base.length (  )  - base.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P7_Replace_Invocation]^return base .length (  )  , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P8_Replace_Mix]^return base.regionMatches ( true, base.length (  )  + 4 - end.length (  )  + 4, end, 0, end.length (  )  + 4 ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P2_Replace_Operator]^return base.regionMatches ( true, base.length (  )   >=  end.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, null, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return base.regionMatches ( true, base.length() + 3  - end.length() + 3 , end, 0, end.length() + 3  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P14_Delete_Statement]^^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return base.regionMatches ( true, base.length() - 9  - end.length() - 9 , end, 0, end.length() - 9  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P8_Replace_Mix]^return end.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return base.regionMatches ( true, base.length() + 0  - end.length() + 0 , end, 0, end.length() + 0  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P5_Replace_Variable]^return base.regionMatches ( true, base.length (  )  - base.length (  ) , end, 0, end.length (  )  ) ;^86^87^^^^82^88^return base.regionMatches ( true, base.length (  )  - end.length (  ) , end, 0, end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^end.length() - 5  ) ;^87^^^^^82^88^end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P14_Delete_Statement]^^87^^^^^82^88^end.length (  )  ) ;^[CLASS] StringUtilities  [METHOD] endsWithIgnoreCase [RETURN_TYPE] boolean   String base String end [VARIABLES] boolean  String  base  end  
[P3_Replace_Literal]^return System.getProperty ( "line.separatorli", "\n" ) ;^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P3_Replace_Literal]^return System.getProperty ( "line.separator", "\" ) ;^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P3_Replace_Literal]^return System.getProperty ( "line.separator", "n" ) ;^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P14_Delete_Statement]^^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P3_Replace_Literal]^return System.getProperty ( "ineine.separator", "\n" ) ;^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P3_Replace_Literal]^return System.getProperty ( "line.separator", "\n\" ) ;^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P3_Replace_Literal]^return "n";^101^^^^^96^103^return "\n";^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
[P3_Replace_Literal]^return System.getProperty ( "line.separat", "\n" ) ;^98^^^^^96^103^return System.getProperty ( "line.separator", "\n" ) ;^[CLASS] StringUtilities  [METHOD] getLineSeparator [RETURN_TYPE] String   [VARIABLES] boolean  Exception  e  
