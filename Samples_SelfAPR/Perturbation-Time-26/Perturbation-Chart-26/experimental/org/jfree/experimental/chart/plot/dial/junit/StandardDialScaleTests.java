[P14_Delete_Statement]^^80^^^^^79^81^super ( name ) ;^[CLASS] StandardDialScaleTests  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] boolean  String  name  
[P4_Replace_Constructor]^StandardDialScale s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^87^^^^^72^102^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = new StandardDialScale (  ) ;StandardDialScale s1 = new StandardDialScale (  ) ;^87^^^^^72^102^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = null;StandardDialScale s1 = new StandardDialScale (  ) ;^87^^^^^72^102^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^StandardDialScale s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^88^^^^^73^103^StandardDialScale s2 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s1 = new StandardDialScale (  ) ;StandardDialScale s2 = new StandardDialScale (  ) ;^88^^^^^73^103^StandardDialScale s2 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = null;StandardDialScale s2 = new StandardDialScale (  ) ;^88^^^^^73^103^StandardDialScale s2 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^89^^^^^74^104^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 2.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 1NaN, 10NaN, NaN, 27NaN ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 38.57142857142857 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1 = s1 =  new StandardDialScale (  )  ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s1 = new StandarfialScale ( 3.0d, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 70.0, 100.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 800.0, 0.0, 270.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 1080.0 ) ;^92^^^^^77^107^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^93^94^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ; s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^93^^^^^78^108^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 50.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 45.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2 = s2 =  new StandardDialScale (  )  ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 = new StandarfialScale ( 4.0d, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 20.0, 100.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 700.0, 0.0, 270.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 30.0 ) ;^94^^^^^79^109^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^95^^^^^80^110^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 40.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 1600.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 1890.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1 = s1 =  new StandardDialScale (  )  ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s1 = new StandarfialScale ( 2.0d, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 30.0, 200.0, 0.0, 270.0 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 38.57142857142857 ) ;^98^^^^^83^113^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^99^^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^99^100^^^^84^114^assertFalse ( s1.equals ( s2 )  ) ; s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 20.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 400.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 1NaN, 20NaN, NaN, 27NaN ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 90.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2 = s2 =  new StandardDialScale (  )  ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 = new StandarfialScale ( 10.0D, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 1.1111111111111112, 200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 1200.0, 0.0, 270.0 ) ;^100^^^^^85^115^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^101^^^^^86^116^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 90.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 600.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1 = s1 =  new StandardDialScale (  )  ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s1 = new StandarfialScale ( 3.0d, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 60.0, 200.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 1600.0, 20.0, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, 2.857142857142857, 270.0 ) ;^104^^^^^89^119^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^105^^^^^90^120^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( Infinity, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 100.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 40.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 540.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2 = s2 =  new StandardDialScale (  )  ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 = new StandarfialScale ( 10.0D, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 2.5, 270.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 0.0 ) ;^106^^^^^91^121^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^107^^^^^92^122^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 30.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 600.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, Infinity, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 495.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1 = s1 =  new StandardDialScale (  )  ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s1 = new StandarfialScale ( 0.0d, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 20.0, 200.0, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 66.66666666666667, 20.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1 = new StandardDialScale ( 10.0, 200.0, 140.0, 99.0 ) ;^110^^^^^95^125^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^111^112^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ; s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertFalse ( s1 .getClass (  )   ) ;^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^111^^^^^96^126^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 2.5, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 1400.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 2.857142857142857, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 19.8 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2 = s2 =  new StandardDialScale (  )  ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 = new StandarfialScale ( 10.0D, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 1.25, 200.0, 20.0, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2 = new StandardDialScale ( 10.0, 200.0, 2.5, 99.0 ) ;^112^^^^^97^127^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^113^^^^^98^128^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setTickRadius ( 0.165 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^116^117^^^^101^131^s1.setTickRadius ( 0.99 ) ; assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickLabelOffset ( 0.11 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickLabelOffset ( 0.11 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s1.setTickRadius ( 0.99 ) ;^116^^^^^101^131^s1.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^117^^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^117^118^^^^102^132^assertFalse ( s1.equals ( s2 )  ) ; s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setTickRadius ( 0.495 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickLabelOffset ( 0.11 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickLabelOffset ( 0.11 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s2.setTickRadius ( 0.99 ) ;^118^^^^^103^133^s2.setTickRadius ( 0.99 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^119^^^^^104^134^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setMajorTickIncrement ( 44.4 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^122^123^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ; assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setExtent ( 123.4 ) ;s1.setMajorTickIncrement ( 11.1 ) ;^122^^^^^107^137^s1.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertFalse ( s1 .getClass (  )   ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^123^124^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ; s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^123^^^^^108^138^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^124^125^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s2.setMajorTickIncrement ( 11.1 ) ;^124^^^^^109^139^s2.setMajorTickIncrement ( 11.1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^125^^^^^110^140^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setMajorTickLength ( 0.72 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^s1 .setMinorTickLength ( 4 )  ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^128^129^^^^113^143^s1.setMajorTickLength ( 0.09 ) ; assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s1.setMajorTickLength ( 0.09 ) ;^128^^^^^113^143^s1.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^129^130^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ; s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertFalse ( s1 .getClass (  )   ) ;^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^129^^^^^114^144^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^130^131^^^^115^145^s2.setMajorTickLength ( 0.09 ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s2.setMajorTickLength ( 0.09 ) ;^130^^^^^115^145^s2.setMajorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^131^^^^^116^146^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1.setMajorTickPaint ( s1.setMajorTickPaint (  new GradientPaint ( 1.0F, 2.0F, red, 3.0F, 4.0F, white )   ) ;^134^135^^^^119^149^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.4 )  ) ;^134^135^^^^119^149^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^134^135^^^^119^149^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^134^135^^^^119^149^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^136^^^^^121^151^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2.setMajorTickPaint ( s2.setMajorTickPaint (  new GradientPaint ( 1.0F, 2.0F, red, 3.0F, 4.0F, white )   ) ;^137^138^^^^122^152^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.2 )  ) ;^137^138^^^^122^152^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.yellow )  ) ;^137^138^^^^122^152^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^137^138^^^^122^152^s2.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.yellow )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertTrue ( s1 .getClass (  )   ) ;^139^^^^^124^154^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1.setMajorTickStroke ( s1.setMajorTickStroke (  new BasicStroke ( 2.0F )   ) ;^142^^^^^127^157^s1.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^142^^^^^127^157^s1.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^142^^^^^127^157^s1.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^143^144^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ; s2.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^143^^^^^128^158^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2.setMajorTickStroke ( s2.setMajorTickStroke (  new BasicStroke ( 2.0F )   ) ;^144^^^^^129^159^s2.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^144^^^^^129^159^s2.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s2.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^144^^^^^129^159^s2.setMajorTickStroke ( new BasicStroke ( 1.1f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertTrue ( s1 .getClass (  )   ) ;^145^^^^^130^160^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setMinorTickCount ( 10 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^148^149^^^^133^163^s1.setMinorTickCount ( 7 ) ; assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s1.setMinorTickCount ( 7 ) ;^148^^^^^133^163^s1.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertFalse ( s1 .getClass (  )   ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^149^^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^149^150^^^^134^164^assertFalse ( s1.equals ( s2 )  ) ; s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setMinorTickCount ( 11 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^150^151^^^^135^165^s2.setMinorTickCount ( 7 ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s2.setMinorTickCount ( 7 ) ;^150^^^^^135^165^s2.setMinorTickCount ( 7 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^151^^^^^136^166^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setMinorTickLength ( 0.0225 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickLength ( 0.09 ) ;s1.setMinorTickLength ( 0.09 ) ;^154^^^^^139^169^s1.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^155^^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^155^156^^^^140^170^assertFalse ( s1.equals ( s2 )  ) ; s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setMinorTickLength ( 0.01 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^156^157^^^^141^171^s2.setMinorTickLength ( 0.09 ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickIncrement ( 11.1 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickLength ( 0.09 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMinorTickCount ( 7 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMinorTickCount ( 7 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setMajorTickLength ( 0.09 ) ;s2.setMinorTickLength ( 0.09 ) ;^156^^^^^141^171^s2.setMinorTickLength ( 0.09 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^157^^^^^142^172^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setTickLabelOffset ( 0.03666666666666667 ) ;^160^^^^^145^175^s1.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^160^^^^^145^175^s1.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickLabelOffset ( 0.11 ) ;s1.setTickLabelOffset ( 0.11 ) ;^160^^^^^145^175^s1.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s1.setTickLabelOffset ( 0.11 ) ;^160^^^^^145^175^s1.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s1.setTickLabelOffset ( 0.11 ) ;^160^^^^^145^175^s1.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^161^^^^^146^176^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setTickLabelOffset ( 0.44 ) ;^162^^^^^147^177^s2.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^162^^^^^147^177^s2.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2.setTickRadius ( 0.99 ) ;s2.setTickLabelOffset ( 0.11 ) ;^162^^^^^147^177^s2.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickLabelOffset ( 0.11 ) ;s2.setTickLabelOffset ( 0.11 ) ;^162^^^^^147^177^s2.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setTickRadius ( 0.99 ) ;s2.setTickLabelOffset ( 0.11 ) ;^162^^^^^147^177^s2.setTickLabelOffset ( 0.11 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^163^^^^^148^178^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setTickLabelFont ( new Font ( "iialog", Font.PLAIN, 15 )  ) ;^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 6 )  ) ;^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setTickLabelFont ( new Font ( "Diaialog", Font.PLAIN, 15 )  ) ;^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 16 )  ) ;^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s1.setTickLabelFont ( new Font ( "Dialog", Font. 15 )  ) ;^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^166^^^^^151^181^s1.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^167^^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^167^168^^^^152^182^assertFalse ( s1.equals ( s2 )  ) ; s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setTickLabelFont ( new Font ( "loialog", Font.PLAIN, 15 )  ) ;^168^^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 23 )  ) ;^168^^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s2.setTickLabelFont ( new Font ( "ialog", Font.PLAIN, 15 )  ) ;^168^^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s2.setTickLabelFont ( new Font ( "Dialog", Font. 15 )  ) ;^168^^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 .setTickLabelPaint ( null )  ;^168^^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^168^169^^^^153^183^s2.setTickLabelFont ( new Font ( "Dialog", Font.PLAIN, 15 )  ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P8_Replace_Mix]^assertTrue ( s1 .getClass (  )   ) ;^169^^^^^154^184^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1.setTickLabelPaint ( s1.setTickLabelPaint (  new GradientPaint ( 1.0F, 2.0F, red, 3.0F, 4.0F, white )   ) ;^172^173^^^^157^187^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^172^173^^^^157^187^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^172^173^^^^157^187^s1.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertFalse ( s2.equals ( s1 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertFalse ( s1 .getClass (  )   ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertFalse ( s1.equals ( s2 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( s1.equals ( s2 )  ) ;^174^^^^^159^189^assertFalse ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s2.setTickLabelPaint ( s2.setTickLabelPaint (  new GradientPaint ( 1.0F, 2.0F, red, 3.0F, 4.0F, white )   ) ;^175^176^^^^160^190^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.green )  ) ;^175^176^^^^160^190^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^175^176^^^^160^190^s2.setTickLabelPaint ( new GradientPaint ( 1.0f, 2.0f, Color.white, 3.0f, 4.0f, Color.green )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^177^^^^^162^192^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^StandardDialScale s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^185^^^^^184^191^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = new StandardDialScale (  ) ;StandardDialScale s1 = new StandardDialScale (  ) ;^185^^^^^184^191^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = null;StandardDialScale s1 = new StandardDialScale (  ) ;^185^^^^^184^191^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^StandardDialScale s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^186^^^^^184^191^StandardDialScale s2 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s1 = new StandardDialScale (  ) ;StandardDialScale s2 = new StandardDialScale (  ) ;^186^^^^^184^191^StandardDialScale s2 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = null;StandardDialScale s2 = new StandardDialScale (  ) ;^186^^^^^184^191^StandardDialScale s2 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^187^^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^187^188^^^^184^191^assertTrue ( s1.equals ( s2 )  ) ; int h1 = s1.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P1_Replace_Type]^long  h1 = s1.hashCode (  ) ;^188^^^^^184^191^int h1 = s1.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P5_Replace_Variable]^int h1 = s2.hashCode (  ) ;^188^^^^^184^191^int h1 = s1.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^int h1 = s1.setExtent (  ) ;^188^^^^^184^191^int h1 = s1.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^int h2 = s2.hashCode (  ) ;int h1 = s1.hashCode (  ) ;^188^^^^^184^191^int h1 = s1.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^int h1 = s1 .clone (  )  ;^188^^^^^184^191^int h1 = s1.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^188^189^^^^184^191^int h1 = s1.hashCode (  ) ; int h2 = s2.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P1_Replace_Type]^long  h2 = s2.hashCode (  ) ;^189^^^^^184^191^int h2 = s2.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P5_Replace_Variable]^int h2 = s1.hashCode (  ) ;^189^^^^^184^191^int h2 = s2.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^int h2 = s2.setExtent (  ) ;^189^^^^^184^191^int h2 = s2.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^int h2 = s2 .clone (  )  ;^189^^^^^184^191^int h2 = s2.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^int h1 = s1.hashCode (  ) ;int h2 = s2.hashCode (  ) ;^189^^^^^184^191^int h2 = s2.hashCode (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^189^190^^^^184^191^int h2 = s2.hashCode (  ) ; assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals (  h2 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals ( h1 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals ( h2, h1 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertEquals ( h1, h2 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertEquals ( h1, h2 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertEquals ( h1, h2 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertEquals ( h1, h2 ) ;^190^^^^^184^191^assertEquals ( h1, h2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  int  h1  h2  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^StandardDialScale s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^198^^^^^196^226^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = new StandardDialScale (  ) ;StandardDialScale s1 = new StandardDialScale (  ) ;^198^^^^^196^226^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = null;StandardDialScale s1 = new StandardDialScale (  ) ;^198^^^^^196^226^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = new StandardDialScale (  ) ;StandardDialScale s2 = null;^199^^^^^196^226^StandardDialScale s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^StandardDialScale s1 = new StandardDialScale (  ) ;StandardDialScale s2 = null;^199^^^^^196^226^StandardDialScale s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^s2 =  ( StandardDialScale )  s2.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^s2 =  ( StandardDialScale )  s1.setExtent (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^s2 =   ( StandardDialScale )  null.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^201^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^204^^^^^196^226^e.printStackTrace (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( s1 == s2 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2 != s1 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( s1 != s2 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1 != s2 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1 != s2 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertTrue ( s1 != s2 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1 != s2 ) ;^206^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( s1.getClass (  )  <= s2.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2.getClass (  )  == s1.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( s1.getClass (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( s1.setExtent (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^207^208^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2.getClass (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^assertTrue ( s2.setExtent (  )  == s2.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s1.getClass (  )  == s1.getClass (  )  ) ;^207^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^208^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^s1 = s1 =  new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^s1 =  new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s1 = new StandardDialScale (  ) ;^211^^^^^196^226^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P3_Replace_Literal]^s1.setExtent ( 20.566666666666666 ) ;^212^^^^^196^226^s1.setExtent ( 123.4 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^212^^^^^196^226^s1.setExtent ( 123.4 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setExtent ( 123.4 ) ;^212^^^^^196^226^s1.setExtent ( 123.4 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^s1.setMajorTickPaint ( s1.setMajorTickPaint (  new GradientPaint ( 1.0F, 2.0F, red, 3.0F, 4.0F, yellow )   ) ;^213^214^^^^196^226^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.white )  ) ;^213^214^^^^196^226^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^213^214^^^^196^226^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^s1.setMajorTickStroke ( s1.setMajorTickStroke (  new BasicStroke ( 1.1F )   ) ;^215^^^^^196^226^s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^215^216^^^^196^226^s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ; s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^215^^^^^196^226^s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^s2 = false;^216^^^^^196^226^s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^s2 =  ( StandardDialScale )  s1.setExtent (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^s2 =   ( StandardDialScale )  null.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  s1.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^s2 =  ( StandardDialScale )  s2.clone (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^s2 =  ( StandardDialScale )  s2.setExtent (  ) ;^218^^^^^196^226^s2 =  ( StandardDialScale )  s1.clone (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^221^^^^^196^226^e.printStackTrace (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( s1 == s2 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2 != s1 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( s1 != s2 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1 != s2 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1 != s2 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertTrue ( s1 != s2 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1 != s2 ) ;^223^^^^^196^226^assertTrue ( s1 != s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( s1.getClass (  )  <= s2.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2.getClass (  )  == s1.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( s1.getClass (  )  == s2.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( s1.setExtent (  )  == s2.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2.getClass (  )  == s2.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P8_Replace_Mix]^assertTrue ( s2.setExtent (  )  == s2.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s1.getClass (  )  == s1.getClass (  )  ) ;^224^^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^224^225^^^^196^226^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ; assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( s2.equals ( s1 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( s1.equals ( s2 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( s1, s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( s1.equals ( s2 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( s1.getClass (  )  == s2.getClass (  )  ) ;assertTrue ( s1.equals ( s2 )  ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( s1 .getClass (  )   ) ;^225^^^^^196^226^assertTrue ( s1.equals ( s2 )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  StandardDialScale  s1  s2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^StandardDialScale s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^234^^^^^219^249^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = new StandardDialScale (  ) ;StandardDialScale s1 = new StandardDialScale (  ) ;^234^^^^^219^249^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = null;StandardDialScale s1 = new StandardDialScale (  ) ;^234^^^^^219^249^StandardDialScale s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s2 = new StandardDialScale (  ) ;StandardDialScale s2 = null;^235^^^^^220^250^StandardDialScale s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^StandardDialScale s1 = new StandardDialScale (  ) ;StandardDialScale s2 = null;^235^^^^^220^250^StandardDialScale s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^s2 =  ( StandardDialScale )  in .close (  )  ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 =   ( StandardDialScale )  null.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^244^^^^^229^259^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^out .close (  )  ;^240^^^^^225^255^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P8_Replace_Mix]^out.writeObject ( s2 ) ;^240^^^^^225^255^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^240^241^^^^225^255^out.writeObject ( s1 ) ; out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( s1 ) ;^240^^^^^225^255^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^out.writeObject (  ) ;^241^^^^^226^256^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^241^^^^^226^256^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^241^^^^^226^256^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^out.writeObject ( s1 ) ;out.close (  ) ;^241^^^^^226^256^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^244^^^^^229^259^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^245^246^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ; in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^in .writeObject ( 0 )  ;^246^^^^^231^261^in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^246^^^^^231^261^in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^246^^^^^231^261^in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^243^244^^^^228^258^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^240^^^^^225^255^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^244^245^^^^229^259^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^245^^^^^230^260^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^249^^^^^234^264^e.printStackTrace (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals (  s2 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals ( s1 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals ( s2, s1 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertEquals ( s1, s2 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertEquals ( s1, s2 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertEquals ( s1, s2 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( s1, s2 ) ;^251^^^^^236^266^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1 = s1 =  new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s1 =  new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 )  ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  in.readObject (  ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s1 = new StandardDialScale (  ) ;^254^^^^^239^269^s1 = new StandardDialScale (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P3_Replace_Literal]^s1.setExtent ( 493.6 ) ;^255^^^^^240^270^s1.setExtent ( 123.4 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^255^^^^^240^270^s1.setExtent ( 123.4 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickIncrement ( 11.1 ) ;s1.setExtent ( 123.4 ) ;^255^^^^^240^270^s1.setExtent ( 123.4 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1.setMajorTickPaint ( s1.setMajorTickPaint (  new GradientPaint ( 1.0F, 2.0F, red, 3.0F, 4.0F, yellow )   ) ;^256^257^^^^241^271^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.white )  ) ;^256^257^^^^241^271^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^256^257^^^^241^271^s1.setMajorTickPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P4_Replace_Constructor]^s1.setMajorTickStroke ( s1.setMajorTickStroke (  new BasicStroke ( 1.1F )   ) ;^258^^^^^243^273^s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^258^^^^^243^273^s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1.setMajorTickLength ( 0.09 ) ;s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^258^^^^^243^273^s1.setMajorTickStroke ( new BasicStroke ( 2.0f )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 = this;^259^^^^^244^274^s2 = null;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P8_Replace_Mix]^s2 =   ( StandardDialScale )  null.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale (  ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 100.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 0.0, 270.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s1 = new StandardDialScale ( 10.0, 200.0, 20.0, 99.0 ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^s2 =  ( StandardDialScale )  s1.clone (  ) ;s2 =  ( StandardDialScale )  in.readObject (  ) ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^268^^^^^253^283^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^267^268^^^^252^282^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^out.writeObject ( s2 ) ;^264^^^^^249^279^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^264^^^^^249^279^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( s1 ) ;^264^^^^^249^279^out.writeObject ( s1 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^out.writeObject (  ) ;^265^^^^^250^280^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^265^^^^^250^280^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^265^^^^^250^280^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^out.writeObject ( s1 ) ;out.close (  ) ;^265^^^^^250^280^out.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^268^269^^^^253^283^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^269^270^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ; in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^270^^^^^255^285^in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^270^^^^^255^285^in.close (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P7_Replace_Invocation]^s2 =  ( StandardDialScale )  in .close (  )  ;^269^^^^^254^284^s2 =  ( StandardDialScale )  in.readObject (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^273^^^^^258^288^e.printStackTrace (  ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals (  s2 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals ( s1 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P5_Replace_Variable]^assertEquals ( s2, s1 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P14_Delete_Statement]^^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertFalse ( s1.equals ( s2 )  ) ;assertEquals ( s1, s2 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1 != s2 ) ;assertEquals ( s1, s2 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertTrue ( s1.equals ( s2 )  ) ;assertEquals ( s1, s2 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( s1, s2 ) ;^275^^^^^260^290^assertEquals ( s1, s2 ) ;^[CLASS] StandardDialScaleTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  Exception  e  StandardDialScale  s1  s2  
