[P14_Delete_Statement]^^84^^^^^83^85^super ( name ) ;^[CLASS] DialPlotTests  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] boolean  String  name  
[P4_Replace_Constructor]^DialPlot p1 = new StandardDialScale (  )  ;^91^^^^^76^106^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialPlot p1 = new DialPlot (  ) ;^91^^^^^76^106^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^91^^^^^76^106^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p2 = null;DialPlot p1 = new DialPlot (  ) ;^91^^^^^76^106^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^91^^^^^76^106^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;DialPlot p1 = new DialPlot (  ) ;^91^^^^^76^106^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^DialPlot p2 = new StandardDialScale (  )  ;^92^^^^^77^107^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialPlot p2 = new DialPlot (  ) ;^92^^^^^77^107^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p2 = null;DialPlot p2 = new DialPlot (  ) ;^92^^^^^77^107^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialPlot p2 = new DialPlot (  ) ;^92^^^^^77^107^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;DialPlot p2 = new DialPlot (  ) ;^92^^^^^77^107^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;DialPlot p2 = new DialPlot (  ) ;^92^^^^^77^107^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^93^^^^^78^108^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p1.setCap ( new DialBackground ( Color.green )  ) ;^96^^^^^81^111^p1.setBackground ( new DialBackground ( Color.green )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^p1 .setCap ( cap1 )  ;^96^^^^^81^111^p1.setBackground ( new DialBackground ( Color.green )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^96^97^^^^81^111^p1.setBackground ( new DialBackground ( Color.green )  ) ; assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^97^^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^97^^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^97^98^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ; p2.setBackground ( new DialBackground ( Color.green )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^97^^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^97^^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^97^^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^97^^^^^82^112^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^p2.setBackground ( new DialBackground ( Color.2 )  ) ;^98^^^^^83^113^p2.setBackground ( new DialBackground ( Color.green )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p2.setCap ( new DialBackground ( Color.green )  ) ;^98^^^^^83^113^p2.setBackground ( new DialBackground ( Color.green )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^98^^^^^83^113^p2.setBackground ( new DialBackground ( Color.green )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^99^^^^^84^114^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^101^102^^^^86^116^p1.setBackground ( null ) ; assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( null ) ;p1.setBackground ( null ) ;^101^^^^^86^116^p1.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( null ) ;p1.setBackground ( null ) ;^101^^^^^86^116^p1.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setBackground ( null ) ;p1.setBackground ( null ) ;^101^^^^^86^116^p1.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setDialFrame ( f1 ) ;p1.setBackground ( null ) ;^101^^^^^86^116^p1.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( cap1 ) ;p1.setBackground ( null ) ;^101^^^^^86^116^p1.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^assertFalse ( p1 .getClass (  )   ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^102^^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^102^103^^^^87^117^assertFalse ( p1.equals ( p2 )  ) ; p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^103^^^^^88^118^p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( null ) ;p2.setBackground ( null ) ;^103^^^^^88^118^p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setDialFrame ( f2 ) ;p2.setBackground ( null ) ;^103^^^^^88^118^p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( null ) ;p2.setBackground ( null ) ;^103^^^^^88^118^p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( cap2 ) ;p2.setBackground ( null ) ;^103^^^^^88^118^p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setBackground ( null ) ;p2.setBackground ( null ) ;^103^^^^^88^118^p2.setBackground ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^104^^^^^89^119^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^DialCap cap1 = new StandardDialScale (  )  ;^107^^^^^92^122^DialCap cap1 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialCap cap1 = new DialCap (  ) ;^107^^^^^92^122^DialCap cap1 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialCap cap1 = new DialCap (  ) ;^107^^^^^92^122^DialCap cap1 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;DialCap cap1 = new DialCap (  ) ;^107^^^^^92^122^DialCap cap1 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;DialCap cap1 = new DialCap (  ) ;^107^^^^^92^122^DialCap cap1 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^cap1 .DialCap (  )  ;^108^^^^^93^123^cap1.setFillPaint ( Color.red ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^cap1.setFillPaint ( Color.null ) ;^108^^^^^93^123^cap1.setFillPaint ( Color.red ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^108^109^^^^93^123^cap1.setFillPaint ( Color.red ) ; p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^cap2.setFillPaint ( Color.red ) ;cap1.setFillPaint ( Color.red ) ;^108^^^^^93^123^cap1.setFillPaint ( Color.red ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^p1.setCap ( cap2 ) ;^109^^^^^94^124^p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^109^110^^^^94^124^p1.setCap ( cap1 ) ; assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( null ) ;p1.setCap ( cap1 ) ;^109^^^^^94^124^p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( null ) ;p1.setCap ( cap1 ) ;^109^^^^^94^124^p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setDialFrame ( f1 ) ;p1.setCap ( cap1 ) ;^109^^^^^94^124^p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( cap2 ) ;p1.setCap ( cap1 ) ;^109^^^^^94^124^p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setBackground ( null ) ;p1.setCap ( cap1 ) ;^109^^^^^94^124^p1.setCap ( cap1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertFalse ( p1 .getClass (  )   ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^110^^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^110^111^^^^95^125^assertFalse ( p1.equals ( p2 )  ) ; DialCap cap2 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^DialCap cap2 = new StandardDialScale (  )  ;^111^^^^^96^126^DialCap cap2 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialCap cap2 = new DialCap (  ) ;^111^^^^^96^126^DialCap cap2 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialCap cap2 = new DialCap (  ) ;^111^^^^^96^126^DialCap cap2 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;DialCap cap2 = new DialCap (  ) ;^111^^^^^96^126^DialCap cap2 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;DialCap cap2 = new DialCap (  ) ;^111^^^^^96^126^DialCap cap2 = new DialCap (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^cap2 .DialCap (  )  ;^112^^^^^97^127^cap2.setFillPaint ( Color.red ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^112^^^^^97^127^cap2.setFillPaint ( Color.red ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^cap1.setFillPaint ( Color.red ) ;cap2.setFillPaint ( Color.red ) ;^112^^^^^97^127^cap2.setFillPaint ( Color.red ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^p2.setCap ( cap1 ) ;^113^^^^^98^128^p2.setCap ( cap2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^113^114^^^^98^128^p2.setCap ( cap2 ) ; assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( null ) ;p2.setCap ( cap2 ) ;^113^^^^^98^128^p2.setCap ( cap2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setDialFrame ( f2 ) ;p2.setCap ( cap2 ) ;^113^^^^^98^128^p2.setCap ( cap2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( null ) ;p2.setCap ( cap2 ) ;^113^^^^^98^128^p2.setCap ( cap2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setBackground ( null ) ;p2.setCap ( cap2 ) ;^113^^^^^98^128^p2.setCap ( cap2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( cap1 ) ;p2.setCap ( cap2 ) ;^113^^^^^98^128^p2.setCap ( cap2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^assertTrue ( p1 .getClass (  )   ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^114^^^^^99^129^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^p1 .setCap ( cap2 )  ;^116^^^^^101^131^p1.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^116^117^^^^101^131^p1.setCap ( null ) ; assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( null ) ;p1.setCap ( null ) ;^116^^^^^101^131^p1.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setBackground ( null ) ;p1.setCap ( null ) ;^116^^^^^101^131^p1.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( cap2 ) ;p1.setCap ( null ) ;^116^^^^^101^131^p1.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setBackground ( null ) ;p1.setCap ( null ) ;^116^^^^^101^131^p1.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( cap1 ) ;p1.setCap ( null ) ;^116^^^^^101^131^p1.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertFalse ( p1 .getClass (  )   ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^117^^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^117^118^^^^102^132^assertFalse ( p1.equals ( p2 )  ) ; p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^118^^^^^103^133^p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( null ) ;p2.setCap ( null ) ;^118^^^^^103^133^p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setBackground ( null ) ;p2.setCap ( null ) ;^118^^^^^103^133^p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( cap2 ) ;p2.setCap ( null ) ;^118^^^^^103^133^p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setBackground ( null ) ;p2.setCap ( null ) ;^118^^^^^103^133^p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( cap1 ) ;p2.setCap ( null ) ;^118^^^^^103^133^p2.setCap ( null ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^119^^^^^104^134^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^SimpleDialFrame f1 = new StandardDialScale (  )  ;^122^^^^^107^137^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^122^^^^^107^137^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^122^^^^^107^137^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^122^^^^^107^137^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.white )  ) ;^123^124^^^^108^138^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^f1 .SimpleDialFrame (  )  ;^123^124^^^^108^138^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^123^124^^^^108^138^f1.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^p1.setDialFrame ( f2 ) ;^125^^^^^110^140^p1.setDialFrame ( f1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p1 .DialPlot (  )  ;^125^^^^^110^140^p1.setDialFrame ( f1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^125^126^^^^110^140^p1.setDialFrame ( f1 ) ; assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setDialFrame ( f2 ) ;p1.setDialFrame ( f1 ) ;^125^^^^^110^140^p1.setDialFrame ( f1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setBackground ( null ) ;p1.setDialFrame ( f1 ) ;^125^^^^^110^140^p1.setDialFrame ( f1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setCap ( cap1 ) ;p1.setDialFrame ( f1 ) ;^125^^^^^110^140^p1.setDialFrame ( f1 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertFalse ( p1 .getClass (  )   ) ;^126^^^^^111^141^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^SimpleDialFrame f2 = new StandardDialScale (  )  ;^127^^^^^112^142^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^127^^^^^112^142^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^127^^^^^112^142^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^127^^^^^112^142^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color. 3.0f, 4.0f, Color.white )  ) ;^128^129^^^^113^143^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^f2 .SimpleDialFrame (  )  ;^128^129^^^^113^143^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^128^129^^^^113^143^f2.setBackgroundPaint ( new GradientPaint ( 1.0f, 2.0f, Color.red, 3.0f, 4.0f, Color.white )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^p2.setDialFrame ( f1 ) ;^130^^^^^115^145^p2.setDialFrame ( f2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^130^131^^^^115^145^p2.setDialFrame ( f2 ) ; assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setBackground ( null ) ;p2.setDialFrame ( f2 ) ;^130^^^^^115^145^p2.setDialFrame ( f2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setDialFrame ( f1 ) ;p2.setDialFrame ( f2 ) ;^130^^^^^115^145^p2.setDialFrame ( f2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setCap ( cap2 ) ;p2.setDialFrame ( f2 ) ;^130^^^^^115^145^p2.setDialFrame ( f2 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^assertTrue ( p1 .getClass (  )   ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^131^^^^^116^146^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P3_Replace_Literal]^p1.setView ( 0.04, 0.0, 0.8, 1.0 ) ;^134^^^^^119^149^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P3_Replace_Literal]^p1.setView ( 0.2, 0.0, 0.1, 1.0 ) ;^134^^^^^119^149^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P3_Replace_Literal]^p1.setView ( 0.2, 0.0, 0.8, 5.0 ) ;^134^^^^^119^149^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p1 .setCap ( cap2 )  ;^134^^^^^119^149^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^134^^^^^119^149^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^134^^^^^119^149^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^135^136^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ; p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P8_Replace_Mix]^assertFalse ( p1 .getClass (  )   ) ;^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^135^^^^^120^150^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P3_Replace_Literal]^p2.setView ( 0.022222222222222223, 0.0, 0.8, 1.0 ) ;^136^^^^^121^151^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P3_Replace_Literal]^p2.setView ( 0.2, 0.0, 6.4, 1.0 ) ;^136^^^^^121^151^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P3_Replace_Literal]^p2.setView ( 0.2, 0.0, 0.8, 0.14285714285714285 ) ;^136^^^^^121^151^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p2 .setCap ( cap2 )  ;^136^^^^^121^151^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^136^137^^^^121^151^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ; assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^p1.setView ( 0.2, 0.0, 0.8, 1.0 ) ;p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^136^^^^^121^151^p2.setView ( 0.2, 0.0, 0.8, 1.0 ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^137^^^^^122^152^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^p1.addLayer ( p1.addLayer (  new DialCap (  )   ) ;^140^^^^^125^155^p1.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p1.setCap ( new StandardDialScale (  )  ) ;^140^^^^^125^155^p1.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^140^^^^^125^155^p1.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertFalse ( p2.equals ( p1 )  ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertFalse ( p1 .getClass (  )   ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^141^142^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ; p2.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertFalse ( p1.equals ( p2 )  ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertFalse ( p1.equals ( p2 )  ) ;^141^^^^^126^156^assertFalse ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^p2.addLayer ( p2.addLayer (  new DialCap (  )   ) ;^142^^^^^127^157^p2.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p2.setCap ( new StandardDialScale (  )  ) ;^142^^^^^127^157^p2.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^p2 .setDialFrame ( f1 )  ;^142^^^^^127^157^p2.addLayer ( new StandardDialScale (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^142^143^^^^127^157^p2.addLayer ( new StandardDialScale (  )  ) ; assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P14_Delete_Statement]^^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^143^^^^^128^158^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testEquals [RETURN_TYPE] void   [VARIABLES] boolean  SimpleDialFrame  f1  f2  DialPlot  p1  p2  DialCap  cap1  cap2  
[P4_Replace_Constructor]^DialPlot p1 = new StandardDialScale (  )  ;^150^^^^^149^156^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialPlot p1 = new DialPlot (  ) ;^150^^^^^149^156^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^150^^^^^149^156^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialPlot p2 = null;DialPlot p1 = new DialPlot (  ) ;^150^^^^^149^156^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^150^^^^^149^156^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;DialPlot p1 = new DialPlot (  ) ;^150^^^^^149^156^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P4_Replace_Constructor]^DialPlot p2 = new StandardDialScale (  )  ;^151^^^^^149^156^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialPlot p2 = new DialPlot (  ) ;^151^^^^^149^156^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialPlot p2 = null;DialPlot p2 = new DialPlot (  ) ;^151^^^^^149^156^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialPlot p2 = new DialPlot (  ) ;^151^^^^^149^156^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^SimpleDialFrame f2 = new SimpleDialFrame (  ) ;DialPlot p2 = new DialPlot (  ) ;^151^^^^^149^156^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;DialPlot p2 = new DialPlot (  ) ;^151^^^^^149^156^DialPlot p2 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P7_Replace_Invocation]^assertTrue ( p1 .getClass (  )   ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P14_Delete_Statement]^^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^152^^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P14_Delete_Statement]^^152^153^^^^149^156^assertTrue ( p1.equals ( p2 )  ) ; int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P1_Replace_Type]^short  h1 = p1.hashCode (  ) ;^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P7_Replace_Invocation]^int h1 = p1.setCap (  ) ;^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P7_Replace_Invocation]^int h1 = p1 .clone (  )  ;^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P8_Replace_Mix]^int h1 = p2.setCap (  ) ;^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^int h2 = p2.hashCode (  ) ;int h1 = p1.hashCode (  ) ;^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P5_Replace_Variable]^int h1 = p2.hashCode (  ) ;^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P14_Delete_Statement]^^153^^^^^149^156^int h1 = p1.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P1_Replace_Type]^short  h2 = p2.hashCode (  ) ;^154^^^^^149^156^int h2 = p2.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P5_Replace_Variable]^int h2 = p1.hashCode (  ) ;^154^^^^^149^156^int h2 = p2.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P7_Replace_Invocation]^int h2 = p2.setCap (  ) ;^154^^^^^149^156^int h2 = p2.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^int h1 = p1.hashCode (  ) ;int h2 = p2.hashCode (  ) ;^154^^^^^149^156^int h2 = p2.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P8_Replace_Mix]^int h2 = p1.setCap (  ) ;^154^^^^^149^156^int h2 = p2.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P14_Delete_Statement]^^154^^^^^149^156^int h2 = p2.hashCode (  ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P5_Replace_Variable]^assertEquals (  h2 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h1 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P5_Replace_Variable]^assertEquals ( h2, h1 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P14_Delete_Statement]^^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertEquals ( h1, h2 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertEquals ( h1, h2 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertEquals ( h1, h2 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertEquals ( h1, h2 ) ;^155^^^^^149^156^assertEquals ( h1, h2 ) ;^[CLASS] DialPlotTests  [METHOD] testHashCode [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  int  h1  h2  
[P4_Replace_Constructor]^DialPlot p1 = new StandardDialScale (  )  ;^162^^^^^161^173^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialPlot p1 = new DialPlot (  ) ;^162^^^^^161^173^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^162^^^^^161^173^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialPlot p2 = null;DialPlot p1 = new DialPlot (  ) ;^162^^^^^161^173^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^162^^^^^161^173^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;DialPlot p1 = new DialPlot (  ) ;^162^^^^^161^173^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialPlot p2 = null;^163^^^^^161^173^DialPlot p2 = null;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;DialPlot p2 = null;^163^^^^^161^173^DialPlot p2 = null;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P5_Replace_Variable]^p2 =  ( DialPlot )  p2.clone (  ) ;^165^^^^^161^173^p2 =  ( DialPlot )  p1.clone (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^p2 =  ( DialPlot )  p1.setCap (  ) ;^165^^^^^161^173^p2 =  ( DialPlot )  p1.clone (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P8_Replace_Mix]^p2 =   ( DialPlot )  null.clone (  ) ;^165^^^^^161^173^p2 =  ( DialPlot )  p1.clone (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^p2 =  ( DialPlot )  in.readObject (  ) ;p2 =  ( DialPlot )  p1.clone (  ) ;^165^^^^^161^173^p2 =  ( DialPlot )  p1.clone (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^165^^^^^161^173^p2 =  ( DialPlot )  p1.clone (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^168^^^^^161^173^e.printStackTrace (  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( p1 <= p2 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( p2 != p1 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( p1 != p2 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^170^171^^^^161^173^assertTrue ( p1 != p2 ) ; assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertTrue ( p1 != p2 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1 != p2 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1 != p2 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1 != p2 ) ;^170^^^^^161^173^assertTrue ( p1 != p2 ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P2_Replace_Operator]^assertTrue ( p1.getClass (  )  != p2.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( p2.getClass (  )  == p1.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( p1.getClass (  )  == p2.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertTrue ( p1.setCap (  )  == p2.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^171^172^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ; assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( p2.getClass (  )  == p2.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( p1.getClass (  )  == p1.getClass (  )  ) ;^171^^^^^161^173^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P5_Replace_Variable]^assertTrue ( p2.equals ( p1 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P7_Replace_Invocation]^assertEquals ( p1.equals ( p2 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P14_Delete_Statement]^^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertTrue ( p1.getClass (  )  == p2.getClass (  )  ) ;assertTrue ( p1.equals ( p2 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( p1, p2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertTrue ( p1.equals ( p2 )  ) ;^172^^^^^161^173^assertTrue ( p1.equals ( p2 )  ) ;^[CLASS] DialPlotTests  [METHOD] testCloning [RETURN_TYPE] void   [VARIABLES] boolean  DialPlot  p1  p2  CloneNotSupportedException  e  
[P4_Replace_Constructor]^DialPlot p1 = new StandardDialScale (  )  ;^180^^^^^179^198^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialPlot p1 = new DialPlot (  ) ;^180^^^^^179^198^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^DialCap cap2 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^180^^^^^179^198^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^DialPlot p2 = null;DialPlot p1 = new DialPlot (  ) ;^180^^^^^179^198^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^DialCap cap1 = new DialCap (  ) ;DialPlot p1 = new DialPlot (  ) ;^180^^^^^179^198^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^SimpleDialFrame f1 = new SimpleDialFrame (  ) ;DialPlot p1 = new DialPlot (  ) ;^180^^^^^179^198^DialPlot p1 = new DialPlot (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^DialPlot p2 = new DialPlot (  ) ;DialPlot p2 = null;^181^^^^^179^198^DialPlot p2 = null;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^DialPlot p1 = new DialPlot (  ) ;DialPlot p2 = null;^181^^^^^179^198^DialPlot p2 = null;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P7_Replace_Invocation]^p2 =  ( DialPlot )  in .close (  )  ;^191^^^^^179^198^p2 =  ( DialPlot )  in.readObject (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P8_Replace_Mix]^p2 =   ( DialPlot )  null.readObject (  ) ;^191^^^^^179^198^p2 =  ( DialPlot )  in.readObject (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^p2 =  ( DialPlot )  p1.clone (  ) ;p2 =  ( DialPlot )  in.readObject (  ) ;^191^^^^^179^198^p2 =  ( DialPlot )  in.readObject (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P7_Replace_Invocation]^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^189^190^^^^179^198^ObjectInput in = new ObjectInputStream ( new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P5_Replace_Variable]^out.writeObject ( p2 ) ;^186^^^^^179^198^out.writeObject ( p1 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P7_Replace_Invocation]^out .close (  )  ;^186^^^^^179^198^out.writeObject ( p1 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^186^^^^^179^198^out.writeObject ( p1 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;out.writeObject ( p1 ) ;^186^^^^^179^198^out.writeObject ( p1 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P7_Replace_Invocation]^out.writeObject (  ) ;^187^^^^^179^198^out.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^187^^^^^179^198^out.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^in.close (  ) ;out.close (  ) ;^187^^^^^179^198^out.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^out.writeObject ( p1 ) ;out.close (  ) ;^187^^^^^179^198^out.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^190^191^^^^179^198^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ; p2 =  ( DialPlot )  in.readObject (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^191^192^^^^179^198^p2 =  ( DialPlot )  in.readObject (  ) ; in.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^192^^^^^179^198^in.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^out.close (  ) ;in.close (  ) ;^192^^^^^179^198^in.close (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P8_Replace_Mix]^new ByteArrayInputStream ( buffer .ByteArrayOutputStream (  )   )  ) ;^190^^^^^179^198^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^190^^^^^179^198^new ByteArrayInputStream ( buffer.toByteArray (  )  )  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^195^^^^^179^198^e.printStackTrace (  ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P5_Replace_Variable]^assertEquals (  p2 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P5_Replace_Variable]^assertEquals ( p1 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P5_Replace_Variable]^assertEquals ( p2, p1 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P14_Delete_Statement]^^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( p1.equals ( p2 )  ) ;assertEquals ( p1, p2 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^assertTrue ( p1 != p2 ) ;assertEquals ( p1, p2 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^assertFalse ( p1.equals ( p2 )  ) ;assertEquals ( p1, p2 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
[P11_Insert_Donor_Statement]^assertEquals ( h1, h2 ) ;assertEquals ( p1, p2 ) ;^197^^^^^179^198^assertEquals ( p1, p2 ) ;^[CLASS] DialPlotTests  [METHOD] testSerialization [RETURN_TYPE] void   [VARIABLES] boolean  ObjectOutput  out  ByteArrayOutputStream  buffer  ObjectInput  in  DialPlot  p1  p2  Exception  e  
