[P3_Replace_Literal]^private boolean setStarted = true;^34^^^^^29^39^private boolean setStarted = false;^[CLASS] NamespaceContext   [VARIABLES] 
[P14_Delete_Statement]^^43^44^^^^42^45^super ( parentContext ) ; this.nodeTest = nodeTest;^[CLASS] NamespaceContext  [METHOD] <init> [RETURN_TYPE] NodeTest)   EvalContext parentContext NodeTest nodeTest [VARIABLES] NodeIterator  iterator  EvalContext  parentContext  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P8_Replace_Mix]^this.nodeTest =  null;^44^^^^^42^45^this.nodeTest = nodeTest;^[CLASS] NamespaceContext  [METHOD] <init> [RETURN_TYPE] NodeTest)   EvalContext parentContext NodeTest nodeTest [VARIABLES] NodeIterator  iterator  EvalContext  parentContext  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P3_Replace_Literal]^setStarted = true;^52^^^^^51^55^setStarted = false;^[CLASS] NamespaceContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P11_Insert_Donor_Statement]^setStarted = true;setStarted = false;^52^^^^^51^55^setStarted = false;^[CLASS] NamespaceContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P8_Replace_Mix]^iterator = false;^53^^^^^51^55^iterator = null;^[CLASS] NamespaceContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P7_Replace_Invocation]^super .namespacePointer (  )  ;^54^^^^^51^55^super.reset (  ) ;^[CLASS] NamespaceContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P14_Delete_Statement]^^54^^^^^51^55^super.reset (  ) ;^[CLASS] NamespaceContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P11_Insert_Donor_Statement]^reset (  ) ;super.reset (  ) ;^54^^^^^51^55^super.reset (  ) ;^[CLASS] NamespaceContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P2_Replace_Operator]^if  ( position > getCurrentPosition (  )  )  {^58^^^^^57^68^if  ( position < getCurrentPosition (  )  )  {^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^if  ( position < reset (  )  )  {^58^^^^^57^68^if  ( position < getCurrentPosition (  )  )  {^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P15_Unwrap_Block]^reset();^58^59^60^^^57^68^if  ( position < getCurrentPosition (  )  )  { reset (  ) ; }^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P16_Remove_Block]^^58^59^60^^^57^68^if  ( position < getCurrentPosition (  )  )  { reset (  ) ; }^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^nextNode (  ) ;^59^^^^^57^68^reset (  ) ;^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P14_Delete_Statement]^^59^^^^^57^68^reset (  ) ;^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P11_Insert_Donor_Statement]^super.reset (  ) ;reset (  ) ;^59^^^^^57^68^reset (  ) ;^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P2_Replace_Operator]^while  ( getCurrentPosition (  )  <= position )  {^62^^^^^57^68^while  ( getCurrentPosition (  )  < position )  {^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^while  ( reset (  )  < position )  {^62^^^^^57^68^while  ( getCurrentPosition (  )  < position )  {^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^if  ( !reset (  )  )  {^63^^^^^57^68^if  ( !nextNode (  )  )  {^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P15_Unwrap_Block]^return false;^63^64^65^^^57^68^if  ( !nextNode (  )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P16_Remove_Block]^^63^64^65^^^57^68^if  ( !nextNode (  )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P13_Insert_Block]^if  (  ( testName.getPrefix (  )  )  != null )  {     return false; }^63^^^^^57^68^[Delete]^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P13_Insert_Block]^if  (  ( iterator )  == null )  {     return false; }^63^^^^^57^68^[Delete]^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P3_Replace_Literal]^return true;^64^^^^^57^68^return false;^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P14_Delete_Statement]^^62^63^64^^^57^68^while  ( getCurrentPosition (  )  < position )  { if  ( !nextNode (  )  )  { return false;^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P3_Replace_Literal]^return false;^67^^^^^57^68^return true;^[CLASS] NamespaceContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P2_Replace_Operator]^super.setPosition ( getCurrentPosition (  )    instanceof   1 ) ;^71^^^^^56^86^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^super.setPosition ( getCurrentPosition (  )   ) ;^71^^^^^56^86^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^super.setPosition ( reset (  )  + 1 ) ;^71^^^^^56^86^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^71^^^^^56^86^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P12_Insert_Condition]^if  ( position < getCurrentPosition (  )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; }^71^^^^^56^86^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P12_Insert_Condition]^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; }^71^^^^^56^86^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P6_Replace_Expression]^if  ( testName.getPrefix() != null )  {^72^^^^^57^87^if  ( !setStarted )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P6_Replace_Expression]^if  ( currentNodePointer != null )  {^72^^^^^57^87^if  ( !setStarted )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( setStarted )  {^72^^^^^57^87^if  ( !setStarted )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P15_Unwrap_Block]^setStarted = true; if (!((nodeTest) instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest)) {    return false;}; org.apache.commons.jxpath.ri.compiler.NodeNameTest nodeNameTest = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (nodeTest)); org.apache.commons.jxpath.ri.QName testName = nodeNameTest.getNodeName(); if ((testName.getPrefix()) != null) {    return false;}; if (nodeNameTest.isWildcard()) {    iterator = parentContext.getCurrentNodePointer().namespaceIterator();}else {    currentNodePointer = parentContext.getCurrentNodePointer().namespacePointer(testName.getName());    return (currentNodePointer) != null;};^72^73^74^75^76^57^87^if  ( !setStarted )  { setStarted = true; if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P16_Remove_Block]^^72^73^74^75^76^57^87^if  ( !setStarted )  { setStarted = true; if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^if  ( ! ( nodeTest  >>  NodeNameTest )  )  {^74^^^^^59^89^if  ( ! ( nodeTest instanceof NodeNameTest )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  (  ( nodeTest instanceof NodeNameTest )  )  {^74^^^^^59^89^if  ( ! ( nodeTest instanceof NodeNameTest )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P15_Unwrap_Block]^return false;^74^75^76^^^59^89^if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P16_Remove_Block]^^74^75^76^^^59^89^if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^return true;^75^^^^^60^90^return false;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^if  ( testName.getPrefix (  )  == null )  {^80^^^^^65^95^if  ( testName.getPrefix (  )  != null )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^if  ( testName .getName (  )   != null )  {^80^^^^^65^95^if  ( testName.getPrefix (  )  != null )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( testName.getPrefix (  )  != this )  {^80^^^^^65^95^if  ( testName.getPrefix (  )  != null )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P15_Unwrap_Block]^return false;^80^81^82^^^65^95^if  ( testName.getPrefix (  )  != null )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P16_Remove_Block]^^80^81^82^^^65^95^if  ( testName.getPrefix (  )  != null )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^80^^^^^65^95^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  (  ( iterator )  == null )  {     return false; }^80^^^^^65^95^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  ( ! ( iterator.setPosition (  (  ( iterator.getPosition (  )  )  + 1 )  )  )  )  {     return false; }^80^^^^^65^95^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^return true;^81^^^^^66^96^return false;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( nodeNameTest .getNodeName (  )   )  {^83^^^^^68^98^if  ( nodeNameTest.isWildcard (  )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P15_Unwrap_Block]^iterator = parentContext.getCurrentNodePointer().namespaceIterator();^83^84^85^86^^68^98^if  ( nodeNameTest.isWildcard (  )  )  { iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P16_Remove_Block]^^83^84^85^86^^68^98^if  ( nodeNameTest.isWildcard (  )  )  { iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P5_Replace_Variable]^currentNodePointer = testName.getCurrentNodePointer (  ) .namespacePointer ( parentContext.getName (  )  ) ;^88^89^90^^^83^92^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^currentNodePointer = parentContext.getCurrentNodePointer (  )  .namespaceIterator (  )  ;^88^89^90^^^83^92^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^currentNodePointer =  parentContext.getCurrentNodePointer (  ) .namespacePointer ( null.getName (  )  ) ;^88^89^90^^^83^92^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^return currentNodePointer == null;^91^^^^^83^92^return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^return currentNodePointer ;^91^^^^^83^92^return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^parentContext .getCurrentNodePointer (  )  .namespacePointer ( testName.getName (  )  ) ;^89^90^^^^83^92^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName .getPrefix (  )   ) ;^89^90^^^^83^92^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^89^90^^^^83^92^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P11_Insert_Donor_Statement]^parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^89^90^^^^83^92^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^testName .getPrefix (  )   ) ;^90^^^^^83^92^testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^90^^^^^83^92^testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^iterator = parentContext.getCurrentNodePointer (  ) .namespacePointer (  ) ;^84^85^^^^69^99^iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^iterator = parentContext .getCurrentNodePointer (  )  .namespaceIterator (  ) ;^84^85^^^^69^99^iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^iterator  =  iterator ;^84^85^^^^69^99^iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^parentContext.getCurrentNodePointer (  ) .namespacePointer (  ) ;^85^^^^^70^100^parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^85^^^^^70^100^parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P11_Insert_Donor_Statement]^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^85^^^^^70^100^parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^setStarted = false;^73^^^^^58^88^setStarted = true;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P11_Insert_Donor_Statement]^setStarted = false;setStarted = true;^73^^^^^58^88^setStarted = true;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^iterator ;^84^85^^^^69^99^iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P5_Replace_Variable]^currentNodePointer = 4.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^88^89^90^^^73^103^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P5_Replace_Variable]^currentNodePointer = testName.getCurrentNodePointer (  ) .namespacePointer ( parentContext.getName (  )  ) ;^88^89^90^^^73^103^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^currentNodePointer =  parentContext.getCurrentNodePointer (  ) .namespacePointer ( null.getName (  )  ) ;^88^89^90^^^73^103^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^return currentNodePointer == null;^91^^^^^76^106^return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^return false ;^91^^^^^76^106^return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^QName testName = nodeNameTest .isWildcard (  )  ;^79^^^^^64^94^QName testName = nodeNameTest.getNodeName (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^79^^^^^64^94^QName testName = nodeNameTest.getNodeName (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^parentContext .getCurrentNodePointer (  )  .namespaceIterator (  ) ;^85^^^^^70^100^parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName .getPrefix (  )   ) ;^89^90^^^^74^104^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^89^90^^^^74^104^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P11_Insert_Donor_Statement]^parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^89^90^^^^74^104^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^parentContext .getCurrentNodePointer (  )  .namespacePointer ( testName.getName (  )  ) ;^89^90^^^^74^104^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^90^91^^^^75^105^testName.getName (  )  ) ; return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^if  ( ! ( nodeTest  <  NodeNameTest )  )  {^74^^^^^59^89^if  ( ! ( nodeTest instanceof NodeNameTest )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( testName.getPrefix (  )  != false )  {^80^^^^^65^95^if  ( testName.getPrefix (  )  != null )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^currentNodePointer = parentContext .getCurrentNodePointer (  )  .namespacePointer ( testName.getName (  )  ) ;^88^89^90^^^83^92^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^return false ;^91^^^^^83^92^return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^parentContext.getCurrentNodePointer (  )  .namespaceIterator (  )  ;^89^90^^^^83^92^parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^iterator  = null ;^84^85^^^^69^99^iterator = parentContext.getCurrentNodePointer (  ) .namespaceIterator (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName .getPrefix (  )   ) ;^88^89^90^^^73^103^currentNodePointer = parentContext.getCurrentNodePointer (  ) .namespacePointer ( testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^return currentNodePointer ;^91^^^^^76^106^return currentNodePointer != null;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^testName .getPrefix (  )   ) ;^90^^^^^75^105^testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^90^^^^^75^105^testName.getName (  )  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^if  ( iterator != null )  {^95^^^^^80^110^if  ( iterator == null )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( iterator == true )  {^95^^^^^80^110^if  ( iterator == null )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P15_Unwrap_Block]^return false;^95^96^97^^^80^110^if  ( iterator == null )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P16_Remove_Block]^^95^96^97^^^80^110^if  ( iterator == null )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^95^^^^^80^110^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  (  ( testName.getPrefix (  )  )  != null )  {     return false; }^95^^^^^80^110^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^return true;^96^^^^^81^111^return false;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^if  ( !iterator.setPosition ( iterator.getPosition (  )   !=  1 )  )  {^98^^^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^if  ( !iterator.setPosition ( iterator.getPosition (  )   )  )  {^98^^^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^if  ( !iterator.setPosition ( iterator.setPosition (  )  + 1 )  )  {^98^^^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( !iterator.setPosition ( iterator.setPosition (  )  + 0 )  )  {^98^^^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P15_Unwrap_Block]^return false;^98^99^100^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P16_Remove_Block]^^98^99^100^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  { return false; }^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  (  ( testName.getPrefix (  )  )  != null )  {     return false; }^98^^^^^83^113^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^return true;^99^^^^^84^114^return false;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P2_Replace_Operator]^if  ( !iterator.setPosition ( iterator.getPosition (  )   >=  1 )  )  {^98^^^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^if  ( !iterator .reset (  )   )  {^98^^^^^83^113^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P13_Insert_Block]^if  ( ! ( iterator.setPosition (  (  ( iterator.getPosition (  )  )  + 1 )  )  )  )  {     return false; }^98^^^^^83^113^[Delete]^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P7_Replace_Invocation]^currentNodePointer = iterator.getPosition (  ) ;^101^^^^^86^116^currentNodePointer = iterator.getNodePointer (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P8_Replace_Mix]^currentNodePointer  = null ;^101^^^^^86^116^currentNodePointer = iterator.getNodePointer (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P14_Delete_Statement]^^101^^^^^86^116^currentNodePointer = iterator.getNodePointer (  ) ;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
[P3_Replace_Literal]^return false;^102^^^^^87^117^return true;^[CLASS] NamespaceContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  NodeNameTest  nodeNameTest  QName  testName  
