[P1_Replace_Type]^private  LinkedHashSet  namespaces;^38^^^^^33^43^private List namespaces;^[CLASS] JDOMNamespaceIterator   [VARIABLES] 
[P8_Replace_Mix]^private  Set  namespaces;^38^^^^^33^43^private List namespaces;^[CLASS] JDOMNamespaceIterator   [VARIABLES] 
[P1_Replace_Type]^private  List  prefixes;^39^^^^^34^44^private Set prefixes;^[CLASS] JDOMNamespaceIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  position = 0;^40^^^^^35^45^private int position = 0;^[CLASS] JDOMNamespaceIterator   [VARIABLES] 
[P3_Replace_Literal]^private int position = 7;^40^^^^^35^45^private int position = 0;^[CLASS] JDOMNamespaceIterator   [VARIABLES] 
[P8_Replace_Mix]^private int position = 2;^40^^^^^35^45^private int position = 0;^[CLASS] JDOMNamespaceIterator   [VARIABLES] 
[P8_Replace_Mix]^this.parent =  null;^43^^^^^42^53^this.parent = parent;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P11_Insert_Donor_Statement]^Object parent = element.getParent (  ) ;Object node = parent.getNode (  ) ;^44^^^^^42^53^Object node = parent.getNode (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P14_Delete_Statement]^^44^^^^^42^53^Object node = parent.getNode (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P2_Replace_Operator]^if  ( node  >  Document )  {^45^^^^^42^53^if  ( node instanceof Document )  {^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P9_Replace_Statement]^if  ( parent instanceof Element )  {^45^^^^^42^53^if  ( node instanceof Document )  {^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P9_Replace_Statement]^if  ( node instanceof Element )  {^45^^^^^42^53^if  ( node instanceof Document )  {^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P15_Unwrap_Block]^node = ((org.jdom.Document) (node)).getRootElement();^45^46^47^^^42^53^if  ( node instanceof Document )  { node =  (  ( Document ) node ) .getRootElement (  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P16_Remove_Block]^^45^46^47^^^42^53^if  ( node instanceof Document )  { node =  (  ( Document ) node ) .getRootElement (  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P13_Insert_Block]^if  ( parent instanceof Element )  {     collectNamespaces (  (  ( Element )   ( parent )  )  ) ; }^45^^^^^42^53^[Delete]^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P8_Replace_Mix]^node =   (  ( Document ) node ) .getRootElement (  ) ;^46^^^^^42^53^node =  (  ( Document ) node ) .getRootElement (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P13_Insert_Block]^if  ( node instanceof Document )  {     node =  (  ( Document )   ( node )  ) .getRootElement (  ) ; }^46^^^^^42^53^[Delete]^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P14_Delete_Statement]^^46^^^^^42^53^node =  (  ( Document ) node ) .getRootElement (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P2_Replace_Operator]^if  ( node  &&  Element )  {^48^^^^^42^53^if  ( node instanceof Element )  {^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P9_Replace_Statement]^if  ( parent instanceof Element )  {^48^^^^^42^53^if  ( node instanceof Element )  {^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P9_Replace_Statement]^if  ( node instanceof Document )  {^48^^^^^42^53^if  ( node instanceof Element )  {^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P15_Unwrap_Block]^namespaces = new java.util.ArrayList(); prefixes = new java.util.HashSet(); collectNamespaces(((org.jdom.Element) (node)));^48^49^50^51^52^42^53^if  ( node instanceof Element )  { namespaces = new ArrayList (  ) ; prefixes = new HashSet (  ) ; collectNamespaces (  ( Element )  node ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P16_Remove_Block]^^48^49^50^51^52^42^53^if  ( node instanceof Element )  { namespaces = new ArrayList (  ) ; prefixes = new HashSet (  ) ; collectNamespaces (  ( Element )  node ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P1_Replace_Type]^namespaces = new Array Set  (  ) ;^49^^^^^42^53^namespaces = new ArrayList (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P4_Replace_Constructor]^namespaces = namespaces =  new HashSet (  )  ;^49^^^^^42^53^namespaces = new ArrayList (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P8_Replace_Mix]^namespaces =  new HashSet (  )  ;^49^^^^^42^53^namespaces = new ArrayList (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P11_Insert_Donor_Statement]^prefixes = new HashSet (  ) ;namespaces = new ArrayList (  ) ;^49^^^^^42^53^namespaces = new ArrayList (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P1_Replace_Type]^prefixes = new Hash List  (  ) ;^50^^^^^42^53^prefixes = new HashSet (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P4_Replace_Constructor]^prefixes = prefixes =  new ArrayList (  )  ;^50^^^^^42^53^prefixes = new HashSet (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P8_Replace_Mix]^prefixes =  new ArrayList (  )  ;^50^^^^^42^53^prefixes = new HashSet (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P11_Insert_Donor_Statement]^namespaces = new ArrayList (  ) ;prefixes = new HashSet (  ) ;^50^^^^^42^53^prefixes = new HashSet (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P1_Replace_Type]^namespaces = new  List  (  ) ;^49^^^^^42^53^namespaces = new ArrayList (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P7_Replace_Invocation]^setPosition (  ( Element )  node ) ;^51^^^^^42^53^collectNamespaces (  ( Element )  node ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P14_Delete_Statement]^^51^^^^^42^53^collectNamespaces (  ( Element )  node ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P11_Insert_Donor_Statement]^collectNamespaces (  ( Element ) parent ) ;collectNamespaces (  ( Element )  node ) ;^51^^^^^42^53^collectNamespaces (  ( Element )  node ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P1_Replace_Type]^namespaces = new  LinkedList  (  ) ;^49^^^^^42^53^namespaces = new ArrayList (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  namespaces  Object  node  Set  prefixes  NodePointer  parent  boolean  int  position  
[P7_Replace_Invocation]^Namespace ns = element .getAdditionalNamespaces (  )  ;^56^^^^^55^73^Namespace ns = element.getNamespace (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;Namespace ns = element.getNamespace (  ) ;^56^^^^^55^73^Namespace ns = element.getNamespace (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Object parent = element.getParent (  ) ;Namespace ns = element.getNamespace (  ) ;^56^^^^^55^73^Namespace ns = element.getNamespace (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^List others = element.getAdditionalNamespaces (  ) ;Namespace ns = element.getNamespace (  ) ;^56^^^^^55^73^Namespace ns = element.getNamespace (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^56^^^^^55^73^Namespace ns = element.getNamespace (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^if  ( ns != null || !prefixes.contains ( ns.getPrefix (  )  )  )  {^57^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^if  ( ns == null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^57^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P6_Replace_Expression]^if  ( ns != null ) {^57^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P6_Replace_Expression]^if  (  !prefixes.contains ( ns.getPrefix (  )  )  )  {^57^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^if  ( ns != null && !prefixes.add ( ns.getPrefix (  )  )  )  {^57^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P15_Unwrap_Block]^namespaces.add(ns); prefixes.add(ns.getPrefix());^57^58^59^60^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P16_Remove_Block]^^57^58^59^60^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^namespaces.get ( ns ) ;^58^^^^^55^73^namespaces.add ( ns ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^58^^^^^55^73^namespaces.add ( ns ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P12_Insert_Condition]^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^58^59^^^^55^73^namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^prefixes.contains ( ns.getPrefix (  )  ) ;^59^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^59^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P12_Insert_Condition]^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { prefixes.add ( ns.getPrefix (  )  ) ; }^59^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^if  ( ns != null && !prefixes.contains ( ns .getURI (  )   )  )  {^57^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^58^59^^^^55^73^namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^prefixes.add ( ns .getURI (  )   ) ;^59^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P1_Replace_Type]^Set  others = element.getAdditionalNamespaces (  ) ;^61^^^^^55^73^List others = element.getAdditionalNamespaces (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^List others = element .getNamespace (  )  ;^61^^^^^55^73^List others = element.getAdditionalNamespaces (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Namespace ns = element.getNamespace (  ) ;List others = element.getAdditionalNamespaces (  ) ;^61^^^^^55^73^List others = element.getAdditionalNamespaces (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^61^^^^^55^73^List others = element.getAdditionalNamespaces (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^if  ( ns != null || !prefixes.contains ( ns.getPrefix (  )  )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^if  ( ns == null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P6_Replace_Expression]^if  ( ns != null ) {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P6_Replace_Expression]^if  (  !prefixes.contains ( ns.getPrefix (  )  )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^if  ( ns != null && !prefixes.add ( ns.getPrefix (  )  )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P8_Replace_Mix]^if  ( ns != false && !prefixes.contains ( ns .getURI (  )   )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P15_Unwrap_Block]^namespaces.add(ns); prefixes.add(ns.getPrefix());^64^65^66^67^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P16_Remove_Block]^^64^65^66^67^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^namespaces.get ( ns ) ;^65^^^^^55^73^namespaces.add ( ns ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^65^^^^^55^73^namespaces.add ( ns ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P12_Insert_Condition]^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^65^66^^^^55^73^namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^prefixes.contains ( ns.getPrefix (  )  ) ;^66^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^66^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P12_Insert_Condition]^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { prefixes.add ( ns.getPrefix (  )  ) ; }^66^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P8_Replace_Mix]^prefixes.add ( ns .getURI (  )   ) ;^66^^^^^55^73^prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P1_Replace_Type]^for  (  short  i = 0; i < others.size (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^for  ( int i = 0; i <= others.size (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P3_Replace_Literal]^for  ( int i = i; i < others.size (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P3_Replace_Literal]^for  ( int i = 0; i < others.size() + 0 ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P5_Replace_Variable]^for  ( positionnt i = 0; i < others.size (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P5_Replace_Variable]^for  ( int i = 0; i < namespaces.size (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^for  ( int i = 0; i < others.add (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^if  ( ns != null && !prefixes.contains ( ns .getURI (  )   )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P8_Replace_Mix]^if  ( ns != true && !prefixes.contains ( ns.getPrefix (  )  )  )  {^64^^^^^55^73^if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^65^66^^^^55^73^namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P5_Replace_Variable]^ns =  ( Namespace )  namespaces.get ( i ) ;^63^^^^^55^73^ns =  ( Namespace )  others.get ( i ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P5_Replace_Variable]^ns =  ( Namespace )  others.get ( position ) ;^63^^^^^55^73^ns =  ( Namespace )  others.get ( i ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P5_Replace_Variable]^ns =  ( Namespace )  i.get ( others ) ;^63^^^^^55^73^ns =  ( Namespace )  others.get ( i ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^63^^^^^55^73^ns =  ( Namespace )  others.get ( i ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;ns =  ( Namespace )  others.get ( i ) ;^63^^^^^55^73^ns =  ( Namespace )  others.get ( i ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P3_Replace_Literal]^for  ( int i = position; i < others.size (  ) ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P3_Replace_Literal]^for  ( int i = 0; i < others.size() - 9 ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P3_Replace_Literal]^for  ( int i = 0; i < others.size() + 4 ; i++ )  {^62^^^^^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^62^63^64^65^66^55^73^for  ( int i = 0; i < others.size (  ) ; i++ )  { ns =  ( Namespace )  others.get ( i ) ; if  ( ns != null && !prefixes.contains ( ns.getPrefix (  )  )  )  { namespaces.add ( ns ) ; prefixes.add ( ns.getPrefix (  )  ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P8_Replace_Mix]^Object parent = element .getNamespace (  )  ;^69^^^^^55^73^Object parent = element.getParent (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Object node = parent.getNode (  ) ;Object parent = element.getParent (  ) ;^69^^^^^55^73^Object parent = element.getParent (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Namespace ns = element.getNamespace (  ) ;Object parent = element.getParent (  ) ;^69^^^^^55^73^Object parent = element.getParent (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^69^^^^^55^73^Object parent = element.getParent (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^collectNamespaces (  ( Element ) parent ) ;Object parent = element.getParent (  ) ;^69^^^^^55^73^Object parent = element.getParent (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^if  ( parent  |  Element )  {^70^^^^^55^73^if  ( parent instanceof Element )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P9_Replace_Statement]^if  ( node instanceof Document )  {^70^^^^^55^73^if  ( parent instanceof Element )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P9_Replace_Statement]^if  ( node instanceof Element )  {^70^^^^^55^73^if  ( parent instanceof Element )  {^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P15_Unwrap_Block]^collectNamespaces(((org.jdom.Element) (parent)));^70^71^72^^^55^73^if  ( parent instanceof Element )  { collectNamespaces (  ( Element ) parent ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P16_Remove_Block]^^70^71^72^^^55^73^if  ( parent instanceof Element )  { collectNamespaces (  ( Element ) parent ) ; }^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P13_Insert_Block]^if  ( node instanceof Document )  {     node =  (  ( Document )   ( node )  ) .getRootElement (  ) ; }^70^^^^^55^73^[Delete]^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P7_Replace_Invocation]^setPosition (  ( Element ) parent ) ;^71^^^^^55^73^collectNamespaces (  ( Element ) parent ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P14_Delete_Statement]^^71^^^^^55^73^collectNamespaces (  ( Element ) parent ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^collectNamespaces (  ( Element )  node ) ;collectNamespaces (  ( Element ) parent ) ;^71^^^^^55^73^collectNamespaces (  ( Element ) parent ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Object parent = element.getParent (  ) ;collectNamespaces (  ( Element ) parent ) ;^71^^^^^55^73^collectNamespaces (  ( Element ) parent ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   Element element [VARIABLES] Set  prefixes  boolean  Element  element  List  namespaces  others  Object  parent  NodePointer  parent  int  i  position  Namespace  ns  
[P2_Replace_Operator]^if  ( position <= 0 )  {^76^^^^^75^88^if  ( position == 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^if  ( position == -9 )  {^76^^^^^75^88^if  ( position == 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^if  ( index == 0 )  {^76^^^^^75^88^if  ( position == 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^if  ( position == 0L )  {^76^^^^^75^88^if  ( position == 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P9_Replace_Statement]^if  ( !setPosition ( 1 )  )  {^76^^^^^75^88^if  ( position == 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P15_Unwrap_Block]^if (!(setPosition(1))) {    return null;}; position = 0;^76^77^78^79^^75^88^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P16_Remove_Block]^^76^77^78^79^^75^88^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^if  ( !setPosition ( 0 )  )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P7_Replace_Invocation]^if  ( !collectNamespaces ( 1 )  )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^if  ( !setPosition ( 2 )  )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P9_Replace_Statement]^if  ( position == 0 )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P15_Unwrap_Block]^return null;^77^78^79^^^75^88^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P16_Remove_Block]^^77^78^79^^^75^88^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P13_Insert_Block]^if  (  ( namespaces )  == null )  {     return false; }^77^^^^^75^88^[Delete]^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^return this;^78^^^^^75^88^return null;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^position = -8;^80^^^^^75^88^position = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^position = 0 * 1;^80^^^^^75^88^position = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^if  ( !setPosition ( 8 )  )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^if  ( !setPosition ( 6 )  )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^if  ( !setPosition ( 1 * 4 )  )  {^77^^^^^75^88^if  ( !setPosition ( 1 )  )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^position = 2;^80^^^^^75^88^position = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^position = 1;^80^^^^^75^88^position = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P1_Replace_Type]^long  index = position - 1;^82^^^^^75^88^int index = position - 1;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P2_Replace_Operator]^int index = position  <<  1;^82^^^^^75^88^int index = position - 1;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^int index = position ;^82^^^^^75^88^int index = position - 1;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^int index = i - 1;^82^^^^^75^88^int index = position - 1;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P2_Replace_Operator]^if  ( index > 0 )  {^83^^^^^75^88^if  ( index < 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^if  ( index < index )  {^83^^^^^75^88^if  ( index < 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^if  ( index <  )  {^83^^^^^75^88^if  ( index < 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^if  ( position < 0 )  {^83^^^^^75^88^if  ( index < 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^if  ( index < 1 )  {^83^^^^^75^88^if  ( index < 0 )  {^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P15_Unwrap_Block]^index = 0;^83^84^85^^^75^88^if  ( index < 0 )  { index = 0; }^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P16_Remove_Block]^^83^84^85^^^75^88^if  ( index < 0 )  { index = 0; }^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^index = -4;^84^^^^^75^88^index = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^index = 2;^84^^^^^75^88^index = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P3_Replace_Literal]^index = position;^84^^^^^75^88^index = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^index = 1;^84^^^^^75^88^index = 0;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^Namespace ns =  ( Namespace )  namespaces.get ( position ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^Namespace ns =  ( Namespace )  others.get ( index ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^Namespace ns =  ( Namespace )  index.get ( namespaces ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P7_Replace_Invocation]^Namespace ns =  ( Namespace )  namespaces.add ( index ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P11_Insert_Donor_Statement]^Namespace ns = element.getNamespace (  ) ;Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^Namespace ns =  ( Namespace )  namespaces.add ( position ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P14_Delete_Statement]^^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P11_Insert_Donor_Statement]^ns =  ( Namespace )  others.get ( i ) ;Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^86^^^^^75^88^Namespace ns =  ( Namespace )  namespaces.get ( index ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^return new JDOMNamespacePointer ( parent.getPrefix (  ) , ns.getURI (  )  ) ;^87^^^^^75^88^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns.getURI (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^return new JDOMNamespacePointer (  ns.getPrefix (  ) , ns.getURI (  )  ) ;^87^^^^^75^88^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns.getURI (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^return new JDOMNamespacePointer ( ns, parent.getPrefix (  ) , ns.getURI (  )  ) ;^87^^^^^75^88^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns.getURI (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P8_Replace_Mix]^return new JDOMNamespacePointer ( parent, ns .getURI (  )  , ns.getURI (  )  ) ;^87^^^^^75^88^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns.getURI (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P7_Replace_Invocation]^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns .getPrefix (  )   ) ;^87^^^^^75^88^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns.getURI (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P14_Delete_Statement]^^87^^^^^75^88^return new JDOMNamespacePointer ( parent, ns.getPrefix (  ) , ns.getURI (  )  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  Namespace  ns  
[P5_Replace_Variable]^return index;^91^^^^^90^92^return position;^[CLASS] JDOMNamespaceIterator  [METHOD] getPosition [RETURN_TYPE] int   [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P2_Replace_Operator]^if  ( namespaces != null )  {^95^^^^^94^100^if  ( namespaces == null )  {^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P5_Replace_Variable]^if  ( others == null )  {^95^^^^^94^100^if  ( namespaces == null )  {^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P8_Replace_Mix]^if  ( namespaces == true )  {^95^^^^^94^100^if  ( namespaces == null )  {^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P15_Unwrap_Block]^return false;^95^96^97^^^94^100^if  ( namespaces == null )  { return false; }^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P16_Remove_Block]^^95^96^97^^^94^100^if  ( namespaces == null )  { return false; }^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^95^^^^^94^100^[Delete]^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P3_Replace_Literal]^return true;^96^^^^^94^100^return false;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P5_Replace_Variable]^this.position = index;^98^^^^^94^100^this.position = position;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P2_Replace_Operator]^return position >= 1 || position <= namespaces.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P2_Replace_Operator]^return position > 1 && position <= namespaces.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P2_Replace_Operator]^return position >= 1 && position < namespaces.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P3_Replace_Literal]^return position >= 9 && position <= namespaces.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P3_Replace_Literal]^return position >= 1 && position <= namespaces.size() - 3 ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P5_Replace_Variable]^return index >= 1 && position <= namespaces.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P5_Replace_Variable]^return position >= 1 && position <= others.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P5_Replace_Variable]^return namespaces >= 1 && position <= position.size (  ) ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P3_Replace_Literal]^return position >= 1 && position <= namespaces.size() - 5 ;^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
[P14_Delete_Statement]^^99^^^^^94^100^return position >= 1 && position <= namespaces.size (  ) ;^[CLASS] JDOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  namespaces  others  Set  prefixes  NodePointer  parent  boolean  int  i  index  position  
