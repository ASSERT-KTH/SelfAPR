[P3_Replace_Literal]^private boolean setStarted = true;^34^^^^^29^39^private boolean setStarted = false;^[CLASS] AttributeContext   [VARIABLES] 
[P8_Replace_Mix]^private boolean setStarted ;^34^^^^^29^39^private boolean setStarted = false;^[CLASS] AttributeContext   [VARIABLES] 
[P14_Delete_Statement]^^43^44^^^^42^45^super ( parentContext ) ; this.nodeTest = nodeTest;^[CLASS] AttributeContext  [METHOD] <init> [RETURN_TYPE] NodeTest)   EvalContext parentContext NodeTest nodeTest [VARIABLES] NodeIterator  iterator  EvalContext  parentContext  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P8_Replace_Mix]^this.nodeTest =  null;^44^^^^^42^45^this.nodeTest = nodeTest;^[CLASS] AttributeContext  [METHOD] <init> [RETURN_TYPE] NodeTest)   EvalContext parentContext NodeTest nodeTest [VARIABLES] NodeIterator  iterator  EvalContext  parentContext  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P3_Replace_Literal]^setStarted = true;^52^^^^^51^55^setStarted = false;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P11_Insert_Donor_Statement]^setStarted = true;setStarted = false;^52^^^^^51^55^setStarted = false;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P8_Replace_Mix]^iterator = true;^53^^^^^51^55^iterator = null;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P12_Insert_Condition]^if  ( iterator == null )  { iterator = null; }^53^^^^^51^55^iterator = null;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P7_Replace_Invocation]^super.attributeIterator (  ) ;^54^^^^^51^55^super.reset (  ) ;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P14_Delete_Statement]^^54^^^^^51^55^super.reset (  ) ;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P11_Insert_Donor_Statement]^reset (  ) ;super.reset (  ) ;^54^^^^^51^55^super.reset (  ) ;^[CLASS] AttributeContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  
[P2_Replace_Operator]^if  ( position > getCurrentPosition (  )  )  {^58^^^^^57^68^if  ( position < getCurrentPosition (  )  )  {^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^if  ( position < getNodeName (  )  )  {^58^^^^^57^68^if  ( position < getCurrentPosition (  )  )  {^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P15_Unwrap_Block]^reset();^58^59^60^^^57^68^if  ( position < getCurrentPosition (  )  )  { reset (  ) ; }^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P16_Remove_Block]^^58^59^60^^^57^68^if  ( position < getCurrentPosition (  )  )  { reset (  ) ; }^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^nextNode (  ) ;^59^^^^^57^68^reset (  ) ;^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P14_Delete_Statement]^^59^^^^^57^68^reset (  ) ;^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P11_Insert_Donor_Statement]^super.reset (  ) ;reset (  ) ;^59^^^^^57^68^reset (  ) ;^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P2_Replace_Operator]^while  ( getCurrentPosition (  )  <= position )  {^62^^^^^57^68^while  ( getCurrentPosition (  )  < position )  {^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^while  ( getNodeName (  )  < position )  {^62^^^^^57^68^while  ( getCurrentPosition (  )  < position )  {^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P7_Replace_Invocation]^if  ( !reset (  )  )  {^63^^^^^57^68^if  ( !nextNode (  )  )  {^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P15_Unwrap_Block]^return false;^63^64^65^^^57^68^if  ( !nextNode (  )  )  { return false; }^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P16_Remove_Block]^^63^64^65^^^57^68^if  ( !nextNode (  )  )  { return false; }^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P13_Insert_Block]^if  (  ( iterator )  == null )  {     return false; }^63^^^^^57^68^[Delete]^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P3_Replace_Literal]^return true;^64^^^^^57^68^return false;^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P14_Delete_Statement]^^62^63^64^^^57^68^while  ( getCurrentPosition (  )  < position )  { if  ( !nextNode (  )  )  { return false;^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P3_Replace_Literal]^return false;^67^^^^^57^68^return true;^[CLASS] AttributeContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  int  position  
[P2_Replace_Operator]^super.setPosition ( getCurrentPosition (  )   <=  1 ) ;^71^^^^^70^90^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^super.setPosition ( getCurrentPosition (  )   ) ;^71^^^^^70^90^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^super.setPosition ( getNodeName (  )  + 1 ) ;^71^^^^^70^90^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P14_Delete_Statement]^^71^^^^^70^90^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P12_Insert_Condition]^if  ( position < getCurrentPosition (  )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; }^71^^^^^70^90^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P12_Insert_Condition]^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  { super.setPosition ( getCurrentPosition (  )  + 1 ) ; }^71^^^^^70^90^super.setPosition ( getCurrentPosition (  )  + 1 ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P8_Replace_Mix]^if  ( setStarted )  {^72^^^^^70^90^if  ( !setStarted )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P15_Unwrap_Block]^setStarted = true; if (!((nodeTest) instanceof org.apache.commons.jxpath.ri.compiler.NodeNameTest)) {    return false;}; org.apache.commons.jxpath.ri.QName name = ((org.apache.commons.jxpath.ri.compiler.NodeNameTest) (nodeTest)).getNodeName(); iterator = parentContext.getCurrentNodePointer().attributeIterator(name);^72^73^74^75^76^70^90^if  ( !setStarted )  { setStarted = true; if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P16_Remove_Block]^^72^73^74^75^76^70^90^if  ( !setStarted )  { setStarted = true; if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P2_Replace_Operator]^if  ( ! ( nodeTest  <<  NodeNameTest )  )  {^74^^^^^70^90^if  ( ! ( nodeTest instanceof NodeNameTest )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P15_Unwrap_Block]^return false;^74^75^76^^^70^90^if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P16_Remove_Block]^^74^75^76^^^70^90^if  ( ! ( nodeTest instanceof NodeNameTest )  )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^return true;^75^^^^^70^90^return false;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^setStarted = false;^73^^^^^70^90^setStarted = true;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P11_Insert_Donor_Statement]^setStarted = false;setStarted = true;^73^^^^^70^90^setStarted = true;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P5_Replace_Variable]^iterator = null.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^78^79^^^^70^90^iterator = parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P5_Replace_Variable]^iterator = name.getCurrentNodePointer (  ) .attributeIterator ( parentContext ) ;^78^79^^^^70^90^iterator = parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^iterator = parentContext .getCurrentNodePointer (  )  .attributeIterator ( name ) ;^78^79^^^^70^90^iterator = parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P8_Replace_Mix]^iterator =  parentContext.getCurrentNodePointer (  ) .attributeIterator ( null ) ;^78^79^^^^70^90^iterator = parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^QName name =  (  ( NodeNameTest )  nodeTest ) .getCurrentPosition (  ) ;^77^^^^^70^90^QName name =  (  ( NodeNameTest )  nodeTest ) .getNodeName (  ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P14_Delete_Statement]^^77^^^^^70^90^QName name =  (  ( NodeNameTest )  nodeTest ) .getNodeName (  ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P14_Delete_Statement]^^79^^^^^70^90^parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^parentContext .getCurrentNodePointer (  )  .attributeIterator ( name ) ;^79^^^^^70^90^parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P2_Replace_Operator]^if  ( ! ( nodeTest  |  NodeNameTest )  )  {^74^^^^^70^90^if  ( ! ( nodeTest instanceof NodeNameTest )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P8_Replace_Mix]^parentContext.getCurrentNodePointer (  )  .reset (  )  ;^79^^^^^70^90^parentContext.getCurrentNodePointer (  ) .attributeIterator ( name ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P2_Replace_Operator]^if  ( iterator != null )  {^82^^^^^70^90^if  ( iterator == null )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P8_Replace_Mix]^if  ( iterator == false )  {^82^^^^^70^90^if  ( iterator == null )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P15_Unwrap_Block]^return false;^82^83^84^^^70^90^if  ( iterator == null )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P16_Remove_Block]^^82^83^84^^^70^90^if  ( iterator == null )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^82^^^^^70^90^[Delete]^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^return true;^83^^^^^70^90^return false;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P2_Replace_Operator]^if  ( !iterator.setPosition ( iterator.getPosition (  )   &  1 )  )  {^85^^^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^if  ( !iterator.setPosition ( iterator.getPosition (  )   )  )  {^85^^^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^if  ( !iterator.setPosition ( iterator.setPosition (  )  + 1 )  )  {^85^^^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P8_Replace_Mix]^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1L )  )  {^85^^^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P15_Unwrap_Block]^return false;^85^86^87^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P16_Remove_Block]^^85^86^87^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  { return false; }^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^return true;^86^^^^^70^90^return false;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P2_Replace_Operator]^if  ( !iterator.setPosition ( iterator.getPosition (  )    instanceof   1 )  )  {^85^^^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^if  ( !iterator .reset (  )   )  {^85^^^^^70^90^if  ( !iterator.setPosition ( iterator.getPosition (  )  + 1 )  )  {^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P13_Insert_Block]^if  ( ! ( iterator.setPosition (  (  ( iterator.getPosition (  )  )  + 1 )  )  )  )  {     return false; }^85^^^^^70^90^[Delete]^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P7_Replace_Invocation]^currentNodePointer = iterator.getPosition (  ) ;^88^^^^^70^90^currentNodePointer = iterator.getNodePointer (  ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P8_Replace_Mix]^currentNodePointer  =  currentNodePointer ;^88^^^^^70^90^currentNodePointer = iterator.getNodePointer (  ) ;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P14_Delete_Statement]^^88^89^^^^70^90^currentNodePointer = iterator.getNodePointer (  ) ; return true;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
[P3_Replace_Literal]^return false;^89^^^^^70^90^return true;^[CLASS] AttributeContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] NodeIterator  iterator  boolean  setStarted  NodePointer  currentNodePointer  NodeTest  nodeTest  QName  name  
