[P1_Replace_Type]^private  LinkedHashSet  attributes;^37^^^^^32^42^private List attributes;^[CLASS] DOMNamespaceIterator   [VARIABLES] 
[P8_Replace_Mix]^private  Set  attributes;^37^^^^^32^42^private List attributes;^[CLASS] DOMNamespaceIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  position = 0;^38^^^^^33^43^private int position = 0;^[CLASS] DOMNamespaceIterator   [VARIABLES] 
[P3_Replace_Literal]^private int position = 9;^38^^^^^33^43^private int position = 0;^[CLASS] DOMNamespaceIterator   [VARIABLES] 
[P8_Replace_Mix]^private int position = 3;^38^^^^^33^43^private int position = 0;^[CLASS] DOMNamespaceIterator   [VARIABLES] 
[P8_Replace_Mix]^this.parent =  null;^41^^^^^40^44^this.parent = parent;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P1_Replace_Type]^attributes = new Array Set  (  ) ;^42^^^^^40^44^attributes = new ArrayList (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P8_Replace_Mix]^attributes = new Array LinkedHashSet  (  ) ;^42^^^^^40^44^attributes = new ArrayList (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P1_Replace_Type]^attributes = new  LinkedList  (  ) ;^42^^^^^40^44^attributes = new ArrayList (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P5_Replace_Variable]^collectNamespaces (   ( Node )  parent.getNode (  )  ) ;^43^^^^^40^44^collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P5_Replace_Variable]^collectNamespaces ( parent,  ( Node )  attributes.getNode (  )  ) ;^43^^^^^40^44^collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P7_Replace_Invocation]^setPosition ( attributes,  ( Node )  parent.getNode (  )  ) ;^43^^^^^40^44^collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P14_Delete_Statement]^^43^^^^^40^44^collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P11_Insert_Donor_Statement]^collectNamespaces ( attributes, parent ) ;collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;^43^^^^^40^44^collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent [VARIABLES] List  attributes  NodePointer  parent  boolean  int  position  
[P8_Replace_Mix]^Node parent = node .getNodeType (  )  ;^47^^^^^46^67^Node parent = node.getParentNode (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^NamedNodeMap map = node.getAttributes (  ) ;Node parent = node.getParentNode (  ) ;^47^^^^^46^67^Node parent = node.getParentNode (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Node parent = parent.getParentNode (  ) ;^47^^^^^46^67^Node parent = node.getParentNode (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^47^^^^^46^67^Node parent = node.getParentNode (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( parent == null )  {^48^^^^^46^67^if  ( parent != null )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( node != null )  {^48^^^^^46^67^if  ( parent != null )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( parent != true )  {^48^^^^^46^67^if  ( parent != null )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^collectNamespaces(attributes, parent);^48^49^50^^^46^67^if  ( parent != null )  { collectNamespaces ( attributes, parent ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^48^49^50^^^46^67^if  ( parent != null )  { collectNamespaces ( attributes, parent ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^collectNamespaces ( attributes, node ) ;^49^^^^^46^67^collectNamespaces ( attributes, parent ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^collectNamespaces (  parent ) ;^49^^^^^46^67^collectNamespaces ( attributes, parent ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^collectNamespaces ( attributes ) ;^49^^^^^46^67^collectNamespaces ( attributes, parent ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^collectNamespaces ( parent, attributes ) ;^49^^^^^46^67^collectNamespaces ( attributes, parent ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^49^^^^^46^67^collectNamespaces ( attributes, parent ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^collectNamespaces ( attributes,  ( Node )  parent.getNode (  )  ) ;collectNamespaces ( attributes, parent ) ;^49^^^^^46^67^collectNamespaces ( attributes, parent ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( parent != null )  {     collectNamespaces ( attributes, parent ) ; }^49^^^^^46^67^[Delete]^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( node.getNodeType (  )  != Node.DOCUMENT_NODE )  {^51^^^^^46^67^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( parent.getNodeType (  )  == Node.DOCUMENT_NODE )  {^51^^^^^46^67^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( node .getParentNode (  )   == Node.DOCUMENT_NODE )  {^51^^^^^46^67^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^51^^^^^46^67^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^node = ((org.w3c.dom.Document) (node)).getDocumentElement();^51^52^53^^^46^67^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  { node =  (  ( Document )  node ) .getDocumentElement (  ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^51^52^53^^^46^67^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  { node =  (  ( Document )  node ) .getDocumentElement (  ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^node =   (  ( Document )  node ) .getDocumentElement (  ) ;^52^^^^^46^67^node =  (  ( Document )  node ) .getDocumentElement (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^52^^^^^46^67^node =  (  ( Document )  node ) .getDocumentElement (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( node.getNodeType (  )  != Node.ELEMENT_NODE )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( node.getNodeType (  )  < Node.ELEMENT_NODE )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( parent.getNodeType (  )  == Node.ELEMENT_NODE )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( i < count )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( (prefix != null) && prefix.equals("xmlns") || (prefix == null) && name.equals("xmlns") )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( (prefix != null && prefix.equals("xmlns")) )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( prefix != null )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( (prefix == null && name.equals("xmlns")) )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( prefix == null )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( node.getNodeType (  )  == Node.DOCUMENT_NODE )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) &&  ( prefix == null && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  (  ( prefix != null || prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  (  ( prefix == null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix != null && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "x" )  ) ||  ( prefix == null && name.equals ( "x" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "nmlns" )  ) ||  ( prefix == null && name.equals ( "nmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  (  ( name != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ) {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  (   ( prefix == null && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( prefix != null )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( prefix == null )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  (   ( prefix == this && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^attributes.add(attr);^61^62^63^64^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  { attributes.add ( attr ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^61^62^63^64^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  { attributes.add ( attr ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^63^^^^^46^67^attributes.add ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^for  (  short  i = 0; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^for  ( int i = 0; i <= count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = 7; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( positionnt i = 0; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( int i = 0; i < position; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( countnt i = 0; i < i; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "xmlnsxm" )  ) ||  ( prefix == null && name.equals ( "xmlnsxm" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  (  ( name != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && prefix.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  (  ( prefix != false && prefix.equals ( "xmlns" )  ) ) {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr =  ( Attr )  map.item ( position ) ;^58^^^^^46^67^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr =  ( Attr )  i.item ( map ) ;^58^^^^^46^67^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Attr attr =  ( Attr )  map .getLength (  )  ;^58^^^^^46^67^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char prefix = DOMNodePointer.getPrefix ( attr ) ;^59^^^^^46^67^String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String prefix = DOMNodePointer.getLocalName ( attr ) ;^59^^^^^46^67^String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String name = attr.getPrefix (  ) ;String prefix = DOMNodePointer.getPrefix ( attr ) ;^59^^^^^46^67^String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String name = DOMNodePointer.getLocalName ( attr ) ;String prefix = DOMNodePointer.getPrefix ( attr ) ;^59^^^^^46^67^String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char name = DOMNodePointer.getLocalName ( attr ) ;^60^^^^^46^67^String name = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String name = DOMNodePointer.getPrefix ( attr ) ;^60^^^^^46^67^String name = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String name = attr.getPrefix (  ) ;String name = DOMNodePointer.getLocalName ( attr ) ;^60^^^^^46^67^String name = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String prefix = DOMNodePointer.getPrefix ( attr ) ;String name = DOMNodePointer.getLocalName ( attr ) ;^60^^^^^46^67^String name = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^58^59^^^^46^67^Attr attr =  ( Attr )  map.item ( i ) ; String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^Attr attr =  ( Attr )  attributes.get ( index ) ;Attr attr =  ( Attr )  map.item ( i ) ;^58^^^^^46^67^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^59^^^^^46^67^String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^prefix = DOMNodePointer.getLocalName ( attr ) ;String prefix = DOMNodePointer.getPrefix ( attr ) ;^59^^^^^46^67^String prefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^60^^^^^46^67^String name = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^prefix = DOMNodePointer.getLocalName ( attr ) ;String name = DOMNodePointer.getLocalName ( attr ) ;^60^^^^^46^67^String name = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "l" )  ) ||  ( prefix == null && name.equals ( "l" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^||  ( prefix == null && name.equals ( "xmln" )  )  )  {^62^^^^^46^67^||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^||  ( prefix == null && prefix.equals ( "xmlns" )  )  )  {^62^^^^^46^67^||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^62^63^^^^46^67^||  ( prefix == null && name.equals ( "xmlns" )  )  )  { attributes.add ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^NamedNodeMap map = parent.getAttributes (  ) ;^55^^^^^46^67^NamedNodeMap map = node.getAttributes (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^NamedNodeMap map = node .getParentNode (  )  ;^55^^^^^46^67^NamedNodeMap map = node.getAttributes (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^Node parent = node.getParentNode (  ) ;NamedNodeMap map = node.getAttributes (  ) ;^55^^^^^46^67^NamedNodeMap map = node.getAttributes (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^short  count = map.getLength (  ) ;^56^^^^^46^67^int count = map.getLength (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^int count = map.item (  ) ;^56^^^^^46^67^int count = map.getLength (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^int count = map .item ( i )  ;^56^^^^^46^67^int count = map.getLength (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = count; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^55^^^^^46^67^NamedNodeMap map = node.getAttributes (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^56^^^^^46^67^int count = map.getLength (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^58^^^^^46^67^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "lnmlns" )  ) ||  ( prefix == null && name.equals ( "lnmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "xmlnsmln" )  ) ||  ( prefix == null && name.equals ( "xmlnsmln" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "xmlnsx" )  ) ||  ( prefix == null && name.equals ( "xmlnsx" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = i; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "ml" )  ) ||  ( prefix == null && name.equals ( "ml" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "mlns" )  ) ||  ( prefix == null && name.equals ( "mlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && prefix.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  (  ( prefix != true && prefix.equals ( "xmlns" )  ) ||  ( prefix == true && name.equals ( "xmlns" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  (  ( prefix != null && prefix.equals ( "xmlnsxmln" )  ) ||  ( prefix == null && name.equals ( "xmlnsxmln" )  )  )  {^61^62^^^^46^67^if  (  ( prefix != null && prefix.equals ( "xmlns" )  ) ||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^||  ( prefix == null && name.equals ( "xml" )  )  )  {^62^^^^^46^67^||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^int count = map .item ( count )  ;^56^^^^^46^67^int count = map.getLength (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^for  (  long  i = 0; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = -7; i < count; i++ )  {^57^^^^^46^67^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^if  ( node .getParentNode (  )   == Node.ELEMENT_NODE )  {^54^^^^^46^67^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^55^56^^^^46^67^NamedNodeMap map = node.getAttributes (  ) ; int count = map.getLength (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^||  ( prefix == null && name.equals ( "xmlnsx" )  )  )  {^62^^^^^46^67^||  ( prefix == null && name.equals ( "xmlns" )  )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] collectNamespaces [RETURN_TYPE] void   List attributes Node node [VARIABLES] NamedNodeMap  map  boolean  Node  node  parent  List  attributes  NodePointer  parent  String  name  prefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( position != 0 )  {^70^^^^^69^87^if  ( position == 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( position == i )  {^70^^^^^69^87^if  ( position == 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( position == index )  {^70^^^^^69^87^if  ( position == 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^if  ( index == 0 )  {^70^^^^^69^87^if  ( position == 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^if  ( index == 4 )  {^70^^^^^69^87^if  ( position == 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P9_Replace_Statement]^if  ( !setPosition ( 1 )  )  {^70^^^^^69^87^if  ( position == 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P15_Unwrap_Block]^if (!(setPosition(1))) {    return null;}; position = 0;^70^71^72^73^^69^87^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P16_Remove_Block]^^70^71^72^73^^69^87^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( !setPosition ( 6 )  )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P7_Replace_Invocation]^if  ( !DOMNamespaceIterator ( 1 )  )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^if  ( !setPosition ( 0 )  )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P9_Replace_Statement]^if  ( position == 0 )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P15_Unwrap_Block]^return null;^71^72^73^^^69^87^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P16_Remove_Block]^^71^72^73^^^69^87^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^return true;^72^^^^^69^87^return null;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^position = i;^74^^^^^69^87^position = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^position = 3;^74^^^^^69^87^position = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^return this;^72^^^^^69^87^return null;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( !setPosition ( 3 )  )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^if  ( !setPosition ( 2 )  )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^position = -5;^74^^^^^69^87^position = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^position = 4;^74^^^^^69^87^position = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( !setPosition (  )  )  {^71^^^^^69^87^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P1_Replace_Type]^short  index = position - 1;^76^^^^^69^87^int index = position - 1;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P2_Replace_Operator]^int index = position  ==  1;^76^^^^^69^87^int index = position - 1;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^int index = position - i;^76^^^^^69^87^int index = position - 1;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^int index = i - 1;^76^^^^^69^87^int index = position - 1;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P2_Replace_Operator]^if  ( index > 0 )  {^77^^^^^69^87^if  ( index < 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( index < -8 )  {^77^^^^^69^87^if  ( index < 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( index < count )  {^77^^^^^69^87^if  ( index < 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^if  ( position < 0 )  {^77^^^^^69^87^if  ( index < 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^if  ( index < 2 )  {^77^^^^^69^87^if  ( index < 0 )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P15_Unwrap_Block]^index = 0;^77^78^79^^^69^87^if  ( index < 0 )  { index = 0; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P16_Remove_Block]^^77^78^79^^^69^87^if  ( index < 0 )  { index = 0; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^index = -3;^78^^^^^69^87^index = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^index = 0 / 4;^78^^^^^69^87^index = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^index = 9;^78^^^^^69^87^index = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^index = 4;^78^^^^^69^87^index = 0;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P1_Replace_Type]^char prefix = "";^80^^^^^69^87^String prefix = "";^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^Attr attr =  ( Attr )  attributes.get ( position ) ;^81^^^^^69^87^Attr attr =  ( Attr )  attributes.get ( index ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^Attr attr =  ( Attr )  index.get ( attributes ) ;^81^^^^^69^87^Attr attr =  ( Attr )  attributes.get ( index ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P7_Replace_Invocation]^Attr attr =  ( Attr )  attributes.add ( index ) ;^81^^^^^69^87^Attr attr =  ( Attr )  attributes.get ( index ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^Attr attr =  ( Attr )  attributes.add ( position ) ;^81^^^^^69^87^Attr attr =  ( Attr )  attributes.get ( index ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P11_Insert_Donor_Statement]^Attr attr =  ( Attr )  map.item ( i ) ;Attr attr =  ( Attr )  attributes.get ( index ) ;^81^^^^^69^87^Attr attr =  ( Attr )  attributes.get ( index ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P14_Delete_Statement]^^81^^^^^69^87^Attr attr =  ( Attr )  attributes.get ( index ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P1_Replace_Type]^char name = attr.getPrefix (  ) ;^82^^^^^69^87^String name = attr.getPrefix (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^String name = attr .getLocalName ( attr )  ;^82^^^^^69^87^String name = attr.getPrefix (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P11_Insert_Donor_Statement]^String name = DOMNodePointer.getLocalName ( attr ) ;String name = attr.getPrefix (  ) ;^82^^^^^69^87^String name = attr.getPrefix (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P11_Insert_Donor_Statement]^String prefix = DOMNodePointer.getPrefix ( attr ) ;String name = attr.getPrefix (  ) ;^82^^^^^69^87^String name = attr.getPrefix (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P14_Delete_Statement]^^82^^^^^69^87^String name = attr.getPrefix (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P2_Replace_Operator]^if  ( name != null || name.equals ( "xmlns" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P2_Replace_Operator]^if  ( name == null && name.equals ( "xmlns" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( name != null && name.equals ( "xmlnsxml" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^if  ( prefix != null && name.equals ( "xmlns" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P6_Replace_Expression]^if  ( name != null ) {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P6_Replace_Expression]^if  (  name.equals ( "xmlns" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^if  ( name != this && name.equals ( "xmlns" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P15_Unwrap_Block]^prefix = org.apache.commons.jxpath.ri.model.dom.DOMNodePointer.getLocalName(attr);^83^84^85^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  { prefix = DOMNodePointer.getLocalName ( attr ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P16_Remove_Block]^^83^84^85^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  { prefix = DOMNodePointer.getLocalName ( attr ) ; }^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P7_Replace_Invocation]^prefix = DOMNodePointer.getPrefix ( attr ) ;^84^^^^^69^87^prefix = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P8_Replace_Mix]^prefix =  DOMNodePointer.getLocalName ( null ) ;^84^^^^^69^87^prefix = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P13_Insert_Block]^if  (  ( name != null )  &&  ( name.equals ( "xmlns" )  )  )  {     prefix = getLocalName ( attr ) ; }^84^^^^^69^87^[Delete]^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P14_Delete_Statement]^^84^^^^^69^87^prefix = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P11_Insert_Donor_Statement]^String name = DOMNodePointer.getLocalName ( attr ) ;prefix = DOMNodePointer.getLocalName ( attr ) ;^84^^^^^69^87^prefix = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P11_Insert_Donor_Statement]^String prefix = DOMNodePointer.getPrefix ( attr ) ;prefix = DOMNodePointer.getLocalName ( attr ) ;^84^^^^^69^87^prefix = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P3_Replace_Literal]^if  ( name != null && name.equals ( "x" )  )  {^83^^^^^69^87^if  ( name != null && name.equals ( "xmlns" )  )  {^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P4_Replace_Constructor]^return new NamespacePointer ( parent,  attr.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P4_Replace_Constructor]^return new NamespacePointer ( parent, prefix.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^return new NamespacePointer ( parent, name, attr.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^return new NamespacePointer (  prefix, attr.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^return new NamespacePointer ( parent, attr, prefix.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^return new NamespacePointer ( attr, prefix, parent.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^return new NamespacePointer ( prefix, parent, attr.getValue (  )  ) ;^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P14_Delete_Statement]^^86^^^^^69^87^return new NamespacePointer ( parent, prefix, attr.getValue (  )  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  String  name  prefix  boolean  int  count  i  index  position  Attr  attr  
[P5_Replace_Variable]^return index;^90^^^^^89^91^return position;^[CLASS] DOMNamespaceIterator  [METHOD] getPosition [RETURN_TYPE] int   [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P5_Replace_Variable]^this.position = index;^94^^^^^93^96^this.position = position;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P2_Replace_Operator]^return position >= 1 || position <= attributes.size (  ) ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P2_Replace_Operator]^return position < 1 && position <= attributes.size (  ) ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P2_Replace_Operator]^return position >= 1 && position < attributes.size (  ) ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P3_Replace_Literal]^return position >=  && position <= attributes.size (  ) ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P3_Replace_Literal]^return position >= 1 && position <= attributes.size() - 0 ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P5_Replace_Variable]^return index >= 1 && position <= attributes.size (  ) ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P5_Replace_Variable]^return attributes >= 1 && position <= position.size (  ) ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P8_Replace_Mix]^return index >= 1 && position <= attributes.size (  )  - 1;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P3_Replace_Literal]^return position >= 1 && position <= attributes.size() - 2 ;^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
[P14_Delete_Statement]^^95^^^^^93^96^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMNamespaceIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  int  count  i  index  position  
