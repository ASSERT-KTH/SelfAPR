[P3_Replace_Literal]^private boolean done = true;^37^^^^^32^42^private boolean done = false;^[CLASS] PredicateContext   [VARIABLES] 
[P8_Replace_Mix]^private boolean done  = null ;^37^^^^^32^42^private boolean done = false;^[CLASS] PredicateContext   [VARIABLES] 
[P14_Delete_Statement]^^42^^^^^41^48^super ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return parentContext.nextSet (  ) ;super ( parentContext ) ;^42^^^^^41^48^super ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P5_Replace_Variable]^this.expression = nameTestExpression;^43^^^^^41^48^this.expression = expression;^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P2_Replace_Operator]^if  ( expression  >  NameAttributeTest )  {^44^^^^^41^48^if  ( expression instanceof NameAttributeTest )  {^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P5_Replace_Variable]^if  ( nameTestExpression instanceof NameAttributeTest )  {^44^^^^^41^48^if  ( expression instanceof NameAttributeTest )  {^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^nameTestExpression = ((org.apache.commons.jxpath.ri.compiler.NameAttributeTest) (expression)).getNameTestExpression();^44^45^46^47^^41^48^if  ( expression instanceof NameAttributeTest )  { nameTestExpression = (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ; }^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^44^45^46^47^^41^48^if  ( expression instanceof NameAttributeTest )  { nameTestExpression = (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ; }^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( pred instanceof NodePointer )  {     pred =  (  ( NodePointer )   ( pred )  ) .getNode (  ) ; }^44^^^^^41^48^[Delete]^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^nameTestExpression = (  ( NameAttributeTest )  expression )  .getPropertyPointer (  )  ;^45^46^^^^41^48^nameTestExpression = (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ;^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^nameTestExpression =  (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ;^45^46^^^^41^48^nameTestExpression = (  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ;^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( expression instanceof NameAttributeTest )  {     nameTestExpression =  (  ( NameAttributeTest )   ( expression )  ) .getNameTestExpression (  ) ; }^45^^^^^41^48^[Delete]^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^46^^^^^41^48^(  ( NameAttributeTest )  expression ) .getNameTestExpression (  ) ;^[CLASS] PredicateContext  [METHOD] <init> [RETURN_TYPE] Expression)   EvalContext parentContext Expression expression [VARIABLES] EvalContext  parentContext  boolean  done  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P5_Replace_Variable]^if  ( ok )  {^51^^^^^36^66^if  ( done )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^return false;^51^52^53^^^36^66^if  ( done )  { return false; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^51^52^53^^^36^66^if  ( done )  { return false; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( parent == null )  {     return false; }^51^^^^^36^66^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  (  ( nameTestExpression )  == null )  {     return false; }^51^^^^^36^66^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^51^^^^^36^66^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^51^^^^^36^66^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^return true;^52^^^^^37^67^return false;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^while  ( parentContext.nextSet (  )  )  {^54^^^^^39^69^while  ( parentContext.nextNode (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P6_Replace_Expression]^if  ( pred instanceof Iterator )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P6_Replace_Expression]^if  ( pred instanceof NodePointer )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P6_Replace_Expression]^if  ( pred instanceof Number )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^if  ( nextNode (  )  )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( dynamicPropertyPointer != null )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( dynamicPropertyPointer == null )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( !setupDynamicPropertyPointer (  )  )  {^55^^^^^40^70^if  ( setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  <  Iterator )  {^83^^^^^68^98^if  ( pred instanceof Iterator )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( pred instanceof NodePointer )  {^83^^^^^68^98^if  ( pred instanceof Iterator )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( pred instanceof Number )  {^83^^^^^68^98^if  ( pred instanceof Iterator )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^if (!(((java.util.Iterator) (pred)).hasNext())) {    return false;}; pred = ((java.util.Iterator) (pred)).next();^83^84^85^86^^68^98^if  ( pred instanceof Iterator )  { if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^83^84^85^86^^68^98^if  ( pred instanceof Iterator )  { if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^if  ( ! (  ( Iterator )  pred )  .next (  )   )  {^84^^^^^69^99^if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^return false;^84^85^86^^^69^99^if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^84^85^86^^^69^99^if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  (  ( nameTestExpression )  == null )  {     return false; }^84^^^^^69^99^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^84^^^^^69^99^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^return true;^85^^^^^70^100^return false;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^pred =   (  ( Iterator )  pred ) .next (  ) ;^87^^^^^72^102^pred =  (  ( Iterator )  pred ) .next (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^pred =  (  ( NodePointer )  pred ) .getNode (  ) ;pred =  (  ( Iterator )  pred ) .next (  ) ;^87^^^^^72^102^pred =  (  ( Iterator )  pred ) .next (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P12_Insert_Condition]^if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { pred =  (  ( Iterator )  pred ) .next (  ) ; }^87^^^^^72^102^pred =  (  ( Iterator )  pred ) .next (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( ! (  (  ( Iterator )   ( pred )  ) .hasNext (  )  )  )  {     return false; }^84^^^^^69^99^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^87^^^^^72^102^pred =  (  ( Iterator )  pred ) .next (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  <<  NodePointer )  {^90^^^^^75^105^if  ( pred instanceof NodePointer )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( pred instanceof Iterator )  {^90^^^^^75^105^if  ( pred instanceof NodePointer )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( pred instanceof Number )  {^90^^^^^75^105^if  ( pred instanceof NodePointer )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^pred = ((org.apache.commons.jxpath.ri.model.NodePointer) (pred)).getNode();^90^91^92^^^75^105^if  ( pred instanceof NodePointer )  { pred =  (  ( NodePointer )  pred ) .getNode (  ) ; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^90^91^92^^^75^105^if  ( pred instanceof NodePointer )  { pred =  (  ( NodePointer )  pred ) .getNode (  ) ; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( expression instanceof NameAttributeTest )  {     nameTestExpression =  (  ( NameAttributeTest )   ( expression )  ) .getNameTestExpression (  ) ; }^90^^^^^75^105^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^pred =   (  ( NodePointer )  pred ) .getNode (  ) ;^91^^^^^76^106^pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^pred =  (  ( Iterator )  pred ) .next (  ) ;pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^91^^^^^76^106^pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P12_Insert_Condition]^if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  { pred =  (  ( NodePointer )  pred ) .getNode (  ) ; }^91^^^^^76^106^pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^91^^^^^76^106^pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  >  Number )  {^94^^^^^79^109^if  ( pred instanceof Number )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( pred instanceof Iterator )  {^94^^^^^79^109^if  ( pred instanceof Number )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P9_Replace_Statement]^if  ( pred instanceof NodePointer )  {^94^^^^^79^109^if  ( pred instanceof Number )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^int pos = ((int) (org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(pred))); (position)++; done = true; return parentContext.setPosition(pos);^94^95^96^97^98^79^109^if  ( pred instanceof Number )  { int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ; position++; done = true; return parentContext.setPosition ( pos ) ; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^94^95^96^97^98^79^109^if  ( pred instanceof Number )  { int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ; position++; done = true; return parentContext.setPosition ( pos ) ; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^else if  ( InfoSetUtil.doubleValue ( pred )  )  {^100^^^^^85^115^else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^if  ( InfoSetUtil.doubleValue ( pred )  )  {^100^^^^^85^115^else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^(position)++; return true;^100^101^102^103^^85^115^else if  ( InfoSetUtil.booleanValue ( pred )  )  { position++; return true; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^100^101^102^103^^85^115^else if  ( InfoSetUtil.booleanValue ( pred )  )  { position++; return true; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^return false;^102^^^^^87^117^return true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( booleanValue ( pred )  )  {      ( position ) ++;     return true; }^100^^^^^85^115^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^done = false;^97^^^^^82^112^done = true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^ok = true;done = true;^97^^^^^82^112^done = true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^done = false;done = true;^97^^^^^82^112^done = true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^return parentContext.setPosition ( i ) ;^98^^^^^83^113^return parentContext.setPosition ( pos ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^return pos.setPosition ( parentContext ) ;^98^^^^^83^113^return parentContext.setPosition ( pos ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^return parentContext .reset (  )  ;^98^^^^^83^113^return parentContext.setPosition ( pos ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P1_Replace_Type]^long  pos =  (  long  )  InfoSetUtil.doubleValue ( pred ) ;^95^^^^^80^110^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^int pos =  ( int )  InfoSetUtil.booleanValue ( pred ) ;^95^^^^^80^110^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^String propertyName = InfoSetUtil.stringValue ( pred ) ;int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^95^^^^^80^110^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P1_Replace_Type]^short  pos =  (  short  )  InfoSetUtil.doubleValue ( pred ) ;^95^^^^^80^110^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^95^^^^^80^110^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P13_Insert_Block]^if  ( booleanValue ( pred )  )  {      ( position ) ++;     return true; }^95^^^^^80^110^[Delete]^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^98^^^^^83^113^return parentContext.setPosition ( pos ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^pred =  (  ( Iterator )  pred )  .hasNext (  )  ;^87^^^^^72^102^pred =  (  ( Iterator )  pred ) .next (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^Object pred = nameTestExpression.computeValue ( parentContext ) ;^82^^^^^67^97^Object pred = expression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^Object pred = parentContext.computeValue ( expression ) ;^82^^^^^67^97^Object pred = expression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^Object pred = nameTestExpression.computeValue ( parentContext ) ;Object pred = expression.computeValue ( parentContext ) ;^82^^^^^67^97^Object pred = expression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^82^^^^^67^97^Object pred = expression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^if  ( propertyName[i].equals ( names )  )  {^70^^^^^55^85^if  ( names[i].equals ( propertyName )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^ok = true; break;^70^71^72^73^^55^85^if  ( names[i].equals ( propertyName )  )  { ok = true; break; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^70^71^72^73^^55^85^if  ( names[i].equals ( propertyName )  )  { ok = true; break; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^ok = false;^71^^^^^56^86^ok = true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^done = true;ok = true;^71^^^^^56^86^ok = true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^if  ( done )  {^75^^^^^60^90^if  ( ok )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P15_Unwrap_Block]^dynamicPropertyPointer.setPropertyName(propertyName); (position)++; return true;^75^76^77^78^79^60^90^if  ( ok )  { dynamicPropertyPointer.setPropertyName ( propertyName ) ; position++; return true; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P16_Remove_Block]^^75^76^77^78^79^60^90^if  ( ok )  { dynamicPropertyPointer.setPropertyName ( propertyName ) ; position++; return true; }^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^return false;^78^^^^^63^93^return true;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^dynamicPropertyPointer.setIndex ( propertyName ) ;^76^^^^^61^91^dynamicPropertyPointer.setPropertyName ( propertyName ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^76^77^^^^61^91^dynamicPropertyPointer.setPropertyName ( propertyName ) ; position++;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^dynamicPropertyPointer.setIndex ( position - 1 ) ;dynamicPropertyPointer.setPropertyName ( propertyName ) ;^76^^^^^61^91^dynamicPropertyPointer.setPropertyName ( propertyName ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;dynamicPropertyPointer.setPropertyName ( propertyName ) ;^76^^^^^61^91^dynamicPropertyPointer.setPropertyName ( propertyName ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P1_Replace_Type]^for  (  long  i = 0; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^for  ( int i = 0; i > names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^for  ( posnt i = 0; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^for  ( int i = 0; i < pos; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^for  ( names.lengthnt i = 0; i < i; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^for  ( int i = 0; i < names; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^Object pred = expression.computeValue ( parentContext ) ;^56^^^^^41^71^Object pred = nameTestExpression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^Object pred = parentContext.computeValue ( nameTestExpression ) ;^56^^^^^41^71^Object pred = nameTestExpression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^Object pred = expression.computeValue ( parentContext ) ;Object pred = nameTestExpression.computeValue ( parentContext ) ;^56^^^^^41^71^Object pred = nameTestExpression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P1_Replace_Type]^char propertyName = InfoSetUtil.stringValue ( pred ) ;^57^^^^^42^72^String propertyName = InfoSetUtil.stringValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^String propertyName = InfoSetUtil.doubleValue ( pred ) ;^57^^^^^42^72^String propertyName = InfoSetUtil.stringValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ;String propertyName = InfoSetUtil.stringValue ( pred ) ;^57^^^^^42^72^String propertyName = InfoSetUtil.stringValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^boolean ok = true;^67^^^^^52^82^boolean ok = false;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^String names[] = dynamicPropertyPointer.getValuePointer (  ) ;^68^^^^^53^83^String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P7_Replace_Invocation]^String names[] = dynamicPropertyPointer .setPropertyName ( propertyName )  ;^68^^^^^53^83^String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P1_Replace_Type]^for  (  short  i = 0; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^for  ( int i = -3; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^56^57^^^^41^71^Object pred = nameTestExpression.computeValue ( parentContext ) ; String propertyName = InfoSetUtil.stringValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^57^^^^^42^72^String propertyName = InfoSetUtil.stringValue ( pred ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^68^^^^^53^83^String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^dynamicPropertyPointer.setPropertyName ( propertyName ) ;String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^68^^^^^53^83^String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P11_Insert_Donor_Statement]^return dynamicPropertyPointer.getValuePointer (  ) ;String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^68^^^^^53^83^String names[] = dynamicPropertyPointer.getPropertyNames (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^76^^^^^61^91^dynamicPropertyPointer.setPropertyName ( propertyName ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  ^  Iterator )  {^83^^^^^68^98^if  ( pred instanceof Iterator )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  <=  NodePointer )  {^90^^^^^75^105^if  ( pred instanceof NodePointer )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^pred =  (  ( NodePointer )  pred )  .clone (  )  ;^91^^^^^76^106^pred =  (  ( NodePointer )  pred ) .getNode (  ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  <<  Number )  {^94^^^^^79^109^if  ( pred instanceof Number )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^else {^100^^^^^85^115^else if  ( InfoSetUtil.booleanValue ( pred )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^for  ( int i = 0; i <= names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^for  ( int i = 6; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^for  ( int i = 8; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^56^^^^^41^71^Object pred = nameTestExpression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^95^96^^^^80^110^int pos =  ( int )  InfoSetUtil.doubleValue ( pred ) ; position++;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  >=  Iterator )  {^83^^^^^68^98^if  ( pred instanceof Iterator )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^if  (  (  ( Iterator )  pred ) .hasNext (  )  )  {^84^^^^^69^99^if  ( ! (  ( Iterator )  pred ) .hasNext (  )  )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  &&  NodePointer )  {^90^^^^^75^105^if  ( pred instanceof NodePointer )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  ^  Number )  {^94^^^^^79^109^if  ( pred instanceof Number )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^for  ( int i = i; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^for  ( namesnt i = 0; i < i.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P8_Replace_Mix]^dynamicPropertyPointer .getPropertyNames (  )  ;^76^^^^^61^91^dynamicPropertyPointer.setPropertyName ( propertyName ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  >>  Iterator )  {^83^^^^^68^98^if  ( pred instanceof Iterator )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  >=  NodePointer )  {^90^^^^^75^105^if  ( pred instanceof NodePointer )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( pred  |  Number )  {^94^^^^^79^109^if  ( pred instanceof Number )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^for  ( int i = -5; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P5_Replace_Variable]^return this.setPosition ( pos ) ;^98^^^^^83^113^return parentContext.setPosition ( pos ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^for  ( int i = 3; i < names.length; i++ )  {^69^^^^^54^84^for  ( int i = 0; i < names.length; i++ )  {^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P14_Delete_Statement]^^54^55^56^^^39^69^while  ( parentContext.nextNode (  )  )  { if  ( setupDynamicPropertyPointer (  )  )  { Object pred = nameTestExpression.computeValue ( parentContext ) ;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P3_Replace_Literal]^return true;^106^^^^^91^121^return false;^[CLASS] PredicateContext  [METHOD] nextNode [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  Expression  expression  nameTestExpression  Object  pred  String  propertyName  String[]  names  PropertyPointer  dynamicPropertyPointer  int  i  pos  
[P2_Replace_Operator]^if  ( nameTestExpression != null )  {^114^^^^^113^131^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P5_Replace_Variable]^if  ( expression == null )  {^114^^^^^113^131^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  ( nameTestExpression == this )  {^114^^^^^113^131^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^return false;^114^115^116^^^113^131^if  ( nameTestExpression == null )  { return false; }^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^114^115^116^^^113^131^if  ( nameTestExpression == null )  { return false; }^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( done )  {     return false; }^114^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( parent == null )  {     return false; }^114^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! (  (  ( Iterator )   ( pred )  ) .hasNext (  )  )  )  {     return false; }^114^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^114^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^114^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^return true;^115^^^^^113^131^return false;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^NodePointer parent = parentContext.nextNode (  ) ;^118^^^^^113^131^NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^118^^^^^113^131^NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return parentContext.getCurrentNodePointer (  ) ;NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^118^^^^^113^131^NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^parent = parent.getValuePointer (  ) ;NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^118^^^^^113^131^NodePointer parent = parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P2_Replace_Operator]^if  ( parent != null )  {^119^^^^^113^131^if  ( parent == null )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  ( parent == true )  {^119^^^^^113^131^if  ( parent == null )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^return false;^119^120^121^^^113^131^if  ( parent == null )  { return false; }^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^119^120^121^^^113^131^if  ( parent == null )  { return false; }^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( done )  {     return false; }^119^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  (  ( nameTestExpression )  == null )  {     return false; }^119^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^119^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^119^^^^^113^131^[Delete]^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^return true;^120^^^^^113^131^return false;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^parent =  null.getValuePointer (  ) ;^122^^^^^113^131^parent = parent.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^122^^^^^113^131^parent = parent.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return parentContext.getCurrentNodePointer (  ) ;parent = parent.getValuePointer (  ) ;^122^^^^^113^131^parent = parent.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^NodePointer parent = parentContext.getCurrentNodePointer (  ) ;parent = parent.getValuePointer (  ) ;^122^^^^^113^131^parent = parent.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return dynamicPropertyPointer.getValuePointer (  ) ;parent = parent.getValuePointer (  ) ;^122^^^^^113^131^parent = parent.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P2_Replace_Operator]^if  ( ! ( parent  >=  PropertyOwnerPointer )  )  {^123^^^^^113^131^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  (  ( parent instanceof PropertyOwnerPointer )  )  {^123^^^^^113^131^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  {^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^return false;^123^124^125^^^113^131^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  { return false; }^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^123^124^125^^^113^131^if  ( ! ( parent instanceof PropertyOwnerPointer )  )  { return false; }^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^return true;^124^^^^^113^131^return false;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^dynamicPropertyPointer = ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  )  .getNode (  )  ;^126^127^128^129^^113^131^dynamicPropertyPointer = ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^dynamicPropertyPointer = ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent )  .getNameTestExpression (  )  .clone (  ) ;^126^127^128^129^^113^131^dynamicPropertyPointer = ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^dynamicPropertyPointer =  ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^126^127^128^129^^113^131^dynamicPropertyPointer = ( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  )  .getNode (  )  ;^127^128^129^^^113^131^( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^( PropertyPointer )   (  ( PropertyOwnerPointer )  parent )  .getNameTestExpression (  )  .clone (  ) ;^127^128^129^^^113^131^( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^127^128^129^^^113^131^( PropertyPointer )   (  ( PropertyOwnerPointer )  parent ) .getPropertyPointer (  ) .clone (  ) ;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^return false;^130^^^^^113^131^return true;^[CLASS] PredicateContext  [METHOD] setupDynamicPropertyPointer [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  NodePointer  parent  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P2_Replace_Operator]^if  ( nameTestExpression != null )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P5_Replace_Variable]^if  ( expression == null )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  ( dynamicPropertyPointer == null )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  ( position < 1 || position > dynamicPropertyPointer.getLength() )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  ( position < 1 )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  ( position > dynamicPropertyPointer.getLength (  ) )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  ( position - 1 )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P8_Replace_Mix]^if  ( nameTestExpression == true )  {^134^^^^^133^150^if  ( nameTestExpression == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P15_Unwrap_Block]^return setPositionStandard(position);^134^135^136^^^133^150^if  ( nameTestExpression == null )  { return setPositionStandard ( position ) ; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P16_Remove_Block]^^134^135^136^^^133^150^if  ( nameTestExpression == null )  { return setPositionStandard ( position ) ; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^if  ( dynamicPropertyPointer != null )  {^138^^^^^133^150^if  ( dynamicPropertyPointer == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P8_Replace_Mix]^if  ( dynamicPropertyPointer == true )  {^138^^^^^133^150^if  ( dynamicPropertyPointer == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P9_Replace_Statement]^if  ( !setupDynamicPropertyPointer (  )  )  {^138^^^^^133^150^if  ( dynamicPropertyPointer == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P9_Replace_Statement]^if  ( setupDynamicPropertyPointer (  )  )  {^138^^^^^133^150^if  ( dynamicPropertyPointer == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P15_Unwrap_Block]^if (!(setupDynamicPropertyPointer())) {    return setPositionStandard(position);};^138^139^140^141^^133^150^if  ( dynamicPropertyPointer == null )  { if  ( !setupDynamicPropertyPointer (  )  )  { return setPositionStandard ( position ) ; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P16_Remove_Block]^^138^139^140^141^^133^150^if  ( dynamicPropertyPointer == null )  { if  ( !setupDynamicPropertyPointer (  )  )  { return setPositionStandard ( position ) ; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  (  ( dynamicPropertyPointer )  != null )  {     return dynamicPropertyPointer.getValuePointer (  ) ; }else {     return parentContext.getCurrentNodePointer (  ) ; }^138^^^^^133^150^[Delete]^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  ( ! ( setupDynamicPropertyPointer (  )  )  )  {     return setPositionStandard ( position ) ; }^138^^^^^133^150^[Delete]^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^if  ( !nextNode (  )  )  {^139^^^^^133^150^if  ( !setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P9_Replace_Statement]^if  ( dynamicPropertyPointer != null )  {^139^^^^^133^150^if  ( !setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P9_Replace_Statement]^if  ( dynamicPropertyPointer == null )  {^139^^^^^133^150^if  ( !setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P9_Replace_Statement]^if  ( setupDynamicPropertyPointer (  )  )  {^139^^^^^133^150^if  ( !setupDynamicPropertyPointer (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P15_Unwrap_Block]^return setPositionStandard(position);^139^140^141^^^133^150^if  ( !setupDynamicPropertyPointer (  )  )  { return setPositionStandard ( position ) ; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P16_Remove_Block]^^139^140^141^^^133^150^if  ( !setupDynamicPropertyPointer (  )  )  { return setPositionStandard ( position ) ; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  (  ( dynamicPropertyPointer )  == null )  {     if  ( ! ( setupDynamicPropertyPointer (  )  )  )  {         return setPositionStandard ( position ) ;     } }^139^^^^^133^150^[Delete]^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^return setPosition ( position ) ;^140^^^^^133^150^return setPositionStandard ( position ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P14_Delete_Statement]^^140^^^^^133^150^return setPositionStandard ( position ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^if  ( position < 1 && position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^if  ( position <= 1 || position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^if  ( position < 1 || position >= dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^if  ( position < 6 || position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P5_Replace_Variable]^if  ( dynamicPropertyPointer < 1 || position > position.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  ( position < 1 ) {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P6_Replace_Expression]^if  (  position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^if  ( position < 1 || position > dynamicPropertyPointer.getValuePointer (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P8_Replace_Mix]^if  (  position > dynamicPropertyPointer.getValuePointer (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P15_Unwrap_Block]^return false;^143^144^145^146^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P16_Remove_Block]^^143^144^145^146^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^return true;^145^^^^^133^150^return false;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^return false;^148^^^^^133^150^return true;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^|| position > dynamicPropertyPointer.getValuePointer (  )  )  {^144^^^^^133^150^|| position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P14_Delete_Statement]^^144^145^^^^133^150^|| position > dynamicPropertyPointer.getLength (  )  )  { return false;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^dynamicPropertyPointer.setIndex ( position  !=  1 ) ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^dynamicPropertyPointer.setIndex ( position - position ) ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P14_Delete_Statement]^^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P11_Insert_Donor_Statement]^dynamicPropertyPointer.setPropertyName ( propertyName ) ;dynamicPropertyPointer.setIndex ( position - 1 ) ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P11_Insert_Donor_Statement]^return dynamicPropertyPointer.getValuePointer (  ) ;dynamicPropertyPointer.setIndex ( position - 1 ) ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^return setPosition ( position ) ;^135^^^^^133^150^return setPositionStandard ( position ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P14_Delete_Statement]^^135^^^^^133^150^return setPositionStandard ( position ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P8_Replace_Mix]^if  ( dynamicPropertyPointer == this )  {^138^^^^^133^150^if  ( dynamicPropertyPointer == null )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^if  ( position < -1 || position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P8_Replace_Mix]^if  ( position < 2 || position > dynamicPropertyPointer.getLength (  )  )  {^143^144^^^^133^150^if  ( position < 1 || position > dynamicPropertyPointer.getLength (  )  )  {^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^dynamicPropertyPointer.setIndex ( position  >>  1 ) ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^dynamicPropertyPointer.setIndex ( position  ) ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^dynamicPropertyPointer .getLength (  )  ;^147^^^^^133^150^dynamicPropertyPointer.setIndex ( position - 1 ) ;^[CLASS] PredicateContext  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^if  ( position != 0 )  {^153^^^^^152^164^if  ( position == 0 )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^if  ( position == -1 )  {^153^^^^^152^164^if  ( position == 0 )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  ( position == 2 )  {^153^^^^^152^164^if  ( position == 0 )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P9_Replace_Statement]^if  ( !setPosition ( 1 )  )  {^153^^^^^152^164^if  ( position == 0 )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^if (!(setPosition(1))) {    return null;};^153^154^155^156^^152^164^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^153^154^155^156^^152^164^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^153^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^if  ( !setPositionStandard ( 1 )  )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  ( !setPosition ( 1 - 1 )  )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P9_Replace_Statement]^if  ( !nextNode (  )  )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P9_Replace_Statement]^if  ( position == 0 )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^return null;^154^155^156^^^152^164^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^154^155^156^^^152^164^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( done )  {     return false; }^154^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( parent == null )  {     return false; }^154^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  (  ( nameTestExpression )  == null )  {     return false; }^154^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  (  ( position )  == 0 )  {     if  ( ! ( setPosition ( 1 )  )  )  {         return null;     } }^154^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  ( ! ( nextNode (  )  )  )  {     return false; }^154^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^return false;^155^^^^^152^164^return null;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^return this;^155^^^^^152^164^return null;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^if  ( !setPosition ( -7 )  )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  ( !setPosition ( 2 )  )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^return true;^155^^^^^152^164^return null;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^if  ( !setPosition ( -4 )  )  {^154^^^^^152^164^if  ( !setPosition ( 1 )  )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P2_Replace_Operator]^if  ( dynamicPropertyPointer == null )  {^158^^^^^152^164^if  ( dynamicPropertyPointer != null )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^if  ( dynamicPropertyPointer != this )  {^158^^^^^152^164^if  ( dynamicPropertyPointer != null )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P9_Replace_Statement]^if  ( !setupDynamicPropertyPointer (  )  )  {^158^^^^^152^164^if  ( dynamicPropertyPointer != null )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P9_Replace_Statement]^if  ( setupDynamicPropertyPointer (  )  )  {^158^^^^^152^164^if  ( dynamicPropertyPointer != null )  {^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P15_Unwrap_Block]^return dynamicPropertyPointer.getValuePointer();^158^159^160^^^152^164^if  ( dynamicPropertyPointer != null )  { return dynamicPropertyPointer.getValuePointer (  ) ; }^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P16_Remove_Block]^^158^159^160^^^152^164^if  ( dynamicPropertyPointer != null )  { return dynamicPropertyPointer.getValuePointer (  ) ; }^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P13_Insert_Block]^if  (  ( dynamicPropertyPointer )  == null )  {     if  ( ! ( setupDynamicPropertyPointer (  )  )  )  {         return setPositionStandard ( position ) ;     } }^158^^^^^152^164^[Delete]^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^return parentContext.nextNode (  ) ;^162^^^^^152^164^return parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^162^^^^^152^164^return parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^return dynamicPropertyPointer.getLength (  ) ;^159^^^^^152^164^return dynamicPropertyPointer.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P12_Insert_Condition]^if  ( dynamicPropertyPointer != null )  { return dynamicPropertyPointer.getValuePointer (  ) ; }^159^^^^^152^164^return dynamicPropertyPointer.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P12_Insert_Condition]^if  ( dynamicPropertyPointer == null )  { return dynamicPropertyPointer.getValuePointer (  ) ; }^159^^^^^152^164^return dynamicPropertyPointer.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^159^^^^^152^164^return dynamicPropertyPointer.getValuePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P5_Replace_Variable]^return 2.getCurrentNodePointer (  ) ;^162^^^^^152^164^return parentContext.getCurrentNodePointer (  ) ;^[CLASS] PredicateContext  [METHOD] getCurrentNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^super .getPropertyPointer (  )  ;^167^^^^^166^170^super.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^167^^^^^166^170^super.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^parentContext.reset (  ) ;super.reset (  ) ;^167^^^^^166^170^super.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^reset (  ) ;super.reset (  ) ;^167^^^^^166^170^super.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^parentContext.nextSet (  ) ;^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P8_Replace_Mix]^parentContext .getPropertyPointer (  )  ;^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return parentContext.nextSet (  ) ;parentContext.reset (  ) ;^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^super.reset (  ) ;parentContext.reset (  ) ;^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return parentContext.getCurrentNodePointer (  ) ;parentContext.reset (  ) ;^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^return parentContext.setPosition ( pos ) ;parentContext.reset (  ) ;^168^^^^^166^170^parentContext.reset (  ) ;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P3_Replace_Literal]^done = true;^169^^^^^166^170^done = false;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^done = true;done = false;^169^^^^^166^170^done = false;^[CLASS] PredicateContext  [METHOD] reset [RETURN_TYPE] void   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^nextNode (  ) ;^173^^^^^172^175^reset (  ) ;^[CLASS] PredicateContext  [METHOD] nextSet [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^173^^^^^172^175^reset (  ) ;^[CLASS] PredicateContext  [METHOD] nextSet [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P11_Insert_Donor_Statement]^super.reset (  ) ;reset (  ) ;^173^^^^^172^175^reset (  ) ;^[CLASS] PredicateContext  [METHOD] nextSet [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P7_Replace_Invocation]^return parentContext.reset (  ) ;^174^^^^^172^175^return parentContext.nextSet (  ) ;^[CLASS] PredicateContext  [METHOD] nextSet [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P14_Delete_Statement]^^174^^^^^172^175^return parentContext.nextSet (  ) ;^[CLASS] PredicateContext  [METHOD] nextSet [RETURN_TYPE] boolean   [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  
[P2_Replace_Operator]^if  ( this.position >= position )  {^178^^^^^177^188^if  ( this.position > position )  {^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P15_Unwrap_Block]^reset();^178^179^180^^^177^188^if  ( this.position > position )  { reset (  ) ; }^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P16_Remove_Block]^^178^179^180^^^177^188^if  ( this.position > position )  { reset (  ) ; }^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^nextNode (  ) ;^179^^^^^177^188^reset (  ) ;^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P14_Delete_Statement]^^179^^^^^177^188^reset (  ) ;^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P11_Insert_Donor_Statement]^super.reset (  ) ;reset (  ) ;^179^^^^^177^188^reset (  ) ;^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P2_Replace_Operator]^while  ( this.position <= position )  {^182^^^^^177^188^while  ( this.position < position )  {^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P7_Replace_Invocation]^if  ( !reset (  )  )  {^183^^^^^177^188^if  ( !nextNode (  )  )  {^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P9_Replace_Statement]^if  ( !setPosition ( 1 )  )  {^183^^^^^177^188^if  ( !nextNode (  )  )  {^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P15_Unwrap_Block]^return false;^183^184^185^^^177^188^if  ( !nextNode (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P16_Remove_Block]^^183^184^185^^^177^188^if  ( !nextNode (  )  )  { return false; }^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  ( done )  {     return false; }^183^^^^^177^188^[Delete]^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  ( parent == null )  {     return false; }^183^^^^^177^188^[Delete]^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  (  ( nameTestExpression )  == null )  {     return false; }^183^^^^^177^188^[Delete]^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  ( ! (  (  ( Iterator )   ( pred )  ) .hasNext (  )  )  )  {     return false; }^183^^^^^177^188^[Delete]^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^183^^^^^177^188^[Delete]^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^return true;^184^^^^^177^188^return false;^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
[P3_Replace_Literal]^return false;^187^^^^^177^188^return true;^[CLASS] PredicateContext  [METHOD] setPositionStandard [RETURN_TYPE] boolean   int position [VARIABLES] boolean  done  ok  PropertyPointer  dynamicPropertyPointer  Expression  expression  nameTestExpression  int  position  
