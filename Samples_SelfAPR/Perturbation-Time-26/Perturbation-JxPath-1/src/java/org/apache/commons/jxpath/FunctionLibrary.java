[P1_Replace_Type]^private  Set  allFunctions = new Array Set  (  ) ;^35^^^^^30^40^private List allFunctions = new ArrayList (  ) ;^[CLASS] FunctionLibrary   [VARIABLES] 
[P8_Replace_Mix]^private List allFunctions ;^35^^^^^30^40^private List allFunctions = new ArrayList (  ) ;^[CLASS] FunctionLibrary   [VARIABLES] 
[P8_Replace_Mix]^private HashMap byNamespace  = null ;^36^^^^^31^41^private HashMap byNamespace = null;^[CLASS] FunctionLibrary   [VARIABLES] 
[P7_Replace_Invocation]^allFunctions.get ( functions ) ;^42^^^^^41^44^allFunctions.add ( functions ) ;^[CLASS] FunctionLibrary  [METHOD] addFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P14_Delete_Statement]^^42^43^^^^41^44^allFunctions.add ( functions ) ; byNamespace = null;^[CLASS] FunctionLibrary  [METHOD] addFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P11_Insert_Donor_Statement]^lst.add ( funcs ) ;allFunctions.add ( functions ) ;^42^^^^^41^44^allFunctions.add ( functions ) ;^[CLASS] FunctionLibrary  [METHOD] addFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P11_Insert_Donor_Statement]^allFunctions.remove ( functions ) ;allFunctions.add ( functions ) ;^42^^^^^41^44^allFunctions.add ( functions ) ;^[CLASS] FunctionLibrary  [METHOD] addFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P8_Replace_Mix]^byNamespace = false;^43^^^^^41^44^byNamespace = null;^[CLASS] FunctionLibrary  [METHOD] addFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P12_Insert_Condition]^if  ( byNamespace == null )  { byNamespace = null; }^43^^^^^41^44^byNamespace = null;^[CLASS] FunctionLibrary  [METHOD] addFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P7_Replace_Invocation]^allFunctions.get ( functions ) ;^50^^^^^49^52^allFunctions.remove ( functions ) ;^[CLASS] FunctionLibrary  [METHOD] removeFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P14_Delete_Statement]^^50^^^^^49^52^allFunctions.remove ( functions ) ;^[CLASS] FunctionLibrary  [METHOD] removeFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P11_Insert_Donor_Statement]^allFunctions.add ( functions ) ;allFunctions.remove ( functions ) ;^50^^^^^49^52^allFunctions.remove ( functions ) ;^[CLASS] FunctionLibrary  [METHOD] removeFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P8_Replace_Mix]^byNamespace = this;^51^^^^^49^52^byNamespace = null;^[CLASS] FunctionLibrary  [METHOD] removeFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P12_Insert_Condition]^if  ( byNamespace == null )  { byNamespace = null; }^51^^^^^49^52^byNamespace = null;^[CLASS] FunctionLibrary  [METHOD] removeFunctions [RETURN_TYPE] void   Functions functions [VARIABLES] List  allFunctions  Functions  functions  boolean  HashMap  byNamespace  
[P2_Replace_Operator]^if  ( byNamespace != null )  {^59^^^^^58^63^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P8_Replace_Mix]^if  ( byNamespace == false )  {^59^^^^^58^63^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P9_Replace_Statement]^if  ( candidates == null )  {^59^^^^^58^63^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P15_Unwrap_Block]^prepareCache();^59^60^61^^^58^63^if  ( byNamespace == null )  { prepareCache (  ) ; }^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P16_Remove_Block]^^59^60^61^^^58^63^if  ( byNamespace == null )  { prepareCache (  ) ; }^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P14_Delete_Statement]^^60^^^^^58^63^prepareCache (  ) ;^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P7_Replace_Invocation]^return byNamespace.HashMap (  ) ;^62^^^^^58^63^return byNamespace.keySet (  ) ;^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P14_Delete_Statement]^^62^^^^^58^63^return byNamespace.keySet (  ) ;^[CLASS] FunctionLibrary  [METHOD] getUsedNamespaces [RETURN_TYPE] Set   [VARIABLES] HashMap  byNamespace  List  allFunctions  boolean  
[P2_Replace_Operator]^if  ( byNamespace != null )  {^74^^^^^73^99^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^if  ( byNamespace == this )  {^74^^^^^73^99^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P9_Replace_Statement]^if  ( candidates == null )  {^74^^^^^73^99^if  ( byNamespace == null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P15_Unwrap_Block]^prepareCache();^74^75^76^^^73^99^if  ( byNamespace == null )  { prepareCache (  ) ; }^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P16_Remove_Block]^^74^75^76^^^73^99^if  ( byNamespace == null )  { prepareCache (  ) ; }^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P14_Delete_Statement]^^75^^^^^73^99^prepareCache (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Object candidates = byNamespace.get ( name ) ;^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Object candidates = namespace.get ( byNamespace ) ;^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P7_Replace_Invocation]^Object candidates = byNamespace .keySet (  )  ;^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P11_Insert_Donor_Statement]^Object candidates = byNamespace.get ( ns ) ;Object candidates = byNamespace.get ( namespace ) ;^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P14_Delete_Statement]^^77^^^^^73^99^Object candidates = byNamespace.get ( namespace ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^if  ( candidates  &&  Functions )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^if  ( candidates  <  Functions )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^if  ( candidates countnstanceof Functions )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P6_Replace_Expression]^if  ( candidates instanceof List )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P6_Replace_Expression]^if  ( i < count )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P6_Replace_Expression]^if  ( function != null )  {^78^^^^^73^99^if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P15_Unwrap_Block]^return ((org.apache.commons.jxpath.Functions) (candidates)).getFunction(namespace, name, parameters);^78^79^80^81^82^73^99^if  ( candidates instanceof Functions )  { return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ; }^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P16_Remove_Block]^^78^79^80^81^82^73^99^if  ( candidates instanceof Functions )  { return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ; }^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P13_Insert_Block]^if  ( candidates instanceof List )  {     List list =  (  ( List )   ( candidates )  ) ;     int count = list.size (  ) ;     for  ( int i = 0; i < count; i++ )  {         Function function =  (  ( Functions )   ( list.get ( i )  )  ) .getFunction ( namespace, name, parameters ) ;         if  ( function != null )  {             return function;         }     } }^78^^^^^73^99^[Delete]^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  >>  List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^else countf  ( candidates instanceof List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P6_Replace_Expression]^else if  ( i < count )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P6_Replace_Expression]^else if  ( function != null )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^if  ( candidates instanceof List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^if  ( function == null )  {^93^^^^^73^99^if  ( function != null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^if  ( function != true )  {^93^^^^^73^99^if  ( function != null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P9_Replace_Statement]^if  ( candidates == null )  {^93^^^^^73^99^if  ( function != null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P15_Unwrap_Block]^return function;^93^94^95^^^73^99^if  ( function != null )  { return function; }^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P16_Remove_Block]^^93^94^95^^^73^99^if  ( function != null )  { return function; }^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P1_Replace_Type]^for  (  long  i = 0; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^for  ( int i = 0; i == count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^for  ( int i = count; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^for  ( countnt i = 0; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^if  ( function != this )  {^93^^^^^73^99^if  ( function != null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  allFunctions.get ( i )  ) .getFunction ( namespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( count )  ) .getFunction ( namespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( name, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespacespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction (  name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  namespace.get ( i )  ) .getFunction ( list, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  i.get ( list )  ) .getFunction ( namespace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( name, namespace,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P7_Replace_Invocation]^Function function = (  ( Functions )  list .get ( candidates )   )^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  allFunctions.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( count )  ) .getFunction ( namespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction (  name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace,  parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  parameters.get ( i )  ) .getFunction ( namespace, name, list ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( namespace )  ) .getFunction ( i, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( parameters, name, namespace ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( namespacespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( parametersspace, name, name ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P7_Replace_Invocation]^(  ( Functions )  list .get ( candidates )   )^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  i.get ( list )  ) .getFunction ( namespace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P1_Replace_Type]^LinkedHashSet  list =  (  LinkedHashSet  )  candidates;^85^^^^^73^99^List list =  ( List )  candidates;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P1_Replace_Type]^short  count = list.size (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() + 5 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^int count = allFunctions.size (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P7_Replace_Invocation]^int count = list.add (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P7_Replace_Invocation]^int count = list .remove ( candidates )  ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P11_Insert_Donor_Statement]^int count = allFunctions.size (  ) ;int count = list.size (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P1_Replace_Type]^for  (  short  i = 0; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^for  ( int i = i; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( namespace )  ) .getFunction ( i, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() + 1 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P14_Delete_Statement]^^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( name )  ) .getFunction ( ispace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( name, namespace, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^(  ( Functions )  allFunctions .get ( candidates )   )^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^if  ( function != false )  {^93^^^^^73^99^if  ( function != null )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^for  ( int i = 5; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^for  ( countnt i = 0; i < i; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( parameters )  ) .getFunction ( namespace, name, i ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P1_Replace_Type]^Set  list =  (  Set  )  candidates;^85^^^^^73^99^List list =  ( List )  candidates;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() + 4 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^int count = allFunctions.add (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^for  ( int i = 3; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() + 8 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  list.get ( i )  ) .getFunction ( name, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  name.get ( i )  ) .getFunction ( listspace, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( name, name, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( namespacespace, name, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction (  name, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( namespace,  parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( namespace, name ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( parameters, name, namespace ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( parametersspace, name, name ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^return  (  ( Functions )  candidates ) .getFunction ( name, namespace, parameters ) ;^79^80^81^82^^73^99^return  (  ( Functions )  candidates ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  >=  List )  {^84^^^^^73^99^else if  ( candidates instanceof List )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  name.get ( i )  ) .getFunction ( listspace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^Function function = (  ( Functions )  list.get ( name )  ) .getFunction ( ispace, name,^88^89^90^91^^73^99^Function function = (  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name,^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P5_Replace_Variable]^(  ( Functions )  namespace.get ( i )  ) .getFunction ( list, name, parameters ) ;^89^90^91^92^^73^99^(  ( Functions )  list.get ( i )  ) .getFunction ( namespace, name, parameters ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P1_Replace_Type]^long  count = list.size (  ) ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() - 1 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^for  ( int i = 8; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() - 2 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^for  ( int i = 1; i < count; i++ )  {^87^^^^^73^99^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P3_Replace_Literal]^int count = list.size() - 3 ;^86^^^^^73^99^int count = list.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^return this;^98^^^^^73^99^return null;^[CLASS] FunctionLibrary  [METHOD] getFunction [RETURN_TYPE] Function   String namespace String name Object[] parameters [VARIABLES] Function  function  boolean  HashMap  byNamespace  List  allFunctions  list  Object  candidates  String  name  namespace  Object[]  parameters  int  count  i  
[P8_Replace_Mix]^byNamespace  =  byNamespace ;^102^^^^^101^124^byNamespace = new HashMap (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^short  count = allFunctions.size (  ) ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P3_Replace_Literal]^int count = allFunctions.size() + 8 ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^int count = lst.size (  ) ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P7_Replace_Invocation]^int count = allFunctions .remove ( candidates )  ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^int count = lst .remove ( candidates )  ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^int count = list.size (  ) ;int count = allFunctions.size (  ) ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P3_Replace_Literal]^int count = allFunctions.size() - 0 ;^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^103^^^^^101^124^int count = allFunctions.size (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^if  ( candidates != null )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P6_Replace_Expression]^if  ( candidates instanceof Functions )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^if  ( candidates == this )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P9_Replace_Statement]^if  ( byNamespace == null )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P9_Replace_Statement]^if  ( function != null )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P15_Unwrap_Block]^byNamespace.put(ns, funcs);^110^111^112^^^101^124^if  ( candidates == null )  { byNamespace.put ( ns, funcs ) ; }^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P16_Remove_Block]^^110^111^112^^^101^124^if  ( candidates == null )  { byNamespace.put ( ns, funcs ) ; }^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P13_Insert_Block]^if  ( candidates instanceof Functions )  {     List lst = new ArrayList (  ) ;     lst.add ( candidates ) ;     lst.add ( funcs ) ;     byNamespace.put ( ns, lst ) ; }else {      (  ( List )   ( candidates )  ) .add ( funcs ) ; }^110^^^^^101^124^[Delete]^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  <<  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^if  ( candidates instanceof Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P15_Unwrap_Block]^java.util.List lst = new java.util.ArrayList(); lst.add(candidates); lst.add(funcs); byNamespace.put(ns, lst);^113^114^115^116^117^101^124^else if  ( candidates instanceof Functions )  { List lst = new ArrayList (  ) ; lst.add ( candidates ) ; lst.add ( funcs ) ; byNamespace.put ( ns, lst ) ; }^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P16_Remove_Block]^^113^114^115^116^117^101^124^else if  ( candidates instanceof Functions )  { List lst = new ArrayList (  ) ; lst.add ( candidates ) ; lst.add ( funcs ) ; byNamespace.put ( ns, lst ) ; }^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^(  (  ArrayList  )  candidates ) .add ( funcs ) ;^120^^^^^101^124^(  ( List )  candidates ) .add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^120^^^^^101^124^(  ( List )  candidates ) .add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^List lst = new  List  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^Set  lst = new Array Set  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^115^116^^^^101^124^lst.add ( candidates ) ; lst.add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^lst.add ( funcs ) ;lst.add ( candidates ) ;^115^^^^^101^124^lst.add ( candidates ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^116^^^^^101^124^lst.add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^allFunctions.add ( functions ) ;lst.add ( funcs ) ;^116^^^^^101^124^lst.add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^lst.add ( candidates ) ;lst.add ( funcs ) ;^116^^^^^101^124^lst.add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put ( ns, list ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put (  lst ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put ( ns ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^byNamespace.put ( ns, funcs ) ;byNamespace.put ( ns, lst ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^List lst = new  Set  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^115^^^^^101^124^lst.add ( candidates ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put ( lst, ns ) ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P7_Replace_Invocation]^byNamespace .get ( candidates )  ;^117^^^^^101^124^byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^(  (  Set  )  candidates ) .add ( funcs ) ;^120^^^^^101^124^(  ( List )  candidates ) .add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put (  funcs ) ;^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put ( ns ) ;^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^byNamespace.put ( funcs, ns ) ;^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^byNamespace.put ( ns, lst ) ;byNamespace.put ( ns, funcs ) ;^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  ^  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^LinkedHashSet  lst = new Array LinkedHashSet  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^116^117^^^^101^124^lst.add ( funcs ) ; byNamespace.put ( ns, lst ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^for  (  long  i = 0; i < count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^for  ( int i = 0; i == count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P3_Replace_Literal]^for  ( int i = -1; i < count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^for  ( countnt i = 0; i < i; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^for  ( countnt i = 0; i < count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^if  ( candidates == true )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  <  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^List lst = new  LinkedHashSet  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^ArrayList  lst = new Array ArrayList  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  ||  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^(  (  LinkedHashSet  )  candidates ) .add ( funcs ) ;^120^^^^^101^124^(  ( List )  candidates ) .add ( funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^for  ( Iterator it = namespaces.iterator (  ) ; it .next (  )  ; )  {^107^^^^^101^124^for  ( Iterator it = namespaces.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^if  ( candidates == false )  {^110^^^^^101^124^if  ( candidates == null )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  &&  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^char ns =  ( char )  it.next (  ) ;^108^^^^^101^124^String ns =  ( String )  it.next (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P7_Replace_Invocation]^String ns =  ( String )  it .hasNext (  )  ;^108^^^^^101^124^String ns =  ( String )  it.next (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^Object candidates = ns.get ( byNamespace ) ;^109^^^^^101^124^Object candidates = byNamespace.get ( ns ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^Object candidates = byNamespace .keySet (  )  ;^109^^^^^101^124^Object candidates = byNamespace.get ( ns ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P11_Insert_Donor_Statement]^Object candidates = byNamespace.get ( namespace ) ;Object candidates = byNamespace.get ( ns ) ;^109^^^^^101^124^Object candidates = byNamespace.get ( ns ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^108^^^^^101^124^String ns =  ( String )  it.next (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^109^^^^^101^124^Object candidates = byNamespace.get ( ns ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^byNamespace .get ( candidates )  ;^111^^^^^101^124^byNamespace.put ( ns, funcs ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^List lst = new  LinkedList  (  ) ;^114^^^^^101^124^List lst = new ArrayList (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^Functions funcs =  ( Functions )  allFunctions.get ( count ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^Functions funcs =  ( Functions )  lst.get ( i ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^Functions funcs =  ( Functions )  i.get ( allFunctions ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P7_Replace_Invocation]^Functions funcs =  ( Functions )  allFunctions.add ( i ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P7_Replace_Invocation]^Functions funcs =  ( Functions )  allFunctions .keySet (  )  ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P1_Replace_Type]^List  namespaces = funcs.getUsedNamespaces (  ) ;^106^^^^^101^124^Set namespaces = funcs.getUsedNamespaces (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^Functions funcs =  ( Functions )  lst.add ( i ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^106^^^^^101^124^Set namespaces = funcs.getUsedNamespaces (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^107^108^109^110^111^101^124^for  ( Iterator it = namespaces.iterator (  ) ; it.hasNext (  ) ; )  { String ns =  ( String )  it.next (  ) ; Object candidates = byNamespace.get ( ns ) ; if  ( candidates == null )  { byNamespace.put ( ns, funcs ) ; }^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P5_Replace_Variable]^for  ( Iterator namespaces = it.iterator (  ) ; it.hasNext (  ) ; )  {^107^^^^^101^124^for  ( Iterator it = namespaces.iterator (  ) ; it.hasNext (  ) ; )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P2_Replace_Operator]^else if  ( candidates  >=  Functions )  {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^else {^113^^^^^101^124^else if  ( candidates instanceof Functions )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P3_Replace_Literal]^for  ( int i = ; i < count; i++ )  {^104^^^^^101^124^for  ( int i = 0; i < count; i++ )  {^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P8_Replace_Mix]^Functions funcs =  ( Functions )  allFunctions.add ( count ) ;^105^^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P7_Replace_Invocation]^Set namespaces = funcs .getUsedNamespaces (  )  ;^106^^^^^101^124^Set namespaces = funcs.getUsedNamespaces (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^105^106^^^^101^124^Functions funcs =  ( Functions )  allFunctions.get ( i ) ; Set namespaces = funcs.getUsedNamespaces (  ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
[P14_Delete_Statement]^^108^109^^^^101^124^String ns =  ( String )  it.next (  ) ; Object candidates = byNamespace.get ( ns ) ;^[CLASS] FunctionLibrary  [METHOD] prepareCache [RETURN_TYPE] void   [VARIABLES] Set  namespaces  boolean  HashMap  byNamespace  Iterator  it  List  allFunctions  list  lst  Functions  funcs  Object  candidates  String  ns  int  count  i  
