[P8_Replace_Mix]^JavaType[] types = typeFactory.findTypeParameters ( getClass (  ) , Converter.null ) ;^28^^^^^26^33^JavaType[] types = typeFactory.findTypeParameters ( getClass (  ) , Converter.class ) ;^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P14_Delete_Statement]^^28^^^^^26^33^JavaType[] types = typeFactory.findTypeParameters ( getClass (  ) , Converter.class ) ;^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P2_Replace_Operator]^if  ( types == null && types.length < 2 )  {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P2_Replace_Operator]^if  ( types != null || types.length < 2 )  {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P2_Replace_Operator]^if  ( types == null || types.length <= 2 )  {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P3_Replace_Literal]^if  ( types == null || types.length < -3 )  {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P6_Replace_Expression]^if  ( types == null ) {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P6_Replace_Expression]^if  (  types.length < 2 )  {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P6_Replace_Expression]^if  ( "Can not find OUT type parameter for Converter of type " + getClass (  ) .getName (  ) )  {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P8_Replace_Mix]^if  ( types == false ) {^29^^^^^26^33^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("Can not find OUT type parameter for Converter of type " + (getClass().getName())));^29^30^31^^^26^33^if  ( types == null || types.length < 2 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P16_Remove_Block]^^29^30^31^^^26^33^if  ( types == null || types.length < 2 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P13_Insert_Block]^if  (  ( types == null )  ||  (  ( types.length )  < 2 )  )  {     throw new IllegalStateException (  ( "Can not find OUT type parameter for Converter of type " +  ( getClass (  ) .getName (  )  )  )  ) ; }^30^^^^^26^33^[Delete]^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P8_Replace_Mix]^return ;^30^^^^^26^33^throw new IllegalStateException  (" ")  ;^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P14_Delete_Statement]^^30^^^^^26^33^throw new IllegalStateException  (" ")  ;^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P3_Replace_Literal]^return types[-1];^32^^^^^26^33^return types[0];^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P8_Replace_Mix]^return types[3];^32^^^^^26^33^return types[0];^[CLASS] StdConverter  [METHOD] getInputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P14_Delete_Statement]^^38^^^^^36^43^JavaType[] types = typeFactory.findTypeParameters ( getClass (  ) , Converter.class ) ;^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P2_Replace_Operator]^if  ( types == null && types.length < 2 )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P2_Replace_Operator]^if  ( types != null || types.length < 2 )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P2_Replace_Operator]^if  ( types == null || types.length > 2 )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P3_Replace_Literal]^if  ( types == null || types.length < 1 )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P6_Replace_Expression]^if  ( types == null ) {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P6_Replace_Expression]^if  (  types.length < 2 )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P6_Replace_Expression]^if  ( "Can not find OUT type parameter for Converter of type " + getClass (  ) .getName (  ) )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P8_Replace_Mix]^if  ( types == true || types.length < 2 )  {^39^^^^^36^43^if  ( types == null || types.length < 2 )  {^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P15_Unwrap_Block]^throw new java.lang.IllegalStateException(("Can not find OUT type parameter for Converter of type " + (getClass().getName())));^39^40^41^^^36^43^if  ( types == null || types.length < 2 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P16_Remove_Block]^^39^40^41^^^36^43^if  ( types == null || types.length < 2 )  { throw new IllegalStateException  (" ")  ; }^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P13_Insert_Block]^if  (  ( types == null )  ||  (  ( types.length )  < 2 )  )  {     throw new IllegalStateException (  ( "Can not find OUT type parameter for Converter of type " +  ( getClass (  ) .getName (  )  )  )  ) ; }^40^^^^^36^43^[Delete]^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P8_Replace_Mix]^return false;^40^^^^^36^43^throw new IllegalStateException  (" ")  ;^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P14_Delete_Statement]^^40^^^^^36^43^throw new IllegalStateException  (" ")  ;^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P3_Replace_Literal]^return types[0];^42^^^^^36^43^return types[1];^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
[P8_Replace_Mix]^return types[1 * 3];^42^^^^^36^43^return types[1];^[CLASS] StdConverter  [METHOD] getOutputType [RETURN_TYPE] JavaType   TypeFactory typeFactory [VARIABLES] boolean  JavaType[]  types  TypeFactory  typeFactory  
