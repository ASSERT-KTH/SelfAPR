[P5_Replace_Variable]^return deserializeIfNatural (  ctxt, baseType.getRawClass (  )  ) ;^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P5_Replace_Variable]^return deserializeIfNatural ( jp,  baseType.getRawClass (  )  ) ;^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P5_Replace_Variable]^return deserializeIfNatural ( jp, ctxt.getRawClass (  )  ) ;^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P5_Replace_Variable]^return deserializeIfNatural ( ctxt, jp, baseType.getRawClass (  )  ) ;^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P5_Replace_Variable]^return deserializeIfNatural ( jp, baseType, ctxt.getRawClass (  )  ) ;^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P5_Replace_Variable]^return deserializeIfNatural ( baseType, ctxt, jp.getRawClass (  )  ) ;^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P14_Delete_Statement]^^150^^^^^146^151^return deserializeIfNatural ( jp, ctxt, baseType.getRawClass (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt JavaType baseType [VARIABLES] JavaType  baseType  boolean  DeserializationContext  ctxt  JsonParser  jp  
[P7_Replace_Invocation]^JsonToken t = jp .getText (  )  ;^158^^^^^143^173^JsonToken t = jp.getCurrentToken (  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P14_Delete_Statement]^^158^^^^^143^173^JsonToken t = jp.getCurrentToken (  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P2_Replace_Operator]^if  ( t != null )  {^159^^^^^144^174^if  ( t == null )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^if  ( t == true )  {^159^^^^^144^174^if  ( t == null )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P15_Unwrap_Block]^return null;^159^160^161^^^144^174^if  ( t == null )  { return null; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P16_Remove_Block]^^159^160^161^^^144^174^if  ( t == null )  { return null; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^return true;^160^^^^^145^175^return null;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^return false;^160^^^^^145^175^return null;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^if  ( base.isAssignableFrom ( String.base )  )  {^164^^^^^149^179^if  ( base.isAssignableFrom ( String.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Double.class )  )  {^164^^^^^149^179^if  ( base.isAssignableFrom ( String.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Boolean.class )  )  {^164^^^^^149^179^if  ( base.isAssignableFrom ( String.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Integer.class )  )  {^164^^^^^149^179^if  ( base.isAssignableFrom ( String.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P15_Unwrap_Block]^return jp.getText();^164^165^166^^^149^179^if  ( base.isAssignableFrom ( String.class )  )  { return jp.getText (  ) ; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P16_Remove_Block]^^164^165^166^^^149^179^if  ( base.isAssignableFrom ( String.class )  )  { return jp.getText (  ) ; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return TRUE; }^164^^^^^149^179^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return FALSE; }^164^^^^^149^179^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return valueOf ( jp.getDoubleValue (  )  ) ; }^164^^^^^149^179^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getIntValue (  ) ; }^164^^^^^149^179^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P7_Replace_Invocation]^return jp .getIntValue (  )  ;^165^^^^^150^180^return jp.getText (  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P14_Delete_Statement]^^165^^^^^150^180^return jp.getText (  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P5_Replace_Variable]^if  ( base.isAssignableFrom ( Integer.base )  )  {^169^^^^^154^184^if  ( base.isAssignableFrom ( Integer.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Double.class )  )  {^169^^^^^154^184^if  ( base.isAssignableFrom ( Integer.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Boolean.class )  )  {^169^^^^^154^184^if  ( base.isAssignableFrom ( Integer.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( String.class )  )  {^169^^^^^154^184^if  ( base.isAssignableFrom ( Integer.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P15_Unwrap_Block]^return jp.getIntValue();^169^170^171^^^154^184^if  ( base.isAssignableFrom ( Integer.class )  )  { return jp.getIntValue (  ) ; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P16_Remove_Block]^^169^170^171^^^154^184^if  ( base.isAssignableFrom ( Integer.class )  )  { return jp.getIntValue (  ) ; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getText (  ) ; }^169^^^^^154^184^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return TRUE; }^169^^^^^154^184^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return FALSE; }^169^^^^^154^184^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return valueOf ( jp.getDoubleValue (  )  ) ; }^169^^^^^154^184^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^return jp .getDoubleValue (  )  ;^170^^^^^155^185^return jp.getIntValue (  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P14_Delete_Statement]^^170^^^^^155^185^return jp.getIntValue (  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P5_Replace_Variable]^if  ( base.isAssignableFrom ( Double.base )  )  {^175^^^^^160^190^if  ( base.isAssignableFrom ( Double.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Boolean.class )  )  {^175^^^^^160^190^if  ( base.isAssignableFrom ( Double.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Integer.class )  )  {^175^^^^^160^190^if  ( base.isAssignableFrom ( Double.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( String.class )  )  {^175^^^^^160^190^if  ( base.isAssignableFrom ( Double.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P15_Unwrap_Block]^return java.lang.Double.valueOf(jp.getDoubleValue());^175^176^177^^^160^190^if  ( base.isAssignableFrom ( Double.class )  )  { return Double.valueOf ( jp.getDoubleValue (  )  ) ; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P16_Remove_Block]^^175^176^177^^^160^190^if  ( base.isAssignableFrom ( Double.class )  )  { return Double.valueOf ( jp.getDoubleValue (  )  ) ; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getText (  ) ; }^175^^^^^160^190^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return TRUE; }^175^^^^^160^190^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return FALSE; }^175^^^^^160^190^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getIntValue (  ) ; }^175^^^^^160^190^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P7_Replace_Invocation]^return Double.valueOf ( jp .getIntValue (  )   ) ;^176^^^^^161^191^return Double.valueOf ( jp.getDoubleValue (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P14_Delete_Statement]^^176^^^^^161^191^return Double.valueOf ( jp.getDoubleValue (  )  ) ;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Double.class )  )  {^180^^^^^165^195^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Integer.class )  )  {^180^^^^^165^195^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( String.class )  )  {^180^^^^^165^195^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P15_Unwrap_Block]^return java.lang.Boolean.TRUE;^180^181^182^^^165^195^if  ( base.isAssignableFrom ( Boolean.class )  )  { return Boolean.TRUE; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P16_Remove_Block]^^180^181^182^^^165^195^if  ( base.isAssignableFrom ( Boolean.class )  )  { return Boolean.TRUE; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getText (  ) ; }^180^^^^^165^195^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return FALSE; }^180^^^^^165^195^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return valueOf ( jp.getDoubleValue (  )  ) ; }^180^^^^^165^195^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getIntValue (  ) ; }^180^^^^^165^195^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^if  ( base.isAssignableFrom ( Boolean.base )  )  {^185^^^^^170^200^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Double.class )  )  {^185^^^^^170^200^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( Integer.class )  )  {^185^^^^^170^200^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P9_Replace_Statement]^if  ( base.isAssignableFrom ( String.class )  )  {^185^^^^^170^200^if  ( base.isAssignableFrom ( Boolean.class )  )  {^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P15_Unwrap_Block]^return java.lang.Boolean.FALSE;^185^186^187^^^170^200^if  ( base.isAssignableFrom ( Boolean.class )  )  { return Boolean.FALSE; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P16_Remove_Block]^^185^186^187^^^170^200^if  ( base.isAssignableFrom ( Boolean.class )  )  { return Boolean.FALSE; }^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getText (  ) ; }^185^^^^^170^200^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return TRUE; }^185^^^^^170^200^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return valueOf ( jp.getDoubleValue (  )  ) ; }^185^^^^^170^200^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getIntValue (  ) ; }^185^^^^^170^200^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getText (  ) ; }^164^^^^^149^179^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return jp.getIntValue (  ) ; }^169^^^^^154^184^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return TRUE; }^180^^^^^165^195^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P13_Insert_Block]^if  ( base.isAssignableFrom ( class )  )  {     return FALSE; }^185^^^^^170^200^[Delete]^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
[P8_Replace_Mix]^return true;^190^^^^^175^205^return null;^[CLASS] TypeDeserializer  [METHOD] deserializeIfNatural [RETURN_TYPE] Object   JsonParser jp DeserializationContext ctxt Class<?> base [VARIABLES] boolean  DeserializationContext  ctxt  Class  base  JsonToken  t  JsonParser  jp  
