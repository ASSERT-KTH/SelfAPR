[P1_Replace_Type]^char name = am.getName (  ) ;^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P7_Replace_Invocation]^String name = am.getRawParameterType (  ) ;^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^String pname = pkg.getName (  ) ;String name = am.getName (  ) ;^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^String name = okNameForMutator ( am, "set" ) ;String name = am.getName (  ) ;^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^Class<?> rt = am.getRawType (  ) ;String name = am.getName (  ) ;^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P7_Replace_Invocation]^String name = am .getRawType (  )  ;^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P14_Delete_Statement]^^19^^^^^17^25^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P1_Replace_Type]^char str = okNameForIsGetter ( am, name ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^String str = okNameForIsGetter (  name ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^String str = okNameForIsGetter ( am ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^String str = okNameForIsGetter ( name, am ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P7_Replace_Invocation]^String str = okNameForMutator ( am, name ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^String name = okNameForMutator ( am, "set" ) ;String str = okNameForIsGetter ( am, name ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^String str = okNameForIsGetter ( am, str ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P8_Replace_Mix]^String str = okNameForMutator ( am, str ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P14_Delete_Statement]^^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^str = okNameForRegularGetter ( am, name ) ;String str = okNameForIsGetter ( am, name ) ;^20^^^^^17^25^String str = okNameForIsGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P2_Replace_Operator]^if  ( str != null )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^if  ( name == null )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P8_Replace_Mix]^if  ( str == true )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P9_Replace_Statement]^if  ( pkg != null )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P9_Replace_Statement]^if  ( sb == null )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P9_Replace_Statement]^if  ( len == 0 )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P9_Replace_Statement]^if  ( name != null )  {^21^^^^^17^25^if  ( str == null )  {^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P15_Unwrap_Block]^str = com.fasterxml.jackson.databind.util.BeanUtil.okNameForRegularGetter(am, name);^21^22^23^^^17^25^if  ( str == null )  { str = okNameForRegularGetter ( am, name ) ; }^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P16_Remove_Block]^^21^22^23^^^17^25^if  ( str == null )  { str = okNameForRegularGetter ( am, name ) ; }^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( "getMetaClass".equals ( name )  )  {     if  ( isGroovyMetaClassGetter ( am )  )  {         return null;     } }^21^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( name.startsWith ( prefix )  )  {     return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ; }^21^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^21^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^str = okNameForRegularGetter ( am, str ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^str = okNameForRegularGetter (  name ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^str = okNameForRegularGetter ( am ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P5_Replace_Variable]^str = okNameForRegularGetter ( name, am ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P7_Replace_Invocation]^str = okNameForIsGetter ( am, name ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P8_Replace_Mix]^str =  okNnulleForRegularGetter ( null, nnulle ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^22^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( isGroovyMetaClassGetter ( am )  )  {     return null; }^22^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( isGroovyMetaClassSetter ( am )  )  {     return null; }^22^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P13_Insert_Block]^if  ( str == null )  {     str = okNameForRegularGetter ( am, name ) ; }^22^^^^^17^25^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P14_Delete_Statement]^^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^String name = okNameForMutator ( am, "set" ) ;str = okNameForRegularGetter ( am, name ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P11_Insert_Donor_Statement]^String str = okNameForIsGetter ( am, name ) ;str = okNameForRegularGetter ( am, name ) ;^22^^^^^17^25^str = okNameForRegularGetter ( am, name ) ;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P8_Replace_Mix]^return name;^24^^^^^17^25^return str;^[CLASS] BeanUtil  [METHOD] okNameForGetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  str  
[P3_Replace_Literal]^if  ( name.startsWith ( "e" )  )  {^29^^^^^27^52^if  ( name.startsWith ( "get" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P9_Replace_Statement]^if  ( name.startsWith ( "is" )  )  {^29^^^^^27^52^if  ( name.startsWith ( "get" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P9_Replace_Statement]^if  ( name.startsWith ( prefix )  )  {^29^^^^^27^52^if  ( name.startsWith ( "get" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "getCaletCallbacks".equals ( name )  )  {^37^^^^^27^52^if  ( "getCallbacks".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^if  ( "getCallbacks" .startsWith ( name )   )  {^37^^^^^27^52^if  ( "getCallbacks".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P15_Unwrap_Block]^if (com.fasterxml.jackson.databind.util.BeanUtil.isCglibGetCallbacks(am)) {    return null;};^37^38^39^40^^27^52^if  ( "getCallbacks".equals ( name )  )  { if  ( isCglibGetCallbacks ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P16_Remove_Block]^^37^38^39^40^^27^52^if  ( "getCallbacks".equals ( name )  )  { if  ( isCglibGetCallbacks ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "getMetaClassas".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P6_Replace_Expression]^} else {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^41^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( name != null )  {     if  ( "metaClass".equals ( name )  )  {         if  ( isGroovyMetaClassSetter ( am )  )  {             return null;         }     }     return name; }^41^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^41^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassGetter ( am )  )  {     return null; }^41^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassSetter ( am )  )  {     return null; }^41^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( str == null )  {     str = okNameForRegularGetter ( am, name ) ; }^41^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^if  ( isGroovyMetaClassSetter ( am )  )  {^45^^^^^27^52^if  ( isGroovyMetaClassGetter ( am )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P15_Unwrap_Block]^return null;^45^46^47^^^27^52^if  ( isGroovyMetaClassGetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P16_Remove_Block]^^45^46^47^^^27^52^if  ( isGroovyMetaClassGetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^45^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "getMetaClass".equals ( name )  )  {     if  ( isGroovyMetaClassGetter ( am )  )  {         return null;     } }^45^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^45^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassSetter ( am )  )  {     return null; }^45^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return true;^46^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassGetter ( am )  )  {     return null; }^45^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( str == null )  {     str = okNameForRegularGetter ( am, name ) ; }^45^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return false;^46^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return this;^46^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "getMetaClassgetMeta".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^if  ( isGroovyMetaClassGetter ( am )  )  {^38^^^^^27^52^if  ( isCglibGetCallbacks ( am )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P15_Unwrap_Block]^return null;^38^39^40^^^27^52^if  ( isCglibGetCallbacks ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P16_Remove_Block]^^38^39^40^^^27^52^if  ( isCglibGetCallbacks ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "getMetaClass".equals ( name )  )  {     if  ( isGroovyMetaClassGetter ( am )  )  {         return null;     } }^38^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^38^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassGetter ( am )  )  {     return null; }^38^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassSetter ( am )  )  {     return null; }^38^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return false;^39^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return this;^39^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^38^^^^^27^52^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "getMetaClassgetMetaCl".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^} else if  ( "getMetaClass" .startsWith ( name )   )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^}  if  ( "getMetaClass".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return true;^39^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( -2 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^return okNameForMutator ( name.substring ( 3 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return okNameForMutator ( name.substring ( 4 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "etCallbacks".equals ( name )  )  {^37^^^^^27^52^if  ( "getCallbacks".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "getMetaClassl".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 1 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return manglePropertyName ( name .startsWith ( name )   ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P14_Delete_Statement]^^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( this )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "Call".equals ( name )  )  {^37^^^^^27^52^if  ( "getCallbacks".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "Cl".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "e".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 8 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( name.startsWith ( "g" )  )  {^29^^^^^27^52^if  ( name.startsWith ( "get" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "CallbacketCallbacks".equals ( name )  )  {^37^^^^^27^52^if  ( "getCallbacks".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^} else if  ( "tMeetMetaClass".equals ( name )  )  {^41^^^^^27^52^} else if  ( "getMetaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( -5 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 2 )  ) ;^49^^^^^27^52^return manglePropertyName ( name.substring ( 3 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return false;^51^^^^^27^52^return null;^[CLASS] BeanUtil  [METHOD] okNameForRegularGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P6_Replace_Expression]^if  ( rt != class )  {^56^^^^^54^66^if  ( name.startsWith ( "is" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P6_Replace_Expression]^if  ( rt != TYPE )  {^56^^^^^54^66^if  ( name.startsWith ( "is" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P9_Replace_Statement]^if  ( name.startsWith ( "get" )  )  {^56^^^^^54^66^if  ( name.startsWith ( "is" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P9_Replace_Statement]^if  ( name.startsWith ( prefix )  )  {^56^^^^^54^66^if  ( name.startsWith ( "is" )  )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P15_Unwrap_Block]^java.lang.Class<?> rt = am.getRawType(); if ((rt != (java.lang.Boolean.class)) && (rt != (java.lang.Boolean.TYPE))) {    return null;}; return com.fasterxml.jackson.databind.util.BeanUtil.manglePropertyName(name.substring(2));^56^57^58^59^60^54^66^if  ( name.startsWith ( "is" )  )  {  Class<?> rt = am.getRawType (  ) ; if  ( rt != Boolean.class && rt != Boolean.TYPE )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P16_Remove_Block]^^56^57^58^59^60^54^66^if  ( name.startsWith ( "is" )  )  {  Class<?> rt = am.getRawType (  ) ; if  ( rt != Boolean.class && rt != Boolean.TYPE )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P2_Replace_Operator]^if  ( rt != Boolean.class || rt != Boolean.TYPE )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P2_Replace_Operator]^if  ( rt > Boolean.class && rt != Boolean.TYPE )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P2_Replace_Operator]^if  ( rt == Boolean.class && rt != Boolean.TYPE )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P6_Replace_Expression]^if  ( rt != Boolean.class ) {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P6_Replace_Expression]^if  (  rt != Boolean.TYPE )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P6_Replace_Expression]^if  ( rt != class )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P6_Replace_Expression]^if  ( rt != TYPE )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P15_Unwrap_Block]^return null;^59^60^61^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P16_Remove_Block]^^59^60^61^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P8_Replace_Mix]^return true;^60^^^^^54^66^return null;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P8_Replace_Mix]^return false;^60^^^^^54^66^return null;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 4 )  ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P7_Replace_Invocation]^return okNameForMutator ( name.substring ( 2 )  ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P7_Replace_Invocation]^return manglePropertyName ( name .startsWith ( name )   ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P7_Replace_Invocation]^Class<?> rt = am.getRawParameterType (  ) ;^58^^^^^54^66^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P11_Insert_Donor_Statement]^Class<?> compType = rt.getComponentType (  ) ;Class<?> rt = am.getRawType (  ) ;^58^^^^^54^66^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P11_Insert_Donor_Statement]^Class<?> argType = am.getRawParameterType ( 0 ) ;Class<?> rt = am.getRawType (  ) ;^58^^^^^54^66^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P11_Insert_Donor_Statement]^String name = am.getName (  ) ;Class<?> rt = am.getRawType (  ) ;^58^^^^^54^66^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P14_Delete_Statement]^^58^^^^^54^66^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring (  )  ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P14_Delete_Statement]^^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 7 )  ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P2_Replace_Operator]^if  ( rt >= Boolean.class && rt != Boolean.TYPE )  {^59^^^^^54^66^if  ( rt != Boolean.class && rt != Boolean.TYPE )  {^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 5 )  ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( 3 )  ) ;^62^^^^^54^66^return manglePropertyName ( name.substring ( 2 )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P8_Replace_Mix]^return false;^65^^^^^54^66^return null;^[CLASS] BeanUtil  [METHOD] okNameForIsGetter [RETURN_TYPE] String   AnnotatedMethod am String name [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  String  name  
[P1_Replace_Type]^char name = okNameForMutator ( am, "set" ) ;^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^String name = okNameForMutator ( am, "sete" ) ;^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^String name = okNameForIsGetter ( am, "set" ) ;^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P11_Insert_Donor_Statement]^String str = okNameForIsGetter ( am, name ) ;String name = okNameForMutator ( am, "set" ) ;^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P11_Insert_Donor_Statement]^String name = am.getName (  ) ;String name = okNameForMutator ( am, "set" ) ;^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P14_Delete_Statement]^^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P11_Insert_Donor_Statement]^str = okNameForRegularGetter ( am, name ) ;String name = okNameForMutator ( am, "set" ) ;^70^^^^^68^81^String name = okNameForMutator ( am, "set" ) ;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P2_Replace_Operator]^if  ( name == null )  {^71^^^^^68^81^if  ( name != null )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^if  ( name != this )  {^71^^^^^68^81^if  ( name != null )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P9_Replace_Statement]^if  ( pkg != null )  {^71^^^^^68^81^if  ( name != null )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P9_Replace_Statement]^if  ( sb == null )  {^71^^^^^68^81^if  ( name != null )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P9_Replace_Statement]^if  ( str == null )  {^71^^^^^68^81^if  ( name != null )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P15_Unwrap_Block]^if ("metaClass".equals(name)) {    if (com.fasterxml.jackson.databind.util.BeanUtil.isGroovyMetaClassSetter(am)) {        return null;    }}; return name;^71^72^73^74^75^68^81^if  ( name != null )  {  if  ( "metaClass".equals ( name )  )  { if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P16_Remove_Block]^^71^72^73^74^75^68^81^if  ( name != null )  {  if  ( "metaClass".equals ( name )  )  { if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "getMetaClass".equals ( name )  )  {     if  ( isGroovyMetaClassGetter ( am )  )  {         return null;     } }^71^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^71^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "getCallbacks".equals ( name )  )  {     if  ( isCglibGetCallbacks ( am )  )  {         return null;     } }else     if  ( "getMetaClass".equals ( name )  )  {         if  ( isGroovyMetaClassGetter ( am )  )  {             return null;         }     }^71^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "metaCetaClass".equals ( name )  )  {^73^^^^^68^81^if  ( "metaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^if  ( "metaClass" .startsWith ( name )   )  {^73^^^^^68^81^if  ( "metaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P9_Replace_Statement]^if  ( "getCallbacks".equals ( name )  )  {^73^^^^^68^81^if  ( "metaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P15_Unwrap_Block]^if (com.fasterxml.jackson.databind.util.BeanUtil.isGroovyMetaClassSetter(am)) {    return null;};^73^74^75^76^^68^81^if  ( "metaClass".equals ( name )  )  { if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P16_Remove_Block]^^73^74^75^76^^68^81^if  ( "metaClass".equals ( name )  )  { if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^73^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "getMetaClass".equals ( name )  )  {     if  ( isGroovyMetaClassGetter ( am )  )  {         return null;     } }^73^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( name != null )  {     if  ( "metaClass".equals ( name )  )  {         if  ( isGroovyMetaClassSetter ( am )  )  {             return null;         }     }     return name; }^73^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassGetter ( am )  )  {     return null; }^73^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassSetter ( am )  )  {     return null; }^73^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( str == null )  {     str = okNameForRegularGetter ( am, name ) ; }^73^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P7_Replace_Invocation]^if  ( isGroovyMetaClassGetter ( am )  )  {^74^^^^^68^81^if  ( isGroovyMetaClassSetter ( am )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P15_Unwrap_Block]^return null;^74^75^76^^^68^81^if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P16_Remove_Block]^^74^75^76^^^68^81^if  ( isGroovyMetaClassSetter ( am )  )  { return null; }^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^74^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "getMetaClass".equals ( name )  )  {     if  ( isGroovyMetaClassGetter ( am )  )  {         return null;     } }^74^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( "metaClass".equals ( name )  )  {     if  ( isGroovyMetaClassSetter ( am )  )  {         return null;     } }^74^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassGetter ( am )  )  {     return null; }^74^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return false;^75^^^^^68^81^return null;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return this;^75^^^^^68^81^return null;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( isGroovyMetaClassSetter ( am )  )  {     return null; }^74^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P13_Insert_Block]^if  ( str == null )  {     str = okNameForRegularGetter ( am, name ) ; }^74^^^^^68^81^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return true;^75^^^^^68^81^return null;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "CetaClass".equals ( name )  )  {^73^^^^^68^81^if  ( "metaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "taCla".equals ( name )  )  {^73^^^^^68^81^if  ( "metaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P3_Replace_Literal]^if  ( "metaClasstaC".equals ( name )  )  {^73^^^^^68^81^if  ( "metaClass".equals ( name )  )  {^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P8_Replace_Mix]^return false;^80^^^^^68^81^return null;^[CLASS] BeanUtil  [METHOD] okNameForSetter [RETURN_TYPE] String   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  String  name  
[P1_Replace_Type]^char name = am.getName (  ) ;^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^String name = am.getRawParameterType (  ) ;^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P8_Replace_Mix]^String name = am .getRawType (  )  ;^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P11_Insert_Donor_Statement]^String pname = pkg.getName (  ) ;String name = am.getName (  ) ;^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P11_Insert_Donor_Statement]^String name = okNameForMutator ( am, "set" ) ;String name = am.getName (  ) ;^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P11_Insert_Donor_Statement]^Class<?> rt = am.getRawType (  ) ;String name = am.getName (  ) ;^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P14_Delete_Statement]^^85^^^^^83^90^String name = am.getName (  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P5_Replace_Variable]^if  ( prefix.startsWith ( name )  )  {^86^^^^^83^90^if  ( name.startsWith ( prefix )  )  {^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P8_Replace_Mix]^if  ( name .substring ( 2 )   )  {^86^^^^^83^90^if  ( name.startsWith ( prefix )  )  {^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P9_Replace_Statement]^if  ( name.startsWith ( "is" )  )  {^86^^^^^83^90^if  ( name.startsWith ( prefix )  )  {^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P9_Replace_Statement]^if  ( name.startsWith ( "get" )  )  {^86^^^^^83^90^if  ( name.startsWith ( prefix )  )  {^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P15_Unwrap_Block]^return com.fasterxml.jackson.databind.util.BeanUtil.manglePropertyName(name.substring(prefix.length()));^86^87^88^^^83^90^if  ( name.startsWith ( prefix )  )  { return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ; }^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P16_Remove_Block]^^86^87^88^^^83^90^if  ( name.startsWith ( prefix )  )  { return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ; }^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P13_Insert_Block]^if  ( str == null )  {     str = okNameForRegularGetter ( am, name ) ; }^86^^^^^83^90^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( prefix.length() + 2  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P5_Replace_Variable]^return manglePropertyName ( prefix.substring ( name.length (  )  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^return okNameForMutator ( name.substring ( prefix.length (  )  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^return manglePropertyName ( name.substring ( prefix.charAt (  )  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P13_Insert_Block]^if  ( isCglibGetCallbacks ( am )  )  {     return null; }^87^^^^^83^90^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P13_Insert_Block]^if  ( name.startsWith ( prefix )  )  {     return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ; }^87^^^^^83^90^[Delete]^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( prefix.length() + 7  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^return manglePropertyName ( name .startsWith ( name )   ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^return manglePropertyName ( name.substring ( prefix .startsWith ( name )   )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P14_Delete_Statement]^^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( prefix.length() - 6  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^return manglePropertyName ( name .startsWith ( prefix )   ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( prefix.length() - 3  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P8_Replace_Mix]^return manglePropertyName ( name.substring ( name.length (  )  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( prefix.length() + 0  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P8_Replace_Mix]^return manglePropertyName ( name.substring ( prefix .startsWith ( prefix )   )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P3_Replace_Literal]^return manglePropertyName ( name.substring ( prefix.length() - 1  )  ) ;^87^^^^^83^90^return manglePropertyName ( name.substring ( prefix.length (  )  )  ) ;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P8_Replace_Mix]^return true;^89^^^^^83^90^return null;^[CLASS] BeanUtil  [METHOD] okNameForMutator [RETURN_TYPE] String   AnnotatedMethod am String prefix [VARIABLES] boolean  AnnotatedMethod  am  String  name  prefix  
[P7_Replace_Invocation]^Class<?> rt = am.getRawParameterType (  ) ;^111^^^^^109^132^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^Class<?> compType = rt.getComponentType (  ) ;Class<?> rt = am.getRawType (  ) ;^111^^^^^109^132^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^Class<?> argType = am.getRawParameterType ( 0 ) ;Class<?> rt = am.getRawType (  ) ;^111^^^^^109^132^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^String name = am.getName (  ) ;Class<?> rt = am.getRawType (  ) ;^111^^^^^109^132^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P14_Delete_Statement]^^111^^^^^109^132^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P2_Replace_Operator]^if  ( rt == null && !rt.isArray (  )  )  {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P2_Replace_Operator]^if  ( rt != null || !rt.isArray (  )  )  {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P6_Replace_Expression]^if  ( rt == null ) {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P6_Replace_Expression]^if  (  !rt.isArray (  )  )  {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P8_Replace_Mix]^if  ( rt == this ) {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P9_Replace_Statement]^if  ( rt == null || rt.isArray (  )  )  {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P15_Unwrap_Block]^return false;^113^114^115^^^109^132^if  ( rt == null || !rt.isArray (  )  )  { return false; }^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P16_Remove_Block]^^113^114^115^^^109^132^if  ( rt == null || !rt.isArray (  )  )  { return false; }^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P13_Insert_Block]^if  (  ( rt == null )  ||  ( rt.isArray (  )  )  )  {     return false; }^113^^^^^109^132^[Delete]^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^return true;^114^^^^^109^132^return false;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P7_Replace_Invocation]^if  ( rt == null || !rt .getPackage (  )   )  {^113^^^^^109^132^if  ( rt == null || !rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P7_Replace_Invocation]^Class<?> compType = rt .getPackage (  )  ;^120^^^^^109^132^Class<?> compType = rt.getComponentType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^Class<?> argType = am.getRawParameterType ( 0 ) ;Class<?> compType = rt.getComponentType (  ) ;^120^^^^^109^132^Class<?> compType = rt.getComponentType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^Class<?> rt = am.getRawType (  ) ;Class<?> compType = rt.getComponentType (  ) ;^120^^^^^109^132^Class<?> compType = rt.getComponentType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P14_Delete_Statement]^^120^^^^^109^132^Class<?> compType = rt.getComponentType (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P7_Replace_Invocation]^Package pkg = compType .getComponentType (  )  ;^122^^^^^109^132^Package pkg = compType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^Package pkg = argType.getPackage (  ) ;Package pkg = compType.getPackage (  ) ;^122^^^^^109^132^Package pkg = compType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^Package pkg = rt.getPackage (  ) ;Package pkg = compType.getPackage (  ) ;^122^^^^^109^132^Package pkg = compType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P14_Delete_Statement]^^122^^^^^109^132^Package pkg = compType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P2_Replace_Operator]^if  ( pkg == null )  {^123^^^^^109^132^if  ( pkg != null )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P6_Replace_Expression]^if  ( cglib") || cglib") )  {^123^^^^^109^132^if  ( pkg != null )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P8_Replace_Mix]^if  ( pkg != this )  {^123^^^^^109^132^if  ( pkg != null )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P9_Replace_Statement]^if  ( sb == null )  {^123^^^^^109^132^if  ( pkg != null )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P9_Replace_Statement]^if  ( str == null )  {^123^^^^^109^132^if  ( pkg != null )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P9_Replace_Statement]^if  ( name != null )  {^123^^^^^109^132^if  ( pkg != null )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P13_Insert_Block]^if  (  ( pname.startsWith ( cglib" )  )  ||  ( pname.startsWith ( cglib" )  )  )  {     return true; }^123^^^^^109^132^[Delete]^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P2_Replace_Operator]^if  ( pname.startsWith ( "net.sf.cglib" )  && pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^if  ( pname.startsWith ( "net.sf.cglibgl" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "or" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P6_Replace_Expression]^if  ( pname.startsWith ( "net.sf.cglib" )  ) {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P6_Replace_Expression]^if  (  pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P15_Unwrap_Block]^return true;^125^126^127^128^129^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  { return true; }^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P16_Remove_Block]^^125^126^127^128^129^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  { return true; }^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P13_Insert_Block]^if  ( pkg != null )  {     String pname = pkg.getName (  ) ;     if  (  ( pname.startsWith ( cglib" )  )  ||  ( pname.startsWith ( cglib" )  )  )  {         return true;     } }^125^^^^^109^132^[Delete]^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^return false;^128^^^^^109^132^return true;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P1_Replace_Type]^char pname = pkg.getName (  ) ;^124^^^^^109^132^String pname = pkg.getName (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P8_Replace_Mix]^String pname = pkg .getRawType (  )  ;^124^^^^^109^132^String pname = pkg.getName (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P11_Insert_Donor_Statement]^String name = am.getName (  ) ;String pname = pkg.getName (  ) ;^124^^^^^109^132^String pname = pkg.getName (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P14_Delete_Statement]^^124^^^^^109^132^String pname = pkg.getName (  ) ;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^if  ( pname.startsWith ( "net.sf.cglibnet." )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^|| pname.startsWith ( "org.hiberrg.hibernate.repackage.cglib" )  )  {^127^^^^^109^132^|| pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P14_Delete_Statement]^^127^128^^^^109^132^|| pname.startsWith ( "org.hibernate.repackage.cglib" )  )  { return true;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^if  ( pname.startsWith ( "f" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org." )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^if  ( pname.startsWith ( "net.sf.et.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^125^126^127^^^109^132^if  ( pname.startsWith ( "net.sf.cglib" )  || pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^|| pname.startsWith ( "org.hibernate.repackage.cglib." )  )  {^127^^^^^109^132^|| pname.startsWith ( "org.hibernate.repackage.cglib" )  )  {^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^return true;^131^^^^^109^132^return false;^[CLASS] BeanUtil  [METHOD] isCglibGetCallbacks [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  compType  rt  Package  pkg  String  pname  
[P3_Replace_Literal]^Class<?> argType = am.getRawParameterType ( 2 ) ;^140^^^^^138^146^Class<?> argType = am.getRawParameterType ( 0 ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P7_Replace_Invocation]^Class<?> argType = am .getRawType (  )  ;^140^^^^^138^146^Class<?> argType = am.getRawParameterType ( 0 ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P11_Insert_Donor_Statement]^Class<?> compType = rt.getComponentType (  ) ;Class<?> argType = am.getRawParameterType ( 0 ) ;^140^^^^^138^146^Class<?> argType = am.getRawParameterType ( 0 ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P11_Insert_Donor_Statement]^Class<?> rt = am.getRawType (  ) ;Class<?> argType = am.getRawParameterType ( 0 ) ;^140^^^^^138^146^Class<?> argType = am.getRawParameterType ( 0 ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P3_Replace_Literal]^Class<?> argType = am.getRawParameterType ( -5 ) ;^140^^^^^138^146^Class<?> argType = am.getRawParameterType ( 0 ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P14_Delete_Statement]^^140^^^^^138^146^Class<?> argType = am.getRawParameterType ( 0 ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P11_Insert_Donor_Statement]^Package pkg = compType.getPackage (  ) ;Package pkg = argType.getPackage (  ) ;^141^^^^^138^146^Package pkg = argType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P11_Insert_Donor_Statement]^Package pkg = rt.getPackage (  ) ;Package pkg = argType.getPackage (  ) ;^141^^^^^138^146^Package pkg = argType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P14_Delete_Statement]^^141^^^^^138^146^Package pkg = argType.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P2_Replace_Operator]^if  ( pkg != null || pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P2_Replace_Operator]^if  ( pkg == null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P3_Replace_Literal]^if  ( pkg != null && pkg.getName (  ) .startsWith ( "roovy.roovy.lang" )  )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P6_Replace_Expression]^if  ( pkg != null ) {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P6_Replace_Expression]^if  (  pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P7_Replace_Invocation]^if  ( pkg != null && pkg .getRawType (  )  .startsWith ( "groovy.lang" )  )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P8_Replace_Mix]^if  ( pkg != true ) {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P15_Unwrap_Block]^return true;^142^143^144^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  { return true; }^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P16_Remove_Block]^^142^143^144^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  { return true; }^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P3_Replace_Literal]^return false;^143^^^^^138^146^return true;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P3_Replace_Literal]^if  ( pkg != null && pkg.getName (  ) .startsWith ( "roovy.laroovy.lang" )  )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P8_Replace_Mix]^if  ( pkg != null && pkg.getName (  )  .substring ( this )   )  {^142^^^^^138^146^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P3_Replace_Literal]^return true;^145^^^^^138^146^return false;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassSetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  argType  Package  pkg  
[P7_Replace_Invocation]^Class<?> rt = am.getRawParameterType (  ) ;^153^^^^^151^162^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P11_Insert_Donor_Statement]^Class<?> compType = rt.getComponentType (  ) ;Class<?> rt = am.getRawType (  ) ;^153^^^^^151^162^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P11_Insert_Donor_Statement]^Class<?> argType = am.getRawParameterType ( 0 ) ;Class<?> rt = am.getRawType (  ) ;^153^^^^^151^162^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P11_Insert_Donor_Statement]^String name = am.getName (  ) ;Class<?> rt = am.getRawType (  ) ;^153^^^^^151^162^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P14_Delete_Statement]^^153^^^^^151^162^Class<?> rt = am.getRawType (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P2_Replace_Operator]^if  ( rt == null && rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P2_Replace_Operator]^if  ( rt != null || rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P5_Replace_Variable]^if  ( 3 == null || rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P6_Replace_Expression]^if  ( rt == null ) {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P6_Replace_Expression]^if  (  rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P7_Replace_Invocation]^if  ( rt == null || rt .getPackage (  )   )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P8_Replace_Mix]^if  ( rt == true || rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P9_Replace_Statement]^if  ( rt == null || !rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P15_Unwrap_Block]^return false;^154^155^156^^^151^162^if  ( rt == null || rt.isArray (  )  )  { return false; }^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P16_Remove_Block]^^154^155^156^^^151^162^if  ( rt == null || rt.isArray (  )  )  { return false; }^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P13_Insert_Block]^if  (  ( rt == null )  ||  ( ! ( rt.isArray (  )  )  )  )  {     return false; }^154^^^^^151^162^[Delete]^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P3_Replace_Literal]^return true;^155^^^^^151^162^return false;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P8_Replace_Mix]^if  ( null == null || rt.isArray (  )  )  {^154^^^^^151^162^if  ( rt == null || rt.isArray (  )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P7_Replace_Invocation]^Package pkg = rt .getComponentType (  )  ;^157^^^^^151^162^Package pkg = rt.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P11_Insert_Donor_Statement]^Package pkg = compType.getPackage (  ) ;Package pkg = rt.getPackage (  ) ;^157^^^^^151^162^Package pkg = rt.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P11_Insert_Donor_Statement]^Package pkg = argType.getPackage (  ) ;Package pkg = rt.getPackage (  ) ;^157^^^^^151^162^Package pkg = rt.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P14_Delete_Statement]^^157^^^^^151^162^Package pkg = rt.getPackage (  ) ;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P2_Replace_Operator]^if  ( pkg != null || pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P2_Replace_Operator]^if  ( pkg == null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P3_Replace_Literal]^if  ( pkg != null && pkg.getName (  ) .startsWith ( "rooroovy.lang" )  )  {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P6_Replace_Expression]^if  ( pkg != null ) {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P6_Replace_Expression]^if  (  pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P7_Replace_Invocation]^if  ( pkg != null && pkg .getRawType (  )  .startsWith ( "groovy.lang" )  )  {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P8_Replace_Mix]^if  ( pkg != false ) {^158^^^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  {^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P15_Unwrap_Block]^return true;^158^159^160^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  { return true; }^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P16_Remove_Block]^^158^159^160^^^151^162^if  ( pkg != null && pkg.getName (  ) .startsWith ( "groovy.lang" )  )  { return true; }^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P3_Replace_Literal]^return false;^159^^^^^151^162^return true;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P3_Replace_Literal]^return true;^161^^^^^151^162^return false;^[CLASS] BeanUtil  [METHOD] isGroovyMetaClassGetter [RETURN_TYPE] boolean   AnnotatedMethod am [VARIABLES] boolean  AnnotatedMethod  am  Class  rt  Package  pkg  
[P1_Replace_Type]^short  len = basename.length (  ) ;^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P3_Replace_Literal]^int len = basename.length() + 0 ;^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P7_Replace_Invocation]^int len = basename.charAt (  ) ;^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P11_Insert_Donor_Statement]^char upper = basename.charAt ( i ) ;int len = basename.length (  ) ;^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P3_Replace_Literal]^int len = basename.length() - 6 ;^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P7_Replace_Invocation]^int len = basename .startsWith ( basename )  ;^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P14_Delete_Statement]^^173^^^^^171^193^int len = basename.length (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P2_Replace_Operator]^if  ( len != 0 )  {^176^^^^^171^193^if  ( len == 0 )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P3_Replace_Literal]^if  ( len == 9 )  {^176^^^^^171^193^if  ( len == 0 )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^if  ( i == 0 )  {^176^^^^^171^193^if  ( len == 0 )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^if  ( len == 2 )  {^176^^^^^171^193^if  ( len == 0 )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P9_Replace_Statement]^if  ( sb == null )  {^176^^^^^171^193^if  ( len == 0 )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P9_Replace_Statement]^if  ( str == null )  {^176^^^^^171^193^if  ( len == 0 )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P15_Unwrap_Block]^return null;^176^177^178^^^171^193^if  ( len == 0 )  { return null; }^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P16_Remove_Block]^^176^177^178^^^171^193^if  ( len == 0 )  { return null; }^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^return true;^177^^^^^171^193^return null;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P2_Replace_Operator]^if  ( upper >= lower )  {^184^^^^^171^193^if  ( upper == lower )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^if  ( lower == upper )  {^184^^^^^171^193^if  ( upper == lower )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P15_Unwrap_Block]^break;^184^185^186^^^171^193^if  ( upper == lower )  { break; }^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P16_Remove_Block]^^184^185^186^^^171^193^if  ( upper == lower )  { break; }^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P2_Replace_Operator]^if  ( sb != null )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^if  ( sb == true )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P9_Replace_Statement]^if  ( pkg != null )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P9_Replace_Statement]^if  ( len == 0 )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P9_Replace_Statement]^if  ( str == null )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P9_Replace_Statement]^if  ( name != null )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P15_Unwrap_Block]^sb = new java.lang.StringBuilder(basename);^187^188^189^^^171^193^if  ( sb == null )  { sb = new StringBuilder ( basename ) ; }^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P16_Remove_Block]^^187^188^189^^^171^193^if  ( sb == null )  { sb = new StringBuilder ( basename ) ; }^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^sb =  new StringBuilder ( null ) ;^188^^^^^171^193^sb = new StringBuilder ( basename ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P13_Insert_Block]^if  ( sb == null )  {     sb = new StringBuilder ( basename ) ; }^188^^^^^171^193^[Delete]^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P1_Replace_Type]^for  (  short  i = 0; i < len; ++i )  {^181^^^^^171^193^for  ( int i = 0; i < len; ++i )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P2_Replace_Operator]^for  ( int i = 0; i <= len; ++i )  {^181^^^^^171^193^for  ( int i = 0; i < len; ++i )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P3_Replace_Literal]^for  ( int i = len; i < len; ++i )  {^181^^^^^171^193^for  ( int i = 0; i < len; ++i )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^for  ( lennt i = 0; i < len; ++i )  {^181^^^^^171^193^for  ( int i = 0; i < len; ++i )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^for  ( lennt i = 0; i < i; ++i )  {^181^^^^^171^193^for  ( int i = 0; i < len; ++i )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P2_Replace_Operator]^if  ( upper > lower )  {^184^^^^^171^193^if  ( upper == lower )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^if  ( sb == this )  {^187^^^^^171^193^if  ( sb == null )  {^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P1_Replace_Type]^int upper = basename.charAt ( i ) ;^182^^^^^171^193^char upper = basename.charAt ( i ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^char upper = i.charAt ( basename ) ;^182^^^^^171^193^char upper = basename.charAt ( i ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^char upper = basename.charAt ( len ) ;^182^^^^^171^193^char upper = basename.charAt ( i ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P11_Insert_Donor_Statement]^int len = basename.length (  ) ;char upper = basename.charAt ( i ) ;^182^^^^^171^193^char upper = basename.charAt ( i ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P1_Replace_Type]^int lower = Character.toLowerCase ( upper ) ;^183^^^^^171^193^char lower = Character.toLowerCase ( upper ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P14_Delete_Statement]^^182^^^^^171^193^char upper = basename.charAt ( i ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^char lower = Character.toLowerCase ( lower ) ;^183^^^^^171^193^char lower = Character.toLowerCase ( upper ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P14_Delete_Statement]^^183^^^^^171^193^char lower = Character.toLowerCase ( upper ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^sb.setCharAt ( len, lower ) ;^190^^^^^171^193^sb.setCharAt ( i, lower ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^sb.setCharAt ( i, upper ) ;^190^^^^^171^193^sb.setCharAt ( i, lower ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^sb.setCharAt (  lower ) ;^190^^^^^171^193^sb.setCharAt ( i, lower ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^sb.setCharAt ( i ) ;^190^^^^^171^193^sb.setCharAt ( i, lower ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^sb.setCharAt ( lower, i ) ;^190^^^^^171^193^sb.setCharAt ( i, lower ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P14_Delete_Statement]^^190^^^^^171^193^sb.setCharAt ( i, lower ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P1_Replace_Type]^String upper = basename.charAt ( i ) ;^182^^^^^171^193^char upper = basename.charAt ( i ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P1_Replace_Type]^String lower = Character.toLowerCase ( upper ) ;^183^^^^^171^193^char lower = Character.toLowerCase ( upper ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P14_Delete_Statement]^^182^183^^^^171^193^char upper = basename.charAt ( i ) ; char lower = Character.toLowerCase ( upper ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P1_Replace_Type]^return  ( sb == null )  ? basename : sb.tochar (  ) ;^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P2_Replace_Operator]^return  ( sb != null )  ? basename : sb.toString (  ) ;^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P5_Replace_Variable]^return  ( basename == null )  ? sb : sb.toString (  ) ;^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P6_Replace_Expression]^return  ( sb.toString (  ) ;^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P7_Replace_Invocation]^return  ( sb == null )  ? basename : sb.StringBuilder (  ) ;^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P8_Replace_Mix]^return  ( sb != null )  ? basename : sb.StringBuilder (  ) ;;^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
[P14_Delete_Statement]^^192^^^^^171^193^return  ( sb == null )  ? basename : sb.toString (  ) ;^[CLASS] BeanUtil  [METHOD] manglePropertyName [RETURN_TYPE] String   String basename [VARIABLES] boolean  StringBuilder  sb  char  lower  upper  String  basename  int  i  len  
