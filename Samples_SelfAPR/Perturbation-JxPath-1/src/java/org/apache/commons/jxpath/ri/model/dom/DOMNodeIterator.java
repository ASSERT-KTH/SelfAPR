[P8_Replace_Mix]^private Node child  = null ;^34^^^^^29^39^private Node child = null;^[CLASS] DOMNodeIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  position = 0;^36^^^^^31^41^private int position = 0;^[CLASS] DOMNodeIterator   [VARIABLES] 
[P3_Replace_Literal]^private int position = ;^36^^^^^31^41^private int position = 0;^[CLASS] DOMNodeIterator   [VARIABLES] 
[P8_Replace_Mix]^private int position = 4;^36^^^^^31^41^private int position = 0;^[CLASS] DOMNodeIterator   [VARIABLES] 
[P5_Replace_Variable]^this.parent = startWith;^44^^^^^38^51^this.parent = parent;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^this.nodeTest = nodeTest;this.parent = parent;^44^^^^^38^51^this.parent = parent;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^this.node =  ( Node )  startWith.getNode (  ) ;^45^^^^^38^51^this.node =  ( Node )  parent.getNode (  ) ;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^this.child =  ( Node )  startWith.getNode (  ) ;this.node =  ( Node )  parent.getNode (  ) ;^45^^^^^38^51^this.node =  ( Node )  parent.getNode (  ) ;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^45^^^^^38^51^this.node =  ( Node )  parent.getNode (  ) ;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( startWith == null )  {^46^^^^^38^51^if  ( startWith != null )  {^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^if  ( parent != null )  {^46^^^^^38^51^if  ( startWith != null )  {^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( startWith != true )  {^46^^^^^38^51^if  ( startWith != null )  {^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P9_Replace_Statement]^if  ( child == null )  {^46^^^^^38^51^if  ( startWith != null )  {^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^this.child = ((org.w3c.dom.Node) (startWith.getNode()));^46^47^48^^^38^51^if  ( startWith != null )  { this.child =  ( Node )  startWith.getNode (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^46^47^48^^^38^51^if  ( startWith != null )  { this.child =  ( Node )  startWith.getNode (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^this.child =  ( Node )  parent.getNode (  ) ;^47^^^^^38^51^this.child =  ( Node )  startWith.getNode (  ) ;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^this.node =  ( Node )  parent.getNode (  ) ;this.child =  ( Node )  startWith.getNode (  ) ;^47^^^^^38^51^this.child =  ( Node )  startWith.getNode (  ) ;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  ( startWith != null )  {     this.child =  (  ( Node )   ( startWith.getNode (  )  )  ) ; }^47^^^^^38^51^[Delete]^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^47^^^^^38^51^this.child =  ( Node )  startWith.getNode (  ) ;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^this.nodeTest =  null;^49^^^^^38^51^this.nodeTest = nodeTest;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^this.reverse = reverse;this.nodeTest = nodeTest;^49^^^^^38^51^this.nodeTest = nodeTest;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^this.parent = parent;this.nodeTest = nodeTest;^49^^^^^38^51^this.nodeTest = nodeTest;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^this.reverse =  null;^50^^^^^38^51^this.reverse = reverse;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^this.nodeTest = nodeTest;this.reverse = reverse;^50^^^^^38^51^this.reverse = reverse;^[CLASS] DOMNodeIterator  [METHOD] <init> [RETURN_TYPE] NodePointer)   NodePointer parent NodeTest nodeTest boolean reverse NodePointer startWith [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position != 0 )  {^54^^^^^53^61^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^if  ( position == -4 )  {^54^^^^^53^61^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( position == 0 % 2 )  {^54^^^^^53^61^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P9_Replace_Statement]^if  ( position == 1 )  {^54^^^^^53^61^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^setPosition(1);^54^55^56^^^53^61^if  ( position == 0 )  { setPosition ( 1 ) ; }^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^54^55^56^^^53^61^if  ( position == 0 )  { setPosition ( 1 ) ; }^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^setPosition ( position ) ;^55^^^^^53^61^setPosition ( 1 ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^55^^^^^53^61^setPosition ( 1 ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P12_Insert_Condition]^if  ( position == 0 )  { setPosition ( 1 ) ; }^55^^^^^53^61^setPosition ( 1 ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P12_Insert_Condition]^if  ( position == 1 )  { setPosition ( 1 ) ; }^55^^^^^53^61^setPosition ( 1 ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( child != null )  {^57^^^^^53^61^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^if  ( node == null )  {^57^^^^^53^61^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == this )  {^57^^^^^53^61^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^return null;^57^58^59^^^53^61^if  ( child == null )  { return null; }^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^57^58^59^^^53^61^if  ( child == null )  { return null; }^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  ( ! ( previous (  )  )  )  {     return false; }^57^^^^^53^61^[Delete]^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  ( ! ( next (  )  )  )  {     return false; }^57^^^^^53^61^[Delete]^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^return false;^58^^^^^53^61^return null;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^return true;^58^^^^^53^61^return null;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return new DOMNodePointer ( startWith, child ) ;^60^^^^^53^61^return new DOMNodePointer ( parent, child ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return new DOMNodePointer ( parent, node ) ;^60^^^^^53^61^return new DOMNodePointer ( parent, child ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return new DOMNodePointer (  child ) ;^60^^^^^53^61^return new DOMNodePointer ( parent, child ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return new DOMNodePointer ( parent ) ;^60^^^^^53^61^return new DOMNodePointer ( parent, child ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return new DOMNodePointer ( child, parent ) ;^60^^^^^53^61^return new DOMNodePointer ( parent, child ) ;^[CLASS] DOMNodeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( this.position == position )  {^68^^^^^67^79^while  ( this.position < position )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^while  ( position < this.position )  {^68^^^^^67^79^while  ( this.position < position )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^if  ( !testChild (  )  )  {^69^^^^^67^79^if  ( !next (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P9_Replace_Statement]^if  ( !previous (  )  )  {^69^^^^^67^79^if  ( !next (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^return false;^69^70^71^^^67^79^if  ( !next (  )  )  { return false; }^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^69^70^71^^^67^79^if  ( !next (  )  )  { return false; }^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  ( ! ( previous (  )  )  )  {     return false; }^69^^^^^67^79^[Delete]^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( child )  == null )  {     return null; }^69^^^^^67^79^[Delete]^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^return true;^70^^^^^67^79^return false;^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( this.position >= position )  {^73^^^^^67^79^while  ( this.position > position )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^while  ( position > this.position )  {^73^^^^^67^79^while  ( this.position > position )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^if  ( !next (  )  )  {^74^^^^^67^79^if  ( !previous (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^return false;^74^75^76^^^67^79^if  ( !previous (  )  )  { return false; }^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^74^75^76^^^67^79^if  ( !previous (  )  )  { return false; }^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( child )  == null )  {     return null; }^74^^^^^67^79^[Delete]^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  ( ! ( next (  )  )  )  {     return false; }^74^^^^^67^79^[Delete]^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^return true;^75^^^^^67^79^return false;^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^return false;^78^^^^^67^79^return true;^[CLASS] DOMNodeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child != null || !testChild (  )  )  {^93^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child == null && !testChild (  )  )  {^93^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^while  ( node != null && !testChild (  )  )  {^93^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^while  ( child != null && !next (  )  )  {^93^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child != null || !testChild (  )  )  {^99^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child == null && !testChild (  )  )  {^99^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^while  ( child != null && !next (  )  )  {^99^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^while  ( node != null && !testChild (  )  )  {^99^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child == null )  {^83^^^^^81^104^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child != null && !(testChild()) )  {^83^^^^^81^104^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child != null )  {^83^^^^^81^104^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^if ((position) == 0) {    child = null;}else    if ((child) == null) {        child = node.getLastChild();    }else {        child = child.getPreviousSibling();    }; while (((child) != null) && (!(testChild()))) {    child = child.getPreviousSibling();} ;^83^84^85^86^^81^104^if  ( !reverse )  { if  ( position == 0 )  { child = null; }^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^83^84^85^86^^81^104^if  ( !reverse )  { if  ( position == 0 )  { child = null; }^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getPreviousSibling (  ) ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^99^100^^^^81^104^while  ( child != null && !testChild (  )  )  { child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^while  ( node != null && !next (  )  )  {^93^^^^^81^104^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position <= 0 )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position != 0 )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^if  ( position == position )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child == null )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( position == 0 >> 2 )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P9_Replace_Statement]^if  ( position == 1 )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^child = null;^84^85^86^^^81^104^if  ( position == 0 )  { child = null; }^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^84^85^86^^^81^104^if  ( position == 0 )  { child = null; }^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^else if  ( child != null )  {^87^^^^^81^104^else if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^else {^87^^^^^81^104^else if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^child = node.getLastChild();^87^88^89^^^81^104^else if  ( child == null )  { child = node.getLastChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^87^88^89^^^81^104^else if  ( child == null )  { child = node.getLastChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = node.getFirstChild (  ) ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = node.getLastChild (  ) ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = node.getLastChild (  ) ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = node.getLastChild (  ) ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = child.getLastChild (  ) ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = false;^85^^^^^81^104^child = null;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^else if  ( child == this )  {^87^^^^^81^104^else if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = true;^85^^^^^81^104^child = null;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^88^^^^^81^104^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^93^94^^^^81^104^while  ( child != null && !testChild (  )  )  { child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getNextSibling (  ) ;^94^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( position == 2 )  {^84^^^^^81^104^if  ( position == 0 )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == true )  {^87^^^^^81^104^else if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^91^^^^^81^104^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = this;^85^^^^^81^104^child = null;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == false )  {^87^^^^^81^104^else if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^98^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getPreviousSibling (  ) ;^100^^^^^81^104^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^return child == null;^103^^^^^81^104^return child != null;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return node != null;^103^^^^^81^104^return child != null;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^return node ;^103^^^^^81^104^return child != null;^[CLASS] DOMNodeIterator  [METHOD] previous [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child != null || !testChild (  )  )  {^120^^^^^105^135^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child == null && !testChild (  )  )  {^120^^^^^105^135^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^while  ( node != null && !testChild (  )  )  {^120^^^^^105^135^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^while  ( child != null && !next (  )  )  {^120^^^^^105^135^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getPreviousSibling (  ) ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child != null || !testChild (  )  )  {^136^^^^^121^151^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^while  ( child == null && !testChild (  )  )  {^136^^^^^121^151^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^while  ( node != null && !testChild (  )  )  {^136^^^^^121^151^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^while  ( child != null && !next (  )  )  {^136^^^^^121^151^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child == null )  {^108^^^^^93^123^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child != null && !(testChild()) )  {^108^^^^^93^123^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child != null )  {^108^^^^^93^123^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( position == 1 )  {^108^^^^^93^123^if  ( !reverse )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^if ((position) == 1) {    if ((child) == null) {        child = node.getFirstChild();    }else {        child = child.getNextSibling();    }}else {    child = child.getNextSibling();}; while (((child) != null) && (!(testChild()))) {    child = child.getNextSibling();} ;^108^109^110^111^112^93^123^if  ( !reverse )  { if  ( position == 1 )  { if  ( child == null )  { child = node.getFirstChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^108^109^110^111^112^93^123^if  ( !reverse )  { if  ( position == 1 )  { if  ( child == null )  { child = node.getFirstChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position != 1 )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^if  ( position == position )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child == null )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( position == 3 )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P9_Replace_Statement]^if  ( position == 0 )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^if ((child) == null) {    child = node.getLastChild();}else {    child = child.getPreviousSibling();};^125^126^127^128^^110^140^if  ( position == 1 )  { if  ( child == null )  { child = node.getLastChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^125^126^127^128^^110^140^if  ( position == 1 )  { if  ( child == null )  { child = node.getLastChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getNextSibling (  ) ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( child != null )  {^126^^^^^111^141^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == true )  {^126^^^^^111^141^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^child = node.getLastChild();^126^127^128^^^111^141^if  ( child == null )  { child = node.getLastChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^126^127^128^^^111^141^if  ( child == null )  { child = node.getLastChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( position )  == 1 )  {     if  (  ( child )  == null )  {         child = node.getLastChild (  ) ;     }else {         child = child.getPreviousSibling (  ) ;     } }else {     child = child.getPreviousSibling (  ) ; }^126^^^^^111^141^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( position )  == 1 )  {     if  (  ( child )  == null )  {         child = node.getFirstChild (  ) ;     }else {         child = child.getNextSibling (  ) ;     } }else {     child = child.getNextSibling (  ) ; }^126^^^^^111^141^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( position )  == 0 )  {     child = null; }else     if  (  ( child )  == null )  {         child = node.getLastChild (  ) ;     }else {         child = child.getPreviousSibling (  ) ;     }^126^^^^^111^141^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( child )  == null )  {     child = node.getFirstChild (  ) ; }else {     child = child.getNextSibling (  ) ; }^126^^^^^111^141^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = child.getLastChild (  ) ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = node.getFirstChild (  ) ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = node.getLastChild (  ) ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = node.getLastChild (  ) ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = node.getLastChild (  ) ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == false )  {^126^^^^^111^141^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getNextSibling (  ) ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^127^^^^^112^142^child = node.getLastChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getPreviousSibling (  ) ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getNextSibling (  ) ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = child.getPreviousSibling (  ) ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getPreviousSibling (  ) ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getPreviousSibling (  ) ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^137^^^^^122^152^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getNextSibling (  ) ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^136^137^^^^121^151^while  ( child != null && !testChild (  )  )  { child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^while  ( node != null && !next (  )  )  {^120^^^^^105^135^while  ( child != null && !testChild (  )  )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position >= 1 )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position > 1 )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^if  ( position == position )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P6_Replace_Expression]^if  ( child == null )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( position == 2 )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P9_Replace_Statement]^if  ( position == 0 )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^if ((child) == null) {    child = node.getFirstChild();}else {    child = child.getNextSibling();};^109^110^111^112^^94^124^if  ( position == 1 )  { if  ( child == null )  { child = node.getFirstChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^109^110^111^112^^94^124^if  ( position == 1 )  { if  ( child == null )  { child = node.getFirstChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( child != null )  {^110^^^^^95^125^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == false )  {^110^^^^^95^125^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P15_Unwrap_Block]^child = node.getFirstChild();^110^111^112^^^95^125^if  ( child == null )  { child = node.getFirstChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P16_Remove_Block]^^110^111^112^^^95^125^if  ( child == null )  { child = node.getFirstChild (  ) ; }^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( position )  == 1 )  {     if  (  ( child )  == null )  {         child = node.getFirstChild (  ) ;     }else {         child = child.getNextSibling (  ) ;     } }else {     child = child.getNextSibling (  ) ; }^110^^^^^95^125^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( position )  == 0 )  {     child = null; }else     if  (  ( child )  == null )  {         child = node.getLastChild (  ) ;     }else {         child = child.getPreviousSibling (  ) ;     }^110^^^^^95^125^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P13_Insert_Block]^if  (  ( child )  == null )  {     child = node.getLastChild (  ) ; }else {     child = child.getPreviousSibling (  ) ; }^110^^^^^95^125^[Delete]^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getPreviousSibling (  ) ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = child.getFirstChild (  ) ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = node.getLastChild (  ) ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getNextSibling (  ) ;child = node.getFirstChild (  ) ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = node.getFirstChild (  ) ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = node.getFirstChild (  ) ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = child.getLastChild (  ) ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node.getPreviousSibling (  ) ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( child == this )  {^110^^^^^95^125^if  ( child == null )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^111^^^^^96^126^child = node.getFirstChild (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^child = node.getNextSibling (  ) ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P7_Replace_Invocation]^child = child.getPreviousSibling (  ) ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getFirstChild (  ) ;child = child.getNextSibling (  ) ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = node.getLastChild (  ) ;child = child.getNextSibling (  ) ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P11_Insert_Donor_Statement]^child = child.getPreviousSibling (  ) ;child = child.getNextSibling (  ) ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^120^121^^^^105^135^while  ( child != null && !testChild (  )  )  { child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position != 1 )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position <= 1 )  {^109^^^^^94^124^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child = node .getPreviousSibling (  )  ;^118^^^^^109^119^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^114^^^^^110^115^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^if  ( position < 1 )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P3_Replace_Literal]^if  ( position == -6 )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^if  ( position == 2 )  {^125^^^^^110^140^if  ( position == 1 )  {^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^134^^^^^125^135^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^130^^^^^126^131^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^130^^^^^115^145^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child ;^114^^^^^99^129^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  = null ;^118^^^^^103^133^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^121^^^^^106^136^child = child.getNextSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^child  =  child ;^134^^^^^119^149^child = child.getPreviousSibling (  ) ;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P2_Replace_Operator]^return child == null;^140^^^^^125^155^return child != null;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return node != null;^140^^^^^125^155^return child != null;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P8_Replace_Mix]^return child ;^140^^^^^125^155^return child != null;^[CLASS] DOMNodeIterator  [METHOD] next [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return DOMNodePointer.testNode ( node, nodeTest ) ;^144^^^^^143^145^return DOMNodePointer.testNode ( child, nodeTest ) ;^[CLASS] DOMNodeIterator  [METHOD] testChild [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return DOMNodePointer.testNode (  nodeTest ) ;^144^^^^^143^145^return DOMNodePointer.testNode ( child, nodeTest ) ;^[CLASS] DOMNodeIterator  [METHOD] testChild [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return DOMNodePointer.testNode ( child ) ;^144^^^^^143^145^return DOMNodePointer.testNode ( child, nodeTest ) ;^[CLASS] DOMNodeIterator  [METHOD] testChild [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P5_Replace_Variable]^return DOMNodePointer.testNode ( nodeTest, child ) ;^144^^^^^143^145^return DOMNodePointer.testNode ( child, nodeTest ) ;^[CLASS] DOMNodeIterator  [METHOD] testChild [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
[P14_Delete_Statement]^^144^^^^^143^145^return DOMNodePointer.testNode ( child, nodeTest ) ;^[CLASS] DOMNodeIterator  [METHOD] testChild [RETURN_TYPE] boolean   [VARIABLES] boolean  reverse  NodePointer  parent  startWith  NodeTest  nodeTest  int  position  Node  child  node  
