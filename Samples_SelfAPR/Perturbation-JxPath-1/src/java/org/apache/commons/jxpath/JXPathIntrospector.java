[P8_Replace_Mix]^private  HashMap byClass = new HashMap (  ) ;^32^^^^^27^37^private static HashMap byClass = new HashMap (  ) ;^[CLASS] JXPathIntrospector   [VARIABLES] 
[P8_Replace_Mix]^private  HashMap byInterface = new HashMap (  ) ;^33^^^^^28^38^private static HashMap byInterface = new HashMap (  ) ;^[CLASS] JXPathIntrospector   [VARIABLES] 
[P3_Replace_Literal]^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, false )  ) ;^67^^^^^66^68^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^[CLASS] JXPathIntrospector  [METHOD] registerAtomicClass [RETURN_TYPE] void   Class beanClass [VARIABLES] HashMap  byClass  byInterface  Class  beanClass  boolean  
[P4_Replace_Constructor]^byClass.put ( beanClass, byClass.put ( beanClass,  new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass )   ) ;^67^^^^^66^68^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^[CLASS] JXPathIntrospector  [METHOD] registerAtomicClass [RETURN_TYPE] void   Class beanClass [VARIABLES] HashMap  byClass  byInterface  Class  beanClass  boolean  
[P5_Replace_Variable]^byClass.put (  new JXPathBasicBeanInfo ( beanClass, true )  ) ;^67^^^^^66^68^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^[CLASS] JXPathIntrospector  [METHOD] registerAtomicClass [RETURN_TYPE] void   Class beanClass [VARIABLES] HashMap  byClass  byInterface  Class  beanClass  boolean  
[P14_Delete_Statement]^^67^^^^^66^68^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^[CLASS] JXPathIntrospector  [METHOD] registerAtomicClass [RETURN_TYPE] void   Class beanClass [VARIABLES] HashMap  byClass  byInterface  Class  beanClass  boolean  
[P11_Insert_Donor_Statement]^byClass.put ( beanClass, beanInfo ) ;byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^67^^^^^66^68^byClass.put ( beanClass, new JXPathBasicBeanInfo ( beanClass, true )  ) ;^[CLASS] JXPathIntrospector  [METHOD] registerAtomicClass [RETURN_TYPE] void   Class beanClass [VARIABLES] HashMap  byClass  byInterface  Class  beanClass  boolean  
[P4_Replace_Constructor]^new JXPathBasicBeanInfo ( beanClass, true )  ;^79^^^^^74^86^new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P4_Replace_Constructor]^new JXPathBasicBeanInfo (  dynamicPropertyHandlerClass ) ;^79^^^^^74^86^new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P4_Replace_Constructor]^new JXPathBasicBeanInfo ( beanClass ) ;^79^^^^^74^86^new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^new JXPathBasicBeanInfo ( dynamicPropertyHandlerClass, beanClass ) ;^79^^^^^74^86^new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P4_Replace_Constructor]^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, true )  ;^78^79^^^^74^86^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P4_Replace_Constructor]^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo (  dynamicPropertyHandlerClass ) ;^78^79^^^^74^86^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P4_Replace_Constructor]^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass ) ;^78^79^^^^74^86^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, beanClass ) ;^78^79^^^^74^86^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( dynamicPropertyHandlerClass, beanClass ) ;^78^79^^^^74^86^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^78^79^^^^74^86^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P7_Replace_Invocation]^if  ( beanClass.isAssignableFrom (  )  )  {^80^^^^^74^86^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P7_Replace_Invocation]^if  ( beanClass .getInterfaces (  )   )  {^80^^^^^74^86^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( dynamicPropertyHandlerClass.isInterface (  )  )  {^80^^^^^74^86^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P15_Unwrap_Block]^org.apache.commons.jxpath.JXPathIntrospector.byInterface.put(beanClass, bi);^80^81^82^^^74^86^if  ( beanClass.isInterface (  )  )  { byInterface.put ( beanClass, bi ) ; }^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P16_Remove_Block]^^80^81^82^^^74^86^if  ( beanClass.isInterface (  )  )  { byInterface.put ( beanClass, bi ) ; }^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( beanInfo == null )  {     beanInfo = findInformant ( beanClass ) ;     if  ( beanInfo == null )  {         beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;     } }^80^^^^^74^86^[Delete]^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put ( dynamicPropertyHandlerClass, bi ) ;^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put (  bi ) ;^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put ( beanClass ) ;^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put ( bi, beanClass ) ;^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P14_Delete_Statement]^^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^byInterface.put ( beanClass, bi ) ;byClass.put ( beanClass, bi ) ;^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^byClass.put ( beanClass, beanInfo ) ;byClass.put ( beanClass, bi ) ;^84^^^^^74^86^byClass.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byInterface.put ( dynamicPropertyHandlerClass, bi ) ;^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byInterface.put (  bi ) ;^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byInterface.put ( beanClass ) ;^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P14_Delete_Statement]^^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^byClass.put ( beanClass, beanInfo ) ;byInterface.put ( beanClass, bi ) ;^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^byClass.put ( beanClass, bi ) ;byInterface.put ( beanClass, bi ) ;^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( dynamicPropertyHandlerClass.isAssignableFrom (  )  )  {^80^^^^^74^86^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byInterface.put ( bi, beanClass ) ;^81^^^^^74^86^byInterface.put ( beanClass, bi ) ;^[CLASS] JXPathIntrospector  [METHOD] registerDynamicClass [RETURN_TYPE] void   Class beanClass Class dynamicPropertyHandlerClass [VARIABLES] Class  beanClass  dynamicPropertyHandlerClass  JXPathBasicBeanInfo  bi  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^102^^^^^101^114^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  beanClass.get ( byClass ) ;^102^^^^^101^114^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^JXPathBasicBeanInfo bi = new JXPathBasicBeanInfo ( beanClass, dynamicPropertyHandlerClass ) ;JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^102^^^^^101^114^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P14_Delete_Statement]^^102^^^^^101^114^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P2_Replace_Operator]^if  ( beanInfo != null )  {^103^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( beanInfo == true )  {^103^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( cl != null )  {^103^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( interfaces != null )  {^103^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( sup != null )  {^103^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( beanInfo == null )  {     beanInfo = findInformant ( beanClass ) ;     if  ( beanInfo == null )  {         beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;     } }^103^^^^^101^114^[Delete]^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( sup != null )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( sup )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     }     return findDynamicBeanInfo ( sup ) ; }^103^^^^^101^114^[Delete]^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P2_Replace_Operator]^if  ( beanInfo != null )  {^105^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( beanInfo == true )  {^105^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( cl != null )  {^105^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( interfaces != null )  {^105^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( sup != null )  {^105^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P15_Unwrap_Block]^beanInfo = org.apache.commons.jxpath.JXPathIntrospector.findInformant(beanClass); if (beanInfo == null) {    beanInfo = new org.apache.commons.jxpath.JXPathBasicBeanInfo(beanClass);};^105^106^107^108^109^101^114^if  ( beanInfo == null )  { beanInfo = findInformant ( beanClass ) ; if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P16_Remove_Block]^^105^106^107^108^109^101^114^if  ( beanInfo == null )  { beanInfo = findInformant ( beanClass ) ; if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( beanInfo == null )  {     beanInfo = findDynamicBeanInfo ( beanClass ) ;     if  ( beanInfo == null )  {         beanInfo = findInformant ( beanClass ) ;         if  ( beanInfo == null )  {             beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;         }     }     put ( beanClass, beanInfo ) ; }^105^^^^^101^114^[Delete]^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     put ( beanClass, bi ) ; }else {     put ( beanClass, bi ) ; }^105^^^^^101^114^[Delete]^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( sup != null )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( sup )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     }     return findDynamicBeanInfo ( sup ) ; }^105^^^^^101^114^[Delete]^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P2_Replace_Operator]^if  ( beanInfo != null )  {^107^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( beanInfo == true )  {^107^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( cl != null )  {^107^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( interfaces != null )  {^107^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P9_Replace_Statement]^if  ( sup != null )  {^107^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P15_Unwrap_Block]^beanInfo = new org.apache.commons.jxpath.JXPathBasicBeanInfo(beanClass);^107^108^109^^^101^114^if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P16_Remove_Block]^^107^108^109^^^101^114^if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P4_Replace_Constructor]^beanInfo = beanInfo =  new JXPathBasicBeanInfo ( beanClass, true )  ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^beanInfo =  new JXPathBasicBeanInfo ( null ) ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findInformant ( beanClass ) ;beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( beanClass ) ;beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P13_Insert_Block]^if  ( beanInfo == null )  {     beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^108^^^^^101^114^[Delete]^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P7_Replace_Invocation]^beanInfo = findDynamicBeanInfo ( beanClass ) ;^106^^^^^101^114^beanInfo = findInformant ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^beanInfo =  findInformant ( null ) ;^106^^^^^101^114^beanInfo = findInformant ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;beanInfo = findInformant ( beanClass ) ;^106^^^^^101^114^beanInfo = findInformant ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;beanInfo = findInformant ( beanClass ) ;^106^^^^^101^114^beanInfo = findInformant ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( beanClass ) ;beanInfo = findInformant ( beanClass ) ;^106^^^^^101^114^beanInfo = findInformant ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;beanInfo = findInformant ( beanClass ) ;^106^^^^^101^114^beanInfo = findInformant ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^beanInfo =   new JXPathBasicBeanInfo ( beanClass, true )  ;^108^^^^^101^114^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P14_Delete_Statement]^^106^107^108^109^^101^114^beanInfo = findInformant ( beanClass ) ; if  ( beanInfo == null )  { beanInfo = new JXPathBasicBeanInfo ( beanClass ) ; }^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( beanInfo == false )  {^107^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P7_Replace_Invocation]^beanInfo = getBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^beanInfo =  findDynamicBeanInfo ( null ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;beanInfo = findDynamicBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;beanInfo = findDynamicBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;beanInfo = findDynamicBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findInformant ( beanClass ) ;beanInfo = findDynamicBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;beanInfo = findDynamicBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P14_Delete_Statement]^^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^return findDynamicBeanInfo ( sup ) ;beanInfo = findDynamicBeanInfo ( beanClass ) ;^104^^^^^101^114^beanInfo = findDynamicBeanInfo ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put (  beanInfo ) ;^111^^^^^101^114^byClass.put ( beanClass, beanInfo ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put ( beanClass ) ;^111^^^^^101^114^byClass.put ( beanClass, beanInfo ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^byClass.put ( beanInfo, beanClass ) ;^111^^^^^101^114^byClass.put ( beanClass, beanInfo ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P14_Delete_Statement]^^111^^^^^101^114^byClass.put ( beanClass, beanInfo ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^byInterface.put ( beanClass, bi ) ;byClass.put ( beanClass, beanInfo ) ;^111^^^^^101^114^byClass.put ( beanClass, beanInfo ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P11_Insert_Donor_Statement]^byClass.put ( beanClass, bi ) ;byClass.put ( beanClass, beanInfo ) ;^111^^^^^101^114^byClass.put ( beanClass, beanInfo ) ;^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P8_Replace_Mix]^if  ( beanInfo == this )  {^105^^^^^101^114^if  ( beanInfo == null )  {^[CLASS] JXPathIntrospector  [METHOD] getBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  boolean  HashMap  byClass  byInterface  
[P5_Replace_Variable]^if  ( sup.isInterface (  )  )  {^122^^^^^120^148^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null )  {^122^^^^^120^148^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^if  ( beanClass.isAssignableFrom (  )  )  {^122^^^^^120^148^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^if  ( beanClass .getInterfaces (  )   )  {^122^^^^^120^148^if  ( beanClass.isInterface (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P15_Unwrap_Block]^beanInfo = ((org.apache.commons.jxpath.JXPathBeanInfo) (org.apache.commons.jxpath.JXPathIntrospector.byInterface.get(beanClass))); if ((beanInfo != null) && (beanInfo.isDynamic())) {    return beanInfo;};^122^123^124^125^126^120^148^if  ( beanClass.isInterface (  )  )  { beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P16_Remove_Block]^^122^123^124^125^126^120^148^if  ( beanClass.isInterface (  )  )  { beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( sup != null )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( sup )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     }     return findDynamicBeanInfo ( sup ) ; }^122^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( interfaces != null )  {     for  ( int i = 0; i <  ( interfaces.length ) ; i++ )  {         beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;         if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {             return beanInfo;         }     } }^122^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( beanInfo != null || beanInfo.isDynamic (  )  )  {^124^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( beanInfo == null && beanInfo.isDynamic (  )  )  {^124^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null ) {^124^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  (  beanInfo.isDynamic (  )  )  {^124^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != false && beanInfo.isDynamic (  )  )  {^124^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P15_Unwrap_Block]^return beanInfo;^124^125^126^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P16_Remove_Block]^^124^125^126^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( sup ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo =  ( JXPathBeanInfo )  beanClass.get ( byInterface ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = findInformant ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     put ( beanClass, bi ) ; }else {     put ( beanClass, bi ) ; }^123^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( beanClass )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     } }^123^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P14_Delete_Statement]^^123^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != true ) {^124^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^Class interfaces[] = sup.getInterfaces (  ) ;^129^^^^^120^148^Class interfaces[] = beanClass.getInterfaces (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^Class interfaces[] = beanClass.isAssignableFrom (  ) ;^129^^^^^120^148^Class interfaces[] = beanClass.getInterfaces (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^Class interfaces[] = beanClass .isInterface (  )  ;^129^^^^^120^148^Class interfaces[] = beanClass.getInterfaces (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^Class sup = beanClass.getSuperclass (  ) ;Class interfaces[] = beanClass.getInterfaces (  ) ;^129^^^^^120^148^Class interfaces[] = beanClass.getInterfaces (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^Class interfaces[] = sup.isAssignableFrom (  ) ;^129^^^^^120^148^Class interfaces[] = beanClass.getInterfaces (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P14_Delete_Statement]^^129^^^^^120^148^Class interfaces[] = beanClass.getInterfaces (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( interfaces == null )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( i < interfaces.length )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null && beanInfo.isDynamic() )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( interfaces != true )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P9_Replace_Statement]^if  ( cl != null )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P9_Replace_Statement]^if  ( beanInfo == null )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P9_Replace_Statement]^if  ( sup != null )  {^130^^^^^120^148^if  ( interfaces != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P15_Unwrap_Block]^for (int i = 0; i < (interfaces.length); i++) {    beanInfo = org.apache.commons.jxpath.JXPathIntrospector.findDynamicBeanInfo(interfaces[i]);    if ((beanInfo != null) && (beanInfo.isDynamic())) {        return beanInfo;    }};^130^131^132^133^134^120^148^if  ( interfaces != null )  { for  ( int i = 0; i < interfaces.length; i++ )  { beanInfo = findDynamicBeanInfo ( interfaces[i] ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P16_Remove_Block]^^130^131^132^133^134^120^148^if  ( interfaces != null )  { for  ( int i = 0; i < interfaces.length; i++ )  { beanInfo = findDynamicBeanInfo ( interfaces[i] ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( beanClass )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     } }^130^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( beanInfo != null || beanInfo.isDynamic (  )  )  {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( beanInfo == null && beanInfo.isDynamic (  )  )  {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null ) {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  (  beanInfo.isDynamic (  )  )  {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != false ) {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P15_Unwrap_Block]^return beanInfo;^133^134^135^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P16_Remove_Block]^^133^134^135^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < interfaces.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == interfaces.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < interfaces.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^for  ( interfacesnt i = 0; i < i.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^for  ( interfaces.lengthnt i = 0; i < i; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( beanClass )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     } }^131^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( interfaces != null )  {     for  ( int i = 0; i <  ( interfaces.length ) ; i++ )  {         beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;         if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {             return beanInfo;         }     } }^131^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo = findDynamicBeanInfo ( i[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo = findDynamicBeanInfo ( interfacesnterfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^beanInfo = registerDynamicClass ( interfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^beanInfo =  findDynamicBeanInfo ( null[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = findInformant ( beanClass ) ;beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( beanClass ) ;beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P14_Delete_Statement]^^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^return findDynamicBeanInfo ( sup ) ;beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^132^^^^^120^148^beanInfo = findDynamicBeanInfo ( interfaces[i] ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != true && beanInfo.isDynamic (  )  )  {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= interfaces.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P3_Replace_Literal]^for  ( int i = -4; i < interfaces.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < interfaces.length.length; i++ )  {^131^^^^^120^148^for  ( int i = 0; i < interfaces.length; i++ )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != false && beanInfo.isDynamic (  )  )  {^133^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^Class sup = beanClass.forName (  ) ;^139^^^^^120^148^Class sup = beanClass.getSuperclass (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^Class sup = beanClass .getInterfaces (  )  ;^139^^^^^120^148^Class sup = beanClass.getSuperclass (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^Class interfaces[] = beanClass.getInterfaces (  ) ;Class sup = beanClass.getSuperclass (  ) ;^139^^^^^120^148^Class sup = beanClass.getSuperclass (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^Class cls = Class.forName ( className ) ;Class sup = beanClass.getSuperclass (  ) ;^139^^^^^120^148^Class sup = beanClass.getSuperclass (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^Class sup = sup.getSuperclass (  ) ;^139^^^^^120^148^Class sup = beanClass.getSuperclass (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P14_Delete_Statement]^^139^^^^^120^148^Class sup = beanClass.getSuperclass (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( sup == null )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^if  ( beanClass != null )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null && beanInfo.isDynamic() )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( sup != false )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P9_Replace_Statement]^if  ( cl != null )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P9_Replace_Statement]^if  ( beanInfo == null )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P9_Replace_Statement]^if  ( interfaces != null )  {^140^^^^^120^148^if  ( sup != null )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P15_Unwrap_Block]^beanInfo = ((org.apache.commons.jxpath.JXPathBeanInfo) (org.apache.commons.jxpath.JXPathIntrospector.byClass.get(sup))); if ((beanInfo != null) && (beanInfo.isDynamic())) {    return beanInfo;}; return org.apache.commons.jxpath.JXPathIntrospector.findDynamicBeanInfo(sup);^140^141^142^143^144^120^148^if  ( sup != null )  { beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P16_Remove_Block]^^140^141^142^143^144^120^148^if  ( sup != null )  { beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ; if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanInfo == null )  {     beanInfo = findInformant ( beanClass ) ;     if  ( beanInfo == null )  {         beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;     } }^140^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanInfo == null )  {     beanInfo = findDynamicBeanInfo ( beanClass ) ;     if  ( beanInfo == null )  {         beanInfo = findInformant ( beanClass ) ;         if  ( beanInfo == null )  {             beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;         }     }     put ( beanClass, beanInfo ) ; }^140^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     beanInfo =  (  ( JXPathBeanInfo )   ( get ( beanClass )  )  ) ;     if  (  ( beanInfo != null )  &&  ( beanInfo.isDynamic (  )  )  )  {         return beanInfo;     } }^140^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( beanInfo != null || beanInfo.isDynamic (  )  )  {^142^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P2_Replace_Operator]^if  ( beanInfo == null && beanInfo.isDynamic (  )  )  {^142^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  ( beanInfo != null ) {^142^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P6_Replace_Expression]^if  (  beanInfo.isDynamic (  )  )  {^142^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != false && beanInfo.isDynamic (  )  )  {^142^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P15_Unwrap_Block]^return beanInfo;^142^143^144^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P16_Remove_Block]^^142^143^144^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  { return beanInfo; }^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( sup ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^beanInfo =  ( JXPathBeanInfo )  sup.get ( byClass ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^beanInfo =   ( JXPathBeanInfo )  byClass.get ( beanClass ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo =  ( JXPathBeanInfo )  byInterface.get ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = new JXPathBasicBeanInfo ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^beanInfo = findDynamicBeanInfo ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( beanClass.isInterface (  )  )  {     put ( beanClass, bi ) ; }else {     put ( beanClass, bi ) ; }^141^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P5_Replace_Variable]^return findDynamicBeanInfo ( beanClass ) ;^145^^^^^120^148^return findDynamicBeanInfo ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P7_Replace_Invocation]^return getBeanInfo ( sup ) ;^145^^^^^120^148^return findDynamicBeanInfo ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P14_Delete_Statement]^^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P11_Insert_Donor_Statement]^JXPathBeanInfo beanInfo =  ( JXPathBeanInfo )  byClass.get ( beanClass ) ;beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^141^^^^^120^148^beanInfo =  ( JXPathBeanInfo )  byClass.get ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P13_Insert_Block]^if  ( isAssignableFrom ( beanClass )  )  {     return  (  ( JXPathBeanInfo )   ( beanClass.newInstance (  )  )  ) ; }^141^^^^^120^148^[Delete]^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P14_Delete_Statement]^^145^^^^^120^148^return findDynamicBeanInfo ( sup ) ;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^if  ( beanInfo != true && beanInfo.isDynamic (  )  )  {^142^^^^^120^148^if  ( beanInfo != null && beanInfo.isDynamic (  )  )  {^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P8_Replace_Mix]^return this;^147^^^^^120^148^return null;^[CLASS] JXPathIntrospector  [METHOD] findDynamicBeanInfo [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] JXPathBeanInfo  beanInfo  Class  beanClass  sup  Class[]  interfaces  boolean  HashMap  byClass  byInterface  int  i  
[P1_Replace_Type]^char name = beanClass.getName (  )  + "XBeanInfo";^151^^^^^150^170^String name = beanClass.getName (  )  + "XBeanInfo";^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P2_Replace_Operator]^String name = beanClass.getName (  <=  )  + "XBeanInfo";^151^^^^^150^170^String name = beanClass.getName (  )  + "XBeanInfo";^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P3_Replace_Literal]^String name = beanClass.getName (  )  + "XBeanInfoeanInf";^151^^^^^150^170^String name = beanClass.getName (  )  + "XBeanInfo";^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^String name = beanClass.forName (  )  + "XBeanInfo";^151^^^^^150^170^String name = beanClass.getName (  )  + "XBeanInfo";^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^151^^^^^150^170^String name = beanClass.getName (  )  + "XBeanInfo";^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^return  ( JXPathBeanInfo )  instantiate (  name ) ;^153^^^^^150^170^return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^return  ( JXPathBeanInfo )  instantiate ( beanClass ) ;^153^^^^^150^170^return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^return  ( JXPathBeanInfo )  instantiate ( name, beanClass ) ;^153^^^^^150^170^return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^return  ( JXPathBeanInfo )  registerDynamicClass ( beanClass, name ) ;^153^^^^^150^170^return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^153^^^^^150^170^return  ( JXPathBeanInfo )  instantiate ( beanClass, name ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^if  ( JXPathBeanInfo.class.forName ( beanClass )  )  {^161^^^^^150^170^if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  {^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P15_Unwrap_Block]^return ((org.apache.commons.jxpath.JXPathBeanInfo) (beanClass.newInstance()));^161^162^163^^^150^170^if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  { return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ; }^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P16_Remove_Block]^^161^162^163^^^150^170^if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  { return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ; }^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^return  ( JXPathBeanInfo )  beanClass.forName (  ) ;^162^^^^^150^170^return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P8_Replace_Mix]^return  ( JXPathBeanInfo )  beanClass .getInterfaces (  )  ;^162^^^^^150^170^return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^162^^^^^150^170^return  ( JXPathBeanInfo )  beanClass.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^if  ( JXPathBeanInfo.class .isInterface (  )   )  {^161^^^^^150^170^if  ( JXPathBeanInfo.class.isAssignableFrom ( beanClass )  )  {^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P8_Replace_Mix]^return true;^169^^^^^150^170^return null;^[CLASS] JXPathIntrospector  [METHOD] findInformant [RETURN_TYPE] JXPathBeanInfo   Class beanClass [VARIABLES] Class  beanClass  String  name  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^ClassLoader cl = cls.getClassLoader (  ) ;^182^^^^^177^196^ClassLoader cl = sibling.getClassLoader (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^ClassLoader cl = sibling.forName (  ) ;^182^^^^^177^196^ClassLoader cl = sibling.getClassLoader (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^182^^^^^177^196^ClassLoader cl = sibling.getClassLoader (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P2_Replace_Operator]^if  ( cl == null )  {^183^^^^^177^196^if  ( cl != null )  {^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P8_Replace_Mix]^if  ( cl != false )  {^183^^^^^177^196^if  ( cl != null )  {^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P9_Replace_Statement]^if  ( beanInfo == null )  {^183^^^^^177^196^if  ( cl != null )  {^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P9_Replace_Statement]^if  ( interfaces != null )  {^183^^^^^177^196^if  ( cl != null )  {^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P9_Replace_Statement]^if  ( sup != null )  {^183^^^^^177^196^if  ( cl != null )  {^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P15_Unwrap_Block]^try {    java.lang.Class cls = cl.loadClass(className);    return cls.newInstance();} catch (java.lang.Exception ex) {};^183^184^185^186^187^177^196^if  ( cl != null )  { try { Class cls = cl.loadClass ( className ) ; return cls.newInstance (  ) ; }^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P16_Remove_Block]^^183^184^185^186^187^177^196^if  ( cl != null )  { try { Class cls = cl.loadClass ( className ) ; return cls.newInstance (  ) ; }^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^return cls.forName (  ) ;^186^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P8_Replace_Mix]^return cls .getInterfaces (  )  ;^186^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^Class classNames = cl.loadClass ( cl ) ;^185^^^^^177^196^Class cls = cl.loadClass ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P11_Insert_Donor_Statement]^Class cls = Class.forName ( className ) ;Class cls = cl.loadClass ( className ) ;^185^^^^^177^196^Class cls = cl.loadClass ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^185^^^^^177^196^Class cls = cl.loadClass ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^return sibling.newInstance (  ) ;^186^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^186^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^185^186^^^^177^196^Class cls = cl.loadClass ( className ) ; return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P8_Replace_Mix]^return sibling.forName (  ) ;^186^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^Class cls = Class.isAssignableFrom ( className ) ;^194^^^^^177^196^Class cls = Class.forName ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P8_Replace_Mix]^Class cls = Class .getName (  )  ;^194^^^^^177^196^Class cls = Class.forName ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P11_Insert_Donor_Statement]^Class sup = beanClass.getSuperclass (  ) ;Class cls = Class.forName ( className ) ;^194^^^^^177^196^Class cls = Class.forName ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P11_Insert_Donor_Statement]^Class cls = cl.loadClass ( className ) ;Class cls = Class.forName ( className ) ;^194^^^^^177^196^Class cls = Class.forName ( className ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^194^195^196^^^177^196^Class cls = Class.forName ( className ) ; return cls.newInstance (  ) ; }^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P7_Replace_Invocation]^return cls.forName (  ) ;^195^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P5_Replace_Variable]^return sibling.newInstance (  ) ;^195^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
[P14_Delete_Statement]^^195^^^^^177^196^return cls.newInstance (  ) ;^[CLASS] JXPathIntrospector  [METHOD] instantiate [RETURN_TYPE] Object   Class sibling String className [VARIABLES] ClassLoader  cl  Class  cls  sibling  String  className  boolean  HashMap  byClass  byInterface  Exception  ex  
