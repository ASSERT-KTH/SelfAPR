[P3_Replace_Literal]^private static final QName QNAME_NAME = new QName ( null, "na" ) ;^28^^^^^23^33^private static final QName QNAME_NAME = new QName ( null, "name" ) ;^[CLASS] TreeCompiler   [VARIABLES] 
[P4_Replace_Constructor]^private static final QName QNAME_NAME = private static final new QName ( prefix, name )  ;^28^^^^^23^33^private static final QName QNAME_NAME = new QName ( null, "name" ) ;^[CLASS] TreeCompiler   [VARIABLES] 
[P8_Replace_Mix]^private static final QName QNAME_NAME = new QName ( true, "name" ) ;^28^^^^^23^33^private static final QName QNAME_NAME = new QName ( null, "name" ) ;^[CLASS] TreeCompiler   [VARIABLES] 
[P4_Replace_Constructor]^return return  new Constant ( value )   ) ;^31^^^^^30^32^return new Constant ( new Double ( value )  ) ;^[CLASS] TreeCompiler  [METHOD] number [RETURN_TYPE] Object   String value [VARIABLES] QName  QNAME_NAME  String  value  boolean  
[P8_Replace_Mix]^return  new Constant ( value )   ) ;^31^^^^^30^32^return new Constant ( new Double ( value )  ) ;^[CLASS] TreeCompiler  [METHOD] number [RETURN_TYPE] Object   String value [VARIABLES] QName  QNAME_NAME  String  value  boolean  
[P4_Replace_Constructor]^return return  new Constant ( new Double ( value )  )  ;^35^^^^^34^36^return new Constant ( value ) ;^[CLASS] TreeCompiler  [METHOD] literal [RETURN_TYPE] Object   String value [VARIABLES] QName  QNAME_NAME  String  value  boolean  
[P8_Replace_Mix]^return  new Constant ( new Double ( value )  )  ;^35^^^^^34^36^return new Constant ( value ) ;^[CLASS] TreeCompiler  [METHOD] literal [RETURN_TYPE] Object   String value [VARIABLES] QName  QNAME_NAME  String  value  boolean  
[P4_Replace_Constructor]^return new QName (  name ) ;^39^^^^^38^40^return new QName ( prefix, name ) ;^[CLASS] TreeCompiler  [METHOD] qname [RETURN_TYPE] Object   String prefix String name [VARIABLES] QName  QNAME_NAME  String  name  prefix  boolean  
[P4_Replace_Constructor]^return new QName ( prefix ) ;^39^^^^^38^40^return new QName ( prefix, name ) ;^[CLASS] TreeCompiler  [METHOD] qname [RETURN_TYPE] Object   String prefix String name [VARIABLES] QName  QNAME_NAME  String  name  prefix  boolean  
[P5_Replace_Variable]^return new QName ( name, prefix ) ;^39^^^^^38^40^return new QName ( prefix, name ) ;^[CLASS] TreeCompiler  [METHOD] qname [RETURN_TYPE] Object   String prefix String name [VARIABLES] QName  QNAME_NAME  String  name  prefix  boolean  
[P7_Replace_Invocation]^return new CoreOperationAdd ( toStepArray ( arguments )  ) ;^43^^^^^42^44^return new CoreOperationAdd ( toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] sum [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P14_Delete_Statement]^^43^^^^^42^44^return new CoreOperationAdd ( toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] sum [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^47^48^49^^^46^50^return new CoreOperationSubtract ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] minus [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^47^48^49^^^46^50^return new CoreOperationSubtract ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] minus [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^53^^^^^52^54^return new CoreOperationMultiply (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] multiply [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^53^^^^^52^54^return new CoreOperationMultiply (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] multiply [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new NameAttributeTest (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^57^^^^^56^58^return new CoreOperationDivide (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] divide [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new NameAttributeTest (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^57^^^^^56^58^return new CoreOperationDivide (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] divide [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^61^^^^^60^62^return new CoreOperationMod (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] mod [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^61^^^^^60^62^return new CoreOperationMod (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] mod [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^65^^^^^64^66^return new CoreOperationLessThan (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] lessThan [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^65^^^^^64^66^return new CoreOperationLessThan (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] lessThan [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^69^70^71^^^68^72^return new CoreOperationLessThanOrEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] lessThanOrEqual [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^69^70^71^^^68^72^return new CoreOperationLessThanOrEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] lessThanOrEqual [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^75^76^77^^^74^78^return new CoreOperationGreaterThan ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] greaterThan [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^75^76^77^^^74^78^return new CoreOperationGreaterThan ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] greaterThan [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^81^82^83^^^80^84^return new CoreOperationGreaterThanOrEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] greaterThanOrEqual [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^81^82^83^^^80^84^return new CoreOperationGreaterThanOrEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] greaterThanOrEqual [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P7_Replace_Invocation]^if  ( nodeNameTest (  ( Expression )  left )  )  {^87^^^^^86^95^if  ( isNameAttributeTest (  ( Expression )  left )  )  {^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P15_Unwrap_Block]^return new org.apache.commons.jxpath.ri.compiler.NameAttributeTest(((org.apache.commons.jxpath.ri.compiler.Expression) (left)), ((org.apache.commons.jxpath.ri.compiler.Expression) (right)));^87^88^89^^^86^95^if  ( isNameAttributeTest (  ( Expression )  left )  )  { return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ; }^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P16_Remove_Block]^^87^88^89^^^86^95^if  ( isNameAttributeTest (  ( Expression )  left )  )  { return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ; }^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^91^92^93^^^86^95^return new CoreOperationEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^91^92^93^^^86^95^return new CoreOperationEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^88^^^^^86^95^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left,  ( Expression )  right ) ;^88^^^^^86^95^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P12_Insert_Condition]^if  ( isNameAttributeTest (  ( Expression )  left )  )  { return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ; }^88^^^^^86^95^return new NameAttributeTest (  ( Expression )  left,  ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] equal [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^98^99^100^^^97^101^return new CoreOperationNotEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] notEqual [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P8_Replace_Mix]^return  new CoreOperationDivide (  (  ( Expression )   ( left )  ) ,  (  ( Expression )   ( right )  )  )   left, ( Expression )  right ) ;^98^99^100^^^97^101^return new CoreOperationNotEqual ( ( Expression )  left, ( Expression )  right ) ;^[CLASS] TreeCompiler  [METHOD] notEqual [RETURN_TYPE] Object   Object left Object right [VARIABLES] QName  QNAME_NAME  Object  left  right  boolean  
[P4_Replace_Constructor]^return return  new NodeNameTest (  (  ( QName )   ( qname )  )  )   qName ) ;^108^^^^^107^109^return new VariableReference (  ( QName )  qName ) ;^[CLASS] TreeCompiler  [METHOD] variableReference [RETURN_TYPE] Object   Object qName [VARIABLES] QName  QNAME_NAME  Object  qName  boolean  
[P8_Replace_Mix]^return  new NodeNameTest (  (  ( QName )   ( qname )  )  )   qName ) ;^108^^^^^107^109^return new VariableReference (  ( QName )  qName ) ;^[CLASS] TreeCompiler  [METHOD] variableReference [RETURN_TYPE] Object   Object qName [VARIABLES] QName  QNAME_NAME  Object  qName  boolean  
[P4_Replace_Constructor]^return new CoreFunction (  toExpressionArray ( args )  ) ;^112^^^^^111^113^return new CoreFunction ( code, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   int code Object[] args [VARIABLES] boolean  QName  QNAME_NAME  int  code  Object[]  args  
[P5_Replace_Variable]^return new CoreFunction ( args, toExpressionArray ( code )  ) ;^112^^^^^111^113^return new CoreFunction ( code, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   int code Object[] args [VARIABLES] boolean  QName  QNAME_NAME  int  code  Object[]  args  
[P7_Replace_Invocation]^return new CoreFunction ( code, toStepArray ( args )  ) ;^112^^^^^111^113^return new CoreFunction ( code, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   int code Object[] args [VARIABLES] boolean  QName  QNAME_NAME  int  code  Object[]  args  
[P14_Delete_Statement]^^112^^^^^111^113^return new CoreFunction ( code, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   int code Object[] args [VARIABLES] boolean  QName  QNAME_NAME  int  code  Object[]  args  
[P7_Replace_Invocation]^return new ExtensionFunction (  ( QName )  name, toStepArray ( args )  ) ;^116^^^^^115^117^return new ExtensionFunction (  ( QName )  name, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   Object name Object[] args [VARIABLES] Object  name  boolean  QName  QNAME_NAME  Object[]  args  
[P14_Delete_Statement]^^116^^^^^115^117^return new ExtensionFunction (  ( QName )  name, toExpressionArray ( args )  ) ;^[CLASS] TreeCompiler  [METHOD] function [RETURN_TYPE] Object   Object name Object[] args [VARIABLES] Object  name  boolean  QName  QNAME_NAME  Object[]  args  
[P7_Replace_Invocation]^return new CoreOperationAnd ( toStepArray ( arguments )  ) ;^120^121^^^^119^122^return new CoreOperationAnd ( toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P7_Replace_Invocation]^toStepArray ( arguments )  ) ;^121^^^^^119^122^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P14_Delete_Statement]^^121^^^^^119^122^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates )  ) ;toExpressionArray ( arguments )  ) ;^121^^^^^119^122^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;toExpressionArray ( arguments )  ) ;^121^^^^^119^122^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^return new CoreOperationAdd ( toExpressionArray ( arguments )  ) ;toExpressionArray ( arguments )  ) ;^121^^^^^119^122^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toStepArray ( steps )  ) ;toExpressionArray ( arguments )  ) ;^121^^^^^119^122^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] and [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P7_Replace_Invocation]^return new CoreOperationOr ( toStepArray ( arguments )  ) ;^125^126^^^^124^127^return new CoreOperationOr ( toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P7_Replace_Invocation]^toStepArray ( arguments )  ) ;^126^^^^^124^127^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P14_Delete_Statement]^^126^^^^^124^127^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates )  ) ;toExpressionArray ( arguments )  ) ;^126^^^^^124^127^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;toExpressionArray ( arguments )  ) ;^126^^^^^124^127^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^return new CoreOperationAdd ( toExpressionArray ( arguments )  ) ;toExpressionArray ( arguments )  ) ;^126^^^^^124^127^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toStepArray ( steps )  ) ;toExpressionArray ( arguments )  ) ;^126^^^^^124^127^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] or [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P7_Replace_Invocation]^return new CoreOperationUnion ( toStepArray ( arguments )  ) ;^130^131^^^^129^132^return new CoreOperationUnion ( toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P7_Replace_Invocation]^toStepArray ( arguments )  ) ;^131^^^^^129^132^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P14_Delete_Statement]^^131^^^^^129^132^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates )  ) ;toExpressionArray ( arguments )  ) ;^131^^^^^129^132^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;toExpressionArray ( arguments )  ) ;^131^^^^^129^132^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^return new CoreOperationAdd ( toExpressionArray ( arguments )  ) ;toExpressionArray ( arguments )  ) ;^131^^^^^129^132^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P11_Insert_Donor_Statement]^toStepArray ( steps )  ) ;toExpressionArray ( arguments )  ) ;^131^^^^^129^132^toExpressionArray ( arguments )  ) ;^[CLASS] TreeCompiler  [METHOD] union [RETURN_TYPE] Object   Object[] arguments [VARIABLES] QName  QNAME_NAME  Object[]  arguments  boolean  
[P4_Replace_Constructor]^return new LocationPath (  toStepArray ( steps )  ) ;^135^^^^^134^136^return new LocationPath ( absolute, toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] locationPath [RETURN_TYPE] Object   boolean absolute Object[] steps [VARIABLES] QName  QNAME_NAME  Object[]  steps  boolean  absolute  
[P5_Replace_Variable]^return new LocationPath ( steps, toStepArray ( absolute )  ) ;^135^^^^^134^136^return new LocationPath ( absolute, toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] locationPath [RETURN_TYPE] Object   boolean absolute Object[] steps [VARIABLES] QName  QNAME_NAME  Object[]  steps  boolean  absolute  
[P7_Replace_Invocation]^return new LocationPath ( absolute, toExpressionArray ( steps )  ) ;^135^^^^^134^136^return new LocationPath ( absolute, toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] locationPath [RETURN_TYPE] Object   boolean absolute Object[] steps [VARIABLES] QName  QNAME_NAME  Object[]  steps  boolean  absolute  
[P14_Delete_Statement]^^135^^^^^134^136^return new LocationPath ( absolute, toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] locationPath [RETURN_TYPE] Object   boolean absolute Object[] steps [VARIABLES] QName  QNAME_NAME  Object[]  steps  boolean  absolute  
[P5_Replace_Variable]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( predicates )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P5_Replace_Variable]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( steps ) , toStepArray ( predicates )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P7_Replace_Invocation]^return new ExpressionPath ( ( Expression )  expression, toStepArray ( predicates ) , toStepArray ( steps )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P7_Replace_Invocation]^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toExpressionArray ( steps )  ) ;^143^144^145^146^^138^147^return new ExpressionPath ( ( Expression )  expression, toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P7_Replace_Invocation]^toStepArray ( predicates ) , toStepArray ( steps )  ) ;^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P8_Replace_Mix]^toExpressionArray ( steps ) , toStepArray ( steps )  ) ;^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P14_Delete_Statement]^^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates )  ) ;toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P11_Insert_Donor_Statement]^return new LocationPath ( absolute, toStepArray ( steps )  ) ;toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P11_Insert_Donor_Statement]^toExpressionArray ( arguments )  ) ;toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^145^146^^^^138^147^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P5_Replace_Variable]^toStepArray ( predicates )  ) ;^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P7_Replace_Invocation]^toExpressionArray ( steps )  ) ;^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P8_Replace_Mix]^toExpressionArray ( predicates )  ) ;^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P14_Delete_Statement]^^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates )  ) ;toStepArray ( steps )  ) ;^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P11_Insert_Donor_Statement]^toExpressionArray ( arguments )  ) ;toStepArray ( steps )  ) ;^146^^^^^138^147^toStepArray ( steps )  ) ;^[CLASS] TreeCompiler  [METHOD] expressionPath [RETURN_TYPE] Object   Object expression Object[] predicates Object[] steps [VARIABLES] Object  expression  boolean  QName  QNAME_NAME  Object[]  predicates  steps  
[P4_Replace_Constructor]^return return  new VariableReference (  (  ( QName )   ( qName )  )  )   qname ) ;^150^^^^^149^151^return new NodeNameTest (  ( QName )  qname ) ;^[CLASS] TreeCompiler  [METHOD] nodeNameTest [RETURN_TYPE] Object   Object qname [VARIABLES] QName  QNAME_NAME  Object  qname  boolean  
[P8_Replace_Mix]^return  new VariableReference (  (  ( QName )   ( qName )  )  )   qname ) ;^150^^^^^149^151^return new NodeNameTest (  ( QName )  qname ) ;^[CLASS] TreeCompiler  [METHOD] nodeNameTest [RETURN_TYPE] Object   Object qname [VARIABLES] QName  QNAME_NAME  Object  qname  boolean  
[P4_Replace_Constructor]^return return  new Constant ( value )  ;^154^^^^^153^155^return new NodeTypeTest ( nodeType ) ;^[CLASS] TreeCompiler  [METHOD] nodeTypeTest [RETURN_TYPE] Object   int nodeType [VARIABLES] QName  QNAME_NAME  int  nodeType  boolean  
[P8_Replace_Mix]^return  new Constant ( value )  ;^154^^^^^153^155^return new NodeTypeTest ( nodeType ) ;^[CLASS] TreeCompiler  [METHOD] nodeTypeTest [RETURN_TYPE] Object   int nodeType [VARIABLES] QName  QNAME_NAME  int  nodeType  boolean  
[P4_Replace_Constructor]^return new Step (  ( NodeTest )  nodeTest, toExpressionArray ( predicates )  ) ;^162^163^164^165^^161^166^return new Step ( axis, ( NodeTest )  nodeTest, toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P5_Replace_Variable]^return new Step ( predicates, ( NodeTest )  nodeTest, toExpressionArray ( axis )  ) ;^162^163^164^165^^161^166^return new Step ( axis, ( NodeTest )  nodeTest, toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P7_Replace_Invocation]^return new Step ( axis, ( NodeTest )  nodeTest, toStepArray ( predicates )  ) ;^162^163^164^165^^161^166^return new Step ( axis, ( NodeTest )  nodeTest, toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P7_Replace_Invocation]^toStepArray ( predicates )  ) ;^165^^^^^161^166^toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P14_Delete_Statement]^^165^^^^^161^166^toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P11_Insert_Donor_Statement]^toExpressionArray ( predicates ) , toStepArray ( steps )  ) ;toExpressionArray ( predicates )  ) ;^165^^^^^161^166^toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P11_Insert_Donor_Statement]^toExpressionArray ( arguments )  ) ;toExpressionArray ( predicates )  ) ;^165^^^^^161^166^toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P11_Insert_Donor_Statement]^toStepArray ( steps )  ) ;toExpressionArray ( predicates )  ) ;^165^^^^^161^166^toExpressionArray ( predicates )  ) ;^[CLASS] TreeCompiler  [METHOD] step [RETURN_TYPE] Object   int axis Object nodeTest Object[] predicates [VARIABLES] Object  nodeTest  boolean  QName  QNAME_NAME  int  axis  Object[]  predicates  
[P11_Insert_Donor_Statement]^Step stepArray[] = null;Expression expArray[] = null;^169^^^^^168^177^Expression expArray[] = null;^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P2_Replace_Operator]^if  ( array == null )  {^170^^^^^168^177^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P6_Replace_Expression]^if  ( i < expArray.length )  {^170^^^^^168^177^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P8_Replace_Mix]^if  ( array != true )  {^170^^^^^168^177^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P15_Unwrap_Block]^expArray = new org.apache.commons.jxpath.ri.compiler.Expression[array.length]; for (int i = 0; i < (expArray.length); i++) {    expArray[i] = ((org.apache.commons.jxpath.ri.compiler.Expression) (array[i]));};^170^171^172^173^174^168^177^if  ( array != null )  { expArray = new Expression[array.length]; for  ( int i = 0; i < expArray.length; i++ )  { expArray[i] =  ( Expression )  array[i]; }^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P16_Remove_Block]^^170^171^172^173^174^168^177^if  ( array != null )  { expArray = new Expression[array.length]; for  ( int i = 0; i < expArray.length; i++ )  { expArray[i] =  ( Expression )  array[i]; }^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P13_Insert_Block]^if  ( array != null )  {     stepArray = new length];     for  ( int i = 0; i <  ( stepArray.length ) ; i++ )  {         stepArray[i] =  (  ( Step )   ( array[i] )  ) ;     } }^170^^^^^168^177^[Delete]^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P3_Replace_Literal]^for  ( int i = ; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P8_Replace_Mix]^expArray[i]  =  expArray[i] ;^173^^^^^168^177^expArray[i] =  ( Expression )  array[i];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P11_Insert_Donor_Statement]^stepArray[i] =  ( Step )  array[i];expArray[i] =  ( Expression )  array[i];^173^^^^^168^177^expArray[i] =  ( Expression )  array[i];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P11_Insert_Donor_Statement]^expArray = new Expression[array.length];expArray[i] =  ( Expression )  array[i];^173^^^^^168^177^expArray[i] =  ( Expression )  array[i];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P8_Replace_Mix]^expArray =  new Expression[null.length];^171^^^^^168^177^expArray = new Expression[array.length];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P11_Insert_Donor_Statement]^expArray[i] =  ( Expression )  array[i];expArray = new Expression[array.length];^171^^^^^168^177^expArray = new Expression[array.length];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P11_Insert_Donor_Statement]^stepArray = new Step[array.length];expArray = new Expression[array.length];^171^^^^^168^177^expArray = new Expression[array.length];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P3_Replace_Literal]^for  ( int i = 7; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i > expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P3_Replace_Literal]^for  ( int i = -3; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P8_Replace_Mix]^expArray[i] ;^173^^^^^168^177^expArray[i] =  ( Expression )  array[i];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P8_Replace_Mix]^expArray[i]  = null ;^173^^^^^168^177^expArray[i] =  ( Expression )  array[i];^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < expArray.length; i++ )  {^172^^^^^168^177^for  ( int i = 0; i < expArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toExpressionArray [RETURN_TYPE] Expression[]   Object[] array [VARIABLES] boolean  QName  QNAME_NAME  Object[]  array  Expression[]  expArray  int  i  
[P11_Insert_Donor_Statement]^Expression expArray[] = null;Step stepArray[] = null;^180^^^^^179^188^Step stepArray[] = null;^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P2_Replace_Operator]^if  ( array == null )  {^181^^^^^179^188^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P6_Replace_Expression]^if  ( i < stepArray.length )  {^181^^^^^179^188^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P8_Replace_Mix]^if  ( array != false )  {^181^^^^^179^188^if  ( array != null )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P15_Unwrap_Block]^stepArray = new org.apache.commons.jxpath.ri.compiler.Step[array.length]; for (int i = 0; i < (stepArray.length); i++) {    stepArray[i] = ((org.apache.commons.jxpath.ri.compiler.Step) (array[i]));};^181^182^183^184^185^179^188^if  ( array != null )  { stepArray = new Step[array.length]; for  ( int i = 0; i < stepArray.length; i++ )  { stepArray[i] =  ( Step )  array[i]; }^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P16_Remove_Block]^^181^182^183^184^185^179^188^if  ( array != null )  { stepArray = new Step[array.length]; for  ( int i = 0; i < stepArray.length; i++ )  { stepArray[i] =  ( Step )  array[i]; }^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P13_Insert_Block]^if  ( array != null )  {     expArray = new length];     for  ( int i = 0; i <  ( expArray.length ) ; i++ )  {         expArray[i] =  (  ( Expression )   ( array[i] )  ) ;     } }^181^^^^^179^188^[Delete]^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P3_Replace_Literal]^for  ( int i = -7; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P8_Replace_Mix]^stepArray[i]  =  stepArray[i] ;^184^^^^^179^188^stepArray[i] =  ( Step )  array[i];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P11_Insert_Donor_Statement]^expArray[i] =  ( Expression )  array[i];stepArray[i] =  ( Step )  array[i];^184^^^^^179^188^stepArray[i] =  ( Step )  array[i];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P11_Insert_Donor_Statement]^stepArray = new Step[array.length];stepArray[i] =  ( Step )  array[i];^184^^^^^179^188^stepArray[i] =  ( Step )  array[i];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P8_Replace_Mix]^stepArray =  new Step[null.length];^182^^^^^179^188^stepArray = new Step[array.length];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P11_Insert_Donor_Statement]^stepArray[i] =  ( Step )  array[i];stepArray = new Step[array.length];^182^^^^^179^188^stepArray = new Step[array.length];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P11_Insert_Donor_Statement]^expArray = new Expression[array.length];stepArray = new Step[array.length];^182^^^^^179^188^stepArray = new Step[array.length];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P8_Replace_Mix]^stepArray[i] ;^184^^^^^179^188^stepArray[i] =  ( Step )  array[i];^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P3_Replace_Literal]^for  ( int i = 6; i < stepArray.length; i++ )  {^183^^^^^179^188^for  ( int i = 0; i < stepArray.length; i++ )  {^[CLASS] TreeCompiler  [METHOD] toStepArray [RETURN_TYPE] Step[]   Object[] array [VARIABLES] Step[]  stepArray  boolean  QName  QNAME_NAME  Object[]  array  int  i  
[P2_Replace_Operator]^if  ( ! ( arg  !=  LocationPath )  )  {^191^^^^^190^210^if  ( ! ( arg instanceof LocationPath )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P8_Replace_Mix]^if  (  ( arg instanceof LocationPath )  )  {^191^^^^^190^210^if  ( ! ( arg instanceof LocationPath )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P9_Replace_Statement]^if  ( ! ( test instanceof NodeNameTest )  )  {^191^^^^^190^210^if  ( ! ( arg instanceof LocationPath )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P15_Unwrap_Block]^return false;^191^192^193^^^190^210^if  ( ! ( arg instanceof LocationPath )  )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P16_Remove_Block]^^191^192^193^^^190^210^if  ( ! ( arg instanceof LocationPath )  )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P13_Insert_Block]^if  ( ! ( test instanceof NodeNameTest )  )  {     return false; }^191^^^^^190^210^[Delete]^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^return true;^192^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P7_Replace_Invocation]^Step[] steps =  (  ( LocationPath )  arg ) .equals (  ) ;^195^^^^^190^210^Step[] steps =  (  ( LocationPath )  arg ) .getSteps (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P7_Replace_Invocation]^Step[] steps =  (  ( LocationPath )  arg )  .getAxis (  )  ;^195^^^^^190^210^Step[] steps =  (  ( LocationPath )  arg ) .getSteps (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P14_Delete_Statement]^^195^^^^^190^210^Step[] steps =  (  ( LocationPath )  arg ) .getSteps (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P2_Replace_Operator]^if  ( steps.length == 1 )  {^196^^^^^190^210^if  ( steps.length != 1 )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^if  ( steps.length != 8 )  {^196^^^^^190^210^if  ( steps.length != 1 )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P8_Replace_Mix]^if  ( steps.length != 0  )  {^196^^^^^190^210^if  ( steps.length != 1 )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P15_Unwrap_Block]^return false;^196^197^198^^^190^210^if  ( steps.length != 1 )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P16_Remove_Block]^^196^197^198^^^190^210^if  ( steps.length != 1 )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^return true;^197^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^return true;^200^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^if  ( steps[-7].getAxis (  )  != Compiler.AXIS_ATTRIBUTE )  {^199^^^^^190^210^if  ( steps[0].getAxis (  )  != Compiler.AXIS_ATTRIBUTE )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P8_Replace_Mix]^if  ( steps[0] .getSteps (  )   != Compiler.AXIS_ATTRIBUTE )  {^199^^^^^190^210^if  ( steps[0].getAxis (  )  != Compiler.AXIS_ATTRIBUTE )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P14_Delete_Statement]^^199^200^201^^^190^210^if  ( steps[0].getAxis (  )  != Compiler.AXIS_ATTRIBUTE )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^NodeTest test = steps[9].getNodeTest (  ) ;^202^^^^^190^210^NodeTest test = steps[0].getNodeTest (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P7_Replace_Invocation]^NodeTest test = steps[0] .getNodeName (  )  ;^202^^^^^190^210^NodeTest test = steps[0].getNodeTest (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^NodeTest test = steps[-6].getNodeTest (  ) ;^202^^^^^190^210^NodeTest test = steps[0].getNodeTest (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P14_Delete_Statement]^^202^^^^^190^210^NodeTest test = steps[0].getNodeTest (  ) ;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P2_Replace_Operator]^if  ( ! ( test  !=  NodeNameTest )  )  {^203^^^^^190^210^if  ( ! ( test instanceof NodeNameTest )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P9_Replace_Statement]^if  ( ! ( arg instanceof LocationPath )  )  {^203^^^^^190^210^if  ( ! ( test instanceof NodeNameTest )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P15_Unwrap_Block]^return false;^203^204^205^^^190^210^if  ( ! ( test instanceof NodeNameTest )  )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P16_Remove_Block]^^203^204^205^^^190^210^if  ( ! ( test instanceof NodeNameTest )  )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P13_Insert_Block]^if  ( ! ( arg instanceof LocationPath )  )  {     return false; }^203^^^^^190^210^[Delete]^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^return true;^204^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P7_Replace_Invocation]^if  ( ! (  ( NodeNameTest )  test ) .getNodeName (  )  .getAxis (  )   )  {^206^^^^^190^210^if  ( ! (  ( NodeNameTest )  test ) .getNodeName (  ) .equals ( QNAME_NAME )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P7_Replace_Invocation]^if  ( ! (  ( NodeNameTest )  test ) .equals (  ) .equals ( QNAME_NAME )  )  {^206^^^^^190^210^if  ( ! (  ( NodeNameTest )  test ) .getNodeName (  ) .equals ( QNAME_NAME )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P7_Replace_Invocation]^if  ( ! (  ( NodeNameTest )  test )  .getNodeTest (  )  .equals ( QNAME_NAME )  )  {^206^^^^^190^210^if  ( ! (  ( NodeNameTest )  test ) .getNodeName (  ) .equals ( QNAME_NAME )  )  {^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P15_Unwrap_Block]^return false;^206^207^208^^^190^210^if  ( ! (  ( NodeNameTest )  test ) .getNodeName (  ) .equals ( QNAME_NAME )  )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P16_Remove_Block]^^206^207^208^^^190^210^if  ( ! (  ( NodeNameTest )  test ) .getNodeName (  ) .equals ( QNAME_NAME )  )  { return false; }^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^return true;^207^^^^^190^210^return false;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P13_Insert_Block]^if  ( ! (  (  ( NodeNameTest )   ( test )  ) .getNodeName (  ) .equals ( QNAME_NAME )  )  )  {     return false; }^206^^^^^190^210^[Delete]^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P13_Insert_Block]^if  ( ! ( test instanceof NodeNameTest )  )  {     return false; }^206^^^^^190^210^[Delete]^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
[P3_Replace_Literal]^return false;^209^^^^^190^210^return true;^[CLASS] TreeCompiler  [METHOD] isNameAttributeTest [RETURN_TYPE] boolean   Expression arg [VARIABLES] Step[]  steps  boolean  Expression  arg  QName  QNAME_NAME  NodeTest  test  
