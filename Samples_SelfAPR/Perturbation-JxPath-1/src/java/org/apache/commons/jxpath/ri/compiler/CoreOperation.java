[P14_Delete_Statement]^^31^^^^^30^32^super ( args ) ;^[CLASS] CoreOperation  [METHOD] <init> [RETURN_TYPE] Expression[])   Expression[] args [VARIABLES] boolean  Expression[]  args  
[P7_Replace_Invocation]^return compute ( context ) ;^35^^^^^34^36^return computeValue ( context ) ;^[CLASS] CoreOperation  [METHOD] compute [RETURN_TYPE] Object   EvalContext context [VARIABLES] boolean  EvalContext  context  
[P14_Delete_Statement]^^35^^^^^34^36^return computeValue ( context ) ;^[CLASS] CoreOperation  [METHOD] compute [RETURN_TYPE] Object   EvalContext context [VARIABLES] boolean  EvalContext  context  
[P2_Replace_Operator]^if  ( args.length <= 1 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^if  ( args.length != 1 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^if  ( args.length == 6 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^if  ( args == 1 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P6_Replace_Expression]^if  ( getSymbol() + parenthesize(args[0], false) )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P6_Replace_Expression]^if  ( i < args.length )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P6_Replace_Expression]^if  ( i > 0 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P6_Replace_Expression]^if  ( i == 0 )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P8_Replace_Mix]^if  ( args.length == 0  )  {^57^^^^^56^72^if  ( args.length == 1 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P15_Unwrap_Block]^return (getSymbol()) + (parenthesize(args[0], false));^57^58^59^^^56^72^if  ( args.length == 1 )  { return getSymbol (  )  + parenthesize ( args[0], false ) ; }^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P16_Remove_Block]^^57^58^59^^^56^72^if  ( args.length == 1 )  { return getSymbol (  )  + parenthesize ( args[0], false ) ; }^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^if  ( i >= 0 )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^if  ( i > i )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P8_Replace_Mix]^if  ( i > 4 )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P15_Unwrap_Block]^buffer.append(' '); buffer.append(getSymbol()); buffer.append(' ');^63^64^65^66^67^56^72^if  ( i > 0 )  { buffer.append ( ' ' ) ; buffer.append ( getSymbol (  )  ) ; buffer.append ( ' ' ) ; }^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P16_Remove_Block]^^63^64^65^66^67^56^72^if  ( i > 0 )  { buffer.append ( ' ' ) ; buffer.append ( getSymbol (  )  ) ; buffer.append ( ' ' ) ; }^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^64^65^^^^56^72^buffer.append ( ' ' ) ; buffer.append ( getSymbol (  )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P11_Insert_Donor_Statement]^buffer.append ( getSymbol (  )  ) ;buffer.append ( ' ' ) ;^64^^^^^56^72^buffer.append ( ' ' ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P7_Replace_Invocation]^buffer.append ( isSymmetric (  )  ) ;^65^^^^^56^72^buffer.append ( getSymbol (  )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^65^^^^^56^72^buffer.append ( getSymbol (  )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P11_Insert_Donor_Statement]^buffer.append ( ' ' ) ;buffer.append ( getSymbol (  )  ) ;^65^^^^^56^72^buffer.append ( getSymbol (  )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P11_Insert_Donor_Statement]^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;buffer.append ( getSymbol (  )  ) ;^65^^^^^56^72^buffer.append ( getSymbol (  )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^66^^^^^56^72^buffer.append ( ' ' ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P11_Insert_Donor_Statement]^buffer.append ( getSymbol (  )  ) ;buffer.append ( ' ' ) ;^66^^^^^56^72^buffer.append ( ' ' ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 2; i < args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^for  ( argsnt i = 0; i < i.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < args; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < args.length.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^if  ( i >  )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P8_Replace_Mix]^if  ( i > 1 )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^65^66^^^^56^72^buffer.append ( getSymbol (  )  ) ; buffer.append ( ' ' ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^64^^^^^56^72^buffer.append ( ' ' ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P7_Replace_Invocation]^buffer .toString (  )  ;^65^^^^^56^72^buffer.append ( getSymbol (  )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^buffer.append ( parenthesize ( args[i], i < 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^buffer.append ( parenthesize ( args[i], i == i )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^buffer.append ( parenthesize ( args[i] == 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^buffer.append ( parenthesize ( i[i], args == 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P11_Insert_Donor_Statement]^buffer.append ( getSymbol (  )  ) ;buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^buffer.append ( parenthesize ( args[i], i != 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P7_Replace_Invocation]^return buffer.append (  ) ;^70^^^^^56^72^return buffer.toString (  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P7_Replace_Invocation]^return buffer .StringBuffer (  )  ;^70^^^^^56^72^return buffer.toString (  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^buffer.append ( parenthesize ( args[i], i >= 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^buffer.append ( parenthesize ( args[i], i <= 0 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^70^^^^^56^72^return buffer.toString (  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^return getSymbol (  |  )  + parenthesize ( args[0], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^return getSymbol (  )  + parenthesize ( args[-4], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^return getSymbol (  )  + parenthesize ( args[0], true ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^return getSymbol (  )  + parenthesize ( null[0], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P7_Replace_Invocation]^return isSymmetric (  )  + parenthesize ( args[0], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P14_Delete_Statement]^^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^return getSymbol (  )  + parenthesize ( args[8], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P8_Replace_Mix]^if  ( i > 0 * 0 )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = -1; i < args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = -2; i < args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < this; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < this.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P5_Replace_Variable]^for  ( args.lengthnt i = 0; i < i; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P8_Replace_Mix]^if  ( i > 0L )  {^63^^^^^56^72^if  ( i > 0 )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^buffer.append ( parenthesize ( args[i], i == 6 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^buffer.append ( parenthesize ( args[i], i == -6 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^return getSymbol (  <=  )  + parenthesize ( args[0], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^return getSymbol (  )  + parenthesize ( args[], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < args.length; i++ )  {^62^^^^^56^72^for  ( int i = 0; i < args.length; i++ )  {^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^return getSymbol (  )  + parenthesize ( args[i], false ) ;^58^^^^^56^72^return getSymbol (  )  + parenthesize ( args[0], false ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^buffer.append ( parenthesize ( args[i], i == -2 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P3_Replace_Literal]^buffer.append ( parenthesize ( args[i], i == 9 )  ) ;^68^^^^^56^72^buffer.append ( parenthesize ( args[i], i == 0 )  ) ;^[CLASS] CoreOperation  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] StringBuffer  buffer  boolean  int  i  
[P2_Replace_Operator]^if  ( ! ( expression  ||  CoreOperation )  )  {^75^^^^^74^101^if  ( ! ( expression instanceof CoreOperation )  )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^if  (  ( expression instanceof CoreOperation )  )  {^75^^^^^74^101^if  ( ! ( expression instanceof CoreOperation )  )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P15_Unwrap_Block]^return expression.toString();^75^76^77^^^74^101^if  ( ! ( expression instanceof CoreOperation )  )  { return expression.toString (  ) ; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P16_Remove_Block]^^75^76^77^^^74^101^if  ( ! ( expression instanceof CoreOperation )  )  { return expression.toString (  ) ; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P7_Replace_Invocation]^return expression .StringBuffer (  )  ;^76^^^^^74^101^return expression.toString (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P14_Delete_Statement]^^76^^^^^74^101^return expression.toString (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P1_Replace_Type]^short  myPrecedence = getPrecedence (  ) ;^79^^^^^74^101^int myPrecedence = getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P7_Replace_Invocation]^int myPrecedence = getSymbol (  ) ;^79^^^^^74^101^int myPrecedence = getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P11_Insert_Donor_Statement]^int thePrecedence = op.getPrecedence (  ) ;int myPrecedence = getPrecedence (  ) ;^79^^^^^74^101^int myPrecedence = getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P14_Delete_Statement]^^79^^^^^74^101^int myPrecedence = getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P1_Replace_Type]^long  thePrecedence = op.getPrecedence (  ) ;^80^^^^^74^101^int thePrecedence = op.getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P7_Replace_Invocation]^int thePrecedence = op.compute (  ) ;^80^^^^^74^101^int thePrecedence = op.getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P11_Insert_Donor_Statement]^int myPrecedence = getPrecedence (  ) ;int thePrecedence = op.getPrecedence (  ) ;^80^^^^^74^101^int thePrecedence = op.getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P14_Delete_Statement]^^80^^^^^74^101^int thePrecedence = op.getPrecedence (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P3_Replace_Literal]^boolean needParens = false;^82^^^^^74^101^boolean needParens = true;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^if  ( myPrecedence <= thePrecedence )  {^83^^^^^74^101^if  ( myPrecedence < thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P5_Replace_Variable]^if  ( thePrecedence < myPrecedence )  {^83^^^^^74^101^if  ( myPrecedence < thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P6_Replace_Expression]^if  ( myPrecedence == thePrecedence )  {^83^^^^^74^101^if  ( myPrecedence < thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P15_Unwrap_Block]^needParens = false;^83^84^85^^^74^101^if  ( myPrecedence < thePrecedence )  { needParens = false; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P16_Remove_Block]^^83^84^85^^^74^101^if  ( myPrecedence < thePrecedence )  { needParens = false; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P13_Insert_Block]^if  ( myPrecedence == thePrecedence )  {     if  ( isSymmetric (  )  )  {         needParens = false;     }else {         needParens = !left;     } }^83^^^^^74^101^[Delete]^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^else if  ( myPrecedence <= thePrecedence )  {^86^^^^^74^101^else if  ( myPrecedence == thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P5_Replace_Variable]^else if  ( thePrecedence == myPrecedence )  {^86^^^^^74^101^else if  ( myPrecedence == thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^if  ( myPrecedence == thePrecedence )  {^86^^^^^74^101^else if  ( myPrecedence == thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P15_Unwrap_Block]^if (isSymmetric()) {    needParens = false;}else {    needParens = !left;};^86^87^88^89^^74^101^else if  ( myPrecedence == thePrecedence )  { if  ( isSymmetric (  )  )  { needParens = false; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P16_Remove_Block]^^86^87^88^89^^74^101^else if  ( myPrecedence == thePrecedence )  { if  ( isSymmetric (  )  )  { needParens = false; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P7_Replace_Invocation]^if  ( getSymbol (  )  )  {^87^^^^^74^101^if  ( isSymmetric (  )  )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P15_Unwrap_Block]^needParens = false;^87^88^89^^^74^101^if  ( isSymmetric (  )  )  { needParens = false; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P16_Remove_Block]^^87^88^89^^^74^101^if  ( isSymmetric (  )  )  { needParens = false; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P13_Insert_Block]^if  ( myPrecedence == thePrecedence )  {     if  ( isSymmetric (  )  )  {         needParens = false;     }else {         needParens = !left;     } }^87^^^^^74^101^[Delete]^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^needParens =  !null;^91^^^^^87^92^needParens = !left;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P11_Insert_Donor_Statement]^needParens = false;needParens = !left;^91^^^^^87^92^needParens = !left;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P3_Replace_Literal]^needParens = true;^88^^^^^74^101^needParens = false;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P11_Insert_Donor_Statement]^needParens = !left;needParens = false;^88^^^^^74^101^needParens = false;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^needParens =  !null;^91^^^^^74^101^needParens = !left;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P11_Insert_Donor_Statement]^needParens = false;needParens = !left;^91^^^^^74^101^needParens = !left;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P3_Replace_Literal]^needParens = true;^84^^^^^74^101^needParens = false;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P11_Insert_Donor_Statement]^needParens = !left;needParens = false;^84^^^^^74^101^needParens = false;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^else if  ( myPrecedence >= thePrecedence )  {^86^^^^^74^101^else if  ( myPrecedence == thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^else {^86^^^^^74^101^else if  ( myPrecedence == thePrecedence )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P5_Replace_Variable]^if  ( left )  {^95^^^^^74^101^if  ( needParens )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P6_Replace_Expression]^if  ( " ( " + expression.toString (  ) )  {^95^^^^^74^101^if  ( needParens )  {^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P15_Unwrap_Block]^return ("(" + (expression.toString())) + ")";^95^96^97^^^74^101^if  ( needParens )  { return " ( " + expression.toString (  )  + " ) "; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P16_Remove_Block]^^95^96^97^^^74^101^if  ( needParens )  { return " ( " + expression.toString (  )  + " ) "; }^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P7_Replace_Invocation]^return expression .StringBuffer (  )  ;^99^^^^^95^100^return expression.toString (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P14_Delete_Statement]^^99^^^^^95^100^return expression.toString (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P1_Replace_Type]^return " ( " + expression.tochar (  )  + " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^return " ( " + expression.toString (  ==  )  + " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^return " ( "  ^  expression.toString (  )  + " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^return " ( " + expression .StringBuffer (  )   + " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P14_Delete_Statement]^^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^return " ( " + expression.toString (  >  )  + " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P2_Replace_Operator]^return " ( "  &&  expression.toString (  )  + " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P8_Replace_Mix]^return " ( "   instanceof   expression.toString (  )    instanceof   " ) ";^96^^^^^74^101^return " ( " + expression.toString (  )  + " ) ";^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P7_Replace_Invocation]^return expression .StringBuffer (  )  ;^99^^^^^74^101^return expression.toString (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
[P14_Delete_Statement]^^99^^^^^74^101^return expression.toString (  ) ;^[CLASS] CoreOperation  [METHOD] parenthesize [RETURN_TYPE] String   Expression expression boolean left [VARIABLES] boolean  left  needParens  Expression  expression  CoreOperation  op  int  myPrecedence  thePrecedence  
