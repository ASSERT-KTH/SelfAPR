[P1_Replace_Type]^private  LinkedHashSet  attributes;^39^^^^^34^44^private List attributes;^[CLASS] DOMAttributeIterator   [VARIABLES] 
[P1_Replace_Type]^private  short  position = 0;^40^^^^^35^45^private int position = 0;^[CLASS] DOMAttributeIterator   [VARIABLES] 
[P3_Replace_Literal]^private int position = -1;^40^^^^^35^45^private int position = 0;^[CLASS] DOMAttributeIterator   [VARIABLES] 
[P8_Replace_Mix]^private int position  = null ;^40^^^^^35^45^private int position = 0;^[CLASS] DOMAttributeIterator   [VARIABLES] 
[P8_Replace_Mix]^this.parent =  null;^43^^^^^42^66^this.parent = parent;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^this.name = name;this.parent = parent;^43^^^^^42^66^this.parent = parent;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^this.name =  null;^44^^^^^42^66^this.name = name;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^this.parent = parent;this.name = name;^44^^^^^42^66^this.name = name;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^attributes = new Array Set  (  ) ;^45^^^^^42^66^attributes = new ArrayList (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^attributes = new Array LinkedHashSet  (  ) ;^45^^^^^42^66^attributes = new ArrayList (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^attributes = new  Set  (  ) ;^45^^^^^42^66^attributes = new ArrayList (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Node node =  ( Node )  parent.getNamespaceURI (  ) ;^46^^^^^42^66^Node node =  ( Node )  parent.getNode (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Node node =  ( Node )  parent .getNamespaceURI ( lname )  ;^46^^^^^42^66^Node node =  ( Node )  parent.getNode (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^46^^^^^42^66^Node node =  ( Node )  parent.getNode (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( node.getNodeType (  )  <= Node.ELEMENT_NODE )  {^47^^^^^42^66^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( attr != null )  {^47^^^^^42^66^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( i < count )  {^47^^^^^42^66^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^if  ( node .getAttributes (  )   == Node.ELEMENT_NODE )  {^47^^^^^42^66^if  ( node.getNodeType (  )  == Node.ELEMENT_NODE )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( ! ( lname.equals ( "*" )  )  )  {     Attr attr = getAttribute (  (  ( Element )   ( node )  ) , name ) ;     if  ( attr != null )  {         attributes.add ( attr ) ;     } }else {     NamedNodeMap map = node.getAttributes (  ) ;     int count = map.getLength (  ) ;     for  ( int i = 0; i < count; i++ )  {         Attr attr =  (  ( Attr )   ( map.item ( i )  )  ) ;         if  ( testAttr ( attr, name )  )  {             attributes.add ( attr ) ;         }     } }^47^^^^^42^66^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( i < count )  {^49^^^^^42^66^if  ( !lname.equals ( "*" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( lname.equals ( "*" )  )  {^49^^^^^42^66^if  ( !lname.equals ( "*" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^org.w3c.dom.Attr attr = getAttribute(((org.w3c.dom.Element) (node)), name); if (attr != null) {    attributes.add(attr);};^49^50^51^52^53^42^66^if  ( !lname.equals ( "*" )  )  { Attr attr = getAttribute (  ( Element )  node, name ) ; if  ( attr != null )  { attributes.add ( attr ) ; }^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^49^50^51^52^53^42^66^if  ( !lname.equals ( "*" )  )  { Attr attr = getAttribute (  ( Element )  node, name ) ; if  ( attr != null )  { attributes.add ( attr ) ; }^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr (  name )  )  {^60^^^^^42^66^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr ( attr )  )  {^60^^^^^42^66^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr ( name, attr )  )  {^60^^^^^42^66^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^if  ( getAttribute ( attr, name )  )  {^60^^^^^42^66^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^attributes.add(attr);^60^61^62^^^42^66^if  ( testAttr ( attr, name )  )  { attributes.add ( attr ) ; }^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^60^61^62^^^42^66^if  ( testAttr ( attr, name )  )  { attributes.add ( attr ) ; }^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testAttr ( attr, name )  )  {     return attr; }^60^^^^^42^66^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( attr != null )  {     attributes.add ( attr ) ; }^60^^^^^42^66^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^attributes.get ( attr ) ;^61^^^^^42^66^attributes.add ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^61^^^^^42^66^attributes.add ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^for  (  long  i = 0; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^for  ( int i = 0; i > count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = i; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( positionnt i = 0; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( int i = 0; i < position; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( countnt i = 0; i < i; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr =  ( Attr )  map.item ( position ) ;^59^^^^^42^66^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr =  ( Attr )  i.item ( map ) ;^59^^^^^42^66^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Attr attr =  ( Attr )  map .getLength (  )  ;^59^^^^^42^66^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^59^^^^^42^66^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^attr =  ( Attr )  nnm.item ( i ) ;Attr attr =  ( Attr )  map.item ( i ) ;^59^^^^^42^66^Attr attr =  ( Attr )  map.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^NamedNodeMap map = node .getNodeType (  )  ;^56^^^^^42^66^NamedNodeMap map = node.getAttributes (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^NamedNodeMap nnm = element.getAttributes (  ) ;NamedNodeMap map = node.getAttributes (  ) ;^56^^^^^42^66^NamedNodeMap map = node.getAttributes (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^short  count = map.getLength (  ) ;^57^^^^^42^66^int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^int count = map.item (  ) ;^57^^^^^42^66^int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^for  (  short  i = 0; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = position; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^56^57^^^^42^66^NamedNodeMap map = node.getAttributes (  ) ; int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^int count = map .item ( position )  ;^57^^^^^42^66^int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^57^^^^^42^66^int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( attr == null )  {^51^^^^^42^66^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( attr != true )  {^51^^^^^42^66^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testNS != null )  {^51^^^^^42^66^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testPrefix != null )  {^51^^^^^42^66^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix != null )  {^51^^^^^42^66^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^attributes.add(attr);^51^52^53^^^42^66^if  ( attr != null )  { attributes.add ( attr ) ; }^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^51^52^53^^^42^66^if  ( attr != null )  { attributes.add ( attr ) ; }^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( attr != null )  {     return attr; }^51^^^^^42^66^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testAttr ( attr, name )  )  {     attributes.add ( attr ) ; }^51^^^^^42^66^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^attributes.get ( attr ) ;^52^^^^^42^66^attributes.add ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^52^^^^^42^66^attributes.add ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = getAttribute (  ( Element )  node ) ;^50^^^^^42^66^Attr attr = getAttribute (  ( Element )  node, name ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Attr attr = testAttr (  ( Element )  node, name ) ;^50^^^^^42^66^Attr attr = getAttribute (  ( Element )  node, name ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;Attr attr = getAttribute (  ( Element )  node, name ) ;^50^^^^^42^66^Attr attr = getAttribute (  ( Element )  node, name ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^50^^^^^42^66^Attr attr = getAttribute (  ( Element )  node, name ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^for  ( int i = 0; i <= count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char lname = name.getName (  ) ;^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;String lname = name.getName (  ) ;^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = testName.getPrefix (  ) ;String lname = name.getName (  ) ;^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testLocalName = name.getName (  ) ;String lname = name.getName (  ) ;^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = name.getPrefix (  ) ;String lname = name.getName (  ) ;^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^int count = map .item ( count )  ;^57^^^^^42^66^int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = count; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = -5; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( attr != false )  {^51^^^^^42^66^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^for  ( int i = 0; i == count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = 8; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^int count = map .item ( i )  ;^57^^^^^42^66^int count = map.getLength (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = 9; i < count; i++ )  {^58^^^^^42^66^for  ( int i = 0; i < count; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String lname = name .getPrefix ( attr )  ;^48^^^^^42^66^String lname = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  ( !lname.equals ( "" )  )  {^49^^^^^42^66^if  ( !lname.equals ( "*" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] <init> [RETURN_TYPE] QName)   NodePointer parent QName name [VARIABLES] NamedNodeMap  map  boolean  QName  name  Node  node  List  attributes  NodePointer  parent  String  lname  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^69^^^^^54^84^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String nodePrefix = DOMNodePointer.getLocalName ( attr ) ;^69^^^^^54^84^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^69^^^^^54^84^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = testName.getPrefix (  ) ;String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^69^^^^^54^84^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = name.getPrefix (  ) ;String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^69^^^^^54^84^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^69^70^^^^54^84^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ; String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^70^^^^^55^85^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String nodeLocalName = DOMNodePointer.getPrefix ( attr ) ;^70^^^^^55^85^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String lname = name.getName (  ) ;String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^70^^^^^55^85^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testLocalName = name.getName (  ) ;String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^70^^^^^55^85^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^70^^^^^55^85^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^70^^^^^55^85^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( nodePrefix != null || nodePrefix.equals ( "xmlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( nodePrefix == null && nodePrefix.equals ( "xmlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  ( nodePrefix != null && nodePrefix.equals ( "mlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testPrefix != null && nodePrefix.equals ( "xmlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( nodePrefix != null ) {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  (  nodePrefix.equals ( "xmlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( nodePrefix != this ) {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^return false;^72^73^74^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^72^73^74^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( nodePrefix == null )  &&  ( nodeLocalName.equals ( "xmlns" )  )  )  {     return false; }^72^^^^^57^87^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( s1 == null )  &&  ( s2 != null )  )  {     return false; }^72^^^^^57^87^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( s1 != null )  &&  ( ! ( s1.equals ( s2 )  )  )  )  {     return false; }^72^^^^^57^87^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^return true;^73^^^^^58^88^return false;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  ( nodePrefix != null && nodePrefix.equals ( "xmlnsxml" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( testNS != null && nodePrefix.equals ( "xmlns" )  )  {^72^^^^^57^87^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( nodePrefix == null || nodeLocalName.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( nodePrefix != null && nodeLocalName.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlnsxm" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testPrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( nodePrefix == null && testPrefix.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( nodeLocalName == null && nodePrefix.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( nodePrefix == null ) {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  (  nodeLocalName.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( nodePrefix == true && nodeLocalName.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix != null && nodePrefix.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^return false;^76^77^78^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^76^77^78^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( s1 == null )  &&  ( s2 != null )  )  {     return false; }^76^^^^^61^91^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( nodePrefix != null )  &&  ( nodePrefix.equals ( "xmlns" )  )  )  {     return false; }^76^^^^^61^91^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( s1 != null )  &&  ( ! ( s1.equals ( s2 )  )  )  )  {     return false; }^76^^^^^61^91^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^return true;^77^^^^^62^92^return false;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlnsx" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( nodePrefix == null && testNS.equals ( "xmlns" )  )  {^76^^^^^61^91^if  ( nodePrefix == null && nodeLocalName.equals ( "xmlns" )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char testLocalName = name.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^String testLocalName = testName.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String testLocalName = name.getPrefix (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^String testLocalName = testName.getPrefix (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodeLocalName = DOMNodePointer.getLocalName ( attr ) ;String testLocalName = name.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = testName.getPrefix (  ) ;String testLocalName = name.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String lname = name.getName (  ) ;String testLocalName = name.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = name.getPrefix (  ) ;String testLocalName = name.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^return element.getAttributeNode ( name.getName (  )  ) ;String testLocalName = name.getName (  ) ;^80^^^^^65^95^String testLocalName = name.getName (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( testLocalName.equals ( "*" )  && testLocalName.equals ( nodeLocalName )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testNS.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( testNS )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( nodeLocalName.equals ( "*" )  || testLocalName.equals ( testLocalName )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( testLocalName.equals ( "*" )  ) {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  (  testLocalName.equals ( nodeLocalName )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( testPrefix != null )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( nodePrefix != null )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^java.lang.String testPrefix = testName.getPrefix(); if (org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.equalStrings(testPrefix, nodePrefix)) {    return true;}; java.lang.String testNS = null; if (testPrefix != null) {    testNS = parent.getNamespaceURI(testPrefix);}; java.lang.String nodeNS = null; if (nodePrefix != null) {    nodeNS = parent.getNamespaceURI(nodePrefix);}; return org.apache.commons.jxpath.ri.model.dom.DOMAttributeIterator.equalStrings(testNS, nodeNS);^81^82^^84^85^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  { String testPrefix = testName.getPrefix (  ) ; if  ( equalStrings ( testPrefix, nodePrefix )  )  { return true; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^81^82^^84^85^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  { String testPrefix = testName.getPrefix (  ) ; if  ( equalStrings ( testPrefix, nodePrefix )  )  { return true; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( equalStrings ( testNS, nodePrefix )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( equalStrings (  nodePrefix )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( equalStrings ( testPrefix )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( equalStrings ( nodePrefix, testPrefix )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^if  ( testAttr ( testPrefix, nodePrefix )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^return true;^84^85^86^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  { return true; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^84^85^86^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  { return true; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^return false;^85^^^^^70^100^return true;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( testPrefix == null )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testLocalName != null )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( testPrefix != false )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( attr != null )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testNS != null )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix != null )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^testNS = parent.getNamespaceURI(testPrefix);^89^90^91^^^74^104^if  ( testPrefix != null )  { testNS = parent.getNamespaceURI ( testPrefix ) ; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^89^90^91^^^74^104^if  ( testPrefix != null )  { testNS = parent.getNamespaceURI ( testPrefix ) ; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( nodePrefix != null )  {     nodeNS = parent.getNamespaceURI ( nodePrefix ) ; }^89^^^^^74^104^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^testNS = parent.getNamespaceURI ( testLocalName ) ;^90^^^^^75^105^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^testNS = testPrefix.getNamespaceURI ( parent ) ;^90^^^^^75^105^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;testNS = parent.getNamespaceURI ( testPrefix ) ;^90^^^^^75^105^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testPrefix != null )  {     testNS = parent.getNamespaceURI ( testPrefix ) ; }^90^^^^^75^105^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^testNS = parent.getNamespaceURI ( testNS ) ;^90^^^^^75^105^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^90^^^^^75^105^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( nodePrefix == null )  {^94^^^^^79^109^if  ( nodePrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testPrefix != null )  {^94^^^^^79^109^if  ( nodePrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( nodePrefix != this )  {^94^^^^^79^109^if  ( nodePrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( attr != null )  {^94^^^^^79^109^if  ( nodePrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testNS != null )  {^94^^^^^79^109^if  ( nodePrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^nodeNS = parent.getNamespaceURI(nodePrefix);^94^95^96^^^79^109^if  ( nodePrefix != null )  { nodeNS = parent.getNamespaceURI ( nodePrefix ) ; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^94^95^96^^^79^109^if  ( nodePrefix != null )  { nodeNS = parent.getNamespaceURI ( nodePrefix ) ; }^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testPrefix != null )  {     testNS = parent.getNamespaceURI ( testPrefix ) ; }^94^^^^^79^109^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^nodeNS = parent.getNamespaceURI ( testPrefix ) ;^95^^^^^80^110^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^nodeNS = nodePrefix.getNamespaceURI ( parent ) ;^95^^^^^80^110^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^nodeNS = parent .getNode (  )  ;^95^^^^^80^110^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^testNS = parent.getNamespaceURI ( testPrefix ) ;nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^95^^^^^80^110^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( nodePrefix != null )  {     nodeNS = parent.getNamespaceURI ( nodePrefix ) ; }^95^^^^^80^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^95^^^^^80^110^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return equalStrings ( testPrefix, nodeNS ) ;^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return equalStrings ( testNS, testPrefix ) ;^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return equalStrings (  nodeNS ) ;^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return equalStrings ( testNS ) ;^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return equalStrings ( nodeNS, testNS ) ;^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^return testAttr ( testNS, nodeNS ) ;^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P12_Insert_Condition]^if  ( equalStrings ( testPrefix, nodePrefix )  )  { return equalStrings ( testNS, nodeNS ) ; }^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char testPrefix = testName.getPrefix (  ) ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^String testPrefix = name.getPrefix (  ) ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String lname = name.getName (  ) ;String testPrefix = testName.getPrefix (  ) ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testLocalName = name.getName (  ) ;String testPrefix = testName.getPrefix (  ) ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = name.getPrefix (  ) ;String testPrefix = testName.getPrefix (  ) ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;String testPrefix = testName.getPrefix (  ) ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char testNS = null;^88^^^^^73^103^String testNS = null;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodeNS = null;String testNS = null;^88^^^^^73^103^String testNS = null;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P12_Insert_Condition]^if  ( testNS != null )  { String testNS = null; }^88^^^^^73^103^String testNS = null;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char nodeNS = null;^93^^^^^78^108^String nodeNS = null;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testNS = null;String nodeNS = null;^93^^^^^78^108^String nodeNS = null;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( equalStrings ( testPrefix, testNS )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( equalStrings ( testPrefix, nodePrefix )  )  {     return true; }^84^^^^^69^99^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^97^^^^^82^112^return equalStrings ( testNS, nodeNS ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( testPrefix != true )  {^89^^^^^74^104^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^testNS = parent .getNode (  )  ;^90^^^^^75^105^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( nodePrefix != true )  {^94^^^^^79^109^if  ( nodePrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^nodeNS = parent.getNamespaceURI ( testNS ) ;^95^^^^^80^110^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String testPrefix = testName .getLocalName ( attr )  ;^82^^^^^67^97^String testPrefix = testName.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^if  ( testLocalName.equals ( "" )  || testLocalName.equals ( nodeLocalName )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testPrefix.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( testPrefix )  )  {^81^^^^^66^96^if  ( testLocalName.equals ( "*" )  || testLocalName.equals ( nodeLocalName )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( testAttr ( testNS, nodePrefix )  )  {^84^^^^^69^99^if  ( equalStrings ( testPrefix, nodePrefix )  )  {^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^return true;^99^^^^^84^114^return false;^[CLASS] DOMAttributeIterator  [METHOD] testAttr [RETURN_TYPE] boolean   Attr attr QName testName [VARIABLES] boolean  QName  name  testName  List  attributes  NodePointer  parent  String  nodeLocalName  nodeNS  nodePrefix  testLocalName  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( s1 == null || s2 != null )  {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P2_Replace_Operator]^if  ( s1 != null && s2 != null )  {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P2_Replace_Operator]^if  ( s1 == null && s2 == null )  {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P5_Replace_Variable]^if  ( s2 == null && s1 != null )  {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P6_Replace_Expression]^if  ( s1 == null ) {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P6_Replace_Expression]^if  (  s2 != null )  {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P8_Replace_Mix]^if  (  s2 != false )  {^103^^^^^102^110^if  ( s1 == null && s2 != null )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P15_Unwrap_Block]^return false;^103^104^105^^^102^110^if  ( s1 == null && s2 != null )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P16_Remove_Block]^^103^104^105^^^102^110^if  ( s1 == null && s2 != null )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  ( attr != null )  {     return attr; }^103^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  (  ( nodePrefix == null )  &&  ( nodeLocalName.equals ( "xmlns" )  )  )  {     return false; }^103^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  (  ( nodePrefix != null )  &&  ( nodePrefix.equals ( "xmlns" )  )  )  {     return false; }^103^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  (  ( s1 != null )  &&  ( ! ( s1.equals ( s2 )  )  )  )  {     return false; }^103^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P3_Replace_Literal]^return true;^104^^^^^102^110^return false;^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P2_Replace_Operator]^if  ( s1 != null || !s1.equals ( s2 )  )  {^106^^^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P2_Replace_Operator]^if  ( s1 == null && !s1.equals ( s2 )  )  {^106^^^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P5_Replace_Variable]^if  ( s2 != null && !s1.equals ( s1 )  )  {^106^^^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P6_Replace_Expression]^if  ( s1 != null ) {^106^^^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P6_Replace_Expression]^if  (  !s1.equals ( s2 )  )  {^106^^^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P15_Unwrap_Block]^return false;^106^107^108^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P16_Remove_Block]^^106^107^108^^^102^110^if  ( s1 != null && !s1.equals ( s2 )  )  { return false; }^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  (  ( nodePrefix == null )  &&  ( nodeLocalName.equals ( "xmlns" )  )  )  {     return false; }^106^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  (  ( s1 == null )  &&  ( s2 != null )  )  {     return false; }^106^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P13_Insert_Block]^if  (  ( nodePrefix != null )  &&  ( nodePrefix.equals ( "xmlns" )  )  )  {     return false; }^106^^^^^102^110^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P3_Replace_Literal]^return true;^107^^^^^102^110^return false;^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P3_Replace_Literal]^return false;^109^^^^^102^110^return true;^[CLASS] DOMAttributeIterator  [METHOD] equalStrings [RETURN_TYPE] boolean   String s1 String s2 [VARIABLES] List  attributes  NodePointer  parent  String  s1  s2  boolean  QName  name  testName  int  count  i  position  
[P1_Replace_Type]^char testPrefix = name.getPrefix (  ) ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^String testPrefix = testName.getPrefix (  ) ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^String testPrefix = name .getLocalName ( attr )  ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testPrefix = testName.getPrefix (  ) ;String testPrefix = name.getPrefix (  ) ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String lname = name.getName (  ) ;String testPrefix = name.getPrefix (  ) ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String testLocalName = name.getName (  ) ;String testPrefix = name.getPrefix (  ) ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodePrefix = DOMNodePointer.getPrefix ( attr ) ;String testPrefix = name.getPrefix (  ) ;^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P12_Insert_Condition]^if  ( equalStrings ( testPrefix, nodePrefix )  )  { String testPrefix = name.getPrefix (  ) ; }^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^113^^^^^112^141^String testPrefix = name.getPrefix (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^char testNS = null;^114^^^^^112^141^String testNS = null;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^String nodeNS = null;String testNS = null;^114^^^^^112^141^String testNS = null;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P12_Insert_Condition]^if  ( testNS != null )  { String testNS = null; }^114^^^^^112^141^String testNS = null;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( testPrefix == null )  {^116^^^^^112^141^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( testNS != true )  {^116^^^^^112^141^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( attr != null )  {^116^^^^^112^141^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testNS != null )  {^116^^^^^112^141^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix != null )  {^116^^^^^112^141^if  ( testPrefix != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^testNS = parent.getNamespaceURI(testPrefix);^116^117^118^^^112^141^if  ( testPrefix != null )  { testNS = parent.getNamespaceURI ( testPrefix ) ; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^116^117^118^^^112^141^if  ( testPrefix != null )  { testNS = parent.getNamespaceURI ( testPrefix ) ; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( nodePrefix != null )  {     nodeNS = parent.getNamespaceURI ( nodePrefix ) ; }^116^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^testNS = parent.getNamespaceURI ( testNS ) ;^117^^^^^112^141^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^testNS = testPrefix.getNamespaceURI ( parent ) ;^117^^^^^112^141^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^testNS =  parent.getNamespaceURI ( null ) ;^117^^^^^112^141^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^nodeNS = parent.getNamespaceURI ( nodePrefix ) ;testNS = parent.getNamespaceURI ( testPrefix ) ;^117^^^^^112^141^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testPrefix != null )  {     testNS = parent.getNamespaceURI ( testPrefix ) ; }^117^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^117^^^^^112^141^testNS = parent.getNamespaceURI ( testPrefix ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( testNS == null )  {^120^^^^^112^141^if  ( testNS != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( attr != null )  {^120^^^^^112^141^if  ( testNS != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P6_Replace_Expression]^if  ( i < nnm.getLength() )  {^120^^^^^112^141^if  ( testNS != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( testPrefix != this )  {^120^^^^^112^141^if  ( testNS != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testPrefix != null )  {^120^^^^^112^141^if  ( testNS != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix != null )  {^120^^^^^112^141^if  ( testNS != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^org.w3c.dom.Attr attr = element.getAttributeNodeNS(testNS, name.getName()); if (attr != null) {    return attr;}; org.w3c.dom.NamedNodeMap nnm = element.getAttributes(); for (int i = 0; i < (nnm.getLength()); i++) {    attr = ((org.w3c.dom.Attr) (nnm.item(i)));    if (testAttr(attr, name)) {        return attr;    }}; return null;^120^121^122^123^124^112^141^if  ( testNS != null )  { Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ; if  ( attr != null )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^120^121^122^123^124^112^141^if  ( testNS != null )  { Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ; if  ( attr != null )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return element.getAttributeNode ( testName.getName (  )  ) ;^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return name.getAttributeNode ( element.getName (  )  ) ;^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^return element.getAttributeNodeNS ( name.getName (  )  ) ;^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^return element .getAttributeNodeNS ( testPrefix , testPrefix )  ;^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^return element.getAttributeNode ( name .getPrefix ( attr )   ) ;^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^return element .getAttributeNodeNS ( testPrefix , testNS )  ;^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^139^^^^^120^140^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( attr == null )  {^122^^^^^112^141^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( attr != this )  {^122^^^^^112^141^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testNS != null )  {^122^^^^^112^141^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( testPrefix != null )  {^122^^^^^112^141^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P9_Replace_Statement]^if  ( nodePrefix != null )  {^122^^^^^112^141^if  ( attr != null )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^return attr;^122^123^124^^^112^141^if  ( attr != null )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^122^123^124^^^112^141^if  ( attr != null )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  (  ( s1 == null )  &&  ( s2 != null )  )  {     return false; }^122^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^122^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testAttr ( attr, name )  )  {     return attr; }^122^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( attr != null )  {     attributes.add ( attr ) ; }^122^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr ( attr, testName )  )  {^132^^^^^112^141^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr (  name )  )  {^132^^^^^112^141^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr ( attr )  )  {^132^^^^^112^141^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^if  ( testAttr ( name, attr )  )  {^132^^^^^112^141^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^if  ( getAttribute ( attr, name )  )  {^132^^^^^112^141^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P15_Unwrap_Block]^return attr;^132^133^134^^^112^141^if  ( testAttr ( attr, name )  )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P16_Remove_Block]^^132^133^134^^^112^141^if  ( testAttr ( attr, name )  )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( attr != null )  {     return attr; }^132^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( testAttr ( attr, name )  )  {     attributes.add ( attr ) ; }^132^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P13_Insert_Block]^if  ( ! ( setPosition ( 1 )  )  )  {     return null; }^132^^^^^112^141^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P1_Replace_Type]^for  (  short  i = 0; i < nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^for  ( int i = 0; i <= nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = 9; i < nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^for  ( positionnt i = 0; i < nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^for  ( int i = 0; i < nnm.item (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^for  ( int i = 0; i < nnm .item ( position )  ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^attr =  ( Attr )  nnm.item ( position ) ;^131^^^^^112^141^attr =  ( Attr )  nnm.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^attr =  ( Attr )  i.item ( nnm ) ;^131^^^^^112^141^attr =  ( Attr )  nnm.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^attr =   ( Attr )  null.item ( i ) ;^131^^^^^112^141^attr =  ( Attr )  nnm.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^131^^^^^112^141^attr =  ( Attr )  nnm.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^Attr attr =  ( Attr )  map.item ( i ) ;attr =  ( Attr )  nnm.item ( i ) ;^131^^^^^112^141^attr =  ( Attr )  nnm.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^if  ( getAttribute ( attr, testName )  )  {^132^^^^^112^141^if  ( testAttr ( attr, name )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^return this;^136^^^^^112^141^return null;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = element.getAttributeNodeNS ( testPrefix, name.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = element.getAttributeNodeNS ( testNS, testName.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = element.getAttributeNodeNS (  name.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = element.getAttributeNodeNS ( testNS.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = testNS.getAttributeNodeNS ( element, name.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = name.getAttributeNodeNS ( testNS, element.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Attr attr = element .getAttributeNode ( testPrefix )  ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^Attr attr = element.getAttributeNodeNS ( testNS, name .getPrefix ( attr )   ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^Attr attr = getAttribute (  ( Element )  node, name ) ;Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^NamedNodeMap map = node.getAttributes (  ) ;NamedNodeMap nnm = element.getAttributes (  ) ;^129^^^^^112^141^NamedNodeMap nnm = element.getAttributes (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = -8; i < nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P11_Insert_Donor_Statement]^return element.getAttributeNode ( name.getName (  )  ) ;Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^129^^^^^112^141^NamedNodeMap nnm = element.getAttributes (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^for  ( int i = 0; i < nnm .item ( i )  ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^130^131^132^133^134^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  { attr =  ( Attr )  nnm.item ( i ) ; if  ( testAttr ( attr, name )  )  { return attr; }^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^attr =  ( Attr )  nnm .getLength (  )  ;^131^^^^^112^141^attr =  ( Attr )  nnm.item ( i ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = -1; i < nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^return true;^136^^^^^112^141^return null;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return element.getAttributeNode ( testName.getName (  )  ) ;^139^^^^^112^141^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^return name.getAttributeNode ( element.getName (  )  ) ;^139^^^^^112^141^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^return element.getAttributeNodeNS ( name.getName (  )  ) ;^139^^^^^112^141^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P5_Replace_Variable]^Attr attr = element.getAttributeNodeNS ( name, testNS.getName (  )  ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P3_Replace_Literal]^for  ( int i = position; i < nnm.getLength (  ) ; i++ )  {^130^^^^^112^141^for  ( int i = 0; i < nnm.getLength (  ) ; i++ )  {^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P8_Replace_Mix]^Attr attr = element.getAttributeNodeNS ( testNS, testName .getPrefix ( attr )   ) ;^121^^^^^112^141^Attr attr = element.getAttributeNodeNS ( testNS, name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^NamedNodeMap nnm = element .getNodeType (  )  ;^129^^^^^112^141^NamedNodeMap nnm = element.getAttributes (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P7_Replace_Invocation]^return element .getAttributeNodeNS ( testPrefix , testNS )  ;^139^^^^^112^141^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P14_Delete_Statement]^^139^^^^^112^141^return element.getAttributeNode ( name.getName (  )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getAttribute [RETURN_TYPE] Attr   Element element QName name [VARIABLES] NamedNodeMap  nnm  boolean  QName  name  testName  Element  element  List  attributes  NodePointer  parent  String  testNS  testPrefix  int  count  i  position  Attr  attr  
[P2_Replace_Operator]^if  ( position != 0 )  {^144^^^^^143^155^if  ( position == 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( position == 2 )  {^144^^^^^143^155^if  ( position == 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( position == index )  {^144^^^^^143^155^if  ( position == 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^if  ( index == 0 )  {^144^^^^^143^155^if  ( position == 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^if  ( position == 0 * 1 )  {^144^^^^^143^155^if  ( position == 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P9_Replace_Statement]^if  ( !setPosition ( 1 )  )  {^144^^^^^143^155^if  ( position == 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P15_Unwrap_Block]^if (!(setPosition(1))) {    return null;}; position = 0;^144^145^146^147^^143^155^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P16_Remove_Block]^^144^145^146^147^^143^155^if  ( position == 0 )  { if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( !setPosition ( index )  )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^if  ( !setPosition ( 2 )  )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P9_Replace_Statement]^if  ( position == 0 )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P15_Unwrap_Block]^return null;^145^146^147^^^143^155^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P16_Remove_Block]^^145^146^147^^^143^155^if  ( !setPosition ( 1 )  )  { return null; }^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P13_Insert_Block]^if  ( attr != null )  {     return attr; }^145^^^^^143^155^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P13_Insert_Block]^if  ( testAttr ( attr, name )  )  {     return attr; }^145^^^^^143^155^[Delete]^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^return this;^146^^^^^143^155^return null;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^position = 3;^148^^^^^143^155^position = 0;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( !setPosition ( 9 )  )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( !setPosition ( 7 )  )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^if  ( !setPosition ( 4 )  )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^return true;^146^^^^^143^155^return null;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^position = index;^148^^^^^143^155^position = 0;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( !setPosition ( count )  )  {^145^^^^^143^155^if  ( !setPosition ( 1 )  )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P1_Replace_Type]^long  index = position - 1;^150^^^^^143^155^int index = position - 1;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P2_Replace_Operator]^int index = position  |  1;^150^^^^^143^155^int index = position - 1;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^int index = position ;^150^^^^^143^155^int index = position - 1;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^int index = i - 1;^150^^^^^143^155^int index = position - 1;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P2_Replace_Operator]^if  ( index <= 0 )  {^151^^^^^143^155^if  ( index < 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( index < index )  {^151^^^^^143^155^if  ( index < 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^if  ( index <  )  {^151^^^^^143^155^if  ( index < 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^if  ( position < 0 )  {^151^^^^^143^155^if  ( index < 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^if  ( index < 4 )  {^151^^^^^143^155^if  ( index < 0 )  {^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P15_Unwrap_Block]^index = 0;^151^152^153^^^143^155^if  ( index < 0 )  { index = 0; }^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P16_Remove_Block]^^151^152^153^^^143^155^if  ( index < 0 )  { index = 0; }^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^index = -4;^152^^^^^143^155^index = 0;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^index = 0 + 2;^152^^^^^143^155^index = 0;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^index = -6;^152^^^^^143^155^index = 0;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^index = 0 + 4;^152^^^^^143^155^index = 0;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( position )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return new DOMAttributePointer (   ( Attr )  attributes.get ( index )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return new DOMAttributePointer ( index,  ( Attr )  attributes.get ( parent )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return new DOMAttributePointer ( attributes,  ( Attr )  parent.get ( index )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P7_Replace_Invocation]^return new DOMAttributePointer ( parent,  ( Attr )  attributes.add ( index )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return new DOMAttributePointer ( parent,  ( Attr )  index.get ( attributes )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^return new DOMAttributePointer ( parent,  ( Attr )  attributes.add ( position )  ) ;^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P14_Delete_Statement]^^154^^^^^143^155^return new DOMAttributePointer ( parent,  ( Attr )  attributes.get ( index )  ) ;^[CLASS] DOMAttributeIterator  [METHOD] getNodePointer [RETURN_TYPE] NodePointer   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^return index;^158^^^^^157^159^return position;^[CLASS] DOMAttributeIterator  [METHOD] getPosition [RETURN_TYPE] int   [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^this.position =  index;^162^^^^^161^164^this.position = position;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P2_Replace_Operator]^return position >= 1 || position <= attributes.size (  ) ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P2_Replace_Operator]^return position < 1 && position <= attributes.size (  ) ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P2_Replace_Operator]^return position >= 1 && position > attributes.size (  ) ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^return position >= 8 && position <= attributes.size (  ) ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^return position >= 1 && position <= attributes.size() + 7 ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return index >= 1 && position <= attributes.size (  ) ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P5_Replace_Variable]^return attributes >= 1 && position <= position.size (  ) ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P8_Replace_Mix]^return position >= 1 && position <= attributes.size (  )  + 4;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P3_Replace_Literal]^return position >= 1 && position <= attributes.size() - 5 ;^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
[P14_Delete_Statement]^^163^^^^^161^164^return position >= 1 && position <= attributes.size (  ) ;^[CLASS] DOMAttributeIterator  [METHOD] setPosition [RETURN_TYPE] boolean   int position [VARIABLES] List  attributes  NodePointer  parent  boolean  QName  name  testName  int  count  i  index  position  
