[P1_Replace_Type]^private  Set  pointers = new Array Set  (  ) ;^29^^^^^24^34^private List pointers = new ArrayList (  ) ;^[CLASS] BasicNodeSet   [VARIABLES] 
[P8_Replace_Mix]^private  LinkedHashSet  pointers = new Array LinkedHashSet  (  ) ;^29^^^^^24^34^private List pointers = new ArrayList (  ) ;^[CLASS] BasicNodeSet   [VARIABLES] 
[P1_Replace_Type]^private  Set  readOnlyPointers;^30^^^^^25^35^private List readOnlyPointers;^[CLASS] BasicNodeSet   [VARIABLES] 
[P1_Replace_Type]^private  Set  nodes;^31^^^^^26^36^private List nodes;^[CLASS] BasicNodeSet   [VARIABLES] 
[P8_Replace_Mix]^private  LinkedHashSet  nodes;^31^^^^^26^36^private List nodes;^[CLASS] BasicNodeSet   [VARIABLES] 
[P1_Replace_Type]^private  LinkedHashSet  values;^32^^^^^27^37^private List values;^[CLASS] BasicNodeSet   [VARIABLES] 
[P7_Replace_Invocation]^pointers.get ( pointer ) ;^35^^^^^34^37^pointers.add ( pointer ) ;^[CLASS] BasicNodeSet  [METHOD] add [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P14_Delete_Statement]^^35^36^^^^34^37^pointers.add ( pointer ) ; readOnlyPointers = null;^[CLASS] BasicNodeSet  [METHOD] add [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P11_Insert_Donor_Statement]^pointers.remove ( pointer ) ;pointers.add ( pointer ) ;^35^^^^^34^37^pointers.add ( pointer ) ;^[CLASS] BasicNodeSet  [METHOD] add [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P8_Replace_Mix]^readOnlyPointers = this;^36^^^^^34^37^readOnlyPointers = null;^[CLASS] BasicNodeSet  [METHOD] add [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P12_Insert_Condition]^if  ( readOnlyPointers == null )  { readOnlyPointers = null; }^36^^^^^34^37^readOnlyPointers = null;^[CLASS] BasicNodeSet  [METHOD] add [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P7_Replace_Invocation]^pointers.get ( pointer ) ;^40^^^^^39^42^pointers.remove ( pointer ) ;^[CLASS] BasicNodeSet  [METHOD] remove [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P8_Replace_Mix]^pointers .size (  )  ;^40^^^^^39^42^pointers.remove ( pointer ) ;^[CLASS] BasicNodeSet  [METHOD] remove [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P14_Delete_Statement]^^40^^^^^39^42^pointers.remove ( pointer ) ;^[CLASS] BasicNodeSet  [METHOD] remove [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P11_Insert_Donor_Statement]^pointers.add ( pointer ) ;pointers.remove ( pointer ) ;^40^^^^^39^42^pointers.remove ( pointer ) ;^[CLASS] BasicNodeSet  [METHOD] remove [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P8_Replace_Mix]^readOnlyPointers = this;^41^^^^^39^42^readOnlyPointers = null;^[CLASS] BasicNodeSet  [METHOD] remove [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P12_Insert_Condition]^if  ( readOnlyPointers == null )  { readOnlyPointers = null; }^41^^^^^39^42^readOnlyPointers = null;^[CLASS] BasicNodeSet  [METHOD] remove [RETURN_TYPE] void   Pointer pointer [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  
[P2_Replace_Operator]^if  ( readOnlyPointers != null )  {^45^^^^^44^49^if  ( readOnlyPointers == null )  {^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P5_Replace_Variable]^if  ( values == null )  {^45^^^^^44^49^if  ( readOnlyPointers == null )  {^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P8_Replace_Mix]^if  ( readOnlyPointers == false )  {^45^^^^^44^49^if  ( readOnlyPointers == null )  {^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P9_Replace_Statement]^if  ( nodes == null )  {^45^^^^^44^49^if  ( readOnlyPointers == null )  {^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P15_Unwrap_Block]^readOnlyPointers = java.util.Collections.unmodifiableList(pointers);^45^46^47^^^44^49^if  ( readOnlyPointers == null )  { readOnlyPointers = Collections.unmodifiableList ( pointers ) ; }^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P16_Remove_Block]^^45^46^47^^^44^49^if  ( readOnlyPointers == null )  { readOnlyPointers = Collections.unmodifiableList ( pointers ) ; }^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P1_Replace_Type]^readOnlyPointers = Collections.unmodifiable LinkedHashSet  ( pointers ) ;^46^^^^^44^49^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P5_Replace_Variable]^readOnlyPointers = Collections.unmodifiableList ( values ) ;^46^^^^^44^49^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P8_Replace_Mix]^readOnlyPointers = Collections.unmodifiable Set  ( pointers ) ;^46^^^^^44^49^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P11_Insert_Donor_Statement]^nodes = Collections.unmodifiableList ( nodes ) ;readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^46^^^^^44^49^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P11_Insert_Donor_Statement]^values = Collections.unmodifiableList ( values ) ;readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^46^^^^^44^49^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P13_Insert_Block]^if  (  ( readOnlyPointers )  == null )  {     readOnlyPointers = unmodifiableList ( pointers ) ; }^46^^^^^44^49^[Delete]^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P14_Delete_Statement]^^46^47^^^^44^49^readOnlyPointers = Collections.unmodifiableList ( pointers ) ; }^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P5_Replace_Variable]^return values;^48^^^^^44^49^return readOnlyPointers;^[CLASS] BasicNodeSet  [METHOD] getPointers [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P2_Replace_Operator]^if  ( nodes != null )  {^52^^^^^51^61^if  ( nodes == null )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^if  ( values == null )  {^52^^^^^51^61^if  ( nodes == null )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P6_Replace_Expression]^if  ( i < pointers.size() )  {^52^^^^^51^61^if  ( nodes == null )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^if  ( nodes == true )  {^52^^^^^51^61^if  ( nodes == null )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P9_Replace_Statement]^if  ( readOnlyPointers == null )  {^52^^^^^51^61^if  ( nodes == null )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P15_Unwrap_Block]^nodes = new java.util.ArrayList(); for (int i = 0; i < (pointers.size()); i++) {    org.apache.commons.jxpath.Pointer pointer = ((org.apache.commons.jxpath.Pointer) (pointers.get(i)));    nodes.add(pointer.getValue());}; nodes = java.util.Collections.unmodifiableList(nodes);^52^53^54^55^56^51^61^if  ( nodes == null )  { nodes = new ArrayList (  ) ; for  ( int i = 0; i < pointers.size (  ) ; i++ )  { Pointer pointer =  ( Pointer )  pointers.get ( i ) ; nodes.add ( pointer.getValue (  )  ) ; }^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P16_Remove_Block]^^52^53^54^55^56^51^61^if  ( nodes == null )  { nodes = new ArrayList (  ) ; for  ( int i = 0; i < pointers.size (  ) ; i++ )  { Pointer pointer =  ( Pointer )  pointers.get ( i ) ; nodes.add ( pointer.getValue (  )  ) ; }^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < pointers.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= pointers.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < pointers.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() + 8 ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < values.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^for  ( pointersnt i = 0; i < i.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^Pointer pointer =  ( Pointer )  values.get ( i ) ;^55^^^^^51^61^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^Pointer pointer =  ( Pointer )  i.get ( pointers ) ;^55^^^^^51^61^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P7_Replace_Invocation]^Pointer pointer =  ( Pointer )  pointers.add ( i ) ;^55^^^^^51^61^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^Pointer pointer =  ( Pointer )  values.add ( i ) ;^55^^^^^51^61^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^55^^^^^51^61^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P7_Replace_Invocation]^nodes.get ( pointer.getValue (  )  ) ;^56^^^^^51^61^nodes.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^56^^^^^51^61^nodes.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^values.add ( pointer.getValue (  )  ) ;nodes.add ( pointer.getValue (  )  ) ;^56^^^^^51^61^nodes.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^nodes = new Array Set  (  ) ;^53^^^^^51^61^nodes = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^nodes = new Array LinkedHashSet  (  ) ;^53^^^^^51^61^nodes = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^values = new ArrayList (  ) ;nodes = new ArrayList (  ) ;^53^^^^^51^61^nodes = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^nodes = Collections.unmodifiable LinkedHashSet  ( nodes ) ;^58^^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^nodes = Collections.unmodifiable ArrayList  ( nodes ) ;^58^^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;nodes = Collections.unmodifiableList ( nodes ) ;^58^^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^values = Collections.unmodifiableList ( values ) ;nodes = Collections.unmodifiableList ( nodes ) ;^58^^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^nodes = new  LinkedHashSet  (  ) ;^53^^^^^51^61^nodes = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() - 5 ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() + 7 ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^54^55^56^57^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  { Pointer pointer =  ( Pointer )  pointers.get ( i ) ; nodes.add ( pointer.getValue (  )  ) ; }^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^nodes .add ( pointer )  ;^56^^^^^51^61^nodes.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^nodes = Collections.unmodifiableList ( values ) ;^58^^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^58^59^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ; }^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == pointers.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() + 3 ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^nodes = Collections.unmodifiable Set  ( nodes ) ;^58^^^^^51^61^nodes = Collections.unmodifiableList ( nodes ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < pointers.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = -3; i < pointers.size (  ) ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() + 4 ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() - 1 ; i++ )  {^54^^^^^51^61^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^55^56^^^^51^61^Pointer pointer =  ( Pointer )  pointers.get ( i ) ; nodes.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^return values;^60^^^^^51^61^return nodes;^[CLASS] BasicNodeSet  [METHOD] getNodes [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P2_Replace_Operator]^if  ( values != null )  {^64^^^^^63^73^if  ( values == null )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^if  ( readOnlyPointers == null )  {^64^^^^^63^73^if  ( values == null )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P6_Replace_Expression]^if  ( i < pointers.size() )  {^64^^^^^63^73^if  ( values == null )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^if  ( values == true )  {^64^^^^^63^73^if  ( values == null )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P9_Replace_Statement]^if  ( nodes == null )  {^64^^^^^63^73^if  ( values == null )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P15_Unwrap_Block]^values = new java.util.ArrayList(); for (int i = 0; i < (pointers.size()); i++) {    org.apache.commons.jxpath.Pointer pointer = ((org.apache.commons.jxpath.Pointer) (pointers.get(i)));    values.add(pointer.getValue());}; values = java.util.Collections.unmodifiableList(values);^64^65^66^67^68^63^73^if  ( values == null )  { values = new ArrayList (  ) ; for  ( int i = 0; i < pointers.size (  ) ; i++ )  { Pointer pointer =  ( Pointer )  pointers.get ( i ) ; values.add ( pointer.getValue (  )  ) ; }^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P16_Remove_Block]^^64^65^66^67^68^63^73^if  ( values == null )  { values = new ArrayList (  ) ; for  ( int i = 0; i < pointers.size (  ) ; i++ )  { Pointer pointer =  ( Pointer )  pointers.get ( i ) ; values.add ( pointer.getValue (  )  ) ; }^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 7; i < pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() - 1 ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < values.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^for  ( pointernt i = 0; i < is.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^Pointer pointer =  ( Pointer )  values.get ( i ) ;^67^^^^^63^73^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^Pointer pointer =  ( Pointer )  i.get ( pointers ) ;^67^^^^^63^73^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P7_Replace_Invocation]^Pointer pointer =  ( Pointer )  pointers.add ( i ) ;^67^^^^^63^73^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^67^^^^^63^73^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P7_Replace_Invocation]^values.get ( pointer.getValue (  )  ) ;^68^^^^^63^73^values.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^values .add ( pointer )  ;^68^^^^^63^73^values.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^68^^^^^63^73^values.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^nodes.add ( pointer.getValue (  )  ) ;values.add ( pointer.getValue (  )  ) ;^68^^^^^63^73^values.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^values = new Array LinkedHashSet  (  ) ;^65^^^^^63^73^values = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^values = new Array Set  (  ) ;^65^^^^^63^73^values = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^nodes = new ArrayList (  ) ;values = new ArrayList (  ) ;^65^^^^^63^73^values = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^values = Collections.unmodifiable ArrayList  ( values ) ;^70^^^^^63^73^values = Collections.unmodifiableList ( values ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^values = Collections.unmodifiableList ( readOnlyPointers ) ;^70^^^^^63^73^values = Collections.unmodifiableList ( values ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^values = Collections.unmodifiable Set  ( values ) ;^70^^^^^63^73^values = Collections.unmodifiableList ( values ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^nodes = Collections.unmodifiableList ( nodes ) ;values = Collections.unmodifiableList ( values ) ;^70^^^^^63^73^values = Collections.unmodifiableList ( values ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P11_Insert_Donor_Statement]^readOnlyPointers = Collections.unmodifiableList ( pointers ) ;values = Collections.unmodifiableList ( values ) ;^70^^^^^63^73^values = Collections.unmodifiableList ( values ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^values = new  LinkedHashSet  (  ) ;^65^^^^^63^73^values = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() - 5 ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() - 0 ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^66^67^68^69^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  { Pointer pointer =  ( Pointer )  pointers.get ( i ) ; values.add ( pointer.getValue (  )  ) ; }^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^70^71^^^^63^73^values = Collections.unmodifiableList ( values ) ; }^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = -3; i < pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() + 1 ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P14_Delete_Statement]^^67^68^^^^63^73^Pointer pointer =  ( Pointer )  pointers.get ( i ) ; values.add ( pointer.getValue (  )  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^values = Collections.unmodifiable LinkedHashSet  ( values ) ;^70^^^^^63^73^values = Collections.unmodifiableList ( values ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P1_Replace_Type]^values = new  Set  (  ) ;^65^^^^^63^73^values = new ArrayList (  ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 9; i < pointers.size (  ) ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() - 9 ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^Pointer pointer =  ( Pointer )  values.add ( i ) ;^67^^^^^63^73^Pointer pointer =  ( Pointer )  pointers.get ( i ) ;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < pointers.size() + 2 ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < pointers .remove ( 2 )  ; i++ )  {^66^^^^^63^73^for  ( int i = 0; i < pointers.size (  ) ; i++ )  {^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P5_Replace_Variable]^return readOnlyPointers;^72^^^^^63^73^return values;^[CLASS] BasicNodeSet  [METHOD] getValues [RETURN_TYPE] List   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  Pointer  pointer  boolean  int  i  
[P8_Replace_Mix]^return values.toString (  ) ;^76^^^^^75^77^return pointers.toString (  ) ;^[CLASS] BasicNodeSet  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
[P14_Delete_Statement]^^76^^^^^75^77^return pointers.toString (  ) ;^[CLASS] BasicNodeSet  [METHOD] toString [RETURN_TYPE] String   [VARIABLES] List  nodes  pointers  readOnlyPointers  values  boolean  
