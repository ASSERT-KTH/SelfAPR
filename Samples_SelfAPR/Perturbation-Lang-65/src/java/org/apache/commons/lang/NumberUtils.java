[P14_Delete_Statement]^^47^^^^^46^48^super (  ) ;^[CLASS] NumberUtils  [METHOD] <init> [RETURN_TYPE] NumberUtils()   [VARIABLES] boolean  
[P3_Replace_Literal]^return stringToInt ( str, -9 ) ;^61^^^^^60^62^return stringToInt ( str, 0 ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str [VARIABLES] boolean  String  str  
[P7_Replace_Invocation]^return compare ( str, 0 ) ;^61^^^^^60^62^return stringToInt ( str, 0 ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str [VARIABLES] boolean  String  str  
[P3_Replace_Literal]^return stringToInt ( str, -8 ) ;^61^^^^^60^62^return stringToInt ( str, 0 ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str [VARIABLES] boolean  String  str  
[P14_Delete_Statement]^^61^^^^^60^62^return stringToInt ( str, 0 ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str [VARIABLES] boolean  String  str  
[P7_Replace_Invocation]^return Integer.decode ( str ) ;^74^^^^^72^78^return Integer.parseInt ( str ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str int defaultValue [VARIABLES] boolean  NumberFormatException  nfe  String  str  int  defaultValue  
[P14_Delete_Statement]^^74^^^^^72^78^return Integer.parseInt ( str ) ;^[CLASS] NumberUtils  [METHOD] stringToInt [RETURN_TYPE] int   String str int defaultValue [VARIABLES] boolean  NumberFormatException  nfe  String  str  int  defaultValue  
[P2_Replace_Operator]^if  ( val != null )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( mant == null )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( val == this )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( s == null )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( i == sz )  {^139^^^^^124^154^if  ( val == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^return null;^139^140^141^^^124^154^if  ( val == null )  { return null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^139^140^141^^^124^154^if  ( val == null )  { return null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^139^^^^^124^154^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return this;^140^^^^^125^155^return null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return false;^140^^^^^125^155^return null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( val.length (  )  > 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.length (  )  == decPos )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.length() + 5  == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( numeric.length (  )  == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( val.charAt (  )  == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^throw new java.lang.NumberFormatException("\"\" is not a valid number.");^142^143^144^^^127^157^if  ( val.length (  )  == 0 )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^142^143^144^^^127^157^if  ( val.length (  )  == 0 )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( expPos < decPos )  {     throw new NumberFormatException (  ( val + " is not a valid number." )  ) ; }^142^^^^^127^157^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P4_Replace_Constructor]^throw throw  new NumberFormatException (  ( val + " is not a valid number." )  )   ;^143^^^^^128^158^throw new NumberFormatException  (" ")  ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( val.length (  )  )  == 0 )  {     throw new NumberFormatException ( "\"\" is not a valid number." ) ; }^143^^^^^128^158^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( expPos < decPos )  {     throw new NumberFormatException (  ( val + " is not a valid number." )  ) ; }^143^^^^^128^158^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.length() + 3  == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( val .startsWith ( exp )   == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( numeric.charAt (  )  == 0 )  {^142^^^^^127^157^if  ( val.length (  )  == 0 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.startsWith ( "---" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( mant.startsWith ( "--" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( val.substring ( "--" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^145^^^^^130^160^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return true;^150^^^^^135^165^return null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.startsWith ( "" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( numeric.startsWith ( "--" )  )  {^145^^^^^130^160^if  ( val.startsWith ( "--" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( val.startsWith ( "0x" )  && val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( numeric.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val.startsWith ( "0x" )  ) {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (  val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( val.substring ( "0x" )  || val.startsWith ( "-0x" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( val .charAt ( expPos )   || val^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^return org.apache.commons.lang.NumberUtils.createInteger(val);^152^153^154^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  { return createInteger ( val ) ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^152^153^154^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  { return createInteger ( val ) ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createInteger ( mant ) ;^153^^^^^138^168^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createBigInteger ( val ) ;^153^^^^^138^168^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createInteger ( numeric ) ;^153^^^^^138^168^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^153^^^^^138^168^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createBigInteger ( numeric ) ;^153^^^^^138^168^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x-" )  )  {^152^^^^^137^167^if  ( val.startsWith ( "0x" )  || val.startsWith ( "-0x" )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^int lastChar = val.charAt ( val.length (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^char lastChar = val.charAt ( val.length (  )   <=  1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^char lastChar = val.charAt ( val.length (  )  - expPos ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^char lastChar = val.charAt ( val.length() + 3  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^char lastChar = mant.charAt ( val.length (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^char lastChar = val .toCharArray (  )  ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^char lastChar = val.charAt ( val.charAt (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^char lastChar = val.charAt ( val .startsWith ( dec )   - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^char lastChar = numeric .toCharArray (  )  ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;char lastChar = val.charAt ( val.length (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^char lastChar = val.charAt ( val.length (  )   <<  1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^char lastChar = val.charAt ( val.length (  )   ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^char lastChar = val.charAt ( val.length() - 8  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^char lastChar = mant.charAt ( val.charAt (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^155^156^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ; String mant;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;char lastChar = val.charAt ( val.length (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^char lastChar = val.charAt ( val.length() - 7  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^char lastChar = numeric.charAt ( val.length (  )  - 1 ) ;^155^^^^^140^170^char lastChar = val.charAt ( val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^char mant;^156^^^^^141^171^String mant;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String exp;String mant;^156^^^^^141^171^String mant;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String dec;String mant;^156^^^^^141^171^String mant;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^char dec;^157^^^^^142^172^String dec;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String exp;String dec;^157^^^^^142^172^String dec;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String mant;String dec;^157^^^^^142^172^String dec;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^char exp;^158^^^^^143^173^String exp;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String mant;String exp;^158^^^^^143^173^String exp;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String dec;String exp;^158^^^^^143^173^String exp;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^long  decPos = val.indexOf ( '.' ) ;^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^int decPos = numeric.indexOf ( '.' ) ;^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^int decPos = val.substring ( '.' ) ;^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^int decPos = numeric.substring ( '.' ) ;^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;int decPos = val.indexOf ( '.' ) ;^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^159^^^^^144^174^int decPos = val.indexOf ( '.' ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^short  expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^int expPos = val.indexOf ( 'e' )  &  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^int expPos = val.indexOf ( 'e' )    instanceof   val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  ;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^int expPos = numeric.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^int expPos = val.substring ( 'e' )  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^int decPos = val.indexOf ( '.' ) ;int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^int expPos = mant.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^160^^^^^145^175^int expPos = val.indexOf ( 'e' )  + val.indexOf ( 'E' )  + 1;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( decPos >= -1 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( decPos > -7 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( decPos > -expPos )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( decPos > -9 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( decPos > - )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos > -1 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos < decPos )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val + " is not a valid number." )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( decPos + 1 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( decPos > -1 * 3 )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( c > a )  {^162^^^^^147^177^if  ( decPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^if (expPos > (-1)) {    if (expPos < decPos) {        throw new java.lang.NumberFormatException((val + " is not a valid number."));    }    dec = val.substring((decPos + 1), expPos);}else {    dec = val.substring((decPos + 1));}; mant = val.substring(0, decPos);^162^163^164^165^166^147^177^if  ( decPos > -1 )  {  if  ( expPos > -1 )  { if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^162^163^164^165^166^147^177^if  ( decPos > -1 )  {  if  ( expPos > -1 )  { if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos >= -1 )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -5 )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( decPos > -1 )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -3 )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( expPos < decPos )  {^174^^^^^162^180^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^mant = val.substring(0, expPos);^174^175^176^177^178^162^180^if  ( expPos > -1 )  { mant = val.substring ( 0, expPos ) ; } else { mant = val; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^174^175^176^177^178^162^180^if  ( expPos > -1 )  { mant = val.substring ( 0, expPos ) ; } else { mant = val; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = numeric;^177^^^^^162^180^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( expPos, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = numeric.substring ( 0, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = val.substring ( 0, decPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = val.substring ( 0 ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = expPos.substring ( 0, val ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^mant = val .substring ( decPos , expPos )  ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val.substring ( 0 >> 4, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;mant = val.substring ( 0, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1 ) ;mant = val.substring ( 0, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, decPos ) ;mant = val.substring ( 0, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( 5, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val.substring ( 2, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = true;^179^^^^^162^180^dec = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = null;dec = null;^179^^^^^162^180^dec = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( -1, expPos ) ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val .substring ( expPos , decPos )  ;^175^^^^^162^180^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos >= -1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > --2 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -decPos )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -expPos )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos < decPos )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val + " is not a valid number." )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( decPos + 1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -1 - 3 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( decPos > -1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^if (expPos < decPos) {    throw new java.lang.NumberFormatException((val + " is not a valid number."));}; dec = val.substring((decPos + 1), expPos);^164^165^166^167^^149^179^if  ( expPos > -1 )  { if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^164^165^166^167^^149^179^if  ( expPos > -1 )  { if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos  >=  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^dec = val.substring ( decPos + expPos ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = numeric.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = decPos.substring ( val + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^dec = val .substring ( expPos , decPos )  ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 1 - 0 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, expPos ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, decPos ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos  !=  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^dec = val.substring ( decPos  ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = val.substring ( expPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = mant.substring ( decPos + 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos <= decPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( decPos < decPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( decPos < expPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val + " is not a valid number." )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( expPos > -1 )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^throw new java.lang.NumberFormatException((val + " is not a valid number."));^165^166^167^^^150^180^if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^165^166^167^^^150^180^if  ( expPos < decPos )  { throw new NumberFormatException  (" ")  ; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( val.length (  )  )  == 0 )  {     throw new NumberFormatException ( "\"\" is not a valid number." ) ; }^165^^^^^150^180^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P4_Replace_Constructor]^throw throw  new NumberFormatException ( "\"\" is not a valid number." )   ;^166^^^^^151^181^throw new NumberFormatException  (" ")  ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( val.length (  )  )  == 0 )  {     throw new NumberFormatException ( "\"\" is not a valid number." ) ; }^166^^^^^151^181^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( expPos < decPos )  {     throw new NumberFormatException (  ( val + " is not a valid number." )  ) ; }^166^^^^^151^181^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return ;^166^^^^^151^181^throw new NumberFormatException  (" ")  ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^dec = val.substring ( decPos , expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = numeric.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = val.substring ( decPos + 1 ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = decPos.substring ( val + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = expPos.substring ( decPos + 1, val ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 4, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, expPos ) ;dec = val.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1 ) ;dec = val.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  ) ;dec = val.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;dec = val.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, decPos ) ;dec = val.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = mant.substring ( decPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = val.substring ( expPos + 1, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( expPos < expPos )  {^165^^^^^150^180^if  ( expPos < decPos )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^dec = val.substring ( decPos + decPos, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = val.substring ( decPos + 1, decPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = val.substring ( expPos + 1, decPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^dec = val .substring ( expPos , expPos )  ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 2, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos   instanceof   1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^dec = val.substring ( decPos  ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = numeric.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = val.substring ( expPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = decPos.substring ( val + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 1 - 3 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, expPos ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, decPos ) ;dec = val.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( -8, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = numeric.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = val.substring ( 0, expPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = val.substring ( 0 ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = decPos.substring ( 0, val ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^mant = val .substring ( decPos , expPos )  ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val.substring ( 3, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;mant = val.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, expPos ) ;mant = val.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1 ) ;mant = val.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos  <=  1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val .substring ( decPos , expPos )  ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos == -1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -7 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -1 + 1 )  {^164^^^^^149^179^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos  >  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 1 - 1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos  >>  1 ) ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^dec = val .substring ( decPos , expPos )  ;^170^^^^^164^171^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^dec = val.substring ( decPos + expPos, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 1 % 4, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos >= -1 )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -decPos )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( decPos > -1 )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -1 * 3 )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( expPos < decPos )  {^174^^^^^159^189^if  ( expPos > -1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^mant = val.substring(0, expPos);^174^175^176^177^178^159^189^if  ( expPos > -1 )  { mant = val.substring ( 0, expPos ) ; } else { mant = val; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^174^175^176^177^178^159^189^if  ( expPos > -1 )  { mant = val.substring ( 0, expPos ) ; } else { mant = val; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = mant;^177^^^^^174^178^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant =  numeric;^177^^^^^174^178^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( expPos, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = numeric.substring ( 0, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = val.substring ( 0, decPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = val.substring ( 0 ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = expPos.substring ( 0, val ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val.substring ( 3, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;mant = val.substring ( 0, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1 ) ;mant = val.substring ( 0, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^mant = val.substring ( 0, decPos ) ;mant = val.substring ( 0, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( -5, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = mant.substring ( 0, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^dec = val .substring ( expPos , decPos )  ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 0, expPos ) ;^168^^^^^153^183^dec = val.substring ( decPos + 1, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^dec = val.substring ( decPos  &  1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^dec = mant.substring ( decPos + 1 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = val.substring ( decPos + 4 ) ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( -3, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = mant.substring ( 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val.substring ( 0 >>> 0, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( decPos, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^mant = val.substring ( 2, expPos ) ;^175^^^^^160^190^mant = val.substring ( 0, expPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^mant = numeric;^177^^^^^162^192^mant = val;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^dec = true;^179^^^^^164^194^dec = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = null;dec = null;^179^^^^^164^194^dec = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^dec = val .substring ( expPos , expPos )  ;^170^^^^^155^185^dec = val.substring ( decPos + 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^mant = val.substring ( decPos, decPos ) ;^172^^^^^157^187^mant = val.substring ( 0, decPos ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( !Character.isigit ( lastChar )  )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos > -1 )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos <  ( val.length (  )  )  - 1 )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val.length (  )  - 1 )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos + 1 )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( isAllZeros(mant) && isAllZeros(exp) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ((dec == null) && (exp == null)) && substring(1)) && (numeric.charAt(0) == '-') || charAt(0)) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ((dec == null) && (exp == null) && substring(1))) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (dec == null && exp == null) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( dec == null )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( exp == null )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (numeric.charAt(0) == '-' || charAt(0))) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( numeric.charAt ( 0 )  == '-' )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val + " is not a valid number." )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( f.isInfinite( || (f.floatValue() == 0.0F) && !allZeros) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (f.floatValue() == 0.0F && !allZeros) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( f.floatValue (  )  == 0.0F )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.isInfinite( || (d.floatValue() == 0.0) && !allZeros) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (d.floatValue() == 0.0 && !allZeros) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.floatValue (  )  == 0.0 )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos > -1 && expPos < (val.length() - 1) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( dec == null && exp == null )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.isInfinite( || (d.doubleValue() == 0.0) && !allZeros) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (d.doubleValue() == 0.0 && !allZeros) )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.doubleValue (  )  == 0.0 )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^181^^^^^166^196^if  ( !Character.isDigit ( lastChar )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^if ((expPos > (-1)) && (expPos < ((val.length()) - 1))) {    exp = val.substring((expPos + 1), ((val.length()) - 1));}else {    exp = null;}; java.lang.String numeric = val.substring(0, ((val.length()) - 1)); boolean allZeros = (org.apache.commons.lang.NumberUtils.isAllZeros(mant)) && (org.apache.commons.lang.NumberUtils.isAllZeros(exp)); switch (lastChar) {    case 'l' :    case 'L' :        if ((((dec == null) && (exp == null)) && (org.apache.commons.lang.NumberUtils.isDigits(numeric.substring(1)))) && (((numeric.charAt(0)) == '-') || (java.lang.Character.isDigit(numeric.charAt(0))))) {            try {                return org.apache.commons.lang.NumberUtils.createLong(numeric);            } catch (java.lang.NumberFormatException nfe) {            }            return org.apache.commons.lang.NumberUtils.createBigInteger(numeric);        }        throw new java.lang.NumberFormatException((val + " is not a valid number."));    case 'f' :    case 'F' :        try {            java.lang.Float f = org.apache.commons.lang.NumberUtils.createFloat(numeric);            if (!((f.isInfinite()) || (((f.floatValue()) == 0.0F) && (!allZeros)))) {                return f;            }        } catch (java.lang.NumberFormatException e) {        }    case 'd' :    case 'D' :        try {            java.lang.Double d = org.apache.commons.lang.NumberUtils.createDouble(numeric);            if (!((d.isInfinite()) || (((d.floatValue()) == 0.0) && (!allZeros)))) {                return d;            }        } catch (java.lang.NumberFormatException nfe) {        }        try {            return org.apache.commons.lang.NumberUtils.createBigDecimal(numeric);        } catch (java.lang.NumberFormatException e) {        }    default :        throw new java.lang.NumberFormatException((val + " is not a valid number."));};^181^182^183^184^185^166^196^if  ( !Character.isDigit ( lastChar )  )  { if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ; } else { exp = null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^181^182^183^184^185^166^196^if  ( !Character.isDigit ( lastChar )  )  { if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ; } else { exp = null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 || expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos == -1 && expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos <= val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos < val.length (  )   ||  1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -expPos && expPos < val.length (  )  - expPos )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -decPos && expPos < val.length (  )  - decPos )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() - 8  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( decPos > -1 && expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( expPos > -1 && expPos < mant.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( val > -1 && expPos < expPos.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos > -1 ) {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (  expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos <  ( val.length (  )  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos + 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val.charAt (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val .startsWith ( mant )   - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val .startsWith ( dec )   - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -0  && expPos < val.length (  )  - 0  )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^exp = val.substring((expPos + 1), val.length());^243^244^245^246^247^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  ) ; } else { exp = null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^243^244^245^246^247^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  ) ; } else { exp = null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( expPos >  ( -1 )  )  &&  ( expPos <  (  ( val.length (  )  )  - 1 )  )  )  {     exp = val.substring (  ( expPos + 1 ) ,  (  ( val.length (  )  )  - 1 )  ) ; }else {     exp = null; }^243^^^^^228^258^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = false;^246^^^^^243^247^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = null;exp = null;^246^^^^^243^247^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  >  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + decPos, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 1  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = numeric.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = val.substring ( decPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = val.substring ( expPos + 1.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = expPos.substring ( val + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val .substring ( decPos , decPos )  ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val.charAt (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = val.substring ( expPos + 0 , val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;exp = val.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1 ) ;exp = val.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;exp = val.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (   instanceof   )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos , val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 8  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = mant.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val .substring ( decPos , expPos )  ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;exp = val.substring ( expPos + 1, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 0  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val .startsWith ( val )   ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec == null || exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec != null && exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec == null && exp != null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( val == null && exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( dec == null ) {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (  exp == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( isAllZeros(mant) && isAllZeros(exp) )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( f.isInfinite( || (f.floatValue() == 0.0F) && !allZeros) )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (f.floatValue() == 0.0F && !allZeros) )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( f.floatValue (  )  == 0.0F )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.isInfinite( || (d.doubleValue() == 0.0) && !allZeros) )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (d.doubleValue() == 0.0 && !allZeros) )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.doubleValue (  )  == 0.0 )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( dec == this && exp == this )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  &&  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F || !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  != 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ! ( f.isInfinite (  )  ) {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (   ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (f.floatValue() == 0.0F && !allZeros) )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( f.floatValue (  )  == 0.0F )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( f.floatToIntBits (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatToIntBits (  )  == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^return f;^267^268^269^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  { return f; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^267^268^269^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  { return f; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( d.isInfinite (  )  )  ||  (  (  ( d.floatValue (  )  )  == 0.0 )  &&  ( !allZeros )  )  )  )  {     return d; }^267^^^^^252^282^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( d.isInfinite (  )  )  ||  (  (  ( d.doubleValue (  )  )  == 0.0 )  &&  ( !allZeros )  )  )  )  {     return d; }^267^^^^^252^282^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  &&  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D || !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  >= 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ! ( d.isInfinite (  )  ) {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (   ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (d.doubleValue() == 0.0 && !allZeros) )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.doubleValue (  )  == 0.0 )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d.doubleToLongBits (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d .floatToIntBits ( 1 )   ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleToLongBits (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d.isInfinite (  )  ||  ( d .floatValue (  )   == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( d.isInfinite (  )  ||  ( d .floatValue (  )   == 1.0f && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^return d;^275^276^277^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^275^276^277^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( f.isInfinite (  )  )  ||  (  (  ( f.floatValue (  )  )  == 0.0F )  &&  ( !allZeros )  )  )  )  {     return f; }^275^^^^^260^290^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( d.isInfinite (  )  )  ||  (  (  ( d.floatValue (  )  )  == 0.0 )  &&  ( !allZeros )  )  )  )  {     return d; }^275^^^^^260^290^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^Float f = createFloat ( numeric ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Float f = createLong ( val ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Double d = createDouble ( val ) ;Float f = createFloat ( val ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Float f = NumberUtils.createFloat ( numeric ) ;Float f = createFloat ( val ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^return createInteger ( val ) ;Float f = createFloat ( val ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^return createLong ( val ) ;Float f = createFloat ( val ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  != 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( d.doubleToLongBits (  )  ) {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^Double d = createDouble ( mant ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Double d = createNumber ( val ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Double d = createDouble ( numeric ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Float f = createFloat ( val ) ;Double d = createDouble ( val ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Double d = NumberUtils.createDouble ( numeric ) ;Double d = createDouble ( val ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^return createInteger ( val ) ;Double d = createDouble ( val ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^return createLong ( val ) ;Double d = createDouble ( val ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigDecimal ( mant ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createBigInteger ( val ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^boolean allZeros = isAllZeros ( mant )  || isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( val )  && isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( val ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( exp )  && isAllZeros ( mant ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^boolean allZeros = isNumber ( mant )  && isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Float f = createLong ( numeric ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( numeric ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Double d = createNumber ( numeric ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigDecimal ( numeric ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createBigInteger ( numeric ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createInteger ( numeric ) ;^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createBigInteger ( val ) ;^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createBigInteger ( numeric ) ;^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createLong ( numeric ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createFloat ( val ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createFloat ( numeric ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createInteger ( mant ) ;^251^^^^^236^266^return createInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigInteger ( numeric ) ;^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createInteger ( val ) ;^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0f && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createLong ( mant ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( f.floatToIntBits (  )  ) {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Float f = createFloat ( mant ) ;^266^^^^^251^281^Float f = createFloat ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  <= 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  <<  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + expPos, val.length (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 1  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = this;^246^^^^^231^261^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = null;exp = null;^246^^^^^231^261^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigInteger ( mant ) ;^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() + 7  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( expPos > -1 && expPos < numeric.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val .startsWith ( numeric )   - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  !=  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 7  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val .startsWith ( exp )   ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createFloat ( mant ) ;^256^^^^^241^271^return createLong ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( numeric )  && isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^boolean allZeros = isNumber ( mant )  && isAllZeros ( val ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 || expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos >= -1 && expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos == val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos < val.length (  )   >  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos < val.length (  )    instanceof   1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length (  )   )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -decPos && expPos < val.length (  )  - decPos )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > - && expPos < val.length (  )  -  )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() - 2  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( decPos > -1 && expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( expPos > -1 && expPos < numeric.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( val > -1 && expPos < expPos.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos > -1 ) {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (  expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos <  ( val.length (  )  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( expPos + 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val.charAt (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -0  && expPos < numeric.length (  )  - 0  )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^exp = val.substring((expPos + 1), ((val.length()) - 1));^182^183^184^185^186^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ; } else { exp = null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^182^183^184^185^186^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ; } else { exp = null; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  (  ( expPos >  ( -1 )  )  &&  ( expPos <  (  ( val.length (  )  )  - 1 )  )  )  {     exp = val.substring (  ( expPos + 1 ) , val.length (  )  ) ; }else {     exp = null; }^182^^^^^167^197^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = this;^185^^^^^182^186^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = null;exp = null;^185^^^^^182^186^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  >>  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  )   &&  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos , val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 9  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = numeric.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = val.substring ( decPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = val.substring ( expPos + 1.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^exp = expPos.substring ( val + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val.charAt (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = val.substring ( expPos + 0 , val.length (  )  - 0  ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1, expPos ) ;exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = val.substring ( decPos + 1 ) ;exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  ) ;exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P12_Insert_Condition]^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  { exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ; }^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (   instanceof   )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  )   >=  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + decPos, val.length (  )  - decPos ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 7  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val .startsWith ( exp )   - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = val.substring ( decPos + 1, val.charAt (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 4  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec == null || exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec != null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec == null && exp != null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' && Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  != '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( decPos )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( decPos )  == '-' || Character.isDigit ( numeric.charAt ( decPos )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( dec == null && val == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( dec == null && exp == null && isDigits ( val.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( numeric == null && exp == null && isDigits ( dec.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( exp == null && dec == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( dec == null && numeric == null && isDigits ( exp.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' ) {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (  Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ((dec == null) && (exp == null) && substring(1))) )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (dec == null && exp == null) )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( dec == null )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( exp == null )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (numeric.charAt(0) == '-' || charAt(0))) )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( numeric.charAt ( 0 )  == '-' )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( dec == null && exp == null && stringToInt ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.substring ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric .toCharArray (  )   == '-' || Character.isDigit ( numeric^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( dec == false && exp == false && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' ) {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createLong ( val ) ;^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createFloat ( numeric ) ;^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createFloat ( val ) ;^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigInteger ( val ) ;^202^^^^^193^204^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createInteger ( numeric ) ;^202^^^^^193^204^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^202^^^^^193^204^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  &&  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F || !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  != 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ! ( f.isInfinite (  )  ) {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (   ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (f.floatValue() == 0.0F && !allZeros) )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( f.floatValue (  )  == 0.0F )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( f.floatToIntBits (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatToIntBits (  )  == 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( f.floatToIntBits (  )  ) {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^return f;^210^211^^213^214^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {  return f; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^210^211^^213^214^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {  return f; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( d.isInfinite (  )  )  ||  (  (  ( d.floatValue (  )  )  == 0.0 )  &&  ( !allZeros )  )  )  )  {     return d; }^210^^^^^195^225^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( d.isInfinite (  )  )  ||  (  (  ( d.doubleValue (  )  )  == 0.0 )  &&  ( !allZeros )  )  )  )  {     return d; }^210^^^^^195^225^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  &&  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D || !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  != 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( ! ( d.isInfinite (  )  ) {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  (   ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( (d.floatValue() == 0.0 && !allZeros) )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P6_Replace_Expression]^if  ( d.floatValue (  )  == 0.0 )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d.doubleToLongBits (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d.isInfinite (  )  ||  ( d.valueOf (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0f && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P9_Replace_Statement]^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P15_Unwrap_Block]^return d;^224^225^226^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P16_Remove_Block]^^224^225^226^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  { return d; }^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( f.isInfinite (  )  )  ||  (  (  ( f.floatValue (  )  )  == 0.0F )  &&  ( !allZeros )  )  )  )  {     return f; }^224^^^^^209^239^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P13_Insert_Block]^if  ( ! (  ( d.isInfinite (  )  )  ||  (  (  ( d.doubleValue (  )  )  == 0.0 )  &&  ( !allZeros )  )  )  )  {     return d; }^224^^^^^209^239^[Delete]^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createLong ( mant ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createFloat ( numeric ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createLong ( val ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createFloat ( val ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  <= 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^Float f = NumberUtils.createFloat ( mant ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Float f = NumberUtils.createLong ( numeric ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Float f = NumberUtils.createFloat ( val ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Float f = createFloat ( val ) ;Float f = NumberUtils.createFloat ( numeric ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Double d = NumberUtils.createDouble ( numeric ) ;Float f = NumberUtils.createFloat ( numeric ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Float f = NumberUtils.createLong ( mant ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^return createLong ( numeric ) ;Float f = NumberUtils.createFloat ( numeric ) ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( f.isInfinite (  )  ||  ( f .floatToIntBits ( 4 )   == 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  >= 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d .floatToIntBits ( 2 )   ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 4.0f && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^Double d = NumberUtils.createDouble ( mant ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Double d = NumberUtils.createNumber ( numeric ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Double d = NumberUtils .createNumber ( val )  ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Double d = NumberUtils.createDouble ( val ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Double d = createDouble ( val ) ;Double d = NumberUtils.createDouble ( numeric ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^Float f = NumberUtils.createFloat ( numeric ) ;Double d = NumberUtils.createDouble ( numeric ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Double d = NumberUtils.createNumber ( mant ) ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigDecimal ( mant ) ;^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createBigInteger ( numeric ) ;^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createBigInteger ( val ) ;^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigDecimal ( val ) ;^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^231^^^^^216^246^return createBigDecimal ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  &&  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 3  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val .substring ( decPos , decPos )  ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val .startsWith ( mant )   - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = false;^185^^^^^170^200^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^dec = null;exp = null;^185^^^^^170^200^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^return createBigInteger ( val ) ;^202^^^^^187^217^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^return createInteger ( numeric ) ;^202^^^^^187^217^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P4_Replace_Constructor]^throw throw  new NumberFormatException ( "\"\" is not a valid number." )   ;^205^^^^^190^220^throw new NumberFormatException  (" ")  ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P4_Replace_Constructor]^throw throw  new NumberFormatException ( "\"\" is not a valid number." )   ;^237^^^^^222^252^throw new NumberFormatException  (" ")  ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P1_Replace_Type]^char numeric = val.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^String numeric = val.substring ( 0, val.length (  )   ||  1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( -9, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length (  )   ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length() - 6  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^String numeric = mant.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^String numeric = val.substring ( 0, val.charAt (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^String numeric = val.substring ( 0, val .startsWith ( mant )   - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^char lastChar = val.charAt ( val.length (  )  - 1 ) ;String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^boolean allZeros = isAllZeros ( mant )  || isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( val )  && isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( val ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( exp )  && isAllZeros ( mant ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^boolean allZeros = isNumber ( mant )  && isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Float f = NumberUtils .createLong ( exp )  ;^209^^^^^194^224^Float f = NumberUtils.createFloat ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^Double d = NumberUtils .createNumber ( dec )  ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() + 2  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( expPos > -1 && expPos < mant.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val .startsWith ( mant )   - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -1 && expPos < mant.charAt (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  )   <=  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + expPos, val.length (  )  - expPos ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + , val.length (  )  -  ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 6  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val .startsWith ( dec )   - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = mant.substring ( expPos + 1, val.length (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 7  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val.substring ( expPos + 1, val .startsWith ( numeric )   - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = val.substring ( expPos + 1, val .startsWith ( val )   - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^String numeric = val.substring ( 0, val.length (  )   &&  1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( -5, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length() + 4  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^String numeric = numeric.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^String numeric = val.substring ( 0, val .startsWith ( numeric )   - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^String numeric = numeric.substring ( 0, val.charAt (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^188^189^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ; boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  ) ;String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P11_Insert_Donor_Statement]^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length() + 1  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^boolean allZeros = isAllZeros ( numeric )  && isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&& isDigits ( numeric.substring ( 6 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^&& isDigits ( mant.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^&& stringToInt ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^&& isDigits ( val.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&& isDigits ( numeric.substring ( expPos )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&&  ( numeric.charAt ( decPos )  == '-' || Character.isDigit ( numeric.charAt ( decPos )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^&&  ( val.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^&&  ( numeric.substring ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^&&  ( mant.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^196^197^198^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  { try { return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&&  ( numeric.charAt ( expPos )  == '-' || Character.isDigit ( numeric.charAt ( expPos )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^&&  ( numeric .toCharArray (  )   == '-' || Character.isDigit ( numeric^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&&  ( numeric.charAt ( -1 )  == '-' || Character.isDigit ( numeric.charAt ( -1 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createInteger ( val ) ;^202^^^^^187^217^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P14_Delete_Statement]^^202^^^^^187^217^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos < -1 && expPos < val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos <= val.length (  )  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos < val.length (  )   &&  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos < val.length (  )   <<  1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -expPos && expPos < val.length (  )  - expPos )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() + 8  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val .startsWith ( val )   - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( expPos > -1 && expPos < val .startsWith ( dec )   - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( expPos > -0  && expPos < val.length (  )  - 0  )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = true;^185^^^^^182^186^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  ==  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  )   >>  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val .substring ( decPos , expPos )  ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  )   >  1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 1  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( expPos )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( -3 )  == '-' || Character.isDigit ( numeric.charAt ( -3 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 4 )  == '-' || Character.isDigit ( numeric.charAt ( 4 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( val == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( dec == this && exp == this && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.substring ( 0 )  == '-' ) {^193^194^195^196^^178^208^if  ( dec == null && exp == null && isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createLong ( mant ) ;^198^^^^^193^204^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createInteger ( val ) ;^202^^^^^193^204^return createBigInteger ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  >= 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  < 0.0D && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  (   ( d.floatValue (  )  == 1.0f && !allZeros )  )  )  {^224^^^^^209^239^if  ( ! ( d.isInfinite (  )  ||  ( d.floatValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos >= -1 && expPos < val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos == val.length (  )  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( expPos > -1 && expPos < val.length (  )   &&  1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length (  )   )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() - 9  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( decPos > -0  ) {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = this;^246^^^^^243^247^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 3  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  ^  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^exp = val .substring ( expPos , decPos )  ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = val.substring ( decPos + 1, val.charAt (  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() + 4  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( dec == null && val == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P5_Replace_Variable]^if  ( exp == null && dec == null )  {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( dec == this ) {^248^^^^^233^263^if  ( dec == null && exp == null )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  >= 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d .floatToIntBits ( this )   ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  (   ( d.doubleValue (  )  == 1.0f && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  (   ( d.doubleValue (  )  == 2.0f && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Double d = createNumber ( mant ) ;^274^^^^^259^289^Double d = createDouble ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^boolean allZeros = isNumber ( numeric )  && isAllZeros ( exp ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^boolean allZeros = isNumber ( mant )  && isAllZeros ( numeric ) ;^264^^^^^249^279^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createBigInteger ( mant ) ;^282^^^^^267^297^return createBigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  ( ! ( f.isInfinite (  )  ||  ( f .floatToIntBits ( 3 )   == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  < 0.0F && !allZeros )  )  )  {^210^^^^^195^225^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^Double d = NumberUtils .createNumber ( exp )  ;^223^^^^^208^238^Double d = NumberUtils.createDouble ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( f.isInfinite (  )  ||  ( f .floatToIntBits ( null )   == 0.0F && !allZeros )  )  )  {^267^^^^^252^282^if  ( ! ( f.isInfinite (  )  ||  ( f.floatValue (  )  == 0.0F && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^if  (   ( d.doubleValue (  )  == 3.0f && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  >  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 0  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = true;^185^^^^^170^200^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  >=  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 6  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = false;^246^^^^^231^261^exp = null;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^String numeric = val.substring ( 0, val.length (  )    instanceof   1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 9, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length (  )  - expPos ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length() + 0  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^String numeric = val .substring ( expPos , expPos )  ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() - 1  - 1 )  {^182^^^^^167^197^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  <=  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 5  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 8  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = numeric.substring ( expPos + 1, val.charAt (  )  - 1 ) ;^183^^^^^168^198^exp = val.substring ( expPos + 1, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^String numeric = val.substring ( 0, val.length (  )   ==  1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( -8, val.length (  )  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length (  )  - decPos ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^String numeric = val.substring ( 0, val.length() - 0  - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^String numeric = val.substring ( 0, val .startsWith ( exp )   - 1 ) ;^188^^^^^173^203^String numeric = val.substring ( 0, val.length (  )  - 1 ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^boolean allZeros = isNumber ( val )  && isAllZeros ( exp ) ;^189^^^^^174^204^boolean allZeros = isAllZeros ( mant )  && isAllZeros ( exp ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&& isDigits ( numeric.substring ( 0 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^&& isDigits ( numeric .substring ( decPos )   ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^&& stringToInt ( mant.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&& isDigits ( numeric.substring ( -7 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^195^196^^^^180^210^&& isDigits ( numeric.substring ( 1 )  ) &&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^&&  ( numeric.charAt ( -2 )  == '-' || Character.isDigit ( numeric.charAt ( -2 )  )  )  )  {^196^^^^^181^211^&&  ( numeric.charAt ( 0 )  == '-' || Character.isDigit ( numeric.charAt ( 0 )  )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createFloat ( mant ) ;^198^^^^^183^213^return createLong ( numeric ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^if  ( expPos > -1 && expPos < val.length() + 3  - 1 )  {^243^^^^^228^258^if  ( expPos > -1 && expPos < val.length (  )  - 1 )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^exp = val.substring ( expPos + 1, val.length (  <=  )  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P3_Replace_Literal]^exp = val.substring ( expPos + 1, val.length() - 4  ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^exp = numeric.substring ( expPos + 1, val .startsWith ( val )   ) ;^244^^^^^229^259^exp = val.substring ( expPos + 1, val.length (  )  ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P8_Replace_Mix]^return createInteger ( numeric ) ;^260^^^^^245^275^return createBigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P7_Replace_Invocation]^if  ( ! ( d .floatToIntBits ( 4 )   ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^275^^^^^260^290^if  ( ! ( d.isInfinite (  )  ||  ( d.doubleValue (  )  == 0.0D && !allZeros )  )  )  {^[CLASS] NumberUtils  [METHOD] createNumber [RETURN_TYPE] Number   String val [VARIABLES] Float  f  boolean  allZeros  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  val  Double  d  int  decPos  expPos  
[P2_Replace_Operator]^if  ( s != null )  {^298^^^^^297^307^if  ( s == null )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P8_Replace_Mix]^if  ( s == this )  {^298^^^^^297^307^if  ( s == null )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P9_Replace_Statement]^if  ( val == null )  {^298^^^^^297^307^if  ( s == null )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P9_Replace_Statement]^if  ( i == sz )  {^298^^^^^297^307^if  ( s == null )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P15_Unwrap_Block]^return true;^298^299^300^^^297^307^if  ( s == null )  { return true; }^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P16_Remove_Block]^^298^299^300^^^297^307^if  ( s == null )  { return true; }^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^298^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^return false;^299^^^^^297^307^return true;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P2_Replace_Operator]^if  ( s.charAt ( i )  <= '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P5_Replace_Variable]^if  ( i.charAt ( s )  != '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P7_Replace_Invocation]^if  ( s.substring ( i )  != '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P15_Unwrap_Block]^return false;^302^303^304^^^297^307^if  ( s.charAt ( i )  != '0' )  { return false; }^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P16_Remove_Block]^^302^303^304^^^297^307^if  ( s.charAt ( i )  != '0' )  { return false; }^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'e' )  ||  (  ( chars[i] )  == 'E' )  )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  (  ( str == null )  ||  (  ( str.length (  )  )  == 0 )  )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^302^^^^^297^307^[Delete]^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^return true;^303^^^^^297^307^return false;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P1_Replace_Type]^for  (  short  i = s.length (  )  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P2_Replace_Operator]^for  ( int i = s.length (  )    instanceof   1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P2_Replace_Operator]^for  ( int i = s.length (  )  - 1; i > 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^for  ( int i = s.length (  )  ; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^for  ( int i = s.length (  )  - 1; i >= i; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^for  ( int i = s.length() + 8  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P5_Replace_Variable]^for  ( snt i = i.length (  )  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P7_Replace_Invocation]^for  ( int i = s.charAt (  )  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P7_Replace_Invocation]^for  ( int i = s .startsWith ( s )   - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P2_Replace_Operator]^if  ( s.charAt ( i )  >= '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P8_Replace_Mix]^if  ( s .toCharArray (  )   != '0' )  {^302^^^^^297^307^if  ( s.charAt ( i )  != '0' )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P2_Replace_Operator]^for  ( int i = s.length (  )   <=  1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^for  ( int i = s.length() - 6  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^for  ( int i = s.length() - 2  - 1; i >= 0; i-- )  {^301^^^^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  {^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P14_Delete_Statement]^^301^302^303^304^^297^307^for  ( int i = s.length (  )  - 1; i >= 0; i-- )  { if  ( s.charAt ( i )  != '0' )  { return false; }^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P2_Replace_Operator]^return s.length (  )  == 0;^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^return s.length (  )  > i;^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^return s.length() + 8  > 0;^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P7_Replace_Invocation]^return s.charAt (  )  > 0;^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P3_Replace_Literal]^return s.length() - 7  > 0;^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P14_Delete_Statement]^^306^^^^^297^307^return s.length (  )  > 0;^[CLASS] NumberUtils  [METHOD] isAllZeros [RETURN_TYPE] boolean   String s [VARIABLES] boolean  String  s  int  i  
[P7_Replace_Invocation]^return Float.floatToIntBits ( val ) ;^319^^^^^318^320^return Float.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createFloat [RETURN_TYPE] Float   String val [VARIABLES] boolean  String  val  
[P14_Delete_Statement]^^319^^^^^318^320^return Float.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createFloat [RETURN_TYPE] Float   String val [VARIABLES] boolean  String  val  
[P7_Replace_Invocation]^return Double.doubleToLongBits ( val ) ;^330^^^^^329^331^return Double.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createDouble [RETURN_TYPE] Double   String val [VARIABLES] boolean  String  val  
[P8_Replace_Mix]^return Double .floatValue (  )  ;^330^^^^^329^331^return Double.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createDouble [RETURN_TYPE] Double   String val [VARIABLES] boolean  String  val  
[P14_Delete_Statement]^^330^^^^^329^331^return Double.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createDouble [RETURN_TYPE] Double   String val [VARIABLES] boolean  String  val  
[P7_Replace_Invocation]^return Integer.parseInt ( val ) ;^343^^^^^341^344^return Integer.decode ( val ) ;^[CLASS] NumberUtils  [METHOD] createInteger [RETURN_TYPE] Integer   String val [VARIABLES] boolean  String  val  
[P14_Delete_Statement]^^343^^^^^341^344^return Integer.decode ( val ) ;^[CLASS] NumberUtils  [METHOD] createInteger [RETURN_TYPE] Integer   String val [VARIABLES] boolean  String  val  
[P8_Replace_Mix]^return Long .floatValue (  )  ;^354^^^^^353^355^return Long.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createLong [RETURN_TYPE] Long   String val [VARIABLES] boolean  String  val  
[P14_Delete_Statement]^^354^^^^^353^355^return Long.valueOf ( val ) ;^[CLASS] NumberUtils  [METHOD] createLong [RETURN_TYPE] Long   String val [VARIABLES] boolean  String  val  
[P4_Replace_Constructor]^BigInteger bi = new BigDecimal ( val )  ;^365^^^^^364^367^BigInteger bi = new BigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createBigInteger [RETURN_TYPE] BigInteger   String val [VARIABLES] boolean  BigInteger  bi  String  val  
[P11_Insert_Donor_Statement]^BigDecimal bd = new BigDecimal ( val ) ;BigInteger bi = new BigInteger ( val ) ;^365^^^^^364^367^BigInteger bi = new BigInteger ( val ) ;^[CLASS] NumberUtils  [METHOD] createBigInteger [RETURN_TYPE] BigInteger   String val [VARIABLES] boolean  BigInteger  bi  String  val  
[P4_Replace_Constructor]^BigDecimal bd = new BigInteger ( val )  ;^377^^^^^376^379^BigDecimal bd = new BigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createBigDecimal [RETURN_TYPE] BigDecimal   String val [VARIABLES] boolean  String  val  BigDecimal  bd  
[P11_Insert_Donor_Statement]^BigInteger bi = new BigInteger ( val ) ;BigDecimal bd = new BigDecimal ( val ) ;^377^^^^^376^379^BigDecimal bd = new BigDecimal ( val ) ;^[CLASS] NumberUtils  [METHOD] createBigDecimal [RETURN_TYPE] BigDecimal   String val [VARIABLES] boolean  String  val  BigDecimal  bd  
[P2_Replace_Operator]^if  ( b == a )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( c < a )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( b < c )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( a < b )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( c > a )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( b > a )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^392^^^^^391^399^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P15_Unwrap_Block]^a = b;^392^393^394^^^391^399^if  ( b < a )  { a = b; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P16_Remove_Block]^^392^393^394^^^391^399^if  ( b < a )  { a = b; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^392^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^a = c;^393^^^^^391^399^a = b;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P11_Insert_Donor_Statement]^a = c;a = b;^393^^^^^391^399^a = b;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P2_Replace_Operator]^if  ( c > a )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( b < a )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( c < b )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( a < c )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( b > a )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^395^^^^^391^399^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P15_Unwrap_Block]^a = c;^395^396^397^^^391^399^if  ( c < a )  { a = c; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P16_Remove_Block]^^395^396^397^^^391^399^if  ( c < a )  { a = c; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^395^^^^^391^399^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^a = b;^396^^^^^391^399^a = c;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P11_Insert_Donor_Statement]^a = b;a = c;^396^^^^^391^399^a = c;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^return c;^398^^^^^391^399^return a;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P2_Replace_Operator]^if  ( b == a )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( c < a )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( a < b )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P8_Replace_Mix]^if  ( b < c )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( c > a )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( b > a )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^410^^^^^409^417^if  ( b < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P15_Unwrap_Block]^a = b;^410^411^412^^^409^417^if  ( b < a )  { a = b; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P16_Remove_Block]^^410^411^412^^^409^417^if  ( b < a )  { a = b; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^410^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^a = c;^411^^^^^409^417^a = b;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P11_Insert_Donor_Statement]^a = c;a = b;^411^^^^^409^417^a = b;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P2_Replace_Operator]^if  ( c <= a )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( b < a )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( a < c )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( c > a )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( b > a )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^413^^^^^409^417^if  ( c < a )  {^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P15_Unwrap_Block]^a = c;^413^414^415^^^409^417^if  ( c < a )  { a = c; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P16_Remove_Block]^^413^414^415^^^409^417^if  ( c < a )  { a = c; }^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^413^^^^^409^417^[Delete]^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^a = b;^414^^^^^409^417^a = c;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P11_Insert_Donor_Statement]^a = b;a = c;^414^^^^^409^417^a = c;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^return c;^416^^^^^409^417^return a;^[CLASS] NumberUtils  [METHOD] minimum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P2_Replace_Operator]^if  ( b < a )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( c > a )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( b > c )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( a > b )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( c < a )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^428^^^^^427^435^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P15_Unwrap_Block]^a = b;^428^429^430^^^427^435^if  ( b > a )  { a = b; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P16_Remove_Block]^^428^429^430^^^427^435^if  ( b > a )  { a = b; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^428^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^a = c;^429^^^^^427^435^a = b;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P11_Insert_Donor_Statement]^a = c;a = b;^429^^^^^427^435^a = b;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P2_Replace_Operator]^if  ( c >= a )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( b > a )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( c > b )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^if  ( a > c )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( decPos > -1 )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( c < a )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P9_Replace_Statement]^if  ( b < a )  {^431^^^^^427^435^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P15_Unwrap_Block]^a = c;^431^432^433^^^427^435^if  ( c > a )  { a = c; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P16_Remove_Block]^^431^432^433^^^427^435^if  ( c > a )  { a = c; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^431^^^^^427^435^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^a = b;^432^^^^^427^435^a = c;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P11_Insert_Donor_Statement]^a = b;a = c;^432^^^^^427^435^a = c;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P5_Replace_Variable]^return c;^434^^^^^427^435^return a;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] long   long a long b long c [VARIABLES] boolean  long  a  b  c  
[P2_Replace_Operator]^if  ( b >= a )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( c > a )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( b > c )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( a > b )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( c < a )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( b < a )  {^446^^^^^445^453^if  ( b > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P15_Unwrap_Block]^a = b;^446^447^448^^^445^453^if  ( b > a )  { a = b; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P16_Remove_Block]^^446^447^448^^^445^453^if  ( b > a )  { a = b; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^446^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^a = c;^447^^^^^445^453^a = b;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P11_Insert_Donor_Statement]^a = c;a = b;^447^^^^^445^453^a = b;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P2_Replace_Operator]^if  ( c == a )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( b > a )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( c > b )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^if  ( a > c )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( decPos > -1 )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( c < a )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( i == sz )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P9_Replace_Statement]^if  ( b < a )  {^449^^^^^445^453^if  ( c > a )  {^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P15_Unwrap_Block]^a = c;^449^450^451^^^445^453^if  ( c > a )  { a = c; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P16_Remove_Block]^^449^450^451^^^445^453^if  ( c > a )  { a = c; }^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^449^^^^^445^453^[Delete]^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P5_Replace_Variable]^a = b;^450^^^^^445^453^a = c;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P11_Insert_Donor_Statement]^a = b;a = c;^450^^^^^445^453^a = c;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P8_Replace_Mix]^return c;^452^^^^^445^453^return a;^[CLASS] NumberUtils  [METHOD] maximum [RETURN_TYPE] int   int a int b int c [VARIABLES] boolean  int  a  b  c  
[P2_Replace_Operator]^if  ( lhs == rhs )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhs < lhs )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( c < a )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits < rhsBits )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits == rhsBits )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( b < a )  {^492^^^^^491^518^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P15_Unwrap_Block]^return -1;^492^493^494^^^491^518^if  ( lhs < rhs )  { return -1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P16_Remove_Block]^^492^493^494^^^491^518^if  ( lhs < rhs )  { return -1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits < rhsBits )  {     return -1; }else {     return +1; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^492^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return --5;^493^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return -0;^493^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return -3;^493^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return -1 / 1;^493^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhs < rhs )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhs > lhs )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( c > a )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits < rhsBits )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( b > a )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits == rhsBits )  {^495^^^^^491^518^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P15_Unwrap_Block]^return +1;^495^496^497^^^491^518^if  ( lhs > rhs )  { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P16_Remove_Block]^^495^496^497^^^491^518^if  ( lhs > rhs )  { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^495^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return +6;^496^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return +0;^496^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return +3;^496^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P1_Replace_Type]^short  lhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P5_Replace_Variable]^long rhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P7_Replace_Invocation]^long lhsBits = Double.valueOf ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P7_Replace_Invocation]^long lhsBits = Double .doubleValue (  )  ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^int rhsBits = Float.floatToIntBits ( rhs ) ;long lhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^int lhsBits = Float.floatToIntBits ( lhs ) ;long lhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^long rhsBits = Double.doubleToLongBits ( rhs ) ;long lhsBits = Double.doubleToLongBits ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^long rhsBits = Double.valueOf ( lhs ) ;^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P14_Delete_Statement]^^502^^^^^491^518^long lhsBits = Double.doubleToLongBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P1_Replace_Type]^short  rhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P5_Replace_Variable]^long lhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P7_Replace_Invocation]^long rhsBits = Double.valueOf ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P7_Replace_Invocation]^long rhsBits = Double .doubleValue (  )  ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^int rhsBits = Float.floatToIntBits ( rhs ) ;long rhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^long lhsBits = Double.doubleToLongBits ( lhs ) ;long rhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^int lhsBits = Float.floatToIntBits ( lhs ) ;long rhsBits = Double.doubleToLongBits ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^long lhsBits = Double.valueOf ( rhs ) ;^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P14_Delete_Statement]^^503^^^^^491^518^long rhsBits = Double.doubleToLongBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhsBits != rhsBits )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhsBits == lhsBits )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits < rhsBits )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^504^^^^^491^518^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P15_Unwrap_Block]^return 0;^504^505^506^^^491^518^if  ( lhsBits == rhsBits )  { return 0; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P16_Remove_Block]^^504^505^506^^^491^518^if  ( lhsBits == rhsBits )  { return 0; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits < rhsBits )  {     return -1; }else {     return +1; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^504^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return 4;^505^^^^^491^518^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return null;^505^^^^^491^518^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhsBits <= rhsBits )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhsBits < lhsBits )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits == rhsBits )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^513^^^^^491^518^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P15_Unwrap_Block]^return -1;^513^514^515^516^517^491^518^if  ( lhsBits < rhsBits )  { return -1; } else { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P16_Remove_Block]^^513^514^515^516^517^491^518^if  ( lhsBits < rhsBits )  { return -1; } else { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^513^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^513^^^^^491^518^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return +8;^516^^^^^513^517^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return +2;^516^^^^^513^517^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return -7;^514^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return -1 << 1;^514^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return --7;^514^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return -0;^514^^^^^491^518^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P3_Replace_Literal]^return +10;^516^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P8_Replace_Mix]^return +0;^516^^^^^491^518^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   double lhs double rhs [VARIABLES] boolean  double  lhs  rhs  long  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhs == rhs )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhs < lhs )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( c < a )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits < rhsBits )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits == rhsBits )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( b < a )  {^553^^^^^552^579^if  ( lhs < rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P15_Unwrap_Block]^return -1;^553^554^555^^^552^579^if  ( lhs < rhs )  { return -1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P16_Remove_Block]^^553^554^555^^^552^579^if  ( lhs < rhs )  { return -1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits < rhsBits )  {     return -1; }else {     return +1; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^553^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return -7;^554^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return -3;^554^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return --1;^554^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return -2;^554^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhs >= rhs )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhs > lhs )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( c > a )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits < rhsBits )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( b > a )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits == rhsBits )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^556^^^^^552^579^if  ( lhs > rhs )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P15_Unwrap_Block]^return +1;^556^557^558^^^552^579^if  ( lhs > rhs )  { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P16_Remove_Block]^^556^557^558^^^552^579^if  ( lhs > rhs )  { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^556^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return +8;^557^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return +4;^557^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return +lhsBits;^557^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return +2;^557^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P1_Replace_Type]^short  lhsBits = Float.floatToIntBits ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P5_Replace_Variable]^int rhsBits = Float.floatToIntBits ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P7_Replace_Invocation]^int lhsBits = Float.valueOf ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^int lhsBits = Float .floatValue (  )  ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^int rhsBits = Float.floatToIntBits ( rhs ) ;int lhsBits = Float.floatToIntBits ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^long lhsBits = Double.doubleToLongBits ( lhs ) ;int lhsBits = Float.floatToIntBits ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^long rhsBits = Double.doubleToLongBits ( rhs ) ;int lhsBits = Float.floatToIntBits ( lhs ) ;^563^^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P14_Delete_Statement]^^563^564^^^^552^579^int lhsBits = Float.floatToIntBits ( lhs ) ; int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P1_Replace_Type]^short  rhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P7_Replace_Invocation]^int rhsBits = Float.valueOf ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P7_Replace_Invocation]^int rhsBits = Float .floatValue (  )  ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^int lhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^long lhsBits = Double.doubleToLongBits ( lhs ) ;int rhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^int lhsBits = Float.floatToIntBits ( lhs ) ;int rhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P11_Insert_Donor_Statement]^long rhsBits = Double.doubleToLongBits ( rhs ) ;int rhsBits = Float.floatToIntBits ( rhs ) ;^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P14_Delete_Statement]^^564^^^^^552^579^int rhsBits = Float.floatToIntBits ( rhs ) ;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhsBits >= rhsBits )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhsBits == lhsBits )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits < rhsBits )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^565^^^^^552^579^if  ( lhsBits == rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P15_Unwrap_Block]^return 0;^565^566^567^^^552^579^if  ( lhsBits == rhsBits )  { return 0; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P16_Remove_Block]^^565^566^567^^^552^579^if  ( lhsBits == rhsBits )  { return 0; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits < rhsBits )  {     return -1; }else {     return +1; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^565^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return -3;^566^^^^^552^579^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return 0 * 4;^566^^^^^552^579^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return 3;^566^^^^^552^579^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return 1;^566^^^^^552^579^return 0;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P2_Replace_Operator]^if  ( lhsBits <= rhsBits )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P5_Replace_Variable]^if  ( rhsBits < lhsBits )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs > rhs )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhsBits == rhsBits )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P9_Replace_Statement]^if  ( lhs < rhs )  {^574^^^^^552^579^if  ( lhsBits < rhsBits )  {^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P15_Unwrap_Block]^return -1;^574^575^576^577^578^552^579^if  ( lhsBits < rhsBits )  { return -1; } else { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P16_Remove_Block]^^574^575^576^577^578^552^579^if  ( lhsBits < rhsBits )  { return -1; } else { return +1; }^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^574^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^574^^^^^552^579^[Delete]^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return +rhsBits;^577^^^^^574^578^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return +2;^577^^^^^574^578^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return --6;^575^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return -2;^575^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return --7;^575^^^^^552^579^return -1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P3_Replace_Literal]^return +5;^577^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P8_Replace_Mix]^return +4;^577^^^^^552^579^return +1;^[CLASS] NumberUtils  [METHOD] compare [RETURN_TYPE] int   float lhs float rhs [VARIABLES] boolean  float  lhs  rhs  int  lhsBits  rhsBits  
[P2_Replace_Operator]^if  (  ( str == null )  &&  ( str.length (  )  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P2_Replace_Operator]^if  (  ( str != null )  ||  ( str.length (  )  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P2_Replace_Operator]^if  (  ( str == null )  ||  ( str.length (  )  != 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^if  (  ( str == null )  ||  ( str.length (  )  == i )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^if  (  ( str == null )  ||  ( str.length() - 7  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P6_Replace_Expression]^if  (  ( str == null )  ) {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P6_Replace_Expression]^if  (   ( str.length (  )  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P6_Replace_Expression]^if  ( str == null )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P6_Replace_Expression]^if  ( str.length (  )  == 0 )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P7_Replace_Invocation]^if  (  ( str == null )  ||  ( str.charAt (  )  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P7_Replace_Invocation]^if  (  ( str == null )  ||  ( str .startsWith ( str )   == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P8_Replace_Mix]^if  (  ( str == false )  ) {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P15_Unwrap_Block]^return false;^594^595^596^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P16_Remove_Block]^^594^595^596^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^594^^^^^593^603^[Delete]^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'e' )  ||  (  ( chars[i] )  == 'E' )  )  {     return false; }^594^^^^^593^603^[Delete]^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^594^^^^^593^603^[Delete]^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^return true;^595^^^^^593^603^return false;^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^if  (  ( str == null )  ||  ( str.length() - 8  == 0 )  )  {^594^^^^^593^603^if  (  ( str == null )  ||  ( str.length (  )  == 0 )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P5_Replace_Variable]^if  ( !Character.isDigit ( i.charAt ( str )  )  )  {^598^^^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P7_Replace_Invocation]^if  ( !Character.isDigit ( str.substring ( i )  )  )  {^598^^^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P9_Replace_Statement]^if  ( !Character.isDigit ( lastChar )  )  {^598^^^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P15_Unwrap_Block]^return false;^598^599^600^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P16_Remove_Block]^^598^599^600^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^return true;^599^^^^^593^603^return false;^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < str.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i == str.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < str.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < str.length() + 7 ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P5_Replace_Variable]^for  ( strnt i = 0; i < i.length (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < str.charAt (  ) ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P7_Replace_Invocation]^for  ( int i = 0; i < str .startsWith ( str )  ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P7_Replace_Invocation]^if  ( !Character.isDigit ( str .toCharArray (  )   )  )  {^598^^^^^593^603^if  ( !Character.isDigit ( str.charAt ( i )  )  )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P13_Insert_Block]^if  ( ! ( isDigit ( str.charAt ( i )  )  )  )  {     return false; }^598^^^^^593^603^[Delete]^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^for  ( int i = 0; i < str.length() - 4 ; i++ )  {^597^^^^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  {^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P14_Delete_Statement]^^597^598^599^600^^593^603^for  ( int i = 0; i < str.length (  ) ; i++ )  { if  ( !Character.isDigit ( str.charAt ( i )  )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P3_Replace_Literal]^return false;^602^^^^^593^603^return true;^[CLASS] NumberUtils  [METHOD] isDigits [RETURN_TYPE] boolean   String str [VARIABLES] boolean  String  str  int  i  
[P15_Unwrap_Block]^return false;^619^620^621^^^604^634^if  ( StringUtils.isEmpty ( str )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^619^620^621^^^604^634^if  ( StringUtils.isEmpty ( str )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^620^^^^^605^635^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( isEmpty ( str )  )  {     return false; }^619^^^^^604^634^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P7_Replace_Invocation]^char[] chars = str.charAt (  ) ;^622^^^^^607^637^char[] chars = str.toCharArray (  ) ;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^char[] chars = str .charAt ( i )  ;^622^^^^^607^637^char[] chars = str.toCharArray (  ) ;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P14_Delete_Statement]^^622^^^^^607^637^char[] chars = str.toCharArray (  ) ;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P1_Replace_Type]^short  sz = chars.length;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^int sz = start;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^int sz = chars.length.length;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^int sz = chars;^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P12_Insert_Condition]^if  ( i < chars.length )  { int sz = chars.length; }^623^^^^^608^638^int sz = chars.length;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^boolean hasExp = true;^624^^^^^609^639^boolean hasExp = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean allowSigns = false;boolean hasExp = false;^624^^^^^609^639^boolean hasExp = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean hasDecPoint = false;boolean hasExp = false;^624^^^^^609^639^boolean hasExp = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean foundDigit = false;boolean hasExp = false;^624^^^^^609^639^boolean hasExp = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^boolean hasDecPoint = true;^625^^^^^610^640^boolean hasDecPoint = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean allowSigns = false;boolean hasDecPoint = false;^625^^^^^610^640^boolean hasDecPoint = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean foundDigit = false;boolean hasDecPoint = false;^625^^^^^610^640^boolean hasDecPoint = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean hasExp = false;boolean hasDecPoint = false;^625^^^^^610^640^boolean hasDecPoint = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^boolean allowSigns = true;^626^^^^^611^641^boolean allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean hasDecPoint = false;boolean allowSigns = false;^626^^^^^611^641^boolean allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean foundDigit = false;boolean allowSigns = false;^626^^^^^611^641^boolean allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean hasExp = false;boolean allowSigns = false;^626^^^^^611^641^boolean allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^boolean foundDigit = true;^627^^^^^612^642^boolean foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean allowSigns = false;boolean foundDigit = false;^627^^^^^612^642^boolean foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean hasDecPoint = false;boolean foundDigit = false;^627^^^^^612^642^boolean foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^boolean hasExp = false;boolean foundDigit = false;^627^^^^^612^642^boolean foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P1_Replace_Type]^short  start =  ( chars[0] == '-' )  ? 1 : 0;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^int start =  ( chars[0] != '-' )  ? 1 : 0;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^int start =  ( chars[0] == '-' )  ? i : 0;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^int start =  ( chars[i] == '-' )  ? 1 : i;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^int start =  ( 0;^629^^^^^614^644^int start =  ( chars[0] == '-' )  ? 1 : 0;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( sz >= start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( sz > start  >>  1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( sz > start  >=  1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  !=  ( sz > start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^if  ( sz > start + sz )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^if  ( sz > start  )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( start > start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( sz > sz + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( start + 1 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[start] == '0' && (chars[(start + 1)]) == 'x' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[start] == '0' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[ ( start + 1 ) ] == 'x' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( start + 2 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( i == sz )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( i < chars.length )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( ((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f')) && (chars[i] < 'A') || (chars[i] > 'F') )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( ((chars[i] < '0') || (chars[i] > '9') && (chars[i] < 'a') || (chars[i] > 'f')) )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < '0' || chars[i] > '9') )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < '0' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > '9' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < 'a' || chars[i] > 'f') )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < 'a' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > 'f' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < 'A' || chars[i] > 'F') )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < 'A' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > 'F' )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^if  ( sz > start + 2 )  {^630^^^^^615^645^if  ( sz > start + 1 )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^if (((chars[start]) == '0') && ((chars[(start + 1)]) == 'x')) {    int i = start + 2;    if (i == sz) {        return false;    }    for (; i < (chars.length); i++) {        if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {            return false;        }    }    return true;};^630^631^632^633^634^615^645^if  ( sz > start + 1 )  { if  ( chars[start] == '0' && chars[start + 1] == 'x' )  { int i = start + 2; if  ( i == sz )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^630^631^632^633^634^615^645^if  ( sz > start + 1 )  { if  ( chars[start] == '0' && chars[start + 1] == 'x' )  { int i = start + 2; if  ( i == sz )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[start] == '0' || chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[start] >= '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[start] != '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  !=  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  <  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[start] < '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^if  ( chars[start] == '0' && chars[start ] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( chars[start] == '0' && chars[sz + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[start] == '0' ) {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[ ( start + 1 ) ] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( start + 1 )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( start + 2 )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( i == sz )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( i < chars.length )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( ((chars[i] < '0') || (chars[i] > '9')) && ((chars[i] < 'a') || (chars[i] > 'f')) && (chars[i] < 'A') || (chars[i] > 'F') )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( ((chars[i] < '0') || (chars[i] > '9') && (chars[i] < 'a') || (chars[i] > 'f')) )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < '0' || chars[i] > '9') )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < '0' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > '9' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < 'a' || chars[i] > 'f') )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < 'a' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > 'f' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < 'A' || chars[i] > 'F') )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < 'A' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > 'F' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^int i = start + 2; if (i == sz) {    return false;}; for (; i < (chars.length); i++) {    if (((((chars[i]) < '0') || ((chars[i]) > '9')) && (((chars[i]) < 'a') || ((chars[i]) > 'f'))) && (((chars[i]) < 'A') || ((chars[i]) > 'F'))) {        return false;    }}; return true;^631^632^633^634^635^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  { int i = start + 2; if  ( i == sz )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^631^632^633^634^635^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  { int i = start + 2; if  ( i == sz )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( i != sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( start == sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( i == start )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( sz == i )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( val == null )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( s == null )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( c < a )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( c > a )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( b > a )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^if  ( b < a )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^633^634^635^^^618^648^if  ( i == sz )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^633^634^635^^^618^648^if  ( i == sz )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( c < a )  {     a = c; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( c > a )  {     a = c; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( b < a )  {     a = b; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( b > a )  {     a = b; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^633^^^^^618^648^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^634^^^^^619^649^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) ||  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' && chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] <= '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] >= '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] > 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] < 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] <= 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] < 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  ( chars[i] < '0' ) {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( ((chars[i] < '0') || (chars[i] > '9') && (chars[i] < 'a') || (chars[i] > 'f')) )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < '0' || chars[i] > '9') )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < '0' )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > '9' )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < 'a' || chars[i] > 'f') )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < 'a' )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > 'f' )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] < 'A' || chars[i] > 'F') )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] < 'A' )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] > 'F' )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^638^639^640^641^642^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^638^639^640^641^642^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( !allowSigns )  &&  (  (  (  (  ( chars[i] )  == 'd' )  ||  (  ( chars[i] )  == 'D' )  )  ||  (  ( chars[i] )  == 'f' )  )  ||  (  ( chars[i] )  == 'F' )  )  )  {     return foundDigit; }^638^^^^^623^653^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^641^^^^^638^642^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^for  ( ; i <= chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^for  ( ; sz < chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^for  ( ; i < sz; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^for  ( ; chars.length < i; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^for  ( ; i < chars.length.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] == '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] <= 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] >= 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] > 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] >= 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^641^^^^^626^656^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return false;^644^^^^^629^659^return true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P1_Replace_Type]^short  i = start + 2;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^int i = start ;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^int i = sz + 2;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^int i = start;int i = start + 2;^632^^^^^617^647^int i = start + 2;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( i >= sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] > '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] == 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^for  ( ; i > chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^for  ( ; chars < i.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^for  ( ; i < chars; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  |  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^if  ( chars[start] == '0' && chars[start + sz] == 'x' )  {^631^^^^^616^646^if  ( chars[start] == '0' && chars[start + 1] == 'x' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] == '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( i <= sz )  {^633^^^^^618^648^if  ( i == sz )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] == 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^for  ( ; i == chars.length; i++ )  {^637^^^^^622^652^for  ( ; i < chars.length; i++ )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  (  ( chars[i] < '0' || chars[i] < '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^638^639^640^^^623^653^if  (  ( chars[i] < '0' || chars[i] > '9' ) &&  ( chars[i] < 'a' || chars[i] > 'f' ) &&  ( chars[i] < 'A' || chars[i] > 'F' )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P1_Replace_Type]^short  i = start;^649^^^^^634^664^int i = start;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^int i = sz;^649^^^^^634^664^int i = start;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^int i = start + 2;int i = start;^649^^^^^634^664^int i = start;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^while  ( i < sz &&  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^while  ( i == sz ||  ( i == sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^while  ( i < sz ||  ( i < sz + 1 || allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^while  ( i < sz ||  ( i <= sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^while  ( i < sz ||  ( i < sz  <=  1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^while  ( i < sz ||  ( i < sz + sz && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^while  ( start < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^while  ( i < start ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^while  ( i < sz ||  ( i < sz + 1 && hasDecPoint && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^while  ( sz < i ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^652^^^^^637^667^while  ( i < sz ||  ( i < sz + 1 && allowSigns && !foundDigit )  )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] >= '0' || chars[i] <= '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == '0' && chars[i] <= '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] >= '0' && chars[i] < '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] >= '0' ) {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  chars[i] <= '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == '.' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( hasDecPoint || hasExp )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'e' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'E' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == '+' || chars[i] == '-' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == '+' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == '-' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] != '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] < '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( hasDecPoint || hasExp )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == 'e' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == 'E' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '+' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '-' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^if (hasDecPoint || hasExp) {    return false;}; hasDecPoint = true;^657^658^^660^661^642^672^} else if  ( chars[i] == '.' )  { if  ( hasDecPoint || hasExp )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^657^658^^660^661^642^672^} else if  ( chars[i] == '.' )  { if  ( hasDecPoint || hasExp )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == 'e' && chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] != 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == 'e' || chars[i] != 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] > 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^} else szf  ( chars[i] == 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == 'e' ) {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  (  chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '+' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '-' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^if (hasExp) {    return false;}; if (!foundDigit) {    return false;}; hasExp = true; allowSigns = true;^663^664^665^^667^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {  if  ( hasExp )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^663^664^665^^667^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {  if  ( hasExp )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == '+' && chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] <= '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == '+' || chars[i] != '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^} else szf  ( chars[i] == '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^} else charsf  ( i[i] == '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  ( chars[i] == '+' ) {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else if  (  chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^} else {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  szf  ( chars[i] == '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P9_Replace_Statement]^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^if (!allowSigns) {    return false;}; allowSigns = false; foundDigit = false;^674^675^676^677^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  { if  ( !allowSigns )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^674^675^676^677^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  { if  ( !allowSigns )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^681^^^^^674^682^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( !hasExp )  {^675^^^^^660^690^if  ( !allowSigns )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^if  ( allowSigns )  {^675^^^^^660^690^if  ( !allowSigns )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^675^676^677^^^660^690^if  ( !allowSigns )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^675^676^677^^^660^690^if  ( !allowSigns )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^675^^^^^660^690^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^676^^^^^661^691^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^allowSigns = true;^678^^^^^663^693^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^foundDigit = false;allowSigns = false;^678^^^^^663^693^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^allowSigns = true;allowSigns = false;^678^^^^^663^693^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^foundDigit = true;^679^^^^^664^694^foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^foundDigit = true;foundDigit = false;^679^^^^^664^694^foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^allowSigns = false;foundDigit = false;^679^^^^^664^694^foundDigit = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^681^^^^^666^696^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( hasDecPoint )  {^665^^^^^650^680^if  ( hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^665^666^667^668^^650^680^if  ( hasExp )  {  return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^665^666^667^668^^650^680^if  ( hasExp )  {  return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^665^^^^^650^680^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^667^^^^^652^682^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( !hasExp )  {^669^^^^^654^684^if  ( !foundDigit )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^669^670^671^^^654^684^if  ( !foundDigit )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^669^670^671^^^654^684^if  ( !foundDigit )  { return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^669^^^^^654^684^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^670^^^^^655^685^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^hasExp = false;^672^^^^^657^687^hasExp = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^hasDecPoint = true;hasExp = true;^672^^^^^657^687^hasExp = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^allowSigns = false;^673^^^^^658^688^allowSigns = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^foundDigit = true;allowSigns = true;^673^^^^^658^688^allowSigns = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^allowSigns = false;allowSigns = true;^673^^^^^658^688^allowSigns = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^hasDecPoint = true;allowSigns = true;^673^^^^^658^688^allowSigns = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] != '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == '+' || chars[i] <= '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  szf  (  chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( hasDecPoint && hasExp )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( foundDigit || hasExp )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( hasDecPoint || foundDigit )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( hasExp || hasDecPoint )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( hasDecPoint ) {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  hasExp )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^658^659^660^661^^643^673^if  ( hasDecPoint || hasExp )  {  return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^658^659^660^661^^643^673^if  ( hasDecPoint || hasExp )  {  return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val.startsWith ( "--" )  )  {     return null; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( val == null )  {     return null; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasExp )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'e' )  ||  (  ( chars[i] )  == 'E' )  )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( i == sz )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !foundDigit )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( s == null )  {     return true; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhsBits == rhsBits )  {     return 0; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs > rhs )  {     return +1; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( str == null )  ||  (  ( str.length (  )  )  == 0 )  )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( lhs < rhs )  {     return -1; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( !allowSigns )  {     return false; }^658^^^^^643^673^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^660^^^^^645^675^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^hasDecPoint = false;^662^^^^^647^677^hasDecPoint = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^allowSigns = true;hasDecPoint = true;^662^^^^^647^677^hasDecPoint = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^foundDigit = true;hasDecPoint = true;^662^^^^^647^677^hasDecPoint = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^hasExp = true;hasDecPoint = true;^662^^^^^647^677^hasDecPoint = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^if  (  foundDigit )  {^658^^^^^643^673^if  ( hasDecPoint || hasExp )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] <= 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] >= '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == '+' || chars[i] >= '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  szf  ( chars[i] == '+' ) {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^foundDigit = false;^654^^^^^639^669^foundDigit = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^foundDigit = false;foundDigit = true;^654^^^^^639^669^foundDigit = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^allowSigns = true;foundDigit = true;^654^^^^^639^669^foundDigit = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^hasDecPoint = true;foundDigit = true;^654^^^^^639^669^foundDigit = true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^allowSigns = true;^655^^^^^640^670^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^foundDigit = false;allowSigns = false;^655^^^^^640^670^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P11_Insert_Donor_Statement]^allowSigns = true;allowSigns = false;^655^^^^^640^670^allowSigns = false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] <= '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^} else szf  ( chars[i] == '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  szf  ( chars[i] == '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == 'e' || chars[i] < 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] >= 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^} else charsf  ( i[i] == 'e' || chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^} else szf  (  chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == '+' || chars[i] < '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == 'e' || chars[i] >= 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] > '0' && chars[i] <= '9' )  {^653^^^^^638^668^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] < '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] >= '.' )  {^657^^^^^642^672^} else if  ( chars[i] == '.' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  if  ( chars[i] == '+' || chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^} else if  ( chars[i] == 'e' || chars[i] > 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  if  (  chars[i] == 'E' )  {^663^^^^^648^678^} else if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^}  if  (  chars[i] == '-' )  {^674^^^^^659^689^} else if  ( chars[i] == '+' || chars[i] == '-' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( i <= chars.length )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( sz < chars.length )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( i < sz )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( chars < i.length )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] >= '0' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] <= '9' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'e' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'E' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( !allowSigns && (((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f')) || (chars[i] == 'F') )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (((chars[i] == 'd') || (chars[i] == 'D')) || (chars[i] == 'f') || chars[i] == 'F') )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( ((chars[i] == 'd') || (chars[i] == 'D') || chars[i] == 'f') )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( (chars[i] == 'd' || chars[i] == 'D') )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'd' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'D' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'f' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'F' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'l' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'L' )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( foundDigit && !hasExp )  {^685^^^^^670^700^if  ( i < chars.length )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^if (((chars[i]) >= '0') && ((chars[i]) <= '9')) {    return true;}; if (((chars[i]) == 'e') || ((chars[i]) == 'E')) {    return false;}; if ((!allowSigns) && (((((chars[i]) == 'd') || ((chars[i]) == 'D')) || ((chars[i]) == 'f')) || ((chars[i]) == 'F'))) {    return foundDigit;}; if (((chars[i]) == 'l') || ((chars[i]) == 'L')) {    return foundDigit && (!hasExp);}; return false;^685^686^^688^689^670^700^if  ( i < chars.length )  { if  ( chars[i] >= '0' && chars[i] <= '9' )  { return true; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^685^686^^688^689^670^700^if  ( i < chars.length )  { if  ( chars[i] >= '0' && chars[i] <= '9' )  { return true; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] >= '0' || chars[i] <= '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] > '0' && chars[i] <= '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] >= '0' && chars[i] < '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] >= '0' ) {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  chars[i] <= '9' )  {^686^^^^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return true;^686^687^688^689^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {  return true; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^686^687^688^689^^671^701^if  ( chars[i] >= '0' && chars[i] <= '9' )  {  return true; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'e' )  ||  (  ( chars[i] )  == 'E' )  )  {     return false; }^686^^^^^671^701^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'l' )  ||  (  ( chars[i] )  == 'L' )  )  {     return foundDigit &&  ( !hasExp ) ; }^686^^^^^671^701^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return false;^688^^^^^673^703^return true;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == 'e' && chars[i] == 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] != 'e' || chars[i] == 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == 'e' || chars[i] <= 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'e' ) {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  chars[i] == 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return false;^690^691^692^693^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {  return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^690^691^692^693^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {  return false; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( s.charAt ( i )  )  != '0' )  {     return false; }^690^^^^^675^705^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  >= '0' )  &&  (  ( chars[i] )  <= '9' )  )  {     return true; }^690^^^^^675^705^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  ( str == null )  ||  (  ( str.length (  )  )  == 0 )  )  {     return false; }^690^^^^^675^705^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'l' )  ||  (  ( chars[i] )  == 'L' )  )  {     return foundDigit &&  ( !hasExp ) ; }^690^^^^^675^705^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  ( hasDecPoint || hasExp )  {     return false; }^690^^^^^675^705^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^692^^^^^677^707^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns ||  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns &&  ( chars[i] == 'd' && chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns &&  ( chars[i] >= 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] != 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns &&  ( chars[i] != 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns &&  ( chars[i] <= 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^if  ( !hasExp &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^return hasExp;^699^^^^^694^700^return foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == 'l' && chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] != 'l' || chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == 'l' || chars[i] >= 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( chars[i] == 'l' ) {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  (  chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P6_Replace_Expression]^if  ( foundDigit && !hasExp )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P15_Unwrap_Block]^return foundDigit && (!hasExp);^701^702^^704^705^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  { return foundDigit && !hasExp; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P16_Remove_Block]^^701^702^^704^705^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  { return foundDigit && !hasExp; }^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  >= '0' )  &&  (  ( chars[i] )  <= '9' )  )  {     return true; }^701^^^^^686^716^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P13_Insert_Block]^if  (  (  ( chars[i] )  == 'e' )  ||  (  ( chars[i] )  == 'E' )  )  {     return false; }^701^^^^^686^716^[Delete]^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^return foundDigit || !hasExp;^704^^^^^701^705^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^return hasDecPoint && !hasExp;^704^^^^^701^705^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^return hasDecPoint || !hasExp;^704^^^^^701^705^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^return hasExp;^699^^^^^684^714^return foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^return foundDigit || !hasExp;^704^^^^^689^719^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^return foundDigit ;^704^^^^^689^719^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P3_Replace_Literal]^return true;^707^^^^^692^722^return false;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == 'e' || chars[i] != 'E' )  {^690^^^^^675^705^if  ( chars[i] == 'e' || chars[i] == 'E' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( !allowSigns &&  ( chars[i] < 'd' || chars[i] == 'D' || chars[i] == 'f'^694^695^696^697^^679^709^if  ( !allowSigns &&  ( chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] <= 'l' || chars[i] == 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^if  ( chars[i] == 'l' || chars[i] != 'L' )  {^701^702^^^^686^716^if  ( chars[i] == 'l' || chars[i] == 'L' )  {^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^return hasDecPoint && !hasExp;^704^^^^^689^719^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P8_Replace_Mix]^returnhasExp ;^704^^^^^689^719^return foundDigit && !hasExp;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P2_Replace_Operator]^return !allowSigns || foundDigit;^711^^^^^696^726^return !allowSigns && foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^return !hasExp && foundDigit;^711^^^^^696^726^return !allowSigns && foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
[P5_Replace_Variable]^return !allowSigns && hasExp;^711^^^^^696^726^return !allowSigns && foundDigit;^[CLASS] NumberUtils  [METHOD] isNumber [RETURN_TYPE] boolean   String str [VARIABLES] boolean  allowSigns  foundDigit  hasDecPoint  hasExp  String  str  int  i  start  sz  char[]  chars  
