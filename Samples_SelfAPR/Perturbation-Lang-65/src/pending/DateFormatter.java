[P2_Replace_Operator]^if  ( dateStr != null )  {^45^^^^^30^60^if  ( dateStr == null )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( dateStr == false )  {^45^^^^^30^60^if  ( dateStr == null )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("The date must not be null");^45^46^47^^^30^60^if  ( dateStr == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^45^46^47^^^30^60^if  ( dateStr == null )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( start < 0 )  {     throw new IllegalArgumentException ( "Could not find space in between value and unit" ) ; }^45^^^^^30^60^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( dateStr == null )  {     throw new IllegalArgumentException ( "The date must not be null" ) ; }^46^^^^^31^61^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return ;^46^^^^^31^61^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^DateFormat[] dateFormats = new DateFormat[-6];^51^^^^^36^66^DateFormat[] dateFormats = new DateFormat[0];^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^char value = dateStr.toLowerCase (  ) .trim (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^String value = unit.toLowerCase (  ) .trim (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^String value = dateStr.toLowerCase (  ) .substring (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^String value = dateStr.substring (  ) .trim (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^String value = unit.toLowerCase (  ) .substring (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^String value = value.toLowerCase (  ) .trim (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^String value = dateStr .equalsIgnoreCase ( dateStr )  .trim (  ) ;^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^54^^^^^39^69^String value = dateStr.toLowerCase (  ) .trim (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^Calendar cal = Calendar.getInstance (  ) ;Calendar now = Calendar.getInstance (  ) ;^57^^^^^42^72^Calendar now = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^Calendar now = Calendar .setTime ( datetime )  ;^57^^^^^42^72^Calendar now = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^57^^^^^42^72^Calendar now = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.endsWith ( "" )  )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( unit.endsWith ( " ago" )  )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( monthsAgoue.endsWith ( " ago" )  )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( start < 0 )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( start + 1 )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( value.equals("a") || value.equals("an") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("milliseconds") || unit.equals("millisecond") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("seconds") || unit.equals("second") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("minutes") || unit.equals("minute") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("hours") || unit.equals("hour") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("days") || unit.equals("day") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("weeks") || unit.equals("week") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( -val * 7 )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( -val * 14 )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("months") || unit.equals("month") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("years") || unit.equals("year") )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( i < strings.length )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( DAY_OF_WEEK) - i )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( daysAgo <= 0 )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( MONTH) - i )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( monthsAgo <= 0 )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value.substring ( " ago" )  )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.startsWith ( "last la" )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( unit.startsWith ( "last " )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( DAY_OF_WEEK) - i )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( daysAgo <= 0 )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( i < strings.length )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( MONTH) - i )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( monthsAgo <= 0 )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value.substring ( "last " )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( value.equals ( "yesterday" )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "yesterdesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( unit.equals ( "yesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value.substring ( "yesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value .equalsIgnoreCase ( unit )   )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( value.startsWith ( "last " )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( unit.equals ( "tomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value.substring ( "tomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( value.equals ( "yesterday" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^now.add(java.util.Calendar.DATE, 1); return now;^138^139^140^141^^123^153^} else if  ( value.equals ( "tomorrow" )  )  { now.add ( Calendar.DATE, 1 ) ; return now; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^138^139^140^141^^123^153^} else if  ( value.equals ( "tomorrow" )  )  { now.add ( Calendar.DATE, 1 ) ; return now; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( value.equals ( "week" )  )  {     now.add ( DATE,  ( -7 )  ) ;     return now; }^138^^^^^123^153^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return cal;^140^^^^^125^155^return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, 6 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.DATE, 1 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomorro" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( unit.substring ( "tomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, 9 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^139^140^^^^124^154^now.add ( Calendar.DATE, 1 ) ; return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return cal;^137^^^^^122^152^return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -3 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now .getInstance (  )  ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^136^137^^^^121^151^now.add ( Calendar.DATE, -1 ) ; return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.DATE, -1 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomorrowo" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "tomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, monthsAgo ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "eesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -monthsAgo ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value .equalsIgnoreCase ( value )   )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, i ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( unit.equalsIgnoreCase ( strings[i] )  )  {^108^^^^^93^123^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( daysAgo <= 0 )  {^108^^^^^93^123^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^int daysAgo = (now.get(java.util.Calendar.DAY_OF_WEEK)) - i; if (daysAgo <= 0) {    daysAgo += 7;}; now.add(java.util.Calendar.DATE, (-daysAgo)); return now;^108^109^110^111^112^93^123^if  ( value.equalsIgnoreCase ( strings[i] )  )  {  int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i; if  ( daysAgo <= 0 )  { daysAgo += 7; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^108^109^110^111^112^93^123^if  ( value.equalsIgnoreCase ( strings[i] )  )  {  int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i; if  ( daysAgo <= 0 )  { daysAgo += 7; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( value.equalsIgnoreCase ( strings[i] )  )  {     int monthsAgo =  ( now.get ( MONTH )  )  - i;     if  ( monthsAgo <= 0 )  {         monthsAgo += 12;     }     now.add ( MONTH,  ( -monthsAgo )  ) ;     return now; }^108^^^^^93^123^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( daysAgo < 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= monthsAgo )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( val <= 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( daysAgo <= 2 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^if  ( start < 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^if  ( monthsAgo <= 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^daysAgo += 7;^111^112^113^^^96^126^if  ( daysAgo <= 0 )  { daysAgo += 7; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^111^112^113^^^96^126^if  ( daysAgo <= 0 )  { daysAgo += 7; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( monthsAgo <= 0 )  {     monthsAgo += 12; }^111^^^^^96^126^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += monthsAgo;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 >>> 2;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^monthsAgo += 12;daysAgo += 7;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 4;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 9;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return cal;^115^^^^^100^130^return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^short  daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   ==  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int daysAgo = cal.get ( Calendar.DAY_OF_WEEK )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - val;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int daysAgo = now.get ( Calendar.val )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int daysAgo = i.get ( Calendar.DAY_OF_WEEK )  - now;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int daysAgo = now.setTime ( Calendar.DAY_OF_WEEK )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int daysAgo = now .setTime ( datetime )   - val;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^int monthsAgo = now.get ( Calendar.MONTH )  - i;int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int daysAgo = now.get ( Calendar.start )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int daysAgo = now.setTime ( Calendar.monthsAgo )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.DATE, -val ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.DATE, -daysAgo ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= start )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( daysAgo <= 1 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += -2;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( unit.equalsIgnoreCase ( strings[i] )  )  {^120^^^^^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( strings.equalsIgnoreCase ( value[i] )  )  {^120^^^^^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( monthsAgo <= 0 )  {^120^^^^^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .toLowerCase (  )   )  {^120^^^^^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^int monthsAgo = (now.get(java.util.Calendar.MONTH)) - i; if (monthsAgo <= 0) {    monthsAgo += 12;}; now.add(java.util.Calendar.MONTH, (-monthsAgo)); return now;^120^121^122^123^124^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {  int monthsAgo = now.get ( Calendar.MONTH )  - i; if  ( monthsAgo <= 0 )  { monthsAgo += 12; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^120^121^122^123^124^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {  int monthsAgo = now.get ( Calendar.MONTH )  - i; if  ( monthsAgo <= 0 )  { monthsAgo += 12; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( value.equalsIgnoreCase ( strings[i] )  )  {     int daysAgo =  ( now.get ( DAY_OF_WEEK )  )  - i;     if  ( daysAgo <= 0 )  {         daysAgo += 7;     }     now.add ( DATE,  ( -daysAgo )  ) ;     return now; }^120^^^^^105^135^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( monthsAgo < 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= -7 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( start <= 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 2 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^if  ( start < 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^if  ( daysAgo <= 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^monthsAgo += 12;^123^124^125^^^108^138^if  ( monthsAgo <= 0 )  { monthsAgo += 12; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^123^124^125^^^108^138^if  ( monthsAgo <= 0 )  { monthsAgo += 12; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( daysAgo <= 0 )  {     daysAgo += 7; }^123^^^^^108^138^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += monthsAgo;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12L;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^daysAgo += 7;monthsAgo += 12;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += ;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 / 2;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return cal;^127^^^^^112^142^return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^long  monthsAgo = now.get ( Calendar.MONTH )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   &  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int monthsAgo = cal.get ( Calendar.MONTH )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int monthsAgo = now.get ( Calendar.MONTH )  - val;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int monthsAgo = now.get ( Calendar.val )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int monthsAgo = i.get ( Calendar.MONTH )  - now;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int monthsAgo = now.setTime ( Calendar.MONTH )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;int monthsAgo = now.get ( Calendar.MONTH )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int monthsAgo = now.get ( Calendar.start )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.MONTH, -val ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^126^127^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ; return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.MONTH, -monthsAgo ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= -2 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( val <= 3 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 8;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 10;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( unit.equals ( "week" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value.substring ( "week" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^now.add(java.util.Calendar.DATE, (-7)); return now;^130^131^132^133^^115^145^if  ( value.equals ( "week" )  )  { now.add ( Calendar.DATE, -7 ) ; return now; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^130^131^132^133^^115^145^if  ( value.equals ( "week" )  )  { now.add ( Calendar.DATE, -7 ) ; return now; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( value.equals ( "tomorrow" )  )  {     now.add ( DATE, 1 ) ;     return now; }^130^^^^^115^145^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return cal;^132^^^^^117^147^return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -6 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now .getInstance (  )  ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.DATE, -7 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^for  (  short  i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ( int i = 0; i <= strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ||  ( int i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -2; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = i; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( valnt i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( int i = 0; i < start; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( stringsnt i = 0; i < i.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( strings.lengthnt i = 0; i < i; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <=  )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += daysAgo;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 6;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 1;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 - 2;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   <<  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int daysAgo = now .setTime ( datetime )   - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= i )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += -1;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   >=  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( strings.equalsIgnoreCase ( value[i] )  )  {^108^^^^^93^123^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.DATE, -start ) ;^114^^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^114^115^^^^99^129^now.add ( Calendar.DATE, -daysAgo ) ; return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^for  (  short  i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ( int i = 0; i > strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  >>  ( int i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = ; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = daysAgo; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( startnt i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( int i = 0; i < val; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( int i = 0; i < strings.length.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( strings.lengthnt i = 0; i < i; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^for  ( int i = 0; i < start; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 1 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += val;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 2;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += start;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 / 4;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^short  monthsAgo = now.get ( Calendar.MONTH )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   ==  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int monthsAgo = cal.setTime ( Calendar.MONTH )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 0 >>> 1 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += daysAgo;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 - 1;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 6;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 >> 4;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int monthsAgo = now.get ( Calendar.monthsAgo )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.MONTH, -start ) ;^126^^^^^111^141^now.add ( Calendar.MONTH, -monthsAgo ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( -3 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^value = value .substring ( i )  ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 7 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 0, start ) ;value = value.substring ( 5 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 0, value.length (  )  - 4 ) ;value = value.substring ( 5 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += start;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^strings = symbols.DateFormatSymbols (  ) ;^118^^^^^103^133^strings = symbols.getMonths (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^strings = symbols .getWeekdays (  )  ;^118^^^^^103^133^strings = symbols.getMonths (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^strings =  null.getMonths (  ) ;^118^^^^^103^133^strings = symbols.getMonths (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 20;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 4;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "We do not understand that many units ago" )   ;^134^^^^^119^149^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^String[] strings = symbols.DateFormatSymbols (  ) ;^106^^^^^91^121^String[] strings = symbols.getWeekdays (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^for  (  long  i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -7; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   ||  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = monthsAgo; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   <=  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return 0;^134^^^^^119^149^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 13 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^value = unit.substring ( 5 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^String unit = value.substring ( start + 1 ) ;value = value.substring ( 5 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^String[] strings = symbols .getMonths (  )  ;^106^^^^^91^121^String[] strings = symbols.getWeekdays (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^106^^^^^91^121^String[] strings = symbols.getWeekdays (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^strings = symbols.getMonths (  ) ;String[] strings = symbols.getWeekdays (  ) ;^106^^^^^91^121^String[] strings = symbols.getWeekdays (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .toLowerCase (  )   )  {^108^^^^^93^123^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int daysAgo = now.get ( Calendar.monthsAgo )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^118^^^^^103^133^strings = symbols.getMonths (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^String[] strings = symbols.getWeekdays (  ) ;strings = symbols.getMonths (  ) ;^118^^^^^103^133^strings = symbols.getMonths (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.equals ( "w" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, --2 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= val )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( start <= 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( val <= 4 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += i;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 8;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   !=  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( daysAgo > 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= -7 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 15;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <=  )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 4 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 9;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 18;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   <  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= 7 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( val <= 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 3 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 7;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.equals ( "" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit.substring ( "week" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -13 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^131^132^^^^116^146^now.add ( Calendar.DATE, -7 ) ; return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "esesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "yesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.equals ( "tomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "orroomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, val ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, - ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomomorrow" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, 4 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ==  ( int i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = daysAgo; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = monthsAgo; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( startnt i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^for  ( int i = 0; i < val; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 2;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 - 3;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= 5 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( daysAgo <= 0 >> 1 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 10;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 3;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 5;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7L;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   &&  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ( int i = 0; i <= strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ||  ( int i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = 5; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( valnt i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= start )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 11;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 * 2;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += i;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   >  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int monthsAgo = now .setTime ( datetime )   - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int monthsAgo = now.setTime ( Calendar.monthsAgo )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= -6 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 0 * 2 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 15;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 0;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 - 2;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit .toLowerCase (  )   )  {^120^^^^^105^135^if  ( value.equalsIgnoreCase ( strings[i] )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int monthsAgo = now.setTime ( Calendar.val )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 1 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 5 / 4 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -8; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^long  daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   >  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int daysAgo = cal.setTime ( Calendar.DAY_OF_WEEK )  - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^for  (  long  i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = 7; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   >>  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( start ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^value = value .substring ( daysAgo )  ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "yes" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value .equalsIgnoreCase ( value )   )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomorrowom" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, start ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( start == 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( start < -8 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( val < 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( start < 2 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^if  ( daysAgo <= 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^if  ( monthsAgo <= 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^throw new java.lang.IllegalArgumentException("Could not find space in between value and unit");^65^66^67^^^50^80^if  ( start < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^65^66^67^^^50^80^if  ( start < 0 )  { throw new IllegalArgumentException  (" ")  ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( dateStr == null )  {     throw new IllegalArgumentException ( "The date must not be null" ) ; }^65^^^^^50^80^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( start < 0 )  {     throw new IllegalArgumentException ( "Could not find space in between value and unit" ) ; }^66^^^^^51^81^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( value.equals ( "a" )  && value.equals ( "an" )  )  {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( unit.equals ( "a" )  || value.equals ( "an" )  )  {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( value.equals ( "a" )  ) {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  (  value.equals ( "an" )  )  {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value.substring ( "a" )  || value.equals ( "an" )  )  {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^val = 1;^72^73^74^75^76^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  { val = 1; } else { val = Integer.parseInt ( value ) ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^72^73^74^75^76^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  { val = 1; } else { val = Integer.parseInt ( value ) ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^val = Integer.parseInt ( unit ) ;^75^^^^^72^76^val = Integer.parseInt ( value ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^75^^^^^72^76^val = Integer.parseInt ( value ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^val = 3;^73^^^^^58^88^val = 1;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^val = 0;^73^^^^^58^88^val = 1;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( unit.equals ( "milliseconds" )  && unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "ill" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "lillisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( value.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals ( "milliseconds" )  ) {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  (  unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("seconds") || unit.equals("second") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("minutes") || unit.equals("minute") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("hours") || unit.equals("hour") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("days") || unit.equals("day") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("weeks") || unit.equals("week") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( -val * 7 )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( -val * 14 )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("months") || unit.equals("month") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^if  ( unit.equals("years") || unit.equals("year") )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( unit.substring ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( unit .equalsIgnoreCase ( dateStr )   || unit^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( unit .equalsIgnoreCase ( value )   || unit^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( unit .equalsIgnoreCase ( unit )   || unit^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( value.equals ( "milliseconds" )  ) {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "seconds" )  && unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "sececonds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "econ" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "seconds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "seconds" )  ) {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("minutes") || unit.equals("minute") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("hours") || unit.equals("hour") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("days") || unit.equals("day") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("weeks") || unit.equals("week") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 7 )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 14 )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("months") || unit.equals("month") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "seconds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "seconds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "minutes" )  && unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "iinutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "minutes" )  ) {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("hours") || unit.equals("hour") )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("days") || unit.equals("day") )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("weeks") || unit.equals("week") )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 7 )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 14 )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("months") || unit.equals("month") )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "minutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "hours" )  && unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "hours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "hours" )  ) {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("days") || unit.equals("day") )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("weeks") || unit.equals("week") )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 7 )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 14 )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("months") || unit.equals("month") )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "hours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "hours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "days" )  && unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "dayd" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "days" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "days" )  ) {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("weeks") || unit.equals("week") )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 7 )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 14 )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("months") || unit.equals("month") )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "days" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "days" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "weeks" )  && unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weekswe" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weekw" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "weeks" )  ) {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 7 )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("fortnights") || unit.equals("fortnight") )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 14 )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("months") || unit.equals("month") )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "weeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "weeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "fortnights" )  && unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "g" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfortnigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "fortnights" )  ) {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( -val * 14 )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("months") || unit.equals("month") )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "months" )  && unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthso" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthmo" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "months" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals("years") || unit.equals("year") )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "months" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^} else if  ( unit.equals ( "years" )  && unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "years" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  ( unit.equals ( "years" )  ) {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else if  (  unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P6_Replace_Expression]^} else {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit.substring ( "years" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P9_Replace_Statement]^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P15_Unwrap_Block]^now.add(java.util.Calendar.YEAR, (-val));^95^96^97^98^99^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ; } else { throw new IllegalArgumentException  (" ")  ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P16_Remove_Block]^^95^96^97^98^99^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  { now.add ( Calendar.YEAR, -val ) ; } else { throw new IllegalArgumentException  (" ")  ; }^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  (  ( unit.equals ( "months" )  )  ||  ( unit.equals ( "month" )  )  )  {     now.add ( MONTH,  ( -val )  ) ; }else     if  (  ( unit.equals ( "years" )  )  ||  ( unit.equals ( "year" )  )  )  {         now.add ( YEAR,  ( -val )  ) ;     }else {         throw new IllegalArgumentException ( "We do not understand that many units ago" ) ;     }^95^^^^^80^110^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "We do not understand that last units" )   ;^98^^^^^95^99^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( start < 0 )  {     throw new IllegalArgumentException ( "Could not find space in between value and unit" ) ; }^98^^^^^95^99^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.YEAR, -monthsAgo ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.YEAR, -val ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P4_Replace_Constructor]^throw throw  new IllegalArgumentException ( "We do not understand that last units" )   ;^98^^^^^83^113^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P13_Insert_Block]^if  ( start < 0 )  {     throw new IllegalArgumentException ( "Could not find space in between value and unit" ) ; }^98^^^^^83^113^[Delete]^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsea" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yeaear" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.YEAR, -start ) ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now .getInstance (  )  ;^96^^^^^81^111^now.add ( Calendar.YEAR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.MONTH, -start ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.MONTH, -val ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yea" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "ear" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "mon" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "y" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yeear" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^now.add ( Calendar.DATE, -val - 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * val ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.DATE, -start * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.DATE, -monthsAgo * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.DATE, -val * 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "mononths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthmon" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yeary" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "years" )  ) {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "forortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightf" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^now.add ( Calendar.DATE, -val + 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * start ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now .getInstance (  )  ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthst" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "n" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^now.add ( Calendar.DATE, -val / 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * i ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.DATE, -start * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -val * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "earears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "years" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsear" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsy" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "y" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( unit )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "onths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "months" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "oonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsyea" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yearye" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 10 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "moonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yeara" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return ;^98^^^^^83^113^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "aear" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "years" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "a" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weekse" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else if  ( value.equals ( "weeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "eek" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 1 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.DATE, -monthsAgo * 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsortni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "nortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsm" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "onth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.MONTH, -monthsAgo ) ;^94^^^^^79^109^now.add ( Calendar.MONTH, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ea" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "ea" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.DATE, -start ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.DATE, -val ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsmo" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "mononth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "months" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "years" )  ) {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return ;^98^^^^^95^99^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthson" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^now.add ( Calendar.DATE, -val / 14 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * monthsAgo ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "mo" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "mo" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( dateStr )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsyear" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "oortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "tniortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( value )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "tonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 5 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtnigh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfort" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "montonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yeears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yearea" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.equals ( "years" )  ) {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "r" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yeaears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "arears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "e" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yays" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "da" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "days" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.DATE, -monthsAgo ) ;^88^^^^^73^103^now.add ( Calendar.DATE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( dateStr )   || unit^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^now.add ( Calendar.DATE, -val + 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * start ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtniortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * daysAgo ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.HOUR, -monthsAgo ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.HOUR, -start ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.HOUR, -val ) ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "w" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "htortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "t" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsnt" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "nonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "months" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsa" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "ye" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "nt" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "year" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 7 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsmont" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsye" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "eaear" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yea" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fort" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "nighortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 17 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "moonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 15 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortniortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "montonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "mon" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yearyea" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 22 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsont" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "t" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return 0;^98^^^^^95^99^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsr" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weekee" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^now.add ( Calendar.DATE, -val - 7 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "f" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightrtn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 18 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearse" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "a" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeksw" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "tni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthm" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsmon" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ye" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "for" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "month" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * val ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtnighortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.equals ( "fortnights" )  ) {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "years" )  ) {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( value )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "mont" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthn" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "yeare" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ouours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "uour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^86^^^^^71^101^now.add ( Calendar.HOUR, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "daysda" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "k" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "weeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weeke" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * monthsAgo ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "h" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 9 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.MINUTE, -monthsAgo ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.MINUTE, -val ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hourso" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "d" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "dayda" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "e" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return 0;^98^^^^^83^113^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "e" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 16 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfortni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "ntonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 11 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "on" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "we" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * -1 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "tortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val *  ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "t" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighttnig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "fortnights" )  ) {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsth" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "ontonth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "eear" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * i ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "montht" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortnortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnigortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "m" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortniortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ontonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "mont" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "m" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "d" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "we" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weeeek" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsf" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( dateStr )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "years" )  || unit.equals ( "" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightt" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit .equalsIgnoreCase ( value )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 15 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 19 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nth" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthon" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 10 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tnortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "thonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "years" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eeeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfo" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "yearsar" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighttni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "n" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "years" )  ) {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( value )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val *  ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "fortnights" )  ) {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "o" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ute" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "nut" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.MINUTE, -start ) ;^84^^^^^69^99^now.add ( Calendar.MINUTE, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hourhou" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ays" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "ay" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weekeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 6 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsnth" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.SECOND, -start ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MILLISECOND, -val ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.SECOND, -val ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "m" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "miinute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( unit .equalsIgnoreCase ( dateStr )   || unit^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hourh" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfortnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ononths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return false;^98^^^^^95^99^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "onth" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthont" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 20 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsrtn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "oortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ear" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortnortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsn" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weekswee" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weekwe" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "igh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.equals ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "years" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsh" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightrtni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * -2 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightortn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( value )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthmont" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "daya" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeksk" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "daays" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.equals ( "weeks" )  ) {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsort" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "honths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "monthnt" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( unit.substring ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsonth" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightnigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "montho" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 3 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsigh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "forortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "eeek" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighto" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "ont" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "orortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 5 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "o" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eaears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hourours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "our" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "t" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "uours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "oour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "hours" )  ) {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "days" )  ) {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "week" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsor" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( dateStr )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( dateStr )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 2 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnighortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit .equalsIgnoreCase ( unit )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfort" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "wee" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "fortnights" )  ) {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 8 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return true;^98^^^^^83^113^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightort" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "on" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfortni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "a" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tnigortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "gh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "onthonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "day" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "wee" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsght" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "nigortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ar" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( value )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ont" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "aears" )  || unit.equals ( "year" )  )  {^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsi" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "nig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtnortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "oonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weeek" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * daysAgo ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "o" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "gortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 4 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "niortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 21 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "secondsseco" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "onecond" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.SECOND, -monthsAgo ) ;^82^^^^^67^97^now.add ( Calendar.SECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ininutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "mininute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "minutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "ouour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "hours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "for" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 12 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar.MILLISECOND, -start ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^now.add ( Calendar. -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^now .getInstance (  )  ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -monthsAgo ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -val ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.SECOND, -val ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.YEAR, -val ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 14 ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -val ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -daysAgo ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.HOUR, -val ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -val * 7 ) ;now.add ( Calendar.MILLISECOND, -val ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "s" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hoursho" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "houour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "dayays" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "a" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "weekwee" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fo" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fort" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "foortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "months" )  || unit.equals ( "ononth" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ighortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "o" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fo" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightst" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfor" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "th" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "daysday" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "daay" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeksee" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfortn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.equals ( "days" )  ) {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "or" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( dateStr )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 12 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightso" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( unit )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ekeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "keeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ghortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightgh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return true;^98^^^^^95^99^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "h" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "oours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "w" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "months" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightstnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "e" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsortnigh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( value )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "weeks" )  ) {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit .equalsIgnoreCase ( unit )   || unit^95^^^^^80^110^} else if  ( unit.equals ( "years" )  || unit.equals ( "year" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "r" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfor" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ay" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsrt" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nt" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightfortnig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( value )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nighortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "niortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutesm" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minutemin" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hoursu" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "o" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "inu" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  (  unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( unit.substring ( "days" )  ) {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsrtnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "orortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfo" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nthonths" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "r" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 23 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "daysd" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "days" )  || unit.equals ( "aay" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ort" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "aays" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "days" )  ) {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "foortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "tnighortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ht" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 8 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hoursur" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "ho" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 13 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 14 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "eeeek" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortnigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "f" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortnigortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "monthsmonth" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 9 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eekeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^value = value.substring ( 0, value.length (  )    instanceof   4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( monthsAgo, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length (  )  -  ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length() - 8  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^value = unit.substring ( 0, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^value = value .substring ( i , start )  ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^value = value.substring ( 0, value.substring (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 0 , value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 5 ) ;value = value.substring ( 0, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 0, start ) ;value = value.substring ( 0, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 5, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^value = unit.substring ( 0, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^value = value.substring ( 0, val ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^value = value.substring ( 0 ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^value = start.substring ( 0, value ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 4, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 5 ) ;value = value.substring ( 0, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 0, value.length (  )  - 4 ) ;value = value.substring ( 0, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^val = 2;^73^^^^^58^88^val = 1;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^val = Integer.parseInt ( unit ) ;^75^^^^^60^90^val = Integer.parseInt ( value ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return cal;^100^^^^^85^115^return now;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^short  start = value.indexOf ( " " ) ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^int start = value.indexOf ( "" ) ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^int start = unit.indexOf ( " " ) ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int start = value.substring ( " " ) ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^char unit = value.substring ( start + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^String unit = value.substring ( start  >>  1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^String unit = value.substring ( start + monthsAgo ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^String unit = value.substring ( val + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^String unit = start.substring ( value + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^String unit = value .substring ( val , i )  ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^long  val = 0;^71^^^^^56^86^int val = 0;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^int val = -2;^71^^^^^56^86^int val = 0;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return ;^66^^^^^51^81^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^value = value.substring ( 0, value.length (  )   >>  4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 6, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length (  )  - monthsAgo ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length() - 2  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^value = value .substring ( i , daysAgo )  ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length() + 6  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int start = value .endsWith ( dateStr )  ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int start = unit .endsWith ( value )  ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^String unit = value.substring ( start  <<  1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^String unit = value.substring ( start + daysAgo ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^String unit = unit.substring ( start + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^String unit = value.substring ( monthsAgo + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^String unit = unit .substring ( monthsAgo , i )  ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 5 ) ;String unit = value.substring ( start + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^value = value.substring ( 0, start ) ;String unit = value.substring ( start + 1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 7, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^String unit = value.substring ( start + 1 ) ;value = value.substring ( 0, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .equalsIgnoreCase ( dateStr )   || value^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .equalsIgnoreCase ( unit )   || value^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^75^^^^^60^90^val = Integer.parseInt ( value ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "millisilliseconds" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecondm" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^now.add ( Calendar.MILLISECOND, -monthsAgo ) ;^80^^^^^65^95^now.add ( Calendar.MILLISECOND, -val ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "econeconds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "se" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutesminu" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "ininute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ayays" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( start <= 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( start < val )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^if  ( monthsAgo < 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( start < 0 << 0 )  {^65^^^^^50^80^if  ( start < 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.equals ( "" )  || value.equals ( "an" )  )  {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.equals ( "a" )  || value.equals ( "a" )  )  {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .equalsIgnoreCase ( value )   || value^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit.equals ( "a" )  ) {^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^val = val;^73^^^^^58^88^val = 1;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^val = 1 - 4;^73^^^^^58^88^val = 1;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "millisecondsmillisec" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( value.substring ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seco" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "s" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "iinute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hoours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsrtnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighttn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 16 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtnighortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "nigh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "months" )  ) {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "da" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "tnig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtniortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightnig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^return false;^98^^^^^83^113^throw new IllegalArgumentException  (" ")  ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "gortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 6 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtnigortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hou" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eek" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "i" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightg" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hoursr" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsg" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortniortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsortn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "days" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eeeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightstnigh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ighortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( dateStr )   || unit^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 13 ) ;^92^^^^^77^107^now.add ( Calendar.DATE, -val * 14 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "miinutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "m" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "daysa" )  || unit.equals ( "day" )  )  {^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rt" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "uteinutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "min" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.substring ( "minutes" )  ) {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeksweek" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsortnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "or" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfortnigh" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighth" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit .equalsIgnoreCase ( unit )   || unit^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hoursh" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ortni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value.substring ( "fortnights" )  ) {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsrtni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "h" )  || unit.equals ( "month" )  )  {^93^^^^^78^108^} else if  ( unit.equals ( "months" )  || unit.equals ( "month" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ee" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfortnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightrt" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightrtnig" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ghtortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnighti" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "rtnightortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightstn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 11 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "nigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "eco" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ut" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "mi" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val * 0 ) ;^90^^^^^75^105^now.add ( Calendar.DATE, -val * 7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "econds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "sececond" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value .equalsIgnoreCase ( unit )   || unit^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minutemi" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortni" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( dateStr )   || unit^87^^^^^72^102^} else if  ( unit.equals ( "days" )  || unit.equals ( "day" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.substring ( "weeks" )  || unit.equals ( "week" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightstnig" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( unit )   || unit^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightortnigh" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "h" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortnighortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "rtortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightor" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "ni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .equalsIgnoreCase ( value )   || unit^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsr" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "nutinute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightortni" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "inutes" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minuinute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ur" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "n" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "ee" )  )  {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( value.equals ( "weeks" )  ) {^89^^^^^74^104^} else if  ( unit.equals ( "weeks" )  || unit.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsortnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsnight" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "tnightortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "ortn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnightsfortn" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "tnortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "houours" )  || unit.equals ( "hour" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hourho" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "hours" )  || unit.equals ( "houro" )  )  {^85^^^^^70^100^} else if  ( unit.equals ( "hours" )  || unit.equals ( "hour" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "iortnights" )  || unit.equals ( "fortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnightn" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^} else valf  ( value.startsWith ( "last " )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value .endsWith ( unit )   )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  valf  ( value.substring ( "last " )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "stesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^}  if  ( unit.equals ( "yesterday" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomorrowtomorr" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value .equalsIgnoreCase ( unit )   )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "r" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -start ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "yesterdayye" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomorrowtom" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^} else if  ( value .equalsIgnoreCase ( dateStr )   )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= -2 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( daysAgo <= 0 >> 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 % 0;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 >>> 0;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 0L )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= 5 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 3;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.equals ( "weekwe" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit .equalsIgnoreCase ( dateStr )   )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -daysAgo ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  >>  ( int i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = 4; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( daysAgo <= 0 / 2 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   ^  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( daysAgo == 0 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( daysAgo <= 4 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 16;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += ;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )    instanceof   i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int daysAgo = cal .setTime ( datetime )   - i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = val; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 >>> 3;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )    instanceof   i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= -9 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( monthsAgo <= 0 << 1 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 1;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 17;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int monthsAgo = now.setTime ( Calendar.MONTH )  - val;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( monthsAgo ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 2 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^monthsAgo += 13;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.equals ( "eek" )  )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit .equalsIgnoreCase ( unit )   )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -val ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( start <= 4 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += 14;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 0;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   <=  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= 9 )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 / 2;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( monthsAgo == 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( monthsAgo <= val )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^int monthsAgo = now.setTime ( Calendar.start )  - i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^monthsAgo += 12 % 0;^124^^^^^109^139^monthsAgo += 12;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .equalsIgnoreCase ( unit )   )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -monthsAgo ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "terd" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "mo" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "rr" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE,  ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -8 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, 7 ) ;^139^^^^^124^154^now.add ( Calendar.DATE, 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for   instanceof   ( int i = 0; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = start; i < strings.length; i++ )  {^107^^^^^92^122^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( daysAgo <= daysAgo )  {^111^^^^^96^126^if  ( daysAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   &  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^daysAgo += 7 - 4;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  &  ( int i = 0; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -5; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = 3; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( int i = 0; i < strings; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^if  ( monthsAgo > 0 )  {^123^^^^^108^138^if  ( monthsAgo <= 0 )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   <<  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int monthsAgo = now.get ( Calendar.MONTH )   >=  i;^122^^^^^107^137^int monthsAgo = now.get ( Calendar.MONTH )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^value = value.substring ( 0, value.length (  )   ==  4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( -2, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length (  )   ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length() + 3  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( -6, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 0L, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^val = -7;^73^^^^^58^88^val = 1;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^value = value.substring ( 5 >> 3 ) ;^104^^^^^89^119^value = value.substring ( 5 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^daysAgo += val;^112^^^^^97^127^daysAgo += 7;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^int start = value .endsWith ( value )  ;^64^^^^^49^79^int start = value.indexOf ( " " ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^String unit = value.substring ( start  ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^String unit = dateStr .substring ( monthsAgo , i )  ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^short  val = 0;^71^^^^^56^86^int val = 0;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^int val = -4;^71^^^^^56^86^int val = 0;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )   <  i;^110^^^^^95^125^int daysAgo = now.get ( Calendar.DAY_OF_WEEK )  - i;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -2; i < strings.length; i++ )  {^119^^^^^104^134^for  ( int i = 0; i < strings.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( value.endsWith ( " ago " )  )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .startsWith ( value )   )  {^58^^^^^43^73^if  ( value.endsWith ( " ago" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( -7, value.length (  )  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length() + 8  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( 0, value.length() + 9  - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^value = value.substring ( 0, value .endsWith ( dateStr )   - 4 ) ;^61^^^^^46^76^value = value.substring ( 0, value.length (  )  - 4 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^String unit = value.substring ( start  !=  1 ) ;^68^^^^^53^83^String unit = value.substring ( start + 1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^68^69^^^^53^83^String unit = value.substring ( start + 1 ) ; value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^value = value.substring ( monthsAgo, start ) ;^69^^^^^54^84^value = value.substring ( 0, start ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit .equalsIgnoreCase ( unit )   || value^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^if  ( unit .equalsIgnoreCase ( dateStr )   || value^72^^^^^57^87^if  ( value.equals ( "a" )  || value.equals ( "an" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "mi" )  || unit.equals ( "millisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "illisecond" )  )  {^79^^^^^64^94^if  ( unit.equals ( "milliseconds" )  || unit.equals ( "millisecond" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "coneconds" )  || unit.equals ( "second" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "coecond" )  )  {^81^^^^^66^96^} else if  ( unit.equals ( "seconds" )  || unit.equals ( "second" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minut" )  || unit.equals ( "minute" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "" )  )  {^83^^^^^68^98^} else if  ( unit.equals ( "minutes" )  || unit.equals ( "minute" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "hortnight" )  )  {^91^^^^^76^106^} else if  ( unit.equals ( "fortnights" )  || unit.equals ( "fortnight" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.startsWith ( "asast " )  )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^} else if  ( value .endsWith ( dateStr )   )  {^101^^^^^86^116^} else if  ( value.startsWith ( "last " )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^if  ( value .equalsIgnoreCase ( dateStr )   )  {^130^^^^^115^145^if  ( value.equals ( "week" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -5 ) ;^131^^^^^116^146^now.add ( Calendar.DATE, -7 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "yesterdayyes" )  )  {^135^^^^^120^150^} else if  ( value.equals ( "yesterday" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -9 ) ;^136^^^^^121^151^now.add ( Calendar.DATE, -1 ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^} else if  ( value.equals ( "tomorrowto" )  )  {^138^^^^^123^153^} else if  ( value.equals ( "tomorrow" )  )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^for  (  long  i = 0; i < dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P2_Replace_Operator]^for  ( int i = 0; i <= dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -5; i < dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( startnt i = 0; i < dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( int i = 0; i < val; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^for  ( int i = 0; i < dateFormats.length.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P8_Replace_Mix]^for  ( valnt i = 0; i < dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^return now;^148^^^^^133^163^return cal;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^Date datetime = dateFormats[i].parse ( value ) ;^145^^^^^130^160^Date datetime = dateFormats[i].parse ( dateStr ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P5_Replace_Variable]^Date datetime = dateStr[i].parse ( dateFormats ) ;^145^^^^^130^160^Date datetime = dateFormats[i].parse ( dateStr ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^Calendar cal = Calendar .setTime ( datetime )  ;^146^^^^^131^161^Calendar cal = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;Calendar cal = Calendar.getInstance (  ) ;^146^^^^^131^161^Calendar cal = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^145^^^^^130^160^Date datetime = dateFormats[i].parse ( dateStr ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^146^147^^^^131^161^Calendar cal = Calendar.getInstance (  ) ; cal.setTime ( datetime ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^cal.add ( datetime ) ;^147^^^^^132^162^cal.setTime ( datetime ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^147^148^^^^132^162^cal.setTime ( datetime ) ; return cal;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^146^^^^^131^161^Calendar cal = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P7_Replace_Invocation]^cal .getInstance (  )  ;^147^^^^^132^162^cal.setTime ( datetime ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^147^^^^^132^162^cal.setTime ( datetime ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P1_Replace_Type]^for  (  short  i = 0; i < dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P3_Replace_Literal]^for  ( int i = -8; i < dateFormats.length; i++ )  {^143^^^^^128^158^for  ( int i = 0; i < dateFormats.length; i++ )  {^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
[P14_Delete_Statement]^^145^146^^^^130^160^Date datetime = dateFormats[i].parse ( dateStr ) ; Calendar cal = Calendar.getInstance (  ) ;^[CLASS] DateFormatter  [METHOD] parseCVS [RETURN_TYPE] Calendar   String dateStr [VARIABLES] boolean  Calendar  cal  now  DateFormatSymbols  symbols  String  dateStr  unit  value  String[]  strings  ParseException  pe  DateFormat[]  dateFormats  int  daysAgo  i  monthsAgo  start  val  Date  datetime  
