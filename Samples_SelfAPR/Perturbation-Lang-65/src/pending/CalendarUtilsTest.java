[P8_Replace_Mix]^DateFormat parser  = null ;^34^^^^^29^39^DateFormat parser = null;^[CLASS] CalendarUtilsTest   [VARIABLES] 
[P8_Replace_Mix]^Date date1 = true;^35^^^^^30^40^Date date1 = null;^[CLASS] CalendarUtilsTest   [VARIABLES] 
[P8_Replace_Mix]^Date date2 = false;^36^^^^^31^41^Date date2 = null;^[CLASS] CalendarUtilsTest   [VARIABLES] 
[P14_Delete_Statement]^^39^^^^^38^40^super ( name ) ;^[CLASS] CalendarUtilsTest  [METHOD] <init> [RETURN_TYPE] String)   String name [VARIABLES] String  name  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^43^^^^^42^44^TestRunner.run ( suite (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] main [RETURN_TYPE] void   String[] args [VARIABLES] String[]  args  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^suite.setName ( "enda" ) ;^48^^^^^46^50^suite.setName ( "CalendarUtilsTest Tests" ) ;^[CLASS] CalendarUtilsTest  [METHOD] suite [RETURN_TYPE] Test   [VARIABLES] boolean  TestSuite  suite  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^48^49^^^^46^50^suite.setName ( "CalendarUtilsTest Tests" ) ; return suite;^[CLASS] CalendarUtilsTest  [METHOD] suite [RETURN_TYPE] Test   [VARIABLES] boolean  TestSuite  suite  Date  date1  date2  DateFormat  parser  
[P8_Replace_Mix]^super .tearDown (  )  ;^53^^^^^52^59^super.setUp (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^53^^^^^52^59^super.setUp (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^super.tearDown (  ) ;super.setUp (  ) ;^53^^^^^52^59^super.setUp (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser = new java.text.SimpleDateFormat ( "MMM dd, yMM dd, yyyy H:mm:ss.SSS" ) ;^55^^^^^52^59^parser = new java.text.SimpleDateFormat ( "MMM dd, yyyy H:mm:ss.SSS" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^parser  =  parser ;^55^^^^^52^59^parser = new java.text.SimpleDateFormat ( "MMM dd, yyyy H:mm:ss.SSS" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser = new java.text.SimpleDateFormat ( "" ) ;^55^^^^^52^59^parser = new java.text.SimpleDateFormat ( "MMM dd, yyyy H:mm:ss.SSS" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^date1 = parser.parse ( "ry 12" ) ;^57^^^^^52^59^date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^date1 ;^57^^^^^52^59^date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^57^^^^^52^59^date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^date1 = parser.parse ( "2 ebruary 12, 2002 12:34:56.789" ) ;^57^^^^^52^59^date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^57^^^^^52^59^date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^date2 = parser.parse ( "November 18, 2001 1:23:11.321ovem" ) ;^58^^^^^52^59^date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^date2  =  date2 ;^58^^^^^52^59^date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^date1 = parser.parse ( "February 12, 2002 12:34:56.789" ) ;date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^58^^^^^52^59^date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^date2 = parser.parse ( "ovember 18, 2001 1:23:11ovember 18, 2001 1:23:11.321" ) ;^58^^^^^52^59^date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^58^^^^^52^59^date2 = parser.parse ( "November 18, 2001 1:23:11.321" ) ;^[CLASS] CalendarUtilsTest  [METHOD] setUp [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^62^^^^^61^63^super.tearDown (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] tearDown [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^super.setUp (  ) ;super.tearDown (  ) ;^62^^^^^61^63^super.tearDown (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] tearDown [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2002 January 12" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^73^74^^^^58^88^new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 February 12" )  , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^73^74^^^^58^88^new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "yea", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round year-1 failed", new Date ( "02" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round year-1 failed", assertEquals ( "round year-1 failed",  new Date ( "2002 February 12" )  , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round (  Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^72^73^74^^^57^87^assertEquals ( "round year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^74^^^^^59^89^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2002 January 12002 Janua" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^76^77^^^^61^91^new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 February 12" )  , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^76^77^^^^61^91^new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round year-2 failedd year", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round year-2 failed", assertEquals ( "round year-2 failed",  new Date ( "2002 February 12" )  , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round (  Calendar.YEAR )  ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils .round ( date1 , 2 )   ) ;^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^75^76^77^^^60^90^assertEquals ( "round year-2 failed", new Date ( "2002 January 1" ) , CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^77^^^^^62^92^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2002 February 1200" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^79^80^^^^64^94^new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^79^80^^^^64^94^new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "rounound month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round month-1 failed", new Date ( " F" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round month-1 failed", assertEquals ( "round month-1 failed",  new Date ( "2002 January 1" )  , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.4 )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round (  Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^78^79^80^^^63^93^assertEquals ( "round month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^80^^^^^65^95^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^82^83^^^^67^97^new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "nth-2 fa", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round month-2 failed", new Date ( "2001 December 12" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round month-2 failed", assertEquals ( "round month-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round (  Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^81^82^83^^^66^96^assertEquals ( "round month-2 failed", new Date ( "2001 December 1" ) , CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, Calendar.null )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^83^^^^^68^98^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2002 Februa" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^85^86^^^^70^100^new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^85^86^^^^70^100^new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round semimonth-1 failedound semimonth-1 f", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^84^85^86^^^69^99^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round semimonth-1 failed", new Date ( "uary002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^84^85^86^^^69^99^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round semimonth-1 failed", assertEquals ( "round semimonth-1 failed",  new Date ( "2002 January 1" )  , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^84^85^86^^^69^99^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^84^85^86^^^69^99^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^84^85^86^^^69^99^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^84^85^86^^^69^99^assertEquals ( "round semimonth-1 failed", new Date ( "2002 February 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^86^^^^^71^101^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2001 November 16em" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^88^89^^^^73^103^new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^88^89^^^^73^103^new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round semimonth-2 failedemimonth-2 fail", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round semimonth-2 failed", new Date ( "er 1" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round semimonth-2 failed", assertEquals ( "round semimonth-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^87^88^89^^^72^102^assertEquals ( "round semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^89^^^^^74^104^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "20002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^91^92^^^^76^106^new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^91^92^^^^76^106^new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "tound date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round date-1 failed", new Date ( "bru002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round date-1 failed", assertEquals ( "round date-1 failed",  new Date ( "2002 January 1" )  , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round (  Calendar.DATE )  ) ;^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^90^91^92^^^75^105^assertEquals ( "round date-1 failed", new Date ( "2002 February 13" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, -6 ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^end.add ( Calendar.DATE, 6 ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^last.add ( Calendar.DATE, 1 ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^centered.add ( Calendar.DATE, -3 ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date1, Calendar.DATE )  ) ;^92^^^^^77^107^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "vemb" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^94^95^^^^79^109^new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^94^95^^^^79^109^new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round date-2 failed", new Date ( "200" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "round date-2 failed", assertEquals ( "round date-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round (  Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date1, Calendar.DATE )  ) ;^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^93^94^95^^^78^108^assertEquals ( "round date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, -6 ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^end.add ( Calendar.DATE, 6 ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^last.add ( Calendar.DATE, 1 ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^centered.add ( Calendar.DATE, -3 ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.round ( date2, Calendar.DATE )  ) ;^95^^^^^80^110^CalendarUtils.round ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round hour-1 failedround", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000ary 12, 2002 1" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-1 failed".parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round (  Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-1 failed", date1.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( parser, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils .round ( date1 , this )   ) ;^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^96^97^98^^^81^111^assertEquals ( "round hour-1 failed", parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "February 12, 2002 13:00:00.000002 1" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^97^98^^^^82^112^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^98^^^^^83^113^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round hound hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000vembe" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-2 failed".parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round (  Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round hour-2 failed", date2.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( parser, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^99^100^101^^^84^114^assertEquals ( "round hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "November 18, 2001 1:00:00.000mber 1" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^100^101^^^^85^115^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^101^^^^^86^116^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "ut", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000ruary 1" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-1 failed".parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round (  Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-1 failed", date1.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( parser, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^102^103^104^^^87^117^assertEquals ( "round minute-1 failed", parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "February 12, 2002 12:35:00.000200" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^103^104^^^^88^118^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^104^^^^^89^119^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round minute-2 failedround", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round minute-2 failed", parser.parse ( "ber 18, 200ovember 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.4 )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-2 failed".parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round (  Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round minute-2 failed", date2.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( parser, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^105^106^107^^^90^120^assertEquals ( "round minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "November 18, 2001 1:23:00.0003:" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^106^107^^^^91^121^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^107^^^^^92^122^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "roound second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round second-1 failed", parser.parse ( "bruary 12, 2002 1" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-1 failed".parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round (  Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-1 failed", date1.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( parser, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^108^109^110^^^93^123^assertEquals ( "round second-1 failed", parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( " 12, 2" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^109^110^^^^94^124^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^110^^^^^95^125^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "ounound second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "round second-2 failed", parser.parse ( "Nove" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-2 failed".parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round (  Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "round second-2 failed", date2.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( parser, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^111^112^113^^^96^126^assertEquals ( "round second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( " 2001ovember 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^112^113^^^^97^127^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.round (  Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^113^^^^^98^128^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testRound [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "0002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^121^122^^^^106^136^new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 February 12" )  , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^121^122^^^^106^136^new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "year-", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc year-1 failed", new Date ( "2002" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc year-1 failed", assertEquals ( "trunc year-1 failed",  new Date ( "2002 February 12" )  , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.4 )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc (  Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^120^121^122^^^105^135^assertEquals ( "trunc year-1 failed", new Date ( "2002 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^CalendarUtils .trunc ( date1 , 4 )   ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^122^^^^^107^137^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^124^125^^^^109^139^new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc year-2 farunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc year-2 failed", new Date ( "2001001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc year-2 failed", assertEquals ( "trunc year-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc (  Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^123^124^125^^^108^138^assertEquals ( "trunc year-2 failed", new Date ( "2001 January 1" ) , CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^125^^^^^110^140^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^127^128^^^^112^142^new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^127^128^^^^112^142^new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "runc monthrunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc month-1 failed", new Date ( "2002 002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc month-1 failed", assertEquals ( "trunc month-1 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc (  Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^126^127^128^^^111^141^assertEquals ( "trunc month-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^128^^^^^113^143^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2001 No" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^130^131^^^^115^145^new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^130^131^^^^115^145^new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc morunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 12" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc month-2 failed", assertEquals ( "trunc month-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc (  Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^129^130^131^^^114^144^assertEquals ( "trunc month-2 failed", new Date ( "2001 November 1" ) , CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^131^^^^^116^146^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "02 February " ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^133^134^^^^118^148^new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^133^134^^^^118^148^new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc semimonth-1 failedunc", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 12 " ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc semimonth-1 failed", assertEquals ( "trunc semimonth-1 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^132^133^134^^^117^147^assertEquals ( "trunc semimonth-1 failed", new Date ( "2002 February 1" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^134^^^^^119^149^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "1 " ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^136^137^^^^121^151^new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^136^137^^^^121^151^new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc semimonth-2 failedth", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc semimonth-2 failed", new Date ( "20001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc semimonth-2 failed", assertEquals ( "trunc semimonth-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^135^136^137^^^120^150^assertEquals ( "trunc semimonth-2 failed", new Date ( "2001 November 16" ) , CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^137^^^^^122^152^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2002 February 12Februa" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^139^140^^^^124^154^new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^139^140^^^^124^154^new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc date", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 122002 February 1" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc date-1 failed", assertEquals ( "trunc date-1 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc (  Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^138^139^140^^^123^153^assertEquals ( "trunc date-1 failed", new Date ( "2002 February 12" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^centered.add ( Calendar.DATE, -3 ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^140^^^^^125^155^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^new Date ( "2001 November 18er" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^142^143^^^^127^157^new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^142^143^^^^127^157^new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "nc date-2runc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18 November " ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P4_Replace_Constructor]^assertEquals ( "trunc date-2 failed", assertEquals ( "trunc date-2 failed",  new Date ( "2002 January 1" )  , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc (  Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^141^142^143^^^126^156^assertEquals ( "trunc date-2 failed", new Date ( "2001 November 18" ) , CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^centered.add ( Calendar.DATE, -3 ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^143^^^^^128^158^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "c hour-1 fail", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00ebruary 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-1 failed".parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc (  Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-1 failed", date1.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( parser, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^144^145^146^^^129^159^assertEquals ( "trunc hour-1 failed", parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( " 12:" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^145^146^^^^130^160^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^146^^^^^131^161^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "unc hour-2 faile", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc hour-2 failed", parser.parse ( "00:ovember 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-2 failed".parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc (  Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc hour-2 failed", date2.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( parser, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^147^148^149^^^132^162^assertEquals ( "trunc hour-2 failed", parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "vember 18, 20ovember 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^148^149^^^^133^163^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^149^^^^^134^164^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( " minute-1 failrunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc minute-1 failed", parser.parse ( "bruary 1ebruary 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-1 failed".parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc (  Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-1 failed", date1.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( parser, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^150^151^152^^^135^165^assertEquals ( "trunc minute-1 failed", parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "February 12, 2002 12:34:00.0002, 2002 1" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^151^152^^^^136^166^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^152^^^^^137^167^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc minute-2 failedtr", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc minute-2 failed", parser.parse ( " 2001 1:23:0" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-2 failed".parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc (  Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc minute-2 failed", date2.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( parser, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^153^154^155^^^138^168^assertEquals ( "trunc minute-2 failed", parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "o" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^154^155^^^^139^169^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^155^^^^^140^170^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "tru", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc second-1 failed", parser.parse ( "ary 12, 2002 12:" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc second-1 failed".parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc (  Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc second-1 failed", date1.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( parser, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.null )  ) ;^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^156^157^158^^^141^171^assertEquals ( "trunc second-1 failed", parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "bruebruary 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^157^158^^^^142^172^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^158^^^^^143^173^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "runc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^assertEquals ( "trunc second-2 failed", parser.parse ( "mber 1" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc second-2 failed".parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc (  Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P7_Replace_Invocation]^assertWeekIterator ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P8_Replace_Mix]^assertWeekIterator ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^159^160^161^^^144^174^assertEquals ( "trunc second-2 failed", parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P3_Replace_Literal]^parser.parse ( "o" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.round ( date2, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 13:00:00.000" ) , CalendarUtils.round ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:57.000" ) , CalendarUtils.round ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:00:00.000" ) , CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:35:00.000" ) , CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:00:00.000" ) , CalendarUtils.round ( date2, Calendar.HOUR )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:56.000" ) , CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^160^161^^^^145^175^parser.parse ( "November 18, 2001 1:23:11.000" ) , CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P5_Replace_Variable]^CalendarUtils.trunc (  Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P14_Delete_Statement]^^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.YEAR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.HOUR )  ) ;CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^161^^^^^146^176^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testTrunc [RETURN_TYPE] void   [VARIABLES] Date  date1  date2  DateFormat  parser  boolean  
[P11_Insert_Donor_Statement]^Calendar last = null;Calendar now = null;^176^^^^^161^191^Calendar now = null;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^178^179^^^^163^193^now = Calendar.getInstance (  ) ; now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^178^^^^^163^193^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.MINUTE, - ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now .getInstance (  )  ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, -6 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^centered.add ( Calendar.DATE, -3 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^end.add ( Calendar.DATE, 6 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -12 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^last.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now = Calendar.getInstance (  ) ;now.add ( Calendar.MINUTE, -1 ) ;^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.MONTH )  == 0 )  { now.add ( Calendar.MINUTE, -1 ) ; }^179^^^^^164^194^now.add ( Calendar.MINUTE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago1 " ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.round ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^180^181^^^^165^195^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "1 minute a minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^181^^^^^166^196^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now  =  now ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^182^183^^^^167^197^now = Calendar.getInstance (  ) ; now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^182^^^^^167^197^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.MINUTE, -5 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, -6 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^centered.add ( Calendar.DATE, -3 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^end.add ( Calendar.DATE, 6 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -12 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^last.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now = Calendar.getInstance (  ) ;now.add ( Calendar.MINUTE, -8 ) ;^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.MONTH )  == 0 )  { now.add ( Calendar.MINUTE, -8 ) ; }^183^^^^^168^198^now.add ( Calendar.MINUTE, -8 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse 8 minutes agonutes a", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes agoe" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) ,  ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.round ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^184^185^^^^169^199^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "8 minu minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^185^^^^^170^200^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^187^^^^^172^202^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, --2 ) ;^188^^^^^173^203^now.add ( Calendar.DATE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. -1 ) ;^188^^^^^173^203^now.add ( Calendar.DATE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now .getInstance (  )  ;^188^^^^^173^203^now.add ( Calendar.DATE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^188^^^^^173^203^now.add ( Calendar.DATE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( monday.get ( Calendar.DATE )  == 1 )  { now.add ( Calendar.DATE, -1 ) ; }^188^^^^^173^203^now.add ( Calendar.DATE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.DATE )  == 1 )  { now.add ( Calendar.DATE, -1 ) ; }^188^^^^^173^203^now.add ( Calendar.DATE, -1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "rse yesterarse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 47 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse yesterday", now, CalendarUtils.round ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^189^190^^^^174^204^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "rd" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^190^^^^^175^205^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^192^^^^^177^207^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -7 ) ;^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. 1 ) ;^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now .getInstance (  )  ;^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( monday.get ( Calendar.DATE )  == 1 )  { now.add ( Calendar.DATE, 1 ) ; }^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.DATE )  == 1 )  { now.add ( Calendar.DATE, 1 ) ; }^193^^^^^178^208^now.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "e tomorarse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "morro" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 43 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse tomorrow", now, CalendarUtils.round ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^194^195^^^^179^209^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "omorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^195^^^^^180^210^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^197^^^^^182^212^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P2_Replace_Operator]^if  ( now.get ( Calendar.DATE )  != 1 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^if  ( now.get ( Calendar.DATE )  == 0 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^if  ( now.get ( Calendar.DATE )  == -7 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P6_Replace_Expression]^if  ( 1 - now.get ( DAY_OF_WEEK ) )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^if  ( now.setTime ( Calendar.DATE )  == 1 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^if  ( now .getTime (  )   == 1 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^if  ( now.get ( Calendar.DATE )  == 1L )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P9_Replace_Statement]^if  ( monday.get ( Calendar.DATE )  == 1 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P9_Replace_Statement]^if  ( now.get ( Calendar.MONTH )  == 0 )  {^199^^^^^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P15_Unwrap_Block]^now.add(java.util.Calendar.DATE, (-7));^199^200^201^202^203^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {  now.add ( Calendar.DATE, -7 ) ; } else { now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P16_Remove_Block]^^199^200^201^202^203^184^214^if  ( now.get ( Calendar.DATE )  == 1 )  {  now.add ( Calendar.DATE, -7 ) ; } else { now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P13_Insert_Block]^if  (  ( monday.get ( DATE )  )  == 1 )  {     monday.add ( DATE,  ( -6 )  ) ; }else {     monday.add ( DATE,  ( 2 -  ( monday.get ( DAY_OF_WEEK )  )  )  ) ; }^199^^^^^184^214^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P13_Insert_Block]^if  (  ( now.get ( MONTH )  )  == 0 )  {     now.add ( MONTH,  ( -12 )  ) ; }else {     now.add ( MONTH,  ( 0 -  ( now.get ( MONTH )  )  )  ) ; }^199^^^^^184^214^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P2_Replace_Operator]^now.add ( Calendar.DATE, 1  <<  now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, null - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.DATE, 1 - now.setTime ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.DATE, 1 - now .getTime (  )   ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now.add ( Calendar.DATE, 1 - now.get ( Calendar.4 )  ) ;^203^^^^^199^204^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -12 ) ;^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. -7 ) ;^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now .getInstance (  )  ;^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.DATE )  == 1 )  { now.add ( Calendar.DATE, -7 ) ; }^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -1 ) ;^201^^^^^186^216^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P2_Replace_Operator]^now.add ( Calendar.DATE, 1  ==  now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, 2 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now .getInstance (  )  ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.DATE, 1 - now.setTime ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now.add ( Calendar.DATE, 1 - now .getTime (  )   ) ;^203^^^^^188^218^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last Sundaylast", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sundaya" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 56 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse last Sunday", now, CalendarUtils.round ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^205^206^^^^190^220^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "last Sundayu" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^206^^^^^191^221^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^208^^^^^193^223^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.DATE, -10 ) ;^209^^^^^194^224^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. -7 ) ;^209^^^^^194^224^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now .getInstance (  )  ;^209^^^^^194^224^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^209^^^^^194^224^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.DATE )  == 1 )  { now.add ( Calendar.DATE, -7 ) ; }^209^^^^^194^224^now.add ( Calendar.DATE, -7 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last weekp", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "la" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 55 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse last week", now, CalendarUtils.round ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^210^211^^^^195^225^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "last weekwe" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "last week" ) , 50 ) ;^211^^^^^196^226^now, CalendarUtils.parse ( "last week" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now = Calendar.getTime (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now  =  now ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;now = Calendar.getInstance (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;now = Calendar.getInstance (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;now = Calendar.getInstance (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;now = Calendar.getInstance (  ) ;^213^^^^^198^228^now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P2_Replace_Operator]^if  ( now.get ( Calendar.MONTH )  <= 0 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^if  ( now.get ( Calendar.MONTH )  == 3 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P6_Replace_Expression]^if  ( 0 - now.get ( MONTH ) )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^if  ( now.setTime ( Calendar.MONTH )  == 0 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^if  ( now.get ( Calendar.MONTH )  == 0 >>> 0 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P9_Replace_Statement]^if  ( monday.get ( Calendar.DATE )  == 1 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P9_Replace_Statement]^if  ( now.get ( Calendar.DATE )  == 1 )  {^215^^^^^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P15_Unwrap_Block]^now.add(java.util.Calendar.MONTH, (-12));^215^216^217^218^219^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {  now.add ( Calendar.MONTH, -12 ) ; } else { now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P16_Remove_Block]^^215^216^217^218^219^200^230^if  ( now.get ( Calendar.MONTH )  == 0 )  {  now.add ( Calendar.MONTH, -12 ) ; } else { now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P13_Insert_Block]^if  (  ( monday.get ( DATE )  )  == 1 )  {     monday.add ( DATE,  ( -6 )  ) ; }else {     monday.add ( DATE,  ( 2 -  ( monday.get ( DAY_OF_WEEK )  )  )  ) ; }^215^^^^^200^230^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P13_Insert_Block]^if  (  ( now.get ( DATE )  )  == 1 )  {     now.add ( DATE,  ( -7 )  ) ; }else {     now.add ( DATE,  ( 1 -  ( now.get ( DAY_OF_WEEK )  )  )  ) ; }^215^^^^^200^230^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P2_Replace_Operator]^now.add ( Calendar.MONTH, 0  ^  now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.MONTH,  - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.MONTH, 0 - now.setTime ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.MONTH, 0 - now .getTime (  )   ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -12 ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^215^220^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.MONTH, -8 ) ;^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. -12 ) ;^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now .getInstance (  )  ;^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P12_Insert_Condition]^if  ( now.get ( Calendar.MONTH )  == 0 )  { now.add ( Calendar.MONTH, -12 ) ; }^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now.add ( Calendar.MONTH, -7 ) ;^217^^^^^202^232^now.add ( Calendar.MONTH, -12 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P2_Replace_Operator]^now.add ( Calendar.MONTH, 0  ^  now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P5_Replace_Variable]^now.add ( Calendar. 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.MONTH, 0 - now.setTime ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P8_Replace_Mix]^now .getInstance (  )  ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -12 ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now.add ( Calendar.MONTH, 0 - now .getTime (  )   ) ;^219^^^^^204^234^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "p", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "st" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 54 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^assertEquals ( "parse last January", now, CalendarUtils.round ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^221^222^^^^206^236^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P3_Replace_Literal]^now, CalendarUtils.parse ( "last Januarylast J" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^now, CalendarUtils.round ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P14_Delete_Statement]^^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P11_Insert_Donor_Statement]^now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;now, CalendarUtils.parse ( "last January" ) , 50 ) ;^222^^^^^207^237^now, CalendarUtils.parse ( "last January" ) , 50 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testParse [RETURN_TYPE] void   [VARIABLES] boolean  Date  date1  date2  DateFormat  parser  Calendar  now  
[P7_Replace_Invocation]^Calendar now = Calendar.getTime (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  it.next (  ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar end =  ( Calendar )  start.clone (  ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^229^230^^^^228^251^Calendar now = Calendar.getInstance (  ) ; Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now = Calendar.getInstance (  ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;Calendar now = Calendar.getInstance (  ) ;^229^^^^^228^251^Calendar now = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar today = CalendarUtils.trunc ( sunday, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar today = CalendarUtils.trunc (  Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar today = CalendarUtils.trunc ( today, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar today = CalendarUtils.trunc ( now, Calendar.this ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^230^^^^^228^251^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar sunday = CalendarUtils.trunc ( today, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar sunday = CalendarUtils.trunc (  Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^231^232^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ; sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^231^^^^^228^251^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P2_Replace_Operator]^sunday.add ( Calendar.DATE, 1  ==  sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P3_Replace_Literal]^sunday.add ( Calendar.DATE, 7 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^sunday.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^sunday.add ( Calendar. 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^sunday.add ( Calendar.DATE, 1 - sunday.setTime ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^sunday.add ( Calendar.DATE, 1 - sunday .getTime (  )   ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^sunday.add ( Calendar.DATE, 1 - today.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^232^^^^^228^251^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar monday = CalendarUtils.trunc ( today, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar monday = CalendarUtils.trunc (  Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^233^^^^^228^251^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P2_Replace_Operator]^if  ( monday.get ( Calendar.DATE )  != 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P3_Replace_Literal]^if  ( monday.get ( Calendar.DATE )  == -8 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^if  ( today.get ( Calendar.DATE )  == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P6_Replace_Expression]^if  ( 2 - monday.get ( DAY_OF_WEEK ) )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^if  ( monday.setTime ( Calendar.DATE )  == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^if  ( monday .getTime (  )   == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^if  ( monday.setTime ( Calendar.DATE )  == 2 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P9_Replace_Statement]^if  ( now.get ( Calendar.DATE )  == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P9_Replace_Statement]^if  ( now.get ( Calendar.MONTH )  == 0 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P15_Unwrap_Block]^monday.add(java.util.Calendar.DATE, (-6));^234^235^236^237^238^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {  monday.add ( Calendar.DATE, -6 ) ; } else { monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P16_Remove_Block]^^234^235^236^237^238^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {  monday.add ( Calendar.DATE, -6 ) ; } else { monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P13_Insert_Block]^if  (  ( now.get ( MONTH )  )  == 0 )  {     now.add ( MONTH,  ( -12 )  ) ; }else {     now.add ( MONTH,  ( 0 -  ( now.get ( MONTH )  )  )  ) ; }^234^^^^^228^251^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P13_Insert_Block]^if  (  ( now.get ( DATE )  )  == 1 )  {     now.add ( DATE,  ( -7 )  ) ; }else {     now.add ( DATE,  ( 1 -  ( now.get ( DAY_OF_WEEK )  )  )  ) ; }^234^^^^^228^251^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P2_Replace_Operator]^monday.add ( Calendar.DATE, 2  ^  monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^monday.add ( Calendar.DATE, 2 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^monday.add ( Calendar. 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^monday.add ( Calendar.DATE, 2 - monday.setTime ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^monday.add ( Calendar.DATE, 2 - today.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 - now.get ( Calendar.DAY_OF_WEEK )  ) ;monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^sunday.add ( Calendar.DATE, 1 - sunday.get ( Calendar.DAY_OF_WEEK )  ) ;monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, 0 - now.get ( Calendar.MONTH )  ) ;monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^monday.add ( Calendar.DATE, 2 - today.setTime ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P3_Replace_Literal]^monday.add ( Calendar.DATE, -13 ) ;^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^monday.add ( Calendar. -6 ) ;^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^monday .getInstance (  )  ;^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P12_Insert_Condition]^if  ( monday.get ( Calendar.DATE )  == 1 )  { monday.add ( Calendar.DATE, -6 ) ; }^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^if  ( monday.get ( Calendar.4 )  == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^if  ( sunday.get ( Calendar.DATE )  == 1 )  {^234^^^^^228^251^if  ( monday.get ( Calendar.DATE )  == 1 )  {^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P3_Replace_Literal]^monday.add ( Calendar.DATE, -7 ) ;^236^^^^^228^251^monday.add ( Calendar.DATE, -6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P2_Replace_Operator]^monday.add ( Calendar.DATE, 2  >  monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P3_Replace_Literal]^monday.add ( Calendar.DATE, 11 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P7_Replace_Invocation]^monday.add ( Calendar.DATE, 2 - monday .getTime (  )   ) ;^238^^^^^228^251^monday.add ( Calendar.DATE, 2 - monday.get ( Calendar.DAY_OF_WEEK )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar centered = CalendarUtils.trunc ( today, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Calendar centered = CalendarUtils.trunc (  Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^Calendar centered = CalendarUtils.trunc ( now, Calendar.0 ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^240^^^^^228^251^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P3_Replace_Literal]^centered.add ( Calendar.DATE, -5 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^centered.add ( Calendar. -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^monday.add ( Calendar.DATE, -6 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -7 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MONTH, -12 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^last.add ( Calendar.DATE, 1 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, -1 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.DATE, 1 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -8 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^end.add ( Calendar.DATE, 6 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^now.add ( Calendar.MINUTE, -1 ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;centered.add ( Calendar.DATE, -3 ) ;^241^^^^^228^251^centered.add ( Calendar.DATE, -3 ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Iterator it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Iterator it = CalendarUtils.getCalendarIterator ( sunday, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^243^244^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ; assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^243^^^^^228^251^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it, today ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator (  sunday ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( sunday, it ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^244^245^^^^228^251^assertWeekIterator ( it, sunday ) ; it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, monday ) ;assertWeekIterator ( it, sunday ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertWeekIterator ( it, sunday ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, today ) ;assertWeekIterator ( it, sunday ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, start, end ) ;assertWeekIterator ( it, sunday ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, centered ) ;assertWeekIterator ( it, sunday ) ;^244^^^^^228^251^assertWeekIterator ( it, sunday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( sunday, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^245^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it, today ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator (  monday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( monday, it ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^assertWeekIterator ( it, sunday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^246^247^^^^228^251^assertWeekIterator ( it, monday ) ; it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertWeekIterator ( it, monday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, today ) ;assertWeekIterator ( it, monday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, start, end ) ;assertWeekIterator ( it, monday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, sunday ) ;assertWeekIterator ( it, monday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, centered ) ;assertWeekIterator ( it, monday ) ;^246^^^^^228^251^assertWeekIterator ( it, monday ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P8_Replace_Mix]^it =  CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^247^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it, sunday ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator (  today ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( today, it ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^248^249^^^^228^251^assertWeekIterator ( it, today ) ; it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, monday ) ;assertWeekIterator ( it, today ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertWeekIterator ( it, today ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, start, end ) ;assertWeekIterator ( it, today ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, sunday ) ;assertWeekIterator ( it, today ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, centered ) ;assertWeekIterator ( it, today ) ;^248^^^^^228^251^assertWeekIterator ( it, today ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( sunday, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( today, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^249^250^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ; assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^249^^^^^228^251^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it, today ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator (  centered ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( it ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^assertWeekIterator ( centered, it ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P14_Delete_Statement]^^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, monday ) ;assertWeekIterator ( it, centered ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertWeekIterator ( it, centered ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, today ) ;assertWeekIterator ( it, centered ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, start, end ) ;assertWeekIterator ( it, centered ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, sunday ) ;assertWeekIterator ( it, centered ) ;^250^^^^^228^251^assertWeekIterator ( it, centered ) ;^[CLASS] CalendarUtilsTest  [METHOD] testWeekIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  centered  monday  now  sunday  today  
[P5_Replace_Variable]^Iterator it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^257^^^^^256^276^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "anu" ) , new Date ( "March 2, 2002" )  ) ;^259^260^^^^256^276^new Date ( "January 27, 2002" ) , new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )  , new Date ( "March 2, 2002" )  ) ;^259^260^^^^256^276^new Date ( "January 27, 2002" ) , new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )   ) ;^260^^^^^256^276^new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^assertWeekIterator ( it, new Date ( "January 27, 2002Jan" ) , new Date ( "March 2, 2002" )  ) ;^258^259^260^^^256^276^assertWeekIterator ( it, new Date ( "January 27, 2002" ) , new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^assertWeekIterator ( it, new Date ( "January 27, 2002" ) , new Date ( "Maarch 2, 2002" )  ) ;^258^259^260^^^256^276^assertWeekIterator ( it, new Date ( "January 27, 2002" ) , new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^assertWeekIterator ( it, assertWeekIterator ( it,  new Date ( "December 2, 2001" )  , new Date ( "March 2, 2002" )  ) ;^258^259^260^^^256^276^assertWeekIterator ( it, new Date ( "January 27, 2002" ) , new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^258^259^260^^^256^276^assertWeekIterator ( it, new Date ( "January 27, 2002" ) , new Date ( "March 2, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P8_Replace_Mix]^it ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^262^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "Januaranuary 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^264^265^^^^256^276^new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )  , new Date ( "March 3, 2002" )  ) ;^264^265^^^^256^276^new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "arch 3, " )  ) ;^265^^^^^256^276^new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )   ) ;^265^^^^^256^276^new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^assertWeekIterator ( it, new Date ( "J" ) , new Date ( "March 3, 2002" )  ) ;^263^264^265^^^256^276^assertWeekIterator ( it, new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^assertWeekIterator ( it, new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002M" )  ) ;^263^264^265^^^256^276^assertWeekIterator ( it, new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^assertWeekIterator ( it, assertWeekIterator ( it,  new Date ( "December 2, 2001" )  , new Date ( "March 3, 2002" )  ) ;^263^264^265^^^256^276^assertWeekIterator ( it, new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^263^264^265^^^256^276^assertWeekIterator ( it, new Date ( "January 28, 2002" ) , new Date ( "March 3, 2002" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P8_Replace_Mix]^it  =  it ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^267^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "October 28, 2001October " ) , new Date ( "December 1, 2001" )  ) ;^269^270^^^^256^276^new Date ( "October 28, 2001" ) , new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )  , new Date ( "December 1, 2001" )  ) ;^269^270^^^^256^276^new Date ( "October 28, 2001" ) , new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "December 1, 20011, " )  ) ;^270^^^^^256^276^new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )   ) ;^270^^^^^256^276^new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^assertWeekIterator ( it, new Date ( "ctoctober 28, 2001" ) , new Date ( "December 1, 2001" )  ) ;^268^269^270^^^256^276^assertWeekIterator ( it, new Date ( "October 28, 2001" ) , new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^assertWeekIterator ( it, assertWeekIterator ( it,  new Date ( "December 2, 2001" )  , new Date ( "December 1, 2001" )  ) ;^268^269^270^^^256^276^assertWeekIterator ( it, new Date ( "October 28, 2001" ) , new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^268^269^270^^^256^276^assertWeekIterator ( it, new Date ( "October 28, 2001" ) , new Date ( "December 1, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P5_Replace_Variable]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P8_Replace_Mix]^it  = null ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_RELATIVE ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_MONDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_CENTER ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( date1, CalendarUtils.RANGE_MONTH_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^Iterator it = CalendarUtils.getCalendarIterator ( now, CalendarUtils.RANGE_WEEK_SUNDAY ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, CalendarUtils.SEMI_MONTH )  ) ;it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^272^^^^^256^276^it = CalendarUtils.getCalendarIterator ( date2, CalendarUtils.RANGE_MONTH_MONDAY ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "ctober 29, 2001" ) , new Date ( "December 2, 2001" )  ) ;^274^275^^^^256^276^new Date ( "October 29, 2001" ) , new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "December 2, 2001" )  , new Date ( "December 2, 2001" )  ) ;^274^275^^^^256^276^new Date ( "October 29, 2001" ) , new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^new Date ( "December 2, 2001er 2," )  ) ;^275^^^^^256^276^new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^new Date ( "January 28, 2002" )   ) ;^275^^^^^256^276^new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P3_Replace_Literal]^assertWeekIterator ( it, new Date ( "October 29, 2001r 2" ) , new Date ( "December 2, 2001" )  ) ;^273^274^275^^^256^276^assertWeekIterator ( it, new Date ( "October 29, 2001" ) , new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P4_Replace_Constructor]^assertWeekIterator ( it, assertWeekIterator ( it,  new Date ( "December 2, 2001" )  , new Date ( "December 2, 2001" )  ) ;^273^274^275^^^256^276^assertWeekIterator ( it, new Date ( "October 29, 2001" ) , new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P14_Delete_Statement]^^273^274^275^^^256^276^assertWeekIterator ( it, new Date ( "October 29, 2001" ) , new Date ( "December 2, 2001" )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] testMonthIterator [RETURN_TYPE] void   [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  
[P7_Replace_Invocation]^Calendar end =  ( Calendar )  start.get (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P7_Replace_Invocation]^Calendar end =  ( Calendar )  start .getInstance (  )  ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  it.next (  ) ;Calendar end =  ( Calendar )  start.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;Calendar end =  ( Calendar )  start.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;Calendar end =  ( Calendar )  start.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;Calendar end =  ( Calendar )  start.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^Calendar end =  ( Calendar )  end.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P14_Delete_Statement]^^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;Calendar end =  ( Calendar )  start.clone (  ) ;^283^^^^^282^287^Calendar end =  ( Calendar )  start.clone (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P3_Replace_Literal]^end.add ( Calendar.DATE, 10 ) ;^284^^^^^282^287^end.add ( Calendar.DATE, 6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^end.add ( Calendar. 6 ) ;^284^^^^^282^287^end.add ( Calendar.DATE, 6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P14_Delete_Statement]^^284^^^^^282^287^end.add ( Calendar.DATE, 6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P12_Insert_Condition]^if  ( monday.get ( Calendar.DATE )  == 1 )  { end.add ( Calendar.DATE, 6 ) ; }^284^^^^^282^287^end.add ( Calendar.DATE, 6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P12_Insert_Condition]^if  ( now.get ( Calendar.DATE )  == 1 )  { end.add ( Calendar.DATE, 6 ) ; }^284^^^^^282^287^end.add ( Calendar.DATE, 6 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^assertWeekIterator (  start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^assertWeekIterator ( it,  end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^assertWeekIterator ( it, start ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^assertWeekIterator ( start, it, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P5_Replace_Variable]^assertWeekIterator ( it, end, start ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P8_Replace_Mix]^assertWeekIterator ( it, start, start ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P14_Delete_Statement]^^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, monday ) ;assertWeekIterator ( it, start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertWeekIterator ( it, start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, today ) ;assertWeekIterator ( it, start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, sunday ) ;assertWeekIterator ( it, start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", start, cal, 0 ) ;assertWeekIterator ( it, start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, centered ) ;assertWeekIterator ( it, start, end ) ;^286^^^^^282^287^assertWeekIterator ( it, start, end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start [VARIABLES] Iterator  it  boolean  Date  date1  date2  DateFormat  parser  Calendar  end  start  
[P7_Replace_Invocation]^Calendar calStart = Calendar.getTime (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  it.next (  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar end =  ( Calendar )  start.clone (  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P14_Delete_Statement]^^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^now = Calendar.getInstance (  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;Calendar calStart = Calendar.getInstance (  ) ;^293^^^^^292^299^Calendar calStart = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^calStart.setTime ( end ) ;^294^^^^^292^299^calStart.setTime ( start ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P7_Replace_Invocation]^calStart.add ( start ) ;^294^^^^^292^299^calStart.setTime ( start ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P14_Delete_Statement]^^294^295^^^^292^299^calStart.setTime ( start ) ; Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^calEnd.setTime ( end ) ;calStart.setTime ( start ) ;^294^^^^^292^299^calStart.setTime ( start ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P7_Replace_Invocation]^Calendar calEnd = Calendar.getTime (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  it.next (  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar end =  ( Calendar )  start.clone (  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P14_Delete_Statement]^^295^296^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ; calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.MINUTE )  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.MINUTE )  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^now = Calendar.getInstance (  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;Calendar calEnd = Calendar.getInstance (  ) ;^295^^^^^292^299^Calendar calEnd = Calendar.getInstance (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^calEnd.setTime ( start ) ;^296^^^^^292^299^calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P7_Replace_Invocation]^calEnd.add ( end ) ;^296^^^^^292^299^calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P7_Replace_Invocation]^calEnd .getTime (  )  ;^296^^^^^292^299^calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P14_Delete_Statement]^^296^^^^^292^299^calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^calStart.setTime ( start ) ;calEnd.setTime ( end ) ;^296^^^^^292^299^calEnd.setTime ( end ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^assertWeekIterator (  calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^assertWeekIterator ( it,  calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^assertWeekIterator ( it, calStart ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^assertWeekIterator ( calEnd, calStart, it ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P5_Replace_Variable]^assertWeekIterator ( it, calEnd, calStart ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P14_Delete_Statement]^^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, monday ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, today ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, start, end ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, sunday ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertEquals ( "", start, cal, 0 ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertEquals ( "", last, cal, 0 ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, centered ) ;assertWeekIterator ( it, calStart, calEnd ) ;^298^^^^^292^299^assertWeekIterator ( it, calStart, calEnd ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Date start Date end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  DateFormat  parser  Calendar  calEnd  calStart  
[P7_Replace_Invocation]^Calendar cal =  ( Calendar )  it .hasNext (  )  ;^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar calStart = Calendar.getInstance (  ) ;Calendar cal =  ( Calendar )  it.next (  ) ;^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;Calendar cal =  ( Calendar )  it.next (  ) ;^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;Calendar cal =  ( Calendar )  it.next (  ) ;^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar end =  ( Calendar )  start.clone (  ) ;Calendar cal =  ( Calendar )  it.next (  ) ;^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^cal =  ( Calendar )  it.next (  ) ;Calendar cal =  ( Calendar )  it.next (  ) ;^307^^^^^306^327^Calendar cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^assertEquals ( "", start, cal, count ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", last, cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", start, last, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "",  cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", start,  0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", cal, start, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertEquals ( "", start, cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, start, end ) ;assertEquals ( "", start, cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", last, cal, 0 ) ;assertEquals ( "", start, cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", end, cal, 0 ) ;assertEquals ( "", start, cal, 0 ) ;^308^^^^^306^327^assertEquals ( "", start, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar now = null;Calendar last = null;^309^^^^^306^327^Calendar last = null;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P1_Replace_Type]^long  count = 1;^310^^^^^306^327^int count = 1;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^int count = -6;^310^^^^^306^327^int count = 1;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P7_Replace_Invocation]^while  ( it .next (  )   )  {^311^^^^^306^327^while  ( it.hasNext (  )  )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^last = start;^315^^^^^306^327^last = cal;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P8_Replace_Mix]^cal =   ( Calendar )  null.next (  ) ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^now = Calendar.getInstance (  ) ;cal =  ( Calendar )  it.next (  ) ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", start, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.count ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "",  CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date2, Calendar.DATE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MONTH )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar monday = CalendarUtils.trunc ( now, Calendar.DATE ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last Sunday", now, CalendarUtils.parse ( "last Sunday" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar today = CalendarUtils.trunc ( now, Calendar.DATE ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.SECOND )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.MONTH )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.round ( date1, Calendar.DATE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last week", now, CalendarUtils.parse ( "last week" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 8 minutes ago", now, CalendarUtils.parse ( "8 minutes ago" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse last January", now, CalendarUtils.parse ( "last January" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.HOUR )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.DATE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse tomorrow", now, CalendarUtils.parse ( "tomorrow" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.YEAR )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar sunday = CalendarUtils.trunc ( now, Calendar.DATE ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.HOUR )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^parser.parse ( "February 12, 2002 12:34:00.000" ) , CalendarUtils.trunc ( date1, Calendar.MINUTE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse yesterday", now, CalendarUtils.parse ( "yesterday" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "parse 1 minute ago", now, CalendarUtils.parse ( "1 minute ago" ) , 50 ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^parser.parse ( "November 18, 2001 1:23:00.000" ) , CalendarUtils.trunc ( date2, Calendar.MINUTE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date2, Calendar.YEAR )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.SECOND )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^CalendarUtils.trunc ( date1, Calendar.DATE )  ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar centered = CalendarUtils.trunc ( now, Calendar.DATE ) ;assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P7_Replace_Invocation]^assertEquals ( "", cal, CalendarUtils .trunc ( date1 , count )  , 0 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P7_Replace_Invocation]^cal =  ( Calendar )  it .hasNext (  )  ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar cal =  ( Calendar )  it.next (  ) ;cal =  ( Calendar )  it.next (  ) ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar calEnd = Calendar.getInstance (  ) ;cal =  ( Calendar )  it.next (  ) ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar now = Calendar.getInstance (  ) ;cal =  ( Calendar )  it.next (  ) ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^Calendar end =  ( Calendar )  start.clone (  ) ;cal =  ( Calendar )  it.next (  ) ;^316^^^^^306^327^cal =  ( Calendar )  it.next (  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^last.add ( Calendar.DATE, count ) ;^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^last.add ( Calendar. 1 ) ;^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P8_Replace_Mix]^last .getInstance (  )  ;^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^320^321^^^^306^327^last.add ( Calendar.DATE, 1 ) ; assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^assertEquals ( "", last, cal, 9 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", start, cal, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", last, start, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "",  cal, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", last,  0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", cal, last, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertWeekIterator ( it, calStart, calEnd ) ;assertEquals ( "", last, cal, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", start, cal, 0 ) ;assertEquals ( "", last, cal, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", end, cal, 0 ) ;assertEquals ( "", last, cal, 0 ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^311^312^313^^^306^327^while  ( it.hasNext (  )  )  {  assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , -8 ) ;^313^^^^^306^327^assertEquals ( "", cal, CalendarUtils.trunc ( cal, Calendar.DATE ) , 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^last.add ( Calendar.DATE, -8 ) ;^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P12_Insert_Condition]^if  ( now.get ( Calendar.DATE )  == 1 )  { last.add ( Calendar.DATE, 1 ) ; }^320^^^^^306^327^last.add ( Calendar.DATE, 1 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^assertEquals ( "", last, cal, count ) ;^321^^^^^306^327^assertEquals ( "", last, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^if  ( count % 7 < 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^if  ( count  ^  7 != 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^if  ( count % count != 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^if  ( count % 7 != count )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P6_Replace_Expression]^if  ( count % 7 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P6_Replace_Expression]^if  ( "There were " + count + " days in this iterator" )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P6_Replace_Expression]^if  ( "There were " + count )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P8_Replace_Mix]^if  ( count % 2 != 0 )  {^323^^^^^306^327^if  ( count % 7 != 0 )  {^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P15_Unwrap_Block]^throw new junit.framework.AssertionFailedError((("There were " + count) + " days in this iterator"));^323^324^325^^^306^327^if  ( count % 7 != 0 )  { throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ; }^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P16_Remove_Block]^^323^324^325^^^306^327^if  ( count % 7 != 0 )  { throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ; }^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "  <  count  <  " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "  <  count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( " werhere were " + count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( "There were " + count + "ys i" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P13_Insert_Block]^if  (  ( count % 7 )  != 0 )  {     throw new AssertionFailedError (  (  ( "There were " + count )  + " days in this iterator" )  ) ; }^324^^^^^306^327^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "   instanceof   count   instanceof   " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "  &&  count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( " wehere were " + count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( "There were " + count + " days in this iteratorays" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "  &  count  &  " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "  >>  count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( "Thhere were " + count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( "There were " + count + " iter" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^throw new AssertionFailedError ( "There were "  |  count  |  " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( "There were Th" + count + " days in this iterator" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^throw new AssertionFailedError ( "There were " + count + "in this iterat" ) ;^324^^^^^306^327^throw new AssertionFailedError ( "There were " + count + " days in this iterator" ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P3_Replace_Literal]^assertEquals ( "", end, cal, count ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", start, cal, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", end, start, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "",  cal, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", end,  0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P5_Replace_Variable]^assertEquals ( "", cal, end, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P14_Delete_Statement]^^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", start, cal, 0 ) ;assertEquals ( "", end, cal, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P11_Insert_Donor_Statement]^assertEquals ( "", last, cal, 0 ) ;assertEquals ( "", end, cal, 0 ) ;^326^^^^^306^327^assertEquals ( "", end, cal, 0 ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertWeekIterator [RETURN_TYPE] void   Iterator it Calendar start Calendar end [VARIABLES] Iterator  it  boolean  Date  date1  date2  end  start  int  count  DateFormat  parser  Calendar  cal  end  last  start  
[P2_Replace_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  >= delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )   ||  cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^if  ( Math.abs ( cal2.getTime (  ) .getTime (  )  - cal1.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^if  ( Math.abs ( delta.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > cal1 )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P6_Replace_Expression]^if  ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  ) )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P6_Replace_Expression]^if  (  (  ( message + " expected " )  +  ( cal1.getTime (  )  )  )  + " but got " + cal2.getTime (  ) )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P6_Replace_Expression]^if  (  ( message + " expected " )  +  ( cal1.getTime (  )  )  + " but got " )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P6_Replace_Expression]^if  ( message + " expected " + cal1.getTime (  ) )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P6_Replace_Expression]^if  ( message + " expected " )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^if  ( Math.abs ( cal1.Date (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^if  ( Math.abs ( cal1.get (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P8_Replace_Mix]^if  ( Math.abs ( cal2.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P15_Unwrap_Block]^throw new junit.framework.AssertionFailedError(((((message + " expected ") + (cal1.getTime())) + " but got ") + (cal2.getTime())));^334^335^336^337^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  { throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P16_Remove_Block]^^334^335^336^337^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  { throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ; }^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  !=  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  <  " expected "  <  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  ||  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + "ecexpected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got  b" + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^throw new AssertionFailedError ( cal1 + " expected " + message.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^throw new AssertionFailedError ( message + " expected " + cal2.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^throw new AssertionFailedError ( message + " expected " + cal1.get (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^throw new AssertionFailedError ( message + " expected " + cal1 .setTime ( date1 )   + " but got " + cal2^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P8_Replace_Mix]^throw new AssertionFailedError ( message + " expected " + cal2.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P13_Insert_Block]^if  (  ( abs (  (  ( cal1.getTime (  ) .getTime (  )  )  -  ( cal2.getTime (  ) .getTime (  )  )  )  )  )  > delta )  {     throw new AssertionFailedError (  (  (  (  ( message + " expected " )  +  ( cal1.getTime (  )  )  )  + " but got " )  +  ( cal2.getTime (  )  )  )  ) ; }^335^^^^^333^338^[Delete]^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  <<  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  >=  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  &&  " expected "  &&  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  <  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + " expected  exp" + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + "ubut got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^throw new AssertionFailedError ( message + " expected " + cal1 .setTime ( date2 )   + " but got " + cal2^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^message + " expected " + cal2.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^message + " expected " + cal1.get (  )  + " but got " + cal2.getTime (  )  ) ;^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^message + " expected " + cal1 .setTime ( date2 )   + " but got " + cal2^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P14_Delete_Statement]^^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^message + " expected " + cal1.getTime (  )  + " but got " + cal1.getTime (  )  ) ;^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  &&  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (   instanceof   )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  <=  " expected "  <=  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  <=  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + " exp" + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " got" + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  ||  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  <=  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  ==  " expected "  ==  cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^throw new AssertionFailedError ( message  |  " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + "expectexpected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P3_Replace_Literal]^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got but go" + cal2.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^throw new AssertionFailedError ( cal2 + " expected " + cal1.getTime (  )  + " but got " + message.getTime (  )  ) ;^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^throw new AssertionFailedError ( message + " expected " + cal1 .setTime ( start )   + " but got " + cal2^335^336^^^^333^338^throw new AssertionFailedError ( message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P2_Replace_Operator]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )   <<  cal2.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^if  ( Math.abs ( cal1 .setTime ( end )^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^if  ( Math.abs ( cal1 .setTime ( start )^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P5_Replace_Variable]^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal1.getTime (  ) .getTime (  )  )  > delta )  {^334^^^^^333^338^if  ( Math.abs ( cal1.getTime (  ) .getTime (  )  - cal2.getTime (  ) .getTime (  )  )  > delta )  {^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
[P7_Replace_Invocation]^message + " expected " + cal1 .setTime ( date1 )   + " but got " + cal2^336^^^^^333^338^message + " expected " + cal1.getTime (  )  + " but got " + cal2.getTime (  )  ) ;^[CLASS] CalendarUtilsTest  [METHOD] assertEquals [RETURN_TYPE] void   String message Calendar cal1 Calendar cal2 long delta [VARIABLES] String  message  boolean  Date  date1  date2  end  start  long  delta  DateFormat  parser  Calendar  cal1  cal2  
