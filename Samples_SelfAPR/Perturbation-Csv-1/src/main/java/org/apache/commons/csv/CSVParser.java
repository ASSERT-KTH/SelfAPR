[P8_Replace_Mix]^private  List<String> record = new ArrayList<String> (  ) ;^71^^^^^66^76^private final List<String> record = new ArrayList<String> (  ) ;^[CLASS] CSVParser 1   [VARIABLES] 
[P8_Replace_Mix]^private  Token reusableToken = new Token (  ) ;^72^^^^^67^77^private final Token reusableToken = new Token (  ) ;^[CLASS] CSVParser 1   [VARIABLES] 
[P14_Delete_Statement]^^81^^^^^80^82^this ( input, CSVFormat.DEFAULT ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] Reader)   Reader input [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  Map  headerMapping  
[P8_Replace_Mix]^format .getHeader (  )  ;^92^^^^^91^97^format.validate (  ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   Reader input CSVFormat format [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  Map  headerMapping  
[P4_Replace_Constructor]^this.lexer = new CSVLexer (  new ExtendedBufferedReader ( input )  ) ;^94^^^^^91^97^this.lexer = new CSVLexer ( format, new ExtendedBufferedReader ( input )  ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   Reader input CSVFormat format [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  Map  headerMapping  
[P5_Replace_Variable]^this.lexer = new CSVLexer ( input, new ExtendedBufferedReader ( format )  ) ;^94^^^^^91^97^this.lexer = new CSVLexer ( format, new ExtendedBufferedReader ( input )  ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   Reader input CSVFormat format [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  Map  headerMapping  
[P8_Replace_Mix]^this.lexer =  new CSVLexer ( null, new ExtendedBufferedReader ( input )  ) ;^94^^^^^91^97^this.lexer = new CSVLexer ( format, new ExtendedBufferedReader ( input )  ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   Reader input CSVFormat format [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  Map  headerMapping  
[P8_Replace_Mix]^this.headerMapping =  initializeHeader ( null ) ;^96^^^^^91^97^this.headerMapping = initializeHeader ( format ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   Reader input CSVFormat format [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  Map  headerMapping  
[P14_Delete_Statement]^^96^97^^^^91^97^this.headerMapping = initializeHeader ( format ) ; }^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   Reader input CSVFormat format [VARIABLES] Lexer  lexer  boolean  Reader  input  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  Map  headerMapping  
[P4_Replace_Constructor]^this ( new StringReader ( input )  ) ;^107^^^^^106^108^this ( new StringReader ( input ) , format ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   String input CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  String  input  Map  headerMapping  
[P5_Replace_Variable]^this ( new StringReader ( format ) , input ) ;^107^^^^^106^108^this ( new StringReader ( input ) , format ) ;^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   String input CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  String  input  Map  headerMapping  
[P14_Delete_Statement]^^107^108^^^^106^108^this ( new StringReader ( input ) , format ) ; }^[CLASS] CSVParser 1  [METHOD] <init> [RETURN_TYPE] CSVFormat)   String input CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  Token  reusableToken  CSVRecord  current  CSVFormat  format  String  input  Map  headerMapping  
[P1_Replace_Type]^List<CSVRecord> records = new  LinkedList <CSVRecord> (  ) ;^121^^^^^120^127^List<CSVRecord> records = new ArrayList<CSVRecord> (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec = getRecord (  ) ;List<CSVRecord> records = new ArrayList<CSVRecord> (  ) ;^121^^^^^120^127^List<CSVRecord> records = new ArrayList<CSVRecord> (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord next = current;CSVRecord rec;^122^^^^^120^127^CSVRecord rec;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P2_Replace_Operator]^while  (  ( rec = getRecord (  )  )  == null )  {^123^^^^^120^127^while  (  ( rec = getRecord (  )  )  != null )  {^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P5_Replace_Variable]^while  (  ( current = getRecord (  )  )  != null )  {^123^^^^^120^127^while  (  ( rec = getRecord (  )  )  != null )  {^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P7_Replace_Invocation]^while  (  ( rec = toString (  )  )  != null )  {^123^^^^^120^127^while  (  ( rec = getRecord (  )  )  != null )  {^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P5_Replace_Variable]^records.add ( current ) ;^124^^^^^120^127^records.add ( rec ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P7_Replace_Invocation]^records .add ( rec )  ;^124^^^^^120^127^records.add ( rec ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P14_Delete_Statement]^^124^^^^^120^127^records.add ( rec ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^record.clear (  ) ;records.add ( rec ) ;^124^^^^^120^127^records.add ( rec ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P8_Replace_Mix]^while  (  ( rec ;^123^^^^^120^127^while  (  ( rec = getRecord (  )  )  != null )  {^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P14_Delete_Statement]^^123^124^^^^120^127^while  (  ( rec = getRecord (  )  )  != null )  { records.add ( rec ) ;^[CLASS] CSVParser 1  [METHOD] getRecords [RETURN_TYPE] List   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  boolean  Map  headerMapping  
[P8_Replace_Mix]^CSVRecord result = new CSVRecord ( null, this ) ;^136^^^^^135^164^CSVRecord result = new CSVRecord ( null, headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.size (  ) ;^137^^^^^135^164^record.clear (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^137^^^^^135^164^record.clear (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^records.add ( rec ) ;record.clear (  ) ;^137^^^^^135^164^record.clear (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;record.clear (  ) ;^137^^^^^135^164^record.clear (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P15_Unwrap_Block]^record.add(reusableToken.content.toString());^149^150^151^152^153^135^164^if  ( reusableToken.isReady )  { record.add ( reusableToken.content.toString (  )  ) ; } else { result = null; }^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P16_Remove_Block]^^149^150^151^152^153^135^164^if  ( reusableToken.isReady )  { record.add ( reusableToken.content.toString (  )  ) ; } else { result = null; }^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P8_Replace_Mix]^result = this;^152^^^^^149^153^result = null;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^current = null;result = null;^152^^^^^149^153^result = null;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.size ( reusableToken.content.toString (  )  ) ;^150^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.add ( reusableToken.content.getRecord (  )  ) ;^150^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.add ( reusableToken.content .getLineNumber (  )   ) ;^150^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^150^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P8_Replace_Mix]^result = false;^152^^^^^135^164^result = null;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^current = null;result = null;^152^^^^^135^164^result = null;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^156^^^^^135^164^throw new IOException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new IOException  (" ")  ;^156^^^^^135^164^throw new IOException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new IOException  (" ")  ;^156^^^^^135^164^throw new IOException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new IOException  (" ")  ;^156^^^^^135^164^throw new IOException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^reusableToken.Token (  ) ;^139^^^^^135^164^reusableToken.reset (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^139^^^^^135^164^reusableToken.reset (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P12_Insert_Condition]^if  ( reusableToken.isReady )  { reusableToken.reset (  ) ; }^139^^^^^135^164^reusableToken.reset (  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^lexer.getLineNumber ( reusableToken ) ;^140^^^^^135^164^lexer.nextToken ( reusableToken ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^lexer .getLineNumber (  )  ;^140^^^^^135^164^lexer.nextToken ( reusableToken ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^140^^^^^135^164^lexer.nextToken ( reusableToken ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.size ( reusableToken.content.toString (  )  ) ;^143^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.add ( reusableToken.content.getRecord (  )  ) ;^143^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P8_Replace_Mix]^record.add ( reusableToken.content .getLineNumber (  )   ) ;^143^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^143^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.size ( reusableToken.content.toString (  )  ) ;^146^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^record.add ( reusableToken.content.getRecord (  )  ) ;^146^^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^146^147^^^^135^164^record.add ( reusableToken.content.toString (  )  ) ; break;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^156^^^^^135^164^throw new IOException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^if  ( !record.clear (  )  )  {^160^^^^^135^164^if  ( !record.isEmpty (  )  )  {^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P15_Unwrap_Block]^result = new org.apache.commons.csv.CSVRecord(record.toArray(new java.lang.String[record.size()]), headerMapping);^160^161^162^^^135^164^if  ( !record.isEmpty (  )  )  { result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ; }^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P16_Remove_Block]^^160^161^162^^^135^164^if  ( !record.isEmpty (  )  )  { result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ; }^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() + 1 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P5_Replace_Variable]^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] )  ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P5_Replace_Variable]^result = new CSVRecord ( headerMapping.toArray ( new String[record.size (  ) ] ) , record ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^result = new CSVRecord ( record.clear ( new String[record.size (  ) ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^result = new CSVRecord ( record.toArray ( new String[record.clear (  ) ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P8_Replace_Mix]^result ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P13_Insert_Block]^if  ( ! ( record.isEmpty (  )  )  )  {     result = new CSVRecord ( record.toArray ( new size (  ) ] ) , headerMapping ) ; }^161^^^^^135^164^[Delete]^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() + 6 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^result = new CSVRecord ( record .add ( current )  , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^result = new CSVRecord ( record.toArray ( new String[record .isEmpty (  )  ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() + 9 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P14_Delete_Statement]^^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() + 0 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() + 7 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P8_Replace_Mix]^result  =  result ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() - 6 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P7_Replace_Invocation]^result = new CSVRecord ( record .add ( rec )  , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() + 8 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P3_Replace_Literal]^result = new CSVRecord ( record.toArray ( new String[record.size() - 9 ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P5_Replace_Variable]^result = new CSVRecord ( 4.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^161^^^^^135^164^result = new CSVRecord ( record.toArray ( new String[record.size (  ) ] ) , headerMapping ) ;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P5_Replace_Variable]^return rec;^163^^^^^135^164^return result;^[CLASS] CSVParser 1  [METHOD] getRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  boolean  Map  headerMapping  
[P2_Replace_Operator]^if  ( format.getHeader (  )  == null )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P6_Replace_Expression]^if  ( length == 0 )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P6_Replace_Expression]^if  ( rec != null )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P6_Replace_Expression]^if  ( header != null )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P6_Replace_Expression]^if  ( i < header.length )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P7_Replace_Invocation]^if  ( format .validate (  )   != null )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^if  ( format.getHeader (  )  != false )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( format.getHeader (  ) .length == 0 )  {^171^^^^^169^193^if  ( format.getHeader (  )  != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^if  ( format.getHeader (  ) .length >= 0 )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^if  ( format.getHeader (  ) .length == i )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P6_Replace_Expression]^if  ( rec != null )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P7_Replace_Invocation]^if  ( format .validate (  )  .length == 0 )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( format.getHeader (  )  != null )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P15_Unwrap_Block]^org.apache.commons.csv.CSVRecord rec = getRecord(); if (rec != null) {    header = rec.values();};^175^176^177^178^179^169^193^if  ( format.getHeader (  ) .length == 0 )  {  CSVRecord rec = getRecord (  ) ; if  ( rec != null )  { header = rec.values (  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P16_Remove_Block]^^175^176^177^178^179^169^193^if  ( format.getHeader (  ) .length == 0 )  {  CSVRecord rec = getRecord (  ) ; if  ( rec != null )  { header = rec.values (  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P7_Replace_Invocation]^header = format .validate (  )  ;^182^^^^^169^193^header = format.getHeader (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^header =  null.getHeader (  ) ;^182^^^^^169^193^header = format.getHeader (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P11_Insert_Donor_Statement]^header = rec.values (  ) ;header = format.getHeader (  ) ;^182^^^^^169^193^header = format.getHeader (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P12_Insert_Condition]^if  ( format.getHeader (  )  != null )  { header = format.getHeader (  ) ; }^182^^^^^169^193^header = format.getHeader (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P14_Delete_Statement]^^182^183^^^^169^193^header = format.getHeader (  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^if  ( rec == null )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P5_Replace_Variable]^if  ( result != null )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^if  ( rec != true )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( header != null )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( current == null )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( next == null )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P15_Unwrap_Block]^header = rec.values();^178^179^180^^^169^193^if  ( rec != null )  { header = rec.values (  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P16_Remove_Block]^^178^179^180^^^169^193^if  ( rec != null )  { header = rec.values (  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P13_Insert_Block]^if  (  ( current )  == null )  {     current = getNextRecord (  ) ; }^178^^^^^169^193^[Delete]^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P5_Replace_Variable]^header = result.values (  ) ;^179^^^^^169^193^header = rec.values (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^header =  null.values (  ) ;^179^^^^^169^193^header = rec.values (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P11_Insert_Donor_Statement]^header = format.getHeader (  ) ;header = rec.values (  ) ;^179^^^^^169^193^header = rec.values (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P14_Delete_Statement]^^179^^^^^169^193^header = rec.values (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P7_Replace_Invocation]^CSVRecord rec = toString (  ) ;^177^^^^^169^193^CSVRecord rec = getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P11_Insert_Donor_Statement]^List<CSVRecord> records = new ArrayList<CSVRecord> (  ) ;CSVRecord rec = getRecord (  ) ;^177^^^^^169^193^CSVRecord rec = getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P14_Delete_Statement]^^177^^^^^169^193^CSVRecord rec = getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P11_Insert_Donor_Statement]^next = getNextRecord (  ) ;CSVRecord rec = getRecord (  ) ;^177^^^^^169^193^CSVRecord rec = getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P11_Insert_Donor_Statement]^current = getNextRecord (  ) ;CSVRecord rec = getRecord (  ) ;^177^^^^^169^193^CSVRecord rec = getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;CSVRecord rec = getRecord (  ) ;^177^^^^^169^193^CSVRecord rec = getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^if  ( rec != false )  {^178^^^^^169^193^if  ( rec != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^if  ( header == null )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P6_Replace_Expression]^if  ( i < header.length )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^if  ( header != true )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( current == null )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( rec != null )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P9_Replace_Statement]^if  ( next == null )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P15_Unwrap_Block]^for (int i = 0; i < (header.length); i++) {    hdrMap.put(header[i], java.lang.Integer.valueOf(i));};^186^187^188^189^^169^193^if  ( header != null )  { for  ( int i = 0; i < header.length; i++ )  { hdrMap.put ( header[i], Integer.valueOf ( i )  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P16_Remove_Block]^^186^187^188^189^^169^193^if  ( header != null )  { for  ( int i = 0; i < header.length; i++ )  { hdrMap.put ( header[i], Integer.valueOf ( i )  ) ; }^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P1_Replace_Type]^for  (  long  i = 0; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i <= header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = 1; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P5_Replace_Variable]^for  ( header.lengthnt i = 0; i < i; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P5_Replace_Variable]^for  ( int i = 0; i < header.length.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P13_Insert_Block]^if  ( header != null )  {     for  ( int i = 0; i <  ( header.length ) ; i++ )  {         hdrMap.put ( header[i], valueOf ( i )  ) ;     } }^187^^^^^169^193^[Delete]^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P14_Delete_Statement]^^188^^^^^169^193^hdrMap.put ( header[i], Integer.valueOf ( i )  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = i; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P1_Replace_Type]^for  (  short  i = 0; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = 5; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P5_Replace_Variable]^for  ( headernt i = 0; i < i.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P5_Replace_Variable]^hdrMap.put ( i[i], Integer.valueOf ( header )  ) ;^188^^^^^169^193^hdrMap.put ( header[i], Integer.valueOf ( i )  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^hdrMap  = null ;^172^^^^^169^193^hdrMap = new HashMap<String, Integer> (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = 8; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^if  ( format.getHeader (  ) .length <= 0 )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^if  ( format.getHeader (  ) .length == 0  )  {^175^^^^^169^193^if  ( format.getHeader (  ) .length == 0 )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^if  ( header != false )  {^186^^^^^169^193^if  ( header != null )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^for  ( int i = 0; i > header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = -6; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = -5; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P8_Replace_Mix]^hdrMap  =  hdrMap ;^172^^^^^169^193^hdrMap = new HashMap<String, Integer> (  ) ;^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P3_Replace_Literal]^for  ( int i = 2; i < header.length; i++ )  {^187^^^^^169^193^for  ( int i = 0; i < header.length; i++ )  {^[CLASS] CSVParser 1  [METHOD] initializeHeader [RETURN_TYPE] Map   CSVFormat format [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  rec  result  CSVFormat  format  String[]  header  Map  hdrMap  headerMapping  int  i  
[P2_Replace_Operator]^if  ( current != null )  {^204^^^^^189^219^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^if  ( result == null )  {^204^^^^^189^219^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( current == true )  {^204^^^^^189^219^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( header != null )  {^204^^^^^189^219^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( rec != null )  {^204^^^^^189^219^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( next == null )  {^204^^^^^189^219^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P15_Unwrap_Block]^current = getNextRecord();^204^205^206^^^189^219^if  ( current == null )  { current = getNextRecord (  ) ; }^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P16_Remove_Block]^^204^205^206^^^189^219^if  ( current == null )  { current = getNextRecord (  ) ; }^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( rec != null )  {     header = rec.values (  ) ; }^204^^^^^189^219^[Delete]^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P7_Replace_Invocation]^current = 1 (  ) ;^205^^^^^190^220^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^current  =  current ;^205^^^^^190^220^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^next = getNextRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^190^220^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^205^^^^^190^220^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec = getRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^190^220^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^190^220^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^if  ( next != null )  {^215^^^^^200^230^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^if  ( result == null )  {^215^^^^^200^230^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( next == false )  {^215^^^^^200^230^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( header != null )  {^215^^^^^200^230^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( current == null )  {^215^^^^^200^230^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( rec != null )  {^215^^^^^200^230^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P15_Unwrap_Block]^next = getNextRecord(); if (next == null) {    throw new java.util.NoSuchElementException("No more CSV records available");};^215^216^217^218^219^200^230^if  ( next == null )  {  next = getNextRecord (  ) ; if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P16_Remove_Block]^^215^216^217^218^219^200^230^if  ( next == null )  {  next = getNextRecord (  ) ; if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( next == null )  {     throw new NoSuchElementException ( "No more CSV records available" ) ; }^215^^^^^200^230^[Delete]^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^if  ( next != null )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^if  ( result == null )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( next == true )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( header != null )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( current == null )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( rec != null )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException("No more CSV records available");^218^219^220^^^203^233^if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P16_Remove_Block]^^218^219^220^^^203^233^if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( next == null )  {     next = getNextRecord (  ) ;     if  ( next == null )  {         throw new NoSuchElementException ( "No more CSV records available" ) ;     } }^218^^^^^203^233^[Delete]^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( next == null )  {     throw new NoSuchElementException ( "No more CSV records available" ) ; }^219^^^^^204^234^[Delete]^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^return 0;^219^^^^^204^234^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^204^234^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^204^234^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new IOException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^204^234^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P7_Replace_Invocation]^next = 1 (  ) ;^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^next  =  next ;^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^current = getNextRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec = getRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( next == this )  {^218^^^^^203^233^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^219^^^^^204^234^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P7_Replace_Invocation]^return toString (  ) ;^228^^^^^213^243^return getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^228^^^^^213^243^return getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^current = this;^213^^^^^198^228^current = null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^result = null;current = null;^213^^^^^198^228^current = null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P12_Insert_Condition]^if  ( current == null )  { current = null; }^213^^^^^198^228^current = null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^next  = null ;^217^^^^^202^232^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^return new Iterator;^200^^^^^185^215^return new Iterator<CSVRecord> (  )  {^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^return current == null;^208^^^^^193^223^return current != null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^return result != null;^208^^^^^193^223^return current != null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^return result ;^208^^^^^193^223^return current != null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P12_Insert_Condition]^if  ( current == null )  { return current != null; }^208^^^^^193^223^return current != null;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^return result;^223^^^^^208^238^return next;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^CSVRecord next = result;^212^^^^^197^227^CSVRecord next = current;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec;CSVRecord next = current;^212^^^^^197^227^CSVRecord next = current;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^215^245^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new IOException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^215^245^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^215^245^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^220^250^throw new UnsupportedOperationException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new IOException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^220^250^throw new UnsupportedOperationException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^220^250^throw new UnsupportedOperationException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] iterator [RETURN_TYPE] Iterator   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^if  ( current != null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^if  ( result == null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( current == true )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( header != null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( rec != null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( next == null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P15_Unwrap_Block]^current = getNextRecord();^204^205^206^^^203^209^if  ( current == null )  { current = getNextRecord (  ) ; }^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P16_Remove_Block]^^204^205^206^^^203^209^if  ( current == null )  { current = getNextRecord (  ) ; }^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( rec != null )  {     header = rec.values (  ) ; }^204^^^^^203^209^[Delete]^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P7_Replace_Invocation]^current = 1 (  ) ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^current  =  current ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^next = getNextRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec = getRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^current  = null ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^return current == null;^208^^^^^203^209^return current != null;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^return result != null;^208^^^^^203^209^return current != null;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^returnresult ;^208^^^^^203^209^return current != null;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P12_Insert_Condition]^if  ( current == null )  { return current != null; }^208^^^^^203^209^return current != null;^[CLASS] CSVParser 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^CSVRecord next = result;^212^^^^^211^224^CSVRecord next = current;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec;CSVRecord next = current;^212^^^^^211^224^CSVRecord next = current;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^current = this;^213^^^^^211^224^current = null;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^result = null;current = null;^213^^^^^211^224^current = null;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P12_Insert_Condition]^if  ( current == null )  { current = null; }^213^^^^^211^224^current = null;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^if  ( next != null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^if  ( result == null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( next == false )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( header != null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( current == null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( rec != null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P15_Unwrap_Block]^next = getNextRecord(); if (next == null) {    throw new java.util.NoSuchElementException("No more CSV records available");};^215^216^217^218^219^211^224^if  ( next == null )  {  next = getNextRecord (  ) ; if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P16_Remove_Block]^^215^216^217^218^219^211^224^if  ( next == null )  {  next = getNextRecord (  ) ; if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( next == null )  {     throw new NoSuchElementException ( "No more CSV records available" ) ; }^215^^^^^211^224^[Delete]^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^if  ( next != null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^if  ( result == null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( next == false )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( header != null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( current == null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P9_Replace_Statement]^if  ( rec != null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException("No more CSV records available");^218^219^220^^^211^224^if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P16_Remove_Block]^^218^219^220^^^211^224^if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( next == null )  {     next = getNextRecord (  ) ;     if  ( next == null )  {         throw new NoSuchElementException ( "No more CSV records available" ) ;     } }^218^^^^^211^224^[Delete]^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P13_Insert_Block]^if  ( next == null )  {     throw new NoSuchElementException ( "No more CSV records available" ) ; }^219^^^^^211^224^[Delete]^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new IOException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P7_Replace_Invocation]^next = 1 (  ) ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^next ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^current = getNextRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^CSVRecord rec = getRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^if  ( next == true )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^next  =  next ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P5_Replace_Variable]^return result;^223^^^^^211^224^return next;^[CLASS] CSVParser 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P7_Replace_Invocation]^return toString (  ) ;^228^^^^^226^232^return getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^228^^^^^226^232^return getRecord (  ) ;^[CLASS] CSVParser 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new IOException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] Lexer  lexer  boolean  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  IOException  e  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^234^236^throw new UnsupportedOperationException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new IOException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^234^236^throw new UnsupportedOperationException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^234^236^throw new UnsupportedOperationException  (" ")  ;^[CLASS] CSVParser 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P14_Delete_Statement]^^249^^^^^248^250^return lexer.getLineNumber (  ) ;^[CLASS] CSVParser 1  [METHOD] getLineNumber [RETURN_TYPE] int   [VARIABLES] Lexer  lexer  List  record  records  Token  reusableToken  CSVRecord  current  next  rec  result  boolean  Map  hdrMap  headerMapping  
[P2_Replace_Operator]^if  ( current != null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P8_Replace_Mix]^if  ( current == true )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P9_Replace_Statement]^if  ( next == null )  {^204^^^^^203^209^if  ( current == null )  {^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P15_Unwrap_Block]^current = getNextRecord();^204^205^206^^^203^209^if  ( current == null )  { current = getNextRecord (  ) ; }^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P16_Remove_Block]^^204^205^206^^^203^209^if  ( current == null )  { current = getNextRecord (  ) ; }^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P8_Replace_Mix]^current  =  current ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P11_Insert_Donor_Statement]^next = getNextRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P14_Delete_Statement]^^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;current = getNextRecord (  ) ;^205^^^^^203^209^current = getNextRecord (  ) ;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P2_Replace_Operator]^return current == null;^208^^^^^203^209^return current != null;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P8_Replace_Mix]^return current ;^208^^^^^203^209^return current != null;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P12_Insert_Condition]^if  ( current == null )  { return current != null; }^208^^^^^203^209^return current != null;^[CLASS] 1  [METHOD] hasNext [RETURN_TYPE] boolean   [VARIABLES] CSVRecord  current  boolean  
[P8_Replace_Mix]^current = true;^213^^^^^211^224^current = null;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P12_Insert_Condition]^if  ( current == null )  { current = null; }^213^^^^^211^224^current = null;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P2_Replace_Operator]^if  ( next != null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P5_Replace_Variable]^if  ( current == null )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^if  ( next == true )  {^215^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P15_Unwrap_Block]^next = getNextRecord(); if (next == null) {    throw new java.util.NoSuchElementException("No more CSV records available");};^215^216^217^218^219^211^224^if  ( next == null )  {  next = getNextRecord (  ) ; if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P16_Remove_Block]^^215^216^217^218^219^211^224^if  ( next == null )  {  next = getNextRecord (  ) ; if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P13_Insert_Block]^if  ( next == null )  {     throw new NoSuchElementException ( "No more CSV records available" ) ; }^215^^^^^211^224^[Delete]^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P2_Replace_Operator]^if  ( next != null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P5_Replace_Variable]^if  ( current == null )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^if  ( next == true )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P15_Unwrap_Block]^throw new java.util.NoSuchElementException("No more CSV records available");^218^219^220^^^211^224^if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P16_Remove_Block]^^218^219^220^^^211^224^if  ( next == null )  { throw new NoSuchElementException  (" ")  ; }^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P13_Insert_Block]^if  ( next == null )  {     next = getNextRecord (  ) ;     if  ( next == null )  {         throw new NoSuchElementException ( "No more CSV records available" ) ;     } }^218^^^^^211^224^[Delete]^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P13_Insert_Block]^if  ( next == null )  {     throw new NoSuchElementException ( "No more CSV records available" ) ; }^219^^^^^211^224^[Delete]^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new NoSuchElementException  (" ")  ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^next  = null ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P11_Insert_Donor_Statement]^current = getNextRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P14_Delete_Statement]^^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P11_Insert_Donor_Statement]^return getRecord (  ) ;next = getNextRecord (  ) ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^if  ( current == false )  {^218^^^^^211^224^if  ( next == null )  {^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^219^^^^^211^224^throw new NoSuchElementException  (" ")  ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^next ;^217^^^^^211^224^next = getNextRecord (  ) ;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P8_Replace_Mix]^return current;^223^^^^^211^224^return next;^[CLASS] 1  [METHOD] next [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  boolean  
[P14_Delete_Statement]^^228^^^^^226^232^return getRecord (  ) ;^[CLASS] 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  IOException  e  boolean  
[P8_Replace_Mix]^throw new UnsupportedOperationException  (" ")  ; ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  IOException  e  boolean  
[P11_Insert_Donor_Statement]^throw new UnsupportedOperationException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  IOException  e  boolean  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new RuntimeException  (" ")  ;^230^^^^^226^232^throw new RuntimeException  (" ")  ;^[CLASS] 1  [METHOD] getNextRecord [RETURN_TYPE] CSVRecord   [VARIABLES] CSVRecord  current  next  IOException  e  boolean  
[P8_Replace_Mix]^return ;^235^^^^^234^236^throw new UnsupportedOperationException  (" ")  ;^[CLASS] 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] CSVRecord  current  next  boolean  
[P11_Insert_Donor_Statement]^throw new RuntimeException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^234^236^throw new UnsupportedOperationException  (" ")  ;^[CLASS] 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] CSVRecord  current  next  boolean  
[P11_Insert_Donor_Statement]^throw new NoSuchElementException  (" ")  ;throw new UnsupportedOperationException  (" ")  ;^235^^^^^234^236^throw new UnsupportedOperationException  (" ")  ;^[CLASS] 1  [METHOD] remove [RETURN_TYPE] void   [VARIABLES] CSVRecord  current  next  boolean  
