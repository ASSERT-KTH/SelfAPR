[REPLACE]^private static  int METER_PIXEL_RATIO = 50;^5^^^^^^^[REPLACE] private static final int METER_PIXEL_RATIO = 50;^ [CLASS] Utils  
[REPLACE]^double defaultX = 1 + 2;^34^^^^^30^56^[REPLACE] double defaultX = 1;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[ADD]^^35^^^^^30^56^[ADD] double defaultY = 0;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[ADD]^^37^38^^40^^30^56^[ADD] double transformedX = m11 * defaultX + m12 * defaultY; double transformedY = m21 * defaultX + m22 * defaultY; double scalarProduct = defaultX * transformedX + defaultY * transformedY;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^double transformedY = m21 * defaultX  m22 * defaultY;^38^^^^^30^56^[REPLACE] double transformedY = m21 * defaultX + m22 * defaultY;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^double scalarProduct = defaultX * transformedX  defaultY * transformedX;^40^^^^^30^56^[REPLACE] double scalarProduct = defaultX * transformedX + defaultY * transformedY;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^double defaultVectorLength = Math.sqrt ( defaultX * defaultX transformedY ) ;^42^^^^^30^56^[REPLACE] double defaultVectorLength = Math.sqrt ( defaultX * defaultX + defaultY * defaultY ) ;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[ADD]^^43^44^45^46^47^30^56^[ADD] double transformedVectorLength = Math.sqrt ( transformedX * transformedX + transformedY * transformedY ) ;  double angleInRad = Math.acos ( scalarProduct /  ( defaultVectorLength * transformedVectorLength )  ) ; if  ( transformedY < 0 )  { angleInRad = 2 * Math.PI - angleInRad;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^double angleInRad = Math.acos ( scalarProduct   ( defaultVectorLength * transformedVectorLength )  ) ;^45^^^^^30^56^[REPLACE] double angleInRad = Math.acos ( scalarProduct /  ( defaultVectorLength * transformedVectorLength )  ) ;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^if  (m21  >=  0 )  {^46^^^^^30^56^[REPLACE] if  ( transformedY < 0 )  {^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^angleInRad = 2 * Math.PI scalarProduct;^47^^^^^30^56^[REPLACE] angleInRad = 2 * Math.PI - angleInRad;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^angleInRad = 3 * Math.PI  angleInRad;^47^^^^^30^56^[REPLACE] angleInRad = 2 * Math.PI - angleInRad;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
[REPLACE]^return transformedY;^51^^^^^30^56^[REPLACE] return angleInRad;^[METHOD] convertMatrixToRadians [TYPE] double [PARAMETER] double m11 double m12 double m21 double m22 [CLASS] Utils   [TYPE]  int METER_PIXEL_RATIO  pixel  [TYPE]  double angleInRad  defaultVectorLength  defaultX  defaultY  m11  m12  m21  m22  scalarProduct  transformedVectorLength  transformedX  transformedY  [TYPE]  boolean false  true 
