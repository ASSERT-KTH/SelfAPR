[REPLACE]^private static final SpelExpressionParser PARSER ;^105^106^^^^105^106^[REPLACE] private static final SpelExpressionParser PARSER = new SpelExpressionParser ( new SpelParserConfiguration ( false, true )  ) ;^ [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor  
[REPLACE]^private  @NonNull Map<String, Object> map;^109^^^^^^^[REPLACE] private final @NonNull Map<String, Object> map;^ [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor  
[REPLACE]^private  @NonNull ConversionService conversionService;^110^^^^^^^[REPLACE] private final @NonNull ConversionService conversionService;^ [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor  
[REPLACE]^if  ( isWritableProperty ( propertyName )  )  {^160^^^^^158^188^[REPLACE] if  ( !isWritableProperty ( propertyName )  )  {^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^return ;^161^^^^^158^188^[REPLACE] throw new NotWritablePropertyException  (" ")  ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^161^^^^^158^188^[ADD] throw new NotWritablePropertyException  (" ")  ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^context.setTypeConverter ( new PropertyTraversingMapAccessor ( type, conversionService )  ) ;^165^^^^^158^188^[REPLACE] context.addPropertyAccessor ( new PropertyTraversingMapAccessor ( type, conversionService )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^context.addPropertyAccessor ( new StandardTypeConverter ( conversionService )  ) ;^166^^^^^158^188^[REPLACE] context.setTypeConverter ( new StandardTypeConverter ( conversionService )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^context.setTypeConverter ( map ) ;^167^^^^^158^188^[REPLACE] context.setRootObject ( map ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^167^^^^^158^188^[ADD] context.setRootObject ( map ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^171^172^^^^158^188^[ADD] PropertyPath leafProperty = getPropertyPath ( propertyName ) .getLeafProperty (  ) ; TypeInformation<?> owningType = leafProperty.getOwningType (  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeInformation<?> propertyType = owningType.getProperty ( leafProperty.getSegment (  )  )  ;^172^^^^^158^188^[REPLACE] TypeInformation<?> owningType = leafProperty.getOwningType (  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeInformation<?> owningType = leafProperty.getOwningType (  )  ;^173^^^^^158^188^[REPLACE] TypeInformation<?> propertyType = owningType.getProperty ( leafProperty.getSegment (  )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^propertyType =  null.endsWith ( "]" )  ? propertyType.getActualType (  )  : propertyType;^175^^^^^158^188^[REPLACE] propertyType = propertyName.endsWith ( "]" )  ? propertyType.getActualType (  )  : propertyType;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^if  ( ! ( isWritableProperty ( propertyName )  )  && ( conversionRequired ( value, propertyType.getType (  )  )  )  {^177^^^^^158^188^[REPLACE] if  ( conversionRequired ( value, propertyType.getType (  )  )  )  {^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^value =  conversionService.convert ( null, TypeDescriptor.forObject ( null ) , typeDescriptor ) ;^184^^^^^158^188^[REPLACE] value = conversionService.convert ( value, TypeDescriptor.forObject ( value ) , typeDescriptor ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^179^180^^^^158^188^[ADD] PropertyDescriptor descriptor = BeanUtils .getPropertyDescriptor ( owningType.getType (  ) , leafProperty.getSegment (  )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^MethodParameter methodParameter = new MethodParameter ( descriptor.getReadMethod (  ) , -4 ) ;^181^^^^^158^188^[REPLACE] MethodParameter methodParameter = new MethodParameter ( descriptor.getReadMethod (  ) , -1 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0L ) ;^182^^^^^158^188^[REPLACE] TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^181^182^^^^158^188^[ADD] MethodParameter methodParameter = new MethodParameter ( descriptor.getReadMethod (  ) , -1 ) ; TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 * 2 ) ;^182^^^^^158^188^[REPLACE] TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^187^^^^^158^188^[ADD] expression.setValue ( context, value ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^249^^^^^247^264^[ADD] PropertyPath path = PropertyPath.from ( name, type ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[ADD]^return super.read ( context, target, name ) ;^251^252^253^^255^247^264^[ADD] try { return super.read ( context, target, name ) ; } catch  ( AccessException o_O )  { Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 )^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^return super .getDescriptor ( path , emptyResult )  ;^252^^^^^247^264^[REPLACE] return super.read ( context, target, name ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^this.type =  null.getType (  ) ;^262^^^^^247^264^[REPLACE] this.type = path.getType (  ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^return new TypedValue ( target, getDescriptor ( path, emptyResult )  ) ;^260^^^^^247^264^[REPLACE] return new TypedValue ( emptyResult, getDescriptor ( path, emptyResult )  ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 1 ) : CollectionFactory.createMap ( Map.class, 1 ) ;^255^256^^^^247^264^[REPLACE] Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 ) : CollectionFactory.createMap ( Map.class, 0 ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[ADD]^^253^254^255^^^247^264^[ADD] catch  ( AccessException o_O )  {  Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 )^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapDataBinder MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^private static final SpelExpressionParser PARSER ;^105^106^^^^105^106^[REPLACE] private static final SpelExpressionParser PARSER = new SpelExpressionParser ( new SpelParserConfiguration ( false, true )  ) ;^[METHOD] getDescriptor [TYPE] TypeDescriptor [PARAMETER] PropertyPath path Object emptyValue [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor valueDescriptor  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class actualPropertyType  targetType  type  [TYPE]  Object emptyValue  [TYPE]  Map map 
[REPLACE]^private  @NonNull ConversionService conversionService;^110^^^^^^^[REPLACE] private final @NonNull ConversionService conversionService;^[METHOD] getDescriptor [TYPE] TypeDescriptor [PARAMETER] PropertyPath path Object emptyValue [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor valueDescriptor  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class actualPropertyType  targetType  type  [TYPE]  Object emptyValue  [TYPE]  Map map 
[REPLACE]^private  ConversionService conversionService;^214^^^^^^^[REPLACE] private final ConversionService conversionService;^[METHOD] getDescriptor [TYPE] TypeDescriptor [PARAMETER] PropertyPath path Object emptyValue [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor valueDescriptor  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class actualPropertyType  targetType  type  [TYPE]  Object emptyValue  [TYPE]  Map map 
[REPLACE]^private Object type;^215^^^^^^^[REPLACE] private Class<?> type;^[METHOD] getDescriptor [TYPE] TypeDescriptor [PARAMETER] PropertyPath path Object emptyValue [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor valueDescriptor  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class actualPropertyType  targetType  type  [TYPE]  Object emptyValue  [TYPE]  Map map 
[REPLACE]^if  ( isWritableProperty ( propertyName )  )  {^160^^^^^158^188^[REPLACE] if  ( !isWritableProperty ( propertyName )  )  {^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^return ;^161^^^^^158^188^[REPLACE] throw new NotWritablePropertyException  (" ")  ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^context.addPropertyAccessor ( new PropertyTraversingMapAccessor ( type, conversionService )  ) ;^164^165^^^^158^188^[ADD] StandardEvaluationContext context = new StandardEvaluationContext (  ) ; context.addPropertyAccessor ( new PropertyTraversingMapAccessor ( type, conversionService )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^context.setTypeConverter ( new PropertyTraversingMapAccessor ( type, conversionService )  ) ;^165^^^^^158^188^[REPLACE] context.addPropertyAccessor ( new PropertyTraversingMapAccessor ( type, conversionService )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^context.addPropertyAccessor ( new StandardTypeConverter ( conversionService )  ) ;^166^^^^^158^188^[REPLACE] context.setTypeConverter ( new StandardTypeConverter ( conversionService )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^context.setTypeConverter ( map ) ;^167^^^^^158^188^[REPLACE] context.setRootObject ( map ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^167^^^^^158^188^[ADD] context.setRootObject ( map ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeInformation<?> propertyType = owningType.getProperty ( leafProperty.getSegment (  )  )  ;^172^^^^^158^188^[REPLACE] TypeInformation<?> owningType = leafProperty.getOwningType (  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^173^174^175^^^158^188^[ADD] TypeInformation<?> propertyType = owningType.getProperty ( leafProperty.getSegment (  )  ) ;  propertyType = propertyName.endsWith ( "]" )  ? propertyType.getActualType (  )  : propertyType;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^propertyType =  null.endsWith ( "]" )  ? propertyType.getActualType (  )  : propertyType;^175^^^^^158^188^[REPLACE] propertyType = propertyName.endsWith ( "]" )  ? propertyType.getActualType (  )  : propertyType;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^if  ( ! ( isWritableProperty ( propertyName )  )  || ( conversionRequired ( value, propertyType.getType (  )  )  )  {^177^^^^^158^188^[REPLACE] if  ( conversionRequired ( value, propertyType.getType (  )  )  )  {^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^177^178^179^180^181^158^188^[ADD] if  ( conversionRequired ( value, propertyType.getType (  )  )  )  {  PropertyDescriptor descriptor = BeanUtils .getPropertyDescriptor ( owningType.getType (  ) , leafProperty.getSegment (  )  ) ; MethodParameter methodParameter = new MethodParameter ( descriptor.getReadMethod (  ) , -1 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^184^185^^^^158^188^[ADD] value = conversionService.convert ( value, TypeDescriptor.forObject ( value ) , typeDescriptor ) ; }^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^PropertyDescriptor descriptor = BeanUtils .getPropertyDescriptor ( owningType.getActualType (  ) , leafProperty.getSegment (  )  ) ;^179^180^^^^158^188^[REPLACE] PropertyDescriptor descriptor = BeanUtils .getPropertyDescriptor ( owningType.getType (  ) , leafProperty.getSegment (  )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^^181^^^^^158^188^[ADD] MethodParameter methodParameter = new MethodParameter ( descriptor.getReadMethod (  ) , -1 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 % 1 ) ;^182^^^^^158^188^[REPLACE] TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^PropertyDescriptor descriptor = BeanUtils .getPropertyDescriptor ( owningType.getType (  ) , leafProperty.getType (  )  ) ;^179^180^^^^158^188^[REPLACE] PropertyDescriptor descriptor = BeanUtils .getPropertyDescriptor ( owningType.getType (  ) , leafProperty.getSegment (  )  ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[REPLACE]^TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 1 ) ;^182^^^^^158^188^[REPLACE] TypeDescriptor typeDescriptor = TypeDescriptor.nested ( methodParameter, 0 ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  StandardEvaluationContext context  [TYPE]  PropertyDescriptor descriptor  [TYPE]  String propertyName  [TYPE]  TypeInformation owningType  propertyType  [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor typeDescriptor  [TYPE]  Expression expression  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath leafProperty  [TYPE]  Class type  [TYPE]  Object value  [TYPE]  MethodParameter methodParameter  [TYPE]  Map map 
[ADD]^return super.read ( context, target, name ) ;^251^252^253^^255^247^264^[ADD] try { return super.read ( context, target, name ) ; } catch  ( AccessException o_O )  { Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 )^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^return super .getDescriptor ( path , emptyResult )  ;^252^^^^^247^264^[REPLACE] return super.read ( context, target, name ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^this.type =  null.getType (  ) ;^262^^^^^247^264^[REPLACE] this.type = path.getType (  ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^return super.read ( context, emptyResult, name ) ;^252^^^^^247^264^[REPLACE] return super.read ( context, target, name ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^return new TypedValue ( target, getDescriptor ( path, emptyResult )  ) ;^260^^^^^247^264^[REPLACE] return new TypedValue ( emptyResult, getDescriptor ( path, emptyResult )  ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 2 ) : CollectionFactory.createMap ( Map.class, 2 ) ;^255^256^^^^247^264^[REPLACE] Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 ) : CollectionFactory.createMap ( Map.class, 0 ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] MapPropertyAccessor PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class targetType  type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name  [TYPE]  Map map 
[REPLACE]^private final Object conversionService;^214^^^^^^^[REPLACE] private final ConversionService conversionService;^[METHOD] getDescriptor [TYPE] TypeDescriptor [PARAMETER] PropertyPath path Object emptyValue [CLASS] PropertyTraversingMapAccessor   [TYPE]  SpelExpressionParser PARSER  [TYPE]  boolean false  true  [TYPE]  TypeDescriptor valueDescriptor  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class actualPropertyType  targetType  type  [TYPE]  Object emptyValue  [TYPE]  Map map 
[REPLACE]^PropertyPath path = PropertyPath .isCollection (  )  ;^249^^^^^247^264^[REPLACE] PropertyPath path = PropertyPath.from ( name, type ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] PropertyTraversingMapAccessor   [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name 
[ADD]^return super.read ( context, target, name ) ;^251^252^253^^255^247^264^[ADD] try { return super.read ( context, target, name ) ; } catch  ( AccessException o_O )  { Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 )^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] PropertyTraversingMapAccessor   [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name 
[REPLACE]^return super .getDescriptor ( path , target )  ;^252^^^^^247^264^[REPLACE] return super.read ( context, target, name ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] PropertyTraversingMapAccessor   [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name 
[REPLACE]^this.type =  null.getType (  ) ;^262^^^^^247^264^[REPLACE] this.type = path.getType (  ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] PropertyTraversingMapAccessor   [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name 
[REPLACE]^return new TypedValue ( target, getDescriptor ( path, emptyResult )  ) ;^260^^^^^247^264^[REPLACE] return new TypedValue ( emptyResult, getDescriptor ( path, emptyResult )  ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] PropertyTraversingMapAccessor   [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name 
[ADD]^^255^256^^^^247^264^[ADD] Object emptyResult = path.isCollection (  )  ? CollectionFactory.createCollection ( List.class, 0 ) : CollectionFactory.createMap ( Map.class, 0 ) ;^[METHOD] read [TYPE] TypedValue [PARAMETER] EvaluationContext context Object target String name [CLASS] PropertyTraversingMapAccessor   [TYPE]  AccessException o_O  [TYPE]  boolean false  true  [TYPE]  ConversionService conversionService  [TYPE]  PropertyPath path  [TYPE]  Class type  [TYPE]  Object emptyResult  target  [TYPE]  EvaluationContext context  [TYPE]  String name 
