[REPLACE]^private static final Pattern IGNORE_CASE  = null ;^40^^^^^^^[REPLACE] private static final Pattern IGNORE_CASE = Pattern.compile ( "Ignor ( ing|e ) Case" ) ;^ [CLASS] Part Type IgnoreCaseType  
[REPLACE]^private IgnoreCaseType ignoreCase ;^45^^^^^^^[REPLACE] private IgnoreCaseType ignoreCase = IgnoreCaseType.NEVER;^ [CLASS] Part Type IgnoreCaseType  
[REPLACE]^private static final List<Part.Type> ALL ;^195^196^197^^^195^197^[REPLACE] private static final List<Part.Type> ALL = Arrays.asList ( IS_NOT_NULL, IS_NULL, BETWEEN, LESS_THAN, LESS_THAN_EQUAL, GREATER_THAN, GREATER_THAN_EQUAL, BEFORE, AFTER, NOT_LIKE, LIKE, STARTING_WITH, ENDING_WITH, NOT_CONTAINING, CONTAINING, NOT_IN, IN, NEAR, WITHIN, REGEX, EXISTS, TRUE, FALSE, NEGATING_SIMPLE_PROPERTY, SIMPLE_PROPERTY ) ;^ [CLASS] Part Type IgnoreCaseType  
[REPLACE]^public static final Collection<Object ALL_KEYWORDS;^199^^^^^^^[REPLACE] public static final Collection<String> ALL_KEYWORDS;^ [CLASS] Part Type IgnoreCaseType  
[REPLACE]^private final List<Part$IgnoreCaseType keywords;^209^^^^^^^[REPLACE] private final List<String> keywords;^ [CLASS] Part Type IgnoreCaseType  
[REPLACE]^BETWEEN ( 2, "IsBetween", "Between" ) , IS_NOT_NULL ( 4, "IsNotNull", "NotNull" ) , IS_NULL ( 4, "IsNull", "Null" ) , LESS_THAN ( "IsLessThan", "LessThan" ) , LESS_THAN_EQUAL ( "IsLessThanEqual", "LessThanEqual" ) , GREATER_THAN ( "IsGreaterThan", "GreaterThan" ) , GREATER_THAN_EQUAL ( "IsGreaterThanEqual", "GreaterThanEqual" ) , BEFORE ( "IsBefore", "Before" ) , AFTER ( "IsAfter", "After" ) , NOT_LIKE ( "IsNotLike", "NotLike" ) , LIKE ( "IsLike", "Like" ) , STARTING_WITH ( "IsStartingWith",^183^184^185^186^^^^[REPLACE] BETWEEN ( 2, "IsBetween", "Between" ) , IS_NOT_NULL ( 0, "IsNotNull", "NotNull" ) , IS_NULL ( 0, "IsNull", "Null" ) , LESS_THAN ( "IsLessThan", "LessThan" ) , LESS_THAN_EQUAL ( "IsLessThanEqual", "LessThanEqual" ) , GREATER_THAN ( "IsGreaterThan", "GreaterThan" ) , GREATER_THAN_EQUAL ( "IsGreaterThanEqual", "GreaterThanEqual" ) , BEFORE ( "IsBefore", "Before" ) , AFTER ( "IsAfter", "After" ) , NOT_LIKE ( "IsNotLike", "NotLike" ) , LIKE ( "IsLike", "Like" ) , STARTING_WITH ( "IsStartingWith",^ [CLASS] Part Type IgnoreCaseType  
[REPLACE]^private static final List<Part.Type> ALL ;^195^196^197^^^195^197^[REPLACE] private static final List<Part.Type> ALL = Arrays.asList ( IS_NOT_NULL, IS_NULL, BETWEEN, LESS_THAN, LESS_THAN_EQUAL, GREATER_THAN, GREATER_THAN_EQUAL, BEFORE, AFTER, NOT_LIKE, LIKE, STARTING_WITH, ENDING_WITH, NOT_CONTAINING, CONTAINING, NOT_IN, IN, NEAR, WITHIN, REGEX, EXISTS, TRUE, FALSE, NEGATING_SIMPLE_PROPERTY, SIMPLE_PROPERTY ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Type   [TYPE]  Pattern IGNORE_CASE  [TYPE]  Type AFTER  BEFORE  BETWEEN  CONTAINING  ENDING_WITH  EXISTS  FALSE  GREATER_THAN  GREATER_THAN_EQUAL  IN  IS_NOT_NULL  IS_NULL  LESS_THAN  LESS_THAN_EQUAL  LIKE  NEAR  NEGATING_SIMPLE_PROPERTY  NOT_CONTAINING  NOT_IN  NOT_LIKE  REGEX  SIMPLE_PROPERTY  STARTING_WITH  TRUE  WITHIN  type  [TYPE]  boolean false  true  [TYPE]  IgnoreCaseType ALWAYS  NEVER  WHEN_POSSIBLE  ignoreCase  [TYPE]  PropertyPath propertyPath  [TYPE]  Collection ALL_KEYWORDS  [TYPE]  List ALL  keywords  [TYPE]  int numberOfArguments  result 
[REPLACE]^public static final Collection<Part$IgnoreCaseType ALL_KEYWORDS;^199^^^^^^^[REPLACE] public static final Collection<String> ALL_KEYWORDS;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Type   [TYPE]  Pattern IGNORE_CASE  [TYPE]  Type AFTER  BEFORE  BETWEEN  CONTAINING  ENDING_WITH  EXISTS  FALSE  GREATER_THAN  GREATER_THAN_EQUAL  IN  IS_NOT_NULL  IS_NULL  LESS_THAN  LESS_THAN_EQUAL  LIKE  NEAR  NEGATING_SIMPLE_PROPERTY  NOT_CONTAINING  NOT_IN  NOT_LIKE  REGEX  SIMPLE_PROPERTY  STARTING_WITH  TRUE  WITHIN  type  [TYPE]  boolean false  true  [TYPE]  IgnoreCaseType ALWAYS  NEVER  WHEN_POSSIBLE  ignoreCase  [TYPE]  PropertyPath propertyPath  [TYPE]  Collection ALL_KEYWORDS  [TYPE]  List ALL  keywords  [TYPE]  int numberOfArguments  result 
[REPLACE]^private  List<PropertyPath keywords;^209^^^^^^^[REPLACE] private final List<String> keywords;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Type   [TYPE]  Pattern IGNORE_CASE  [TYPE]  Type AFTER  BEFORE  BETWEEN  CONTAINING  ENDING_WITH  EXISTS  FALSE  GREATER_THAN  GREATER_THAN_EQUAL  IN  IS_NOT_NULL  IS_NULL  LESS_THAN  LESS_THAN_EQUAL  LIKE  NEAR  NEGATING_SIMPLE_PROPERTY  NOT_CONTAINING  NOT_IN  NOT_LIKE  REGEX  SIMPLE_PROPERTY  STARTING_WITH  TRUE  WITHIN  type  [TYPE]  boolean false  true  [TYPE]  IgnoreCaseType ALWAYS  NEVER  WHEN_POSSIBLE  ignoreCase  [TYPE]  PropertyPath propertyPath  [TYPE]  Collection ALL_KEYWORDS  [TYPE]  List ALL  keywords  [TYPE]  int numberOfArguments  result 
[REPLACE]^"MatchesRegex", "Matches", "Regex" ) , EXISTS ( 1, "Exists" ) , TRUE ( 1, "IsTrue", "True" ) , FALSE ( 1, "IsFalse", "False" ) , NEGATING_SIMPLE_PROPERTY ( "IsNot", "Not" ) , SIMPLE_PROPERTY ( "Is", "Equals" ) ;^190^191^^^^^^[REPLACE] "MatchesRegex", "Matches", "Regex" ) , EXISTS ( 0, "Exists" ) , TRUE ( 0, "IsTrue", "True" ) , FALSE ( 0, "IsFalse", "False" ) , NEGATING_SIMPLE_PROPERTY ( "IsNot", "Not" ) , SIMPLE_PROPERTY ( "Is", "Equals" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Type   [TYPE]  Pattern IGNORE_CASE  [TYPE]  Type AFTER  BEFORE  BETWEEN  CONTAINING  ENDING_WITH  EXISTS  FALSE  GREATER_THAN  GREATER_THAN_EQUAL  IN  IS_NOT_NULL  IS_NULL  LESS_THAN  LESS_THAN_EQUAL  LIKE  NEAR  NEGATING_SIMPLE_PROPERTY  NOT_CONTAINING  NOT_IN  NOT_LIKE  REGEX  SIMPLE_PROPERTY  STARTING_WITH  TRUE  WITHIN  type  [TYPE]  boolean false  true  [TYPE]  IgnoreCaseType ALWAYS  NEVER  WHEN_POSSIBLE  ignoreCase  [TYPE]  PropertyPath propertyPath  [TYPE]  Collection ALL_KEYWORDS  [TYPE]  List ALL  keywords  [TYPE]  int numberOfArguments  result 
[REPLACE]^"MatchesRegex", "Matches", "Regex" ) , EXISTS ( 0 >> 1, "Exists" ) , TRUE ( 0 >> 1, "IsTrue", "True" ) , FALSE ( 0 >> 1, "IsFalse", "False" ) , NEGATING_SIMPLE_PROPERTY ( "IsNot", "Not" ) , SIMPLE_PROPERTY ( "Is", "Equals" ) ;^190^191^^^^190^191^[REPLACE] "MatchesRegex", "Matches", "Regex" ) , EXISTS ( 0, "Exists" ) , TRUE ( 0, "IsTrue", "True" ) , FALSE ( 0, "IsFalse", "False" ) , NEGATING_SIMPLE_PROPERTY ( "IsNot", "Not" ) , SIMPLE_PROPERTY ( "Is", "Equals" ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Type   [TYPE]  Pattern IGNORE_CASE  [TYPE]  Type AFTER  BEFORE  BETWEEN  CONTAINING  ENDING_WITH  EXISTS  FALSE  GREATER_THAN  GREATER_THAN_EQUAL  IN  IS_NOT_NULL  IS_NULL  LESS_THAN  LESS_THAN_EQUAL  LIKE  NEAR  NEGATING_SIMPLE_PROPERTY  NOT_CONTAINING  NOT_IN  NOT_LIKE  REGEX  SIMPLE_PROPERTY  STARTING_WITH  TRUE  WITHIN  type  [TYPE]  boolean false  true  [TYPE]  IgnoreCaseType ALWAYS  NEVER  WHEN_POSSIBLE  ignoreCase  [TYPE]  PropertyPath propertyPath  [TYPE]  Collection ALL_KEYWORDS  [TYPE]  List ALL  keywords  [TYPE]  int numberOfArguments  result 
