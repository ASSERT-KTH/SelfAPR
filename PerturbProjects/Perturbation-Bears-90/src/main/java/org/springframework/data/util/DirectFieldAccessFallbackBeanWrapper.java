[REPLACE]^if  ( field != null )  {^55^^^^^47^63^[REPLACE] if  ( field == null )  {^[METHOD] getPropertyValue [TYPE] Object [PARAMETER] String propertyName [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotReadablePropertyException e  [TYPE]  String propertyName 
[REPLACE]^return ;^56^57^^^^47^63^[REPLACE] throw new NotReadablePropertyException  (" ")  , propertyName, "Could not find field for property during fallback access!" ) ;^[METHOD] getPropertyValue [TYPE] Object [PARAMETER] String propertyName [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotReadablePropertyException e  [TYPE]  String propertyName 
[ADD]^^56^57^^^^47^63^[ADD] throw new NotReadablePropertyException  (" ")  , propertyName, "Could not find field for property during fallback access!" ) ;^[METHOD] getPropertyValue [TYPE] Object [PARAMETER] String propertyName [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotReadablePropertyException e  [TYPE]  String propertyName 
[ADD]^return super.getPropertyValue ( propertyName ) ;Field field = findField ( getWrappedClass (  ) , propertyName ) ;^49^50^51^^53^47^63^[ADD] try { return super.getPropertyValue ( propertyName ) ; } catch  ( NotReadablePropertyException e )  { Field field = findField ( getWrappedClass (  ) , propertyName ) ;^[METHOD] getPropertyValue [TYPE] Object [PARAMETER] String propertyName [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotReadablePropertyException e  [TYPE]  String propertyName 
[REPLACE]^return super.makeAccessible ( propertyName ) ;^50^^^^^47^63^[REPLACE] return super.getPropertyValue ( propertyName ) ;^[METHOD] getPropertyValue [TYPE] Object [PARAMETER] String propertyName [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotReadablePropertyException e  [TYPE]  String propertyName 
[ADD]^^53^^^^^47^63^[ADD] Field field = findField ( getWrappedClass (  ) , propertyName ) ;^[METHOD] getPropertyValue [TYPE] Object [PARAMETER] String propertyName [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotReadablePropertyException e  [TYPE]  String propertyName 
[REPLACE]^if  ( field != true )  {^78^^^^^70^86^[REPLACE] if  ( field == null )  {^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotWritablePropertyException e  [TYPE]  Object value  [TYPE]  String propertyName 
[REPLACE]^return ;^79^80^^^^70^86^[REPLACE] throw new NotWritablePropertyException  (" ")  , propertyName, "Could not find field for property during fallback access!", e ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotWritablePropertyException e  [TYPE]  Object value  [TYPE]  String propertyName 
[ADD]^^79^80^^^^70^86^[ADD] throw new NotWritablePropertyException  (" ")  , propertyName, "Could not find field for property during fallback access!", e ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotWritablePropertyException e  [TYPE]  Object value  [TYPE]  String propertyName 
[ADD]^super.setPropertyValue ( propertyName, value ) ;Field field = findField ( getWrappedClass (  ) , propertyName ) ;^72^73^74^^76^70^86^[ADD] try { super.setPropertyValue ( propertyName, value ) ; } catch  ( NotWritablePropertyException e )  { Field field = findField ( getWrappedClass (  ) , propertyName ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotWritablePropertyException e  [TYPE]  Object value  [TYPE]  String propertyName 
[REPLACE]^super.findField ( propertyName, value ) ;^73^^^^^70^86^[REPLACE] super.setPropertyValue ( propertyName, value ) ;^[METHOD] setPropertyValue [TYPE] void [PARAMETER] String propertyName Object value [CLASS] DirectFieldAccessFallbackBeanWrapper   [TYPE]  Field field  [TYPE]  boolean false  true  [TYPE]  NotWritablePropertyException e  [TYPE]  Object value  [TYPE]  String propertyName 
