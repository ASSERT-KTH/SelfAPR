[REPLACE]^private static final Set<Class<?>> DEFAULTS ;^34^^^^^^^[REPLACE] private static final Set<Class<?>> DEFAULTS = new HashSet<Class<?>> (  ) ;^ [CLASS] SimpleTypeHolder  
[REPLACE]^private  Set<Class<?>> simpleTypes;^68^^^^^^^[REPLACE] private final Set<Class<?>> simpleTypes;^ [CLASS] SimpleTypeHolder  
[REPLACE]^notNull ( customSimpleTypes, "CustomSimpleTypes must not be null!" )  ;^120^^^^^118^138^[REPLACE] Assert.notNull ( type, "Type must not be null!" ) ;^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^if  (  simpleTypes.contains ( type )  )  {^122^^^^^118^138^[REPLACE] if  ( Object.class.equals ( type )  || simpleTypes.contains ( type )  )  {^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^return false;^123^^^^^118^138^[REPLACE] return true;^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^if  ( null.getName (  ) .startsWith ( "java.lang" )  )  {^126^^^^^118^138^[REPLACE] if  ( type.getName (  ) .startsWith ( "java.lang" )  )  {^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REMOVE]^if  (  ( equals ( type )  )  ||  ( simpleTypes.contains ( type )  )  )  {     return true; }^126^^^^^118^138^[REMOVE] ^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^return false;^127^^^^^118^138^[REPLACE] return true;^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^if  ( true.isAssignableFrom ( type )  )  {^131^^^^^118^138^[REPLACE] if  ( clazz.isAssignableFrom ( type )  )  {^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^return false;^133^^^^^118^138^[REPLACE] return true;^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^for  ( Class<?> null : simpleTypes )  {^130^^^^^118^138^[REPLACE] for  ( Class<?> clazz : simpleTypes )  {^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^if  ( null.isAssignableFrom ( type )  )  {^131^^^^^118^138^[REPLACE] if  ( clazz.isAssignableFrom ( type )  )  {^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^return false  ;^133^^^^^118^138^[REPLACE] return true;^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
[REPLACE]^return true;^137^^^^^118^138^[REPLACE] return false;^[METHOD] isSimpleType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] SimpleTypeHolder   [TYPE]  Class clazz  type  [TYPE]  Set DEFAULTS  customSimpleTypes  simpleTypes  [TYPE]  boolean false  true 
