[REPLACE]^private  Map<ClassTypeInformation<?>, Object> typeMap;^37^^^^^^^[REPLACE] private final Map<ClassTypeInformation<?>, Object> typeMap;^ [CLASS] ConfigurableTypeInformationMapper  
[REPLACE]^Assert.notNull ( null, "SourceTypeMap must not be true!" ) ;^46^^^^^44^60^[REPLACE] Assert.notNull ( sourceTypeMap, "SourceTypeMap must not be null!" ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[ADD]^this.typeMap = new HashMap<ClassTypeInformation<?>, Object> ( sourceTypeMap.size (  )  ) ;^46^47^^^^44^60^[ADD] Assert.notNull ( sourceTypeMap, "SourceTypeMap must not be null!" ) ; this.typeMap = new HashMap<ClassTypeInformation<?>, Object> ( sourceTypeMap.size (  )  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^this.typeMap =  new HashMap<ClassTypeInformation<?>, Object> ( null.size (  )  ) ;^47^^^^^44^60^[REPLACE] this.typeMap = new HashMap<ClassTypeInformation<?>, Object> ( sourceTypeMap.size (  )  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^return ;^54^55^^^^44^60^[REPLACE] throw new IllegalArgumentException ( String.format ( "Detected mapping ambiguity! String %s cannot be mapped to more than one type!", value )  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^for  ( Entry<? extends Class<?>, String> null : sourceTypeMap.size (  )  )  {^49^^^^^44^60^[REPLACE] for  ( Entry<? extends Class<?>, String> entry : sourceTypeMap.entrySet (  )  )  {^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^if  ( typeMap .entrySet (  )   )  {^53^^^^^44^60^[REPLACE] if  ( typeMap.containsValue ( value )  )  {^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[ADD]^^54^55^56^^^44^60^[ADD] throw new IllegalArgumentException ( String.format ( "Detected mapping ambiguity! String %s cannot be mapped to more than one type!", value )  ) ; }^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[ADD]^^50^51^^53^54^44^60^[ADD] ClassTypeInformation<?> key = ClassTypeInformation.from ( entry.getKey (  )  ) ; String value = entry.getValue (  ) ; if  ( typeMap.containsValue ( value )  )  { throw new IllegalArgumentException ( String.format (^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^String value = entry.getKey (  ) ;^51^^^^^44^60^[REPLACE] String value = entry.getValue (  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[ADD]^^49^50^51^^^44^60^[ADD] for  ( Entry<? extends Class<?>, String> entry : sourceTypeMap.entrySet (  )  )  { ClassTypeInformation<?> key = ClassTypeInformation.from ( entry.getKey (  )  ) ; String value = entry.getValue (  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^ClassTypeInformation<?> key = ClassTypeInformation.from ( 0.getKey (  )  ) ;^50^^^^^44^60^[REPLACE] ClassTypeInformation<?> key = ClassTypeInformation.from ( entry.getKey (  )  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
[REPLACE]^String value = null.getValue (  ) ;^51^^^^^44^60^[REPLACE] String value = entry.getValue (  ) ;^[METHOD] <init> [TYPE] Map) [PARAMETER] String> sourceTypeMap [CLASS] ConfigurableTypeInformationMapper   [TYPE]  Entry entry  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  Map sourceTypeMap  typeMap  [TYPE]  ClassTypeInformation key 
