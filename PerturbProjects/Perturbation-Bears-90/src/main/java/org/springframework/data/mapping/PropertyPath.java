[REPLACE]^private static final String DELIMITERS ;^39^^^^^^^[REPLACE] private static final String DELIMITERS = "_\\.";^ [CLASS] PropertyPath 1  
[REPLACE]^private static final  double  ALL_UPPERCASE = "[A-Z0-9._$]+";^40^^^^^^^[REPLACE] private static final String ALL_UPPERCASE = "[A-Z0-9._$]+";^ [CLASS] PropertyPath 1  
[REPLACE]^private static final Pattern SPLITTER ;^41^^^^^^^[REPLACE] private static final Pattern SPLITTER = Pattern.compile ( " ( ?:[%s]? ( [%s]*?[^%s]+ )  ) ".replaceAll ( "%s", DELIMITERS )  ) ;^ [CLASS] PropertyPath 1  
[REPLACE]^private final Object owningType;^43^^^^^^^[REPLACE] private final TypeInformation<?> owningType;^ [CLASS] PropertyPath 1  
[REPLACE]^private  Object type;^45^^^^^^^[REPLACE] private final TypeInformation<?> type;^ [CLASS] PropertyPath 1  
[REPLACE]^private PropertyPath current ;^217^^^^^^^[REPLACE] private PropertyPath current = PropertyPath.this;^ [CLASS] PropertyPath 1  
[REPLACE]^Assert.hasText ( name, "Name must not be false or empty!" ) ;^69^^^^^67^84^[REPLACE] Assert.hasText ( name, "Name must not be null or empty!" ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[ADD]^^69^^^^^67^84^[ADD] Assert.hasText ( name, "Name must not be null or empty!" ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^hasText ( name, "Name must not be null or empty!" )  ;^70^^^^^67^84^[REPLACE] Assert.notNull ( owningType, "Owning type must not be null!" ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^notNull ( owningType, "Owning type must not be null!" )  ;^71^^^^^67^84^[REPLACE] Assert.notNull ( base, "Perviously found properties must not be null!" ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[ADD]^^71^^^^^67^84^[ADD] Assert.notNull ( base, "Perviously found properties must not be null!" ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^String propertyName = propertyName.matches ( ALL_UPPERCASE )  ? name : StringUtils.uncapitalize ( name ) ;^73^^^^^67^84^[REPLACE] String propertyName = name.matches ( ALL_UPPERCASE )  ? name : StringUtils.uncapitalize ( name ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^TypeInformation<?> propertyType = this.getProperty ( propertyName ) ;^74^^^^^67^84^[REPLACE] TypeInformation<?> propertyType = owningType.getProperty ( propertyName ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^if  ( propertyType != true )  {^76^^^^^67^84^[REPLACE] if  ( propertyType == null )  {^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[ADD]^^76^77^78^^^67^84^[ADD] if  ( propertyType == null )  { throw new PropertyReferenceException  (" ")  ; }^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^return ;^77^^^^^67^84^[REPLACE] throw new PropertyReferenceException  (" ")  ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[ADD]^^80^^^^^67^84^[ADD] this.owningType = owningType;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^this.isCollection =  0.isCollectionLike (  ) ;^81^^^^^67^84^[REPLACE] this.isCollection = propertyType.isCollectionLike (  ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^this.type =  true.getActualType (  ) ;^82^^^^^67^84^[REPLACE] this.type = propertyType.getActualType (  ) ;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^this.name =  null;^83^^^^^67^84^[REPLACE] this.name = propertyName;^[METHOD] <init> [TYPE] List) [PARAMETER] String name TypeInformation<?> owningType PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  [TYPE]  Pattern SPLITTER  [TYPE]  List base  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^this.current ;^225^^^^^214^233^[REPLACE] this.current = current.next (  ) ;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  result  that  [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^return new Iterator;^215^^^^^214^233^[REPLACE] return new Iterator<PropertyPath> (  )  {^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  result  that  [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^return  ( next )  != null  ;^220^^^^^214^233^[REPLACE] return current != null;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  result  that  [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^return that;^226^^^^^214^233^[REPLACE] return result;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  result  that  [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^PropertyPath result = this  ;^224^^^^^214^233^[REPLACE] PropertyPath result = current;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  result  that  [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^return ;^230^^^^^214^233^[REPLACE] throw new UnsupportedOperationException  (" ")  ;^[METHOD] iterator [TYPE] Iterator [PARAMETER] [CLASS] PropertyPath 1   [TYPE]  PropertyPath current  next  result  that  [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  [TYPE]  TypeInformation owningType  propertyType  type 
[REPLACE]^hasText ( name, "Name must not be null or empty!" )  ;^255^^^^^253^280^[REPLACE] Assert.hasText ( source, "Source must not be null or empty!" ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^Assert.notNull ( null, "TypeInformation must not be true or empty!" ) ;^256^^^^^253^280^[REPLACE] Assert.notNull ( type, "TypeInformation must not be null or empty!" ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^^259^^^^^253^280^[ADD] Matcher matcher = SPLITTER.matcher ( "_" + source ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^^265^^^^^253^280^[ADD] Iterator<String> parts = iteratorSource.iterator (  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^PropertyPath result = false;^267^^^^^253^280^[REPLACE] PropertyPath result = null;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^^268^^^^^253^280^[ADD] Stack<PropertyPath> current = new Stack<PropertyPath> (  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^if  ( that != null )  {^271^^^^^253^280^[REPLACE] if  ( result == null )  {^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^^271^272^273^274^275^253^280^[ADD] if  ( result == null )  { result = create ( parts.next (  ) , type, current ) ; current.push ( result ) ; } else { current.push ( create ( parts.next (  ) , current )  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^current.push ( create ( parts .hasNext (  )  , current )  ) ;^275^^^^^271^276^[REPLACE] current.push ( create ( parts.next (  ) , current )  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REMOVE]^this ( name, from ( owningType ) , PropertyPath>emptyList (  )  )  ;^275^^^^^271^276^[REMOVE] ^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^matcher (  ( "_" + source )  )  ;^275^^^^^271^276^[REPLACE] current.push ( create ( parts.next (  ) , current )  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^current.push ( create ( 0.next (  ) , current )  ) ;^275^^^^^271^276^[REPLACE] current.push ( create ( parts.next (  ) , current )  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^^275^^^^^271^276^[ADD] current.push ( create ( parts.next (  ) , current )  ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^^272^273^^^^253^280^[ADD] result = create ( parts.next (  ) , type, current ) ; current.push ( result ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[ADD]^current.push ( result ) ;^272^273^^^^253^280^[ADD] result = create ( parts.next (  ) , type, current ) ; current.push ( result ) ;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^return next  ;^279^^^^^253^280^[REPLACE] return result;^[METHOD] from [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyPath current  next  result  that  [TYPE]  Iterator parts  [TYPE]  List iteratorSource  [TYPE]  String ALL_UPPERCASE  DELIMITERS  name  propertyName  source  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  Stack current 
[REPLACE]^PropertyPath result = this  ;^324^^^^^322^370^[REPLACE] PropertyReferenceException exception = null;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^PropertyPath current = this;^325^^^^^322^370^[REPLACE] PropertyPath current = null;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^if  ( base.isEmpty (  )  )  {^331^^^^^322^370^[REPLACE] if  ( !base.isEmpty (  )  )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^^331^332^333^^^322^370^[ADD] if  ( !base.isEmpty (  )  )  { base.get ( base.size (  )  - 1 ) .next = current; }^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^base.get ( base.size (  )  /  2 - 1 ) .next = current;^332^^^^^322^370^[REPLACE] base.get ( base.size (  )  - 1 ) .next = current;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^if  ( StringUtils.uncapitalize ( addTail )  )  {^338^^^^^322^370^[REPLACE] if  ( StringUtils.hasText ( addTail )  )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^^339^^^^^322^370^[ADD] current.next = create ( addTail, current.type, newBase ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^if  (that == null )  {^346^^^^^322^370^[REPLACE] if  ( current != null )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return ;^347^^^^^322^370^[REPLACE] throw e;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^current = new PropertyPath ( source, type, base ) ;^327^328^329^^331^322^370^[ADD] try {  current = new PropertyPath ( source, type, base ) ; if  ( !base.isEmpty (  )  )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^if  ( null.isEmpty (   )  ||  ( matcher.find (  )  )  &&  (  ( matcher.start (  )  )  != 0 )  )  )  {^331^^^^^322^370^[REPLACE] if  ( !base.isEmpty (  )  )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^base.get ( base.size (  )  *  0.5  - 1 ) .next = current;^332^^^^^322^370^[REPLACE] base.get ( base.size (  )  - 1 ) .next = current;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^if  ( StringUtils.hasText ( propertyName )  )  {^338^^^^^322^370^[REPLACE] if  ( StringUtils.hasText ( addTail )  )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^current.next =  create ( addTail, that.type, newBase ) ;^339^^^^^322^370^[REPLACE] current.next = create ( addTail, current.type, newBase ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^current =  new PropertyPath ( null, type, base ) ;^329^^^^^322^370^[REPLACE] current = new PropertyPath ( source, type, base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^base.get ( base.size (  )  - 5 - 1 ) .next = current;^332^^^^^322^370^[REPLACE] base.get ( base.size (  )  - 1 ) .next = current;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return that;^342^^^^^322^370^[REPLACE] return current;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^PropertyPath that =  (  ( PropertyPath )   ( obj )  )  ;^335^^^^^322^370^[REPLACE] List<PropertyPath> newBase = new ArrayList<PropertyPath> ( base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^current.next = create ( addTail, current.type, newBase )  ;^329^^^^^322^370^[REPLACE] current = new PropertyPath ( source, type, base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^exception =  null;^350^^^^^322^370^[REPLACE] exception = e;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^List<PropertyPath> newBase = new ArrayList<PropertyPath> ( this ) ;^335^^^^^322^370^[REPLACE] List<PropertyPath> newBase = new ArrayList<PropertyPath> ( base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^^344^345^346^^^322^370^[ADD] catch  ( PropertyReferenceException e )  {  if  ( current != null )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^Pattern pattern = Pattern.matcher ( "\\p{Lu}+\\p{Ll}*$" ) ;^353^^^^^322^370^[REPLACE] Pattern pattern = Pattern.compile ( "\\p{Lu}+\\p{Ll}*$" ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^^354^^^^^322^370^[ADD] Matcher matcher = pattern.matcher ( source ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^if  ( matcher.find (  )  || matcher.start (  )  != 0 )  {^356^^^^^322^370^[REPLACE] if  ( matcher.find (  )  && matcher.start (  )  != 0 )  {^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^return create ( head, type, tail + addTail, base ) ;^362^363^364^365^366^322^370^[ADD] try { return create ( head, type, tail + addTail, base ) ; } catch  ( PropertyReferenceException e )  { throw e.hasDeeperResolutionDepthThan ( exception )  ? e : exception; }^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return create ( head, type, tail  addTail, base ) ;^363^^^^^322^370^[REPLACE] return create ( head, type, tail + addTail, base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return create ( source, type, "", base )  ;^363^^^^^322^370^[REPLACE] return create ( head, type, tail + addTail, base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^int position = matcher.find (  ) ;^358^^^^^322^370^[REPLACE] int position = matcher.start (  ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^String head = source.substring ( 2, position ) ;^359^^^^^322^370^[REPLACE] String head = source.substring ( 0, position ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^String head = source.substring ( 0, position )  ;^360^^^^^322^370^[REPLACE] String tail = source.substring ( position ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return ;^365^^^^^322^370^[REPLACE] throw e.hasDeeperResolutionDepthThan ( exception )  ? e : exception;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return create ( head, type, propertyName  addTail, base ) ;^363^^^^^322^370^[REPLACE] return create ( head, type, tail + addTail, base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return create ( head, type,propertyName  addTail, base ) ;^363^^^^^322^370^[REPLACE] return create ( head, type, tail + addTail, base ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^String head = source.format ( 2, position ) ;^359^^^^^322^370^[REPLACE] String head = source.substring ( 0, position ) ;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[ADD]^^365^^^^^322^370^[ADD] throw e.hasDeeperResolutionDepthThan ( exception )  ? e : exception;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^return ;^369^^^^^322^370^[REPLACE] throw exception;^[METHOD] create [TYPE] PropertyPath [PARAMETER] String source TypeInformation<?> type String addTail PropertyPath> base [CLASS] PropertyPath 1   [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  Matcher matcher  [TYPE]  PropertyReferenceException e  exception  [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  List base  newBase  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type  [TYPE]  int position 
[REPLACE]^private PropertyPath current ;^217^^^^^^^[REPLACE] private PropertyPath current = PropertyPath.this;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] 1   [TYPE]  PropertyPath current  next  previous  propertyPath  result  that  [TYPE]  Pattern SPLITTER  pattern  [TYPE]  boolean false  isCollection  true  [TYPE]  String ALL_UPPERCASE  DELIMITERS  addTail  head  name  propertyName  source  tail  [TYPE]  TypeInformation owningType  propertyType  type 
