[REPLACE]^private final MethodHandleLookup methodHandleLookup  = null ;^42^^^^^^^[REPLACE] private final MethodHandleLookup methodHandleLookup = MethodHandleLookup.getMethodHandleLookup (  ) ;^ [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2  
[REPLACE]^private final Map<Method, MethodHandle> methodHandleCache = new ConcurrentReferenceHashMap<Method, MethodHandle> ( 8, ReferenceType.WEAK ) ;^43^44^^^^43^44^[REPLACE] private final Map<Method, MethodHandle> methodHandleCache = new ConcurrentReferenceHashMap<Method, MethodHandle> ( 10, ReferenceType.WEAK ) ;^ [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2  
[REPLACE]^private final Constructor<Lookup> constructor  = null ;^91^^^^^^^[REPLACE] private final Constructor<Lookup> constructor = getLookupConstructor (  ) ;^ [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2  
[REPLACE]^if  ( ex.getClass (  ) .getDeclaredConstructor (  ) .equals ( "java.lang.reflect.InaccessibleObjectException" )  )  {^188^^^^^176^194^[REPLACE] if  ( ex.getClass (  ) .getName (  ) .equals ( "java.lang.reflect.InaccessibleObjectException" )  )  {^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return true;^189^^^^^176^194^[REPLACE] return null;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[ADD]^Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor ( Class.class ) ;ReflectionUtils.makeAccessible ( constructor ) ;^178^179^180^181^182^176^194^[ADD] try {  Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor ( Class.class ) ; ReflectionUtils.makeAccessible ( constructor ) ;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return null;^183^^^^^176^194^[REPLACE] return constructor;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^Constructor<Lookup> constructor = Lookup.class .getName (  )  ;^180^^^^^176^194^[REPLACE] Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor ( Class.class ) ;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return false;^183^^^^^176^194^[REPLACE] return constructor;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return this;^189^^^^^176^194^[REPLACE] return null;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[ADD]^^192^^^^^176^194^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[ADD]^^185^186^187^^^176^194^[ADD] catch  ( Exception ex )  {^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] DefaultMethodInvokingMethodInterceptor MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^private final Constructor<Lookup> constructor  = null ;^91^^^^^^^[REPLACE] private final Constructor<Lookup> constructor = getLookupConstructor (  ) ;^[METHOD] isAvailable [TYPE] boolean [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  methodHandleLookup  [TYPE]  Map methodHandleCache  [TYPE]  Constructor constructor 
[REPLACE]^return this;^189^^^^^176^194^[REPLACE] return null;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[ADD]^Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor ( Class.class ) ;ReflectionUtils.makeAccessible ( constructor ) ;^178^179^180^181^182^176^194^[ADD] try {  Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor ( Class.class ) ; ReflectionUtils.makeAccessible ( constructor ) ;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return 0;^183^^^^^176^194^[REPLACE] return constructor;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^Constructor<Lookup> constructor = Lookup.class .getName (  )  ;^180^^^^^176^194^[REPLACE] Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor ( Class.class ) ;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return this;^183^^^^^176^194^[REPLACE] return constructor;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^return false;^189^^^^^176^194^[REPLACE] return null;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[ADD]^^192^^^^^176^194^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] getLookupConstructor [TYPE] Constructor [PARAMETER] [CLASS] MethodHandleLookup 1 2   [TYPE]  boolean false  true  [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  Exception ex 
[REPLACE]^private final Constructor<Lookup> constructor ;^91^^^^^^^[REPLACE] private final Constructor<Lookup> constructor = getLookupConstructor (  ) ;^[METHOD] isAvailable [TYPE] boolean [PARAMETER] [CLASS] 1   [TYPE]  MethodHandleLookup ENCAPSULATED  OPEN  lookup  [TYPE]  Constructor constructor  [TYPE]  boolean false  true 
