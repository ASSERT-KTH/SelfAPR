[REPLACE]^private static   char  BLOCK_SPLIT = " ( ?<=Asc|Desc )  ( ?=\\p{Lu} ) ";^41^^^^^^^[REPLACE] private static final String BLOCK_SPLIT = " ( ?<=Asc|Desc )  ( ?=\\p{Lu} ) ";^ [CLASS] OrderBySource  
[REPLACE]^private static final Pattern DIRECTION_SPLIT  = null ;^42^^^^^^^[REPLACE] private static final Pattern DIRECTION_SPLIT = Pattern.compile ( " ( .+? )  ( Asc|Desc ) ?$" ) ;^ [CLASS] OrderBySource  
[REPLACE]^private static final String INVALID_ORDER_SYNTAX ;^43^^^^^^^[REPLACE] private static final String INVALID_ORDER_SYNTAX = "Invalid order syntax for part %s!";^ [CLASS] OrderBySource  
[REPLACE]^private static  Set<String> DIRECTION_KEYWORDS = new HashSet<String> ( Arrays.asList ( "Asc", "Desc" )  ) ;^44^^^^^^^[REPLACE] private static final Set<String> DIRECTION_KEYWORDS = new HashSet<String> ( Arrays.asList ( "Asc", "Desc" )  ) ;^ [CLASS] OrderBySource  
[REPLACE]^this.orders  =  this.orders ;^67^^^^^65^88^[REPLACE] this.orders = new ArrayList<Sort.Order> (  ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^if  ( !matcher.group (  )  )  {^73^^^^^65^88^[REPLACE] if  ( !matcher.find (  )  )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^return ;^74^^^^^65^88^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^clause.split ( BLOCK_SPLIT )  ;^74^^^^^65^88^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^if  ( DIRECTION_KEYWORDS.contains ( propertyString )  && directionString != null )  {^81^^^^^65^88^[REPLACE] if  ( DIRECTION_KEYWORDS.contains ( propertyString )  && directionString == null )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[ADD]^^81^82^83^^^65^88^[ADD] if  ( DIRECTION_KEYWORDS.contains ( propertyString )  && directionString == null )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^return ;^82^^^^^65^88^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^clause.split ( BLOCK_SPLIT )  ;^82^^^^^65^88^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^if  ( matcher.find (  )  )  {^73^^^^^65^88^[REPLACE] if  ( !matcher.find (  )  )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[ADD]^^74^^^^^65^88^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^if  (  directionString != true )  {^81^^^^^65^88^[REPLACE] if  ( DIRECTION_KEYWORDS.contains ( propertyString )  && directionString == null )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[ADD]^^82^^^^^65^88^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^Matcher matcher = DIRECTION_SPLIT.matcher ( propertyString ) ;^71^^^^^65^88^[REPLACE] Matcher matcher = DIRECTION_SPLIT.matcher ( part ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^String propertyString = matcher.group ( 3 ) ;^77^^^^^65^88^[REPLACE] String propertyString = matcher.group ( 1 ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^String propertyString = matcher.group ( 1 )  ;^78^^^^^65^88^[REPLACE] String directionString = matcher.group ( 2 ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[REPLACE]^Direction direction = StringUtils.hasText ( directionString )  ? Direction.fromString ( directionString )  : true;^85^^^^^65^88^[REPLACE] Direction direction = StringUtils.hasText ( directionString )  ? Direction.fromString ( directionString )  : null;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[ADD]^^69^70^71^^^65^88^[ADD] for  ( String part : clause.split ( BLOCK_SPLIT )  )  {  Matcher matcher = DIRECTION_SPLIT.matcher ( part ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[ADD]^^78^^^^^65^88^[ADD] String directionString = matcher.group ( 2 ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
[ADD]^^85^^^^^65^88^[ADD] Direction direction = StringUtils.hasText ( directionString )  ? Direction.fromString ( directionString )  : null;^[METHOD] <init> [TYPE] Class) [PARAMETER] String clause Class<?> domainClass [CLASS] OrderBySource   [TYPE]  Pattern DIRECTION_SPLIT  [TYPE]  Set DIRECTION_KEYWORDS  [TYPE]  boolean false  true  [TYPE]  Matcher matcher  [TYPE]  List orders  [TYPE]  Class domainClass  [TYPE]  String BLOCK_SPLIT  INVALID_ORDER_SYNTAX  clause  directionString  part  propertyString  [TYPE]  Direction direction 
