[REPLACE]^private final Object projectionFactory;^51^^^^^^^[REPLACE] private final SpelAwareProxyProjectionFactory projectionFactory;^ [CLASS] ProjectingJackson2HttpMessageConverter  
[REPLACE]^private final Map<Class<?>, Boolean> supportedTypesCache ;^52^^^^^^^[REPLACE] private final Map<Class<?>, Boolean> supportedTypesCache = new ConcurrentReferenceHashMap<Class<?>, Boolean> (  ) ;^ [CLASS] ProjectingJackson2HttpMessageConverter  
[REPLACE]^if  ( canRead ( mediaType )  )  {^116^^^^^114^132^[REPLACE] if  ( !canRead ( mediaType )  )  {^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^return true;^117^^^^^114^132^[REPLACE] return false;^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^ResolvableType owner  =  ResolvableType.forClass ( contextClass ) ;^120^^^^^114^132^[REPLACE] ResolvableType owner = contextClass == null ? null : ResolvableType.forClass ( contextClass ) ;^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^Class<?> rawType = ResolvableType.forType ( type, owner )  .getObjectMapper (  )  ;^121^^^^^114^132^[REPLACE] Class<?> rawType = ResolvableType.forType ( type, owner ) .resolve ( Object.class ) ;^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^Boolean result = supportedTypesCache .put ( null , 0 )  ;^122^^^^^114^132^[REPLACE] Boolean result = supportedTypesCache.get ( rawType ) ;^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^if  ( result == null )  {^124^^^^^114^132^[REPLACE] if  ( result != null )  {^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[ADD]^return result;^124^125^126^^^114^132^[ADD] if  ( result != null )  { return result; }^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^result = rawType.isInterface (  )   !=  AnnotationUtils.findAnnotation ( rawType, ProjectedPayload.class )  != null;^128^^^^^114^132^[REPLACE] result = rawType.isInterface (  )  && AnnotationUtils.findAnnotation ( rawType, ProjectedPayload.class )  != null;^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
[REPLACE]^supportedTypesCache.put ( false, result ) ;^129^^^^^114^132^[REPLACE] supportedTypesCache.put ( rawType, result ) ;^[METHOD] canRead [TYPE] boolean [PARAMETER] Type type Class<?> contextClass MediaType mediaType [CLASS] ProjectingJackson2HttpMessageConverter   [TYPE]  Type type  [TYPE]  boolean false  true  [TYPE]  SpelAwareProxyProjectionFactory projectionFactory  [TYPE]  MediaType mediaType  [TYPE]  Class contextClass  rawType  [TYPE]  ResolvableType owner  [TYPE]  Boolean result  [TYPE]  Map supportedTypesCache 
