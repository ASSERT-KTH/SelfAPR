[REPLACE]^private final Object metadata;^46^^^^^^^[REPLACE] private final RepositoryMetadata metadata;^ [CLASS] QueryMethod 1  
[REPLACE]^private  Object method;^47^^^^^^^[REPLACE] private final Method method;^ [CLASS] QueryMethod 1  
[REPLACE]^private  Class<?> unwrappedReturnType;^48^^^^^^^[REPLACE] private final Class<?> unwrappedReturnType;^ [CLASS] QueryMethod 1  
[REPLACE]^private final Object parameters;^49^^^^^^^[REPLACE] private final Parameters<?, ?> parameters;^ [CLASS] QueryMethod 1  
[REPLACE]^Assert.notEmpty ( method, "Method must not be false!" ) ;^64^^^^^62^101^[REPLACE] Assert.notNull ( method, "Method must not be null!" ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^Assert.notNull ( metadata, "Repository metadata must not be false!" ) ;^65^^^^^62^101^[REPLACE] Assert.notNull ( metadata, "Repository metadata must not be null!" ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^notNull ( method, "Method must not be null!" )  ;^66^^^^^62^101^[REPLACE] Assert.notNull ( factory, "ProjectionFactory must not be null!" ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^if  ( getNumberOfOccurences ( method, type )   >=  1 )  {^69^^^^^62^101^[REPLACE] if  ( getNumberOfOccurences ( method, type )  > 1 )  {^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[ADD]^^69^70^71^72^^62^101^[ADD] if  ( getNumberOfOccurences ( method, type )  > 1 )  { throw new IllegalStateException ( String.format ( "Method must only one argument of type %s! Offending method: %s", type.getSimpleName (  ) , method.toString (  )  )  ) ; }^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^throw new IllegalStateException ( format (  ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s" ) , method.toString (  )  )  )  ;^70^71^^^^62^101^[REPLACE] throw new IllegalStateException ( String.format ( "Method must only one argument of type %s! Offending method: %s", type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^throw new IllegalStateException ( String.format ( "Method must only one argument of null %s! Offending method: %s", type.getSimpleName (  ) , method.toString (  )  )  ) ;^70^71^^^^62^101^[REPLACE] throw new IllegalStateException ( String.format ( "Method must only one argument of type %s! Offending method: %s", type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^type.isArray (  ) , method.toString (  )  )  ) ;^71^^^^^62^101^[REPLACE] type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^type.getSimpleName (  ) , method.getName (  )  )  ) ;^71^^^^^62^101^[REPLACE] type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^for  ( Class<? <=  type : Parameters.TYPES )  {^68^^^^^62^101^[REPLACE] for  ( Class<?> type : Parameters.TYPES )  {^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^if  ( getNumberOfOccurences ( method, type )   ==  1L )  {^69^^^^^62^101^[REPLACE] if  ( getNumberOfOccurences ( method, type )  > 1 )  {^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^return ;^70^71^^^^62^101^[REPLACE] throw new IllegalStateException ( String.format ( "Method must only one argument of type %s! Offending method: %s", type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[ADD]^^71^^^^^62^101^[ADD] type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^type.getSimpleName (  ) , method .getReturnType (  )   )  ) ;^71^^^^^62^101^[REPLACE] type.getSimpleName (  ) , method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^this.method =  null;^75^^^^^62^101^[REPLACE] this.method = method;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^this.unwrappedReturnType =  potentiallyUnwrapReturnTypeFor ( null ) ;^76^^^^^62^101^[REPLACE] this.unwrappedReturnType = potentiallyUnwrapReturnTypeFor ( method ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^this.parameters =  createParameters ( null ) ;^77^^^^^62^101^[REPLACE] this.parameters = createParameters ( method ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^this.metadata =  null;^78^^^^^62^101^[REPLACE] this.metadata = metadata;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^if  ( isStreamQuery (  )  )  {^82^^^^^62^101^[REPLACE] if  ( !isStreamQuery (  )  )  {^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^assertReturnTypeAssignable ( method, QueryExecutionConverters.isSingleValue (  )  ) ;^83^^^^^62^101^[REPLACE] assertReturnTypeAssignable ( method, QueryExecutionConverters.getAllowedPageableTypes (  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[ADD]^^83^^^^^62^101^[ADD] assertReturnTypeAssignable ( method, QueryExecutionConverters.getAllowedPageableTypes (  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^( supports ( returnType )  )  ;^83^^^^^62^101^[REPLACE] assertReturnTypeAssignable ( method, QueryExecutionConverters.getAllowedPageableTypes (  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REMOVE]^notNull ( method, "Method must not be null!" )  ;^83^^^^^62^101^[REMOVE] ^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[ADD]^^86^87^88^89^^62^101^[ADD] if  ( hasParameterOfType ( method, Sort.class )  )  { throw new IllegalStateException ( String.format ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ; }^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^return ;^87^88^^^^62^101^[REPLACE] throw new IllegalStateException ( String.format ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^throw new IllegalStateException ( String.format ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead Offending method: %s", method.toString (  )  )  ) ;^87^88^^^^62^101^[REPLACE] throw new IllegalStateException ( String.format ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^( types.toString (  )  )  ;^88^^^^^62^101^[REPLACE] + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[ADD]^^87^88^89^^^62^101^[ADD] throw new IllegalStateException ( String.format ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ; }^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^throw new IllegalStateException ( format ( "Method must only one argument of type %s! Offending method: %s", type.getSimpleName (  ) , method.toString (  )  )  )  ;^87^88^^^^62^101^[REPLACE] throw new IllegalStateException ( String.format ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^+ "Use sorting capabilities on Pageable instead! Offending method: %s", method .getReturnType (  )   )  ) ;^88^^^^^62^101^[REPLACE] + "Use sorting capabilities on Pageable instead! Offending method: %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^Assert.notNull ( this.parameters, String.format ( "Parameters extracted from method '%s' must not be false!", method.getName (  )  )  ) ;^92^93^^^^62^101^[REPLACE] Assert.notNull ( this.parameters, String.format ( "Parameters extracted from method '%s' must not be null!", method.getName (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[ADD]^^92^93^^^^62^101^[ADD] Assert.notNull ( this.parameters, String.format ( "Parameters extracted from method '%s' must not be null!", method.getName (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^String.format ( "Parameters extracted from method '%s' must not be false!", method.getName (  )  )  ) ;^93^^^^^62^101^[REPLACE] String.format ( "Parameters extracted from method '%s' must not be null!", method.getName (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^String.format ( "Parameters extracted from method '%s' must not be null!", method .getReturnType (  )   )  ) ;^93^^^^^62^101^[REPLACE] String.format ( "Parameters extracted from method '%s' must not be null!", method.getName (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REMOVE]^if  ( hasParameterOfType ( method, class )  )  {     throw new IllegalStateException ( format (  ( "Method must not have Pageable *and* Sort parameter. " + "Use sorting capabilities on Pageable instead! Offending method: %s" ) , method.toString (  )  )  ) ; }^95^^^^^62^101^[REMOVE] ^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^Assert.isTrue ( this.parameters.hasPageableParameter (  ) , String.format ( "Paging query needs to have a Pageable parameter! Offending method %s", method.getName (  )  )  ) ;^96^97^^^^62^101^[REPLACE] Assert.isTrue ( this.parameters.hasPageableParameter (  ) , String.format ( "Paging query needs to have a Pageable parameter! Offending method %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^String.format ( "Paging query needs to have a Pageable parameter! Offending method %s", method .getReturnType (  )   )  ) ;^97^^^^^62^101^[REPLACE] String.format ( "Paging query needs to have a Pageable parameter! Offending method %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^( types.toString (  )  )  ;^97^^^^^62^101^[REPLACE] String.format ( "Paging query needs to have a Pageable parameter! Offending method %s", method.toString (  )  )  ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^this.resultProcessor =  new ResultProcessor ( this, null ) ;^100^^^^^62^101^[REPLACE] this.resultProcessor = new ResultProcessor ( this, factory ) ;^[METHOD] <init> [TYPE] ProjectionFactory) [PARAMETER] Method method RepositoryMetadata metadata ProjectionFactory factory [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  ProjectionFactory factory  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor 
[REPLACE]^if  (true (  )  ) {^179^^^^^177^196^[REPLACE] if  ( isPageQuery (  )  || isSliceQuery (  )  )  {^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^return true;^180^^^^^177^196^[REPLACE] return false;^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[ADD]^^183^^^^^177^196^[ADD] Class<?> returnType = method.getReturnType (  ) ;^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^if  ( QueryExecutionConverters.supports ( returnType )  && QueryExecutionConverters.isSingleValue ( returnType )  )  {^185^^^^^177^196^[REPLACE] if  ( QueryExecutionConverters.supports ( returnType )  && !QueryExecutionConverters.isSingleValue ( returnType )  )  {^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[ADD]^^185^186^187^^^177^196^[ADD] if  ( QueryExecutionConverters.supports ( returnType )  && !QueryExecutionConverters.isSingleValue ( returnType )  )  { return true; }^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^return false;^186^^^^^177^196^[REPLACE] return true;^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^if  ( QueryExecutionConverters.supports ( unwrappedReturnType ) || QueryExecutionConverters.supports ( unwrappedReturnType )  )  {^189^190^^^^177^196^[REPLACE] if  ( QueryExecutionConverters.supports ( unwrappedReturnType ) && QueryExecutionConverters.isSingleValue ( unwrappedReturnType )  )  {^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[ADD]^^189^190^191^192^^177^196^[ADD] if  ( QueryExecutionConverters.supports ( unwrappedReturnType ) && QueryExecutionConverters.isSingleValue ( unwrappedReturnType )  )  { return false; }^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^return true;^191^^^^^189^192^[REPLACE] return false;^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^return true;^191^^^^^177^196^[REPLACE] return false;^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^return org.springframework.util.ClassUtils.isAssignable ( Iterable.class, unwrappedReturnType ) ;^194^195^^^^177^196^[REPLACE] return org.springframework.util.ClassUtils.isAssignable ( Iterable.class, unwrappedReturnType ) || unwrappedReturnType.isArray (  ) ;^[METHOD] isCollectionQuery [TYPE] boolean [PARAMETER] [CLASS] QueryMethod 1   [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Parameters parameters  [TYPE]  Method method  [TYPE]  boolean false  true  [TYPE]  ResultProcessor resultProcessor  [TYPE]  RepositoryMetadata metadata 
[REPLACE]^Assert.notNull ( method, "Method must not be this!" ) ;^284^^^^^282^298^[REPLACE] Assert.notNull ( method, "Method must not be null!" ) ;^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[REMOVE]^notNull ( metadata, "Repository metadata must not be null!" )  ;^284^^^^^282^298^[REMOVE] ^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[REPLACE]^Assert.notEmpty ( types, "Types must not be false or empty!" ) ;^285^^^^^282^298^[REPLACE] Assert.notEmpty ( types, "Types must not be null or empty!" ) ;^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[ADD]^^288^289^^^^282^298^[ADD] returnType = QueryExecutionConverters.isSingleValue ( returnType.getType (  )  )  ? returnType.getComponentType (  ) : returnType;^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[REPLACE]^if  ( type.isAssignableFrom ( this.getType (  )  )  )  {^292^^^^^282^298^[REPLACE] if  ( type.isAssignableFrom ( returnType.getType (  )  )  )  {^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[REPLACE]^for  ( Class<?> type : 1 )  {^291^^^^^282^298^[REPLACE] for  ( Class<?> type : types )  {^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[REPLACE]^if  ( type .getSimpleName (  )   )  {^292^^^^^282^298^[REPLACE] if  ( type.isAssignableFrom ( returnType.getType (  )  )  )  {^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[ADD]^^292^293^294^^^282^298^[ADD] if  ( type.isAssignableFrom ( returnType.getType (  )  )  )  { return; }^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[ADD]^^297^^^^^282^298^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
[REPLACE]^method.toString (  )  ;^297^^^^^282^298^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] assertReturnTypeAssignable [TYPE] void [PARAMETER] Method method Class<?>> types [CLASS] QueryMethod 1   [TYPE]  Parameters parameters  [TYPE]  Set types  [TYPE]  boolean false  true  [TYPE]  RepositoryMetadata metadata  [TYPE]  Class domainClass  methodDomainClass  repositoryDomainClass  returnType  type  unwrappedReturnType  [TYPE]  Method method  [TYPE]  ResultProcessor resultProcessor  [TYPE]  TypeInformation returnType 
