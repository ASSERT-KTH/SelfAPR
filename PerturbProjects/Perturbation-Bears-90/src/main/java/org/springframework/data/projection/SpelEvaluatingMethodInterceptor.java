[REPLACE]^private static final Object PARSER_CONTEXT = new TemplateObject (  ) ;^48^^^^^^^[REPLACE] private static final ParserContext PARSER_CONTEXT = new TemplateParserContext (  ) ;^ [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper  
[REPLACE]^private final Object evaluationContext;^50^^^^^^^[REPLACE] private final EvaluationContext evaluationContext;^ [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper  
[REPLACE]^private  Map<Integer, Object expressions;^52^^^^^^^[REPLACE] private final Map<Integer, Expression> expressions;^ [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper  
[REPLACE]^Assert.notNull ( delegate, "Delegate MethodInterceptor must not be this!" ) ;^68^^^^^66^87^[REPLACE] Assert.notNull ( delegate, "Delegate MethodInterceptor must not be null!" ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^Assert.notNull ( target, "Target object must not be this!" ) ;^69^^^^^66^87^[REPLACE] Assert.notNull ( target, "Target object must not be null!" ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[ADD]^^69^70^^^^66^87^[ADD] Assert.notNull ( target, "Target object must not be null!" ) ; Assert.notNull ( parser, "SpelExpressionParser must not be null!" ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^notNull ( delegate, "Delegate MethodInterceptor must not be null!" )  ;^70^^^^^66^87^[REPLACE] Assert.notNull ( parser, "SpelExpressionParser must not be null!" ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^Assert.notNull ( targetInterface, "Target interface must not be this!" ) ;^71^^^^^66^87^[REPLACE] Assert.notNull ( targetInterface, "Target interface must not be null!" ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^if  ( !Object instanceof Map )  {^75^^^^^66^87^[REPLACE] if  ( target instanceof Map )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^evaluationContext.setBeanResolver ( new MapAccessor (  )  ) ;^76^^^^^66^87^[REPLACE] evaluationContext.addPropertyAccessor ( new MapAccessor (  )  ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^if  ( beanFactory == null )  {^79^^^^^66^87^[REPLACE] if  ( beanFactory != null )  {^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^evaluationContext.addPropertyAccessor ( new BeanFactoryResolver ( beanFactory )  ) ;^80^^^^^66^87^[REPLACE] evaluationContext.setBeanResolver ( new BeanFactoryResolver ( beanFactory )  ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^this.expressions =  potentiallyCreateExpressionsForMethodsOnTargetInterface ( null, targetInterface ) ;^83^^^^^66^87^[REPLACE] this.expressions = potentiallyCreateExpressionsForMethodsOnTargetInterface ( parser, targetInterface ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^this.evaluationContext =  null;^85^^^^^66^87^[REPLACE] this.evaluationContext = evaluationContext;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^this.delegate =  null;^86^^^^^66^87^[REPLACE] this.delegate = delegate;^[METHOD] <init> [TYPE] Class) [PARAMETER] MethodInterceptor delegate Object target BeanFactory beanFactory SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  StandardEvaluationContext evaluationContext  [TYPE]  boolean false  true  [TYPE]  BeanFactory beanFactory  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[ADD]^^101^^^^^99^119^[ADD] Map<Integer, Expression> expressions = new HashMap<Integer, Expression> (  ) ;^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^if  ( !method.isAnnotationPresent ( Value.class  )  || ! ( hasText ( value.value (  )  )  )  )  )  {^105^^^^^99^119^[REPLACE] if  ( !method.isAnnotationPresent ( Value.class )  )  {^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^if  ( StringUtils.hasText ( value.value (  )  )  )  {^111^^^^^99^119^[REPLACE] if  ( !StringUtils.hasText ( value.value (  )  )  )  {^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[ADD]^^111^112^113^^^99^119^[ADD] if  ( !StringUtils.hasText ( value.value (  )  )  )  { throw new IllegalStateException  (" ")  ; }^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[ADD]^^112^^^^^99^119^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[ADD]^^103^104^105^106^107^99^119^[ADD] for  ( Method method : targetInterface.getMethods (  )  )  {  if  ( !method.isAnnotationPresent ( Value.class )  )  { continue; }^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^if  ( ! ( hasText ( value.value (  )  )  )  && ( !method.isAnnotationPresent ( Value.class )  )  {^105^^^^^99^119^[REPLACE] if  ( !method.isAnnotationPresent ( Value.class )  )  {^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^if  ( ! ( method.isAnnotationPresent ( class )  )  || ( !StringUtils.hasText ( value.value (  )  )  )  {^111^^^^^99^119^[REPLACE] if  ( !StringUtils.hasText ( value.value (  )  )  )  {^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^return ;^112^^^^^99^119^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^Value value = method .hashCode (  )  ;^109^^^^^99^119^[REPLACE] Value value = method.getAnnotation ( Value.class ) ;^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
[REPLACE]^return Collections.unmodifiableMap ( this ) ;^118^^^^^99^119^[REPLACE] return Collections.unmodifiableMap ( expressions ) ;^[METHOD] potentiallyCreateExpressionsForMethodsOnTargetInterface [TYPE] Map [PARAMETER] SpelExpressionParser parser Class<?> targetInterface [CLASS] SpelEvaluatingMethodInterceptor TargetWrapper   [TYPE]  MethodInterceptor delegate  [TYPE]  SpelExpressionParser parser  [TYPE]  boolean false  true  [TYPE]  Value value  [TYPE]  Object target  [TYPE]  Class targetInterface  [TYPE]  EvaluationContext evaluationContext  [TYPE]  Method method  [TYPE]  ParserContext PARSER_CONTEXT  [TYPE]  Map expressions 
