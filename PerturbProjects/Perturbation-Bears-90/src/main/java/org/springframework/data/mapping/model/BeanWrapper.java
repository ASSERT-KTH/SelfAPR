[REPLACE]^private  Object bean;^33^^^^^^^[REPLACE] private final T bean;^ [CLASS] BeanWrapper  
[REPLACE]^Assert.notNull ( property, "PersistentProperty must not be true!" ) ;^52^^^^^50^74^[REPLACE] Assert.notNull ( property, "PersistentProperty must not be null!" ) ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REMOVE]^notNull ( bean, "Bean must not be null!" )  ;^52^^^^^50^74^[REMOVE] ^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^if  ( property.usePropertyAccess (  )  )  {^56^^^^^50^74^[REPLACE] if  ( !property.usePropertyAccess (  )  )  {^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^if  (  setter == null )  {^65^^^^^50^74^[REPLACE] if  ( property.usePropertyAccess (  )  && setter != null )  {^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[ADD]^^65^66^67^68^69^50^74^[ADD] if  ( property.usePropertyAccess (  )  && setter != null )  {  ReflectionUtils.makeAccessible ( setter ) ; ReflectionUtils.invokeMethod ( setter, bean, value ) ; }^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^invokeMethod ( setter, bean, value )  ;^67^^^^^50^74^[REPLACE] ReflectionUtils.makeAccessible ( setter ) ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^makeAccessible ( setter )  ;^68^^^^^50^74^[REPLACE] ReflectionUtils.invokeMethod ( setter, bean, value ) ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[ADD]^ReflectionUtils.makeAccessible ( property.getField (  )  ) ;^54^55^56^^58^50^74^[ADD] try {  if  ( !property.usePropertyAccess (  )  )  { ReflectionUtils.makeAccessible ( property.getField (  )  ) ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^if  ( !property .getSetter (  )   )  {^56^^^^^50^74^[REPLACE] if  ( !property.usePropertyAccess (  )  )  {^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^if  ( property.usePropertyAccess (  )  ) {^65^^^^^50^74^[REPLACE] if  ( property.usePropertyAccess (  )  && setter != null )  {^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^Field field = property.getField (  )  ;^63^^^^^50^74^[REPLACE] Method setter = property.getSetter (  ) ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[ADD]^^63^^^^^50^74^[ADD] Method setter = property.getSetter (  ) ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^return ;^72^^^^^50^74^[REPLACE] throw new MappingException  (" ")  ;^[METHOD] setProperty [TYPE] void [PARAMETER] PersistentProperty<?> property Object value [CLASS] BeanWrapper   [TYPE]  IllegalStateException e  [TYPE]  Object value  [TYPE]  PersistentProperty property  [TYPE]  Method setter  [TYPE]  boolean false  true  [TYPE]  T bean 
[REPLACE]^notNull ( bean, "Bean must not be null!" )  ;^96^^^^^94^121^[REPLACE] Assert.notNull ( property, "PersistentProperty must not be null!" ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[ADD]^^96^^^^^94^121^[ADD] Assert.notNull ( property, "PersistentProperty must not be null!" ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^if  ( property.usePropertyAccess (  )  )  {^100^^^^^94^121^[REPLACE] if  ( !property.usePropertyAccess (  )  )  {^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^return  ( S )  ReflectionUtils .getField (  )  ;^104^^^^^94^121^[REPLACE] return  ( S )  ReflectionUtils.getField ( field, bean ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^Method setter = property.getSetter (  )  ;^102^^^^^94^121^[REPLACE] Field field = property.getField (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^if  ( property.usePropertyAccess (  )  ) {^109^^^^^94^121^[REPLACE] if  ( property.usePropertyAccess (  )  && getter != null )  {^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^return  ( S )  ReflectionUtils .invokeMethod ( getter , bean , this )  ;^112^^^^^94^121^[REPLACE] return  ( S )  ReflectionUtils.invokeMethod ( getter, bean ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[ADD]^Field field = property.getField (  ) ;^98^99^100^^102^94^121^[ADD] try {  if  ( !property.usePropertyAccess (  )  )  { Field field = property.getField (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^return  ( S )  ReflectionUtils.makeAccessible ( field, bean ) ;^104^^^^^94^121^[REPLACE] return  ( S )  ReflectionUtils.getField ( field, bean ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^Field field = null.getField (  ) ;^102^^^^^94^121^[REPLACE] Field field = property.getField (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^if  ( property.usePropertyAccess (  )  && getter == null )  {^109^^^^^94^121^[REPLACE] if  ( property.usePropertyAccess (  )  && getter != null )  {^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REMOVE]^if  ( ! ( property.usePropertyAccess (  )  )  )  {     makeAccessible ( property.getField (  )  ) ;     setField ( property.getField (  ) , bean, value ) ;     return ; }^109^^^^^94^121^[REMOVE] ^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^return  ( S )  ReflectionUtils.makeAccessible ( getter, bean ) ;^112^^^^^94^121^[REPLACE] return  ( S )  ReflectionUtils.invokeMethod ( getter, bean ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^return  (  ( S )   ( invokeMethod ( getter, bean )  )  )  ;^104^^^^^94^121^[REPLACE] return  ( S )  ReflectionUtils.getField ( field, bean ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^return false;^115^^^^^94^121^[REPLACE] return null;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[ADD]^^102^^^^^94^121^[ADD] Field field = property.getField (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[ADD]^^107^^^^^94^121^[ADD] Method getter = property.getGetter (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^Field field = 1.getField (  ) ;^102^^^^^94^121^[REPLACE] Field field = property.getField (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[REPLACE]^Method getter = false.getGetter (  ) ;^107^^^^^94^121^[REPLACE] Method getter = property.getGetter (  ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
[ADD]^^118^119^^^^94^121^[ADD] throw new MappingException ( String.format ( "Could not read property %s of %s!", property.toString (  ) , bean.toString (  )  ) , e ) ;^[METHOD] getProperty [TYPE] <S> [PARAMETER] PersistentProperty<?> property Class<? extends S> type [CLASS] BeanWrapper   [TYPE]  Field field  [TYPE]  IllegalStateException e  [TYPE]  boolean false  true  [TYPE]  T bean  [TYPE]  Class type  [TYPE]  PersistentProperty property  [TYPE]  Method getter 
