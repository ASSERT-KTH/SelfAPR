[REPLACE]^private static final long serialVersionUID  = null ;^24^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] AsWrapperTypeDeserializer  
[ADD]^Object typeId = p.getTypeId (  ) ;return _deserializeWithNativeTypeId ( p, ctxt, typeId ) ;^82^83^84^85^86^80^122^[ADD] if  ( p.canReadTypeId (  )  )  { Object typeId = p.getTypeId (  ) ; if  ( typeId != null )  { return _deserializeWithNativeTypeId ( p, ctxt, typeId ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( typeId == true )  {^84^^^^^80^122^[REPLACE] if  ( typeId != null )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^return _deserializeWithNativeTypeId ( p, ctxt, typeId ) ;^84^85^86^^^80^122^[ADD] if  ( typeId != null )  { return _deserializeWithNativeTypeId ( p, ctxt, typeId ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^83^^^^^80^122^[ADD] Object typeId = p.getTypeId (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = p.nextToken (  ) ;^89^^^^^80^122^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.START_OBJECT )  {^90^^^^^80^122^[REPLACE] if  ( t == JsonToken.START_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^}  else {^96^^^^^80^122^[REPLACE] } else if  ( t != JsonToken.FIELD_NAME )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME,  (  ( "need JSON String that contains type id  ( for subtype of " +  ( baseTypeName (  )  )  )  + " ) " )  )  ;^97^98^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( p, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "baseTypeName (  )  ) ;^97^98^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^97^98^^^^80^122^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.START_OBJECT, "need JSON Object to contain As.WRAPPER_OBJECT type information for class "+baseTypeName (  )  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (  )   ==  JsonToken.FIELD_NAME )  {^92^^^^^80^122^[REPLACE] if  ( p.nextToken (  )  != JsonToken.FIELD_NAME )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( p, JsonToken.START_OBJECT,  ( "need JSON Object to contain As.WRAPPER_OBJECT type information for class " +  ( baseTypeName (  )  )  )  )  ;^93^94^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "baseTypeName (  ) " ) " ) ;^93^94^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^94^95^^^^80^122^[ADD] "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return ;^93^94^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (   )  && t ==  ( JsonToken.START_OBJECT )  )   ==  JsonToken.FIELD_NAME )  {^92^^^^^80^122^[REPLACE] if  ( p.nextToken (  )  != JsonToken.FIELD_NAME )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^92^93^94^95^^80^122^[ADD] if  ( p.nextToken (  )  != JsonToken.FIELD_NAME )  { throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^93^94^^^^80^122^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.FIELD_NAME, "need JSON String that contains type id  ( for subtype of "+baseTypeName (  ) +" ) " ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^}  if  ( t  ==  JsonToken.FIELD_NAME )  {^96^^^^^80^122^[REPLACE] } else if  ( t != JsonToken.FIELD_NAME )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^final String typeId = p.getTypeId (  ) ;^100^^^^^80^122^[REPLACE] final String typeId = p.getText (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^p.getTypeId (  ) ;^102^^^^^80^122^[REPLACE] p.nextToken (  ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REMOVE]^p.canReadTypeId (  )  ;^102^^^^^80^122^[REMOVE] ^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  (  p.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^105^^^^^80^122^[REPLACE] if  ( _typeIdVisible && p.getCurrentToken (  )  == JsonToken.START_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^p =  JsonParserSequence.createFlattened ( null.asParser ( p ) , p ) ;^111^^^^^80^122^[REPLACE] p = JsonParserSequence.createFlattened ( tb.asParser ( p ) , p ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^TokenBuffer tb = new TokenBuffer ( true, false ) ;^107^^^^^80^122^[REPLACE] TokenBuffer tb = new TokenBuffer ( null, false ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^TokenBuffer tb = new TokenBuffer ( this, false ) ;^107^^^^^80^122^[REPLACE] TokenBuffer tb = new TokenBuffer ( null, false ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^115^^^^^80^122^[ADD] Object value = deser.deserialize ( p, ctxt ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (   )  || t !=  ( JsonToken.FIELD_NAME )  )   ==  JsonToken.END_OBJECT )  {^117^^^^^80^122^[REPLACE] if  ( p.nextToken (  )  != JsonToken.END_OBJECT )  {^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^117^118^119^120^^80^122^[ADD] if  ( p.nextToken (  )  != JsonToken.END_OBJECT )  { throw ctxt.wrongTokenException ( p, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ; }^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( p, JsonToken.START_OBJECT,  ( "need JSON Object to contain As.WRAPPER_OBJECT type information for class " +  ( baseTypeName (  )  )  )  )  ;^118^119^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt .wrongTokenException ( p )  ;^118^119^^^^80^122^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^118^119^^^^80^122^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_OBJECT, "expected closing END_OBJECT after type information and deserialized value" ) ;^[METHOD] _deserialize [TYPE] Object [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] AsWrapperTypeDeserializer   [TYPE]  boolean false  true  [TYPE]  TokenBuffer tb  [TYPE]  DeserializationContext ctxt  [TYPE]  Object typeId  value  [TYPE]  JsonToken t  [TYPE]  String typeId  [TYPE]  JsonDeserializer deser  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
