[REPLACE]^private static final long serialVersionUID = 1;^26^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] StdDeserializer  
[REPLACE]^protected final static int F_MASK_INT_COERCIONS  = null ;^35^36^37^^^35^37^[REPLACE] protected final static int F_MASK_INT_COERCIONS = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.getMask (  ) | DeserializationFeature.USE_LONG_FOR_INTS.getMask (  ) ;^ [CLASS] StdDeserializer  
[REPLACE]^final protected Object _valueClass;^45^^^^^^^[REPLACE] final protected Class<?> _valueClass;^ [CLASS] StdDeserializer  
[ADD]^^133^134^^^^132^174^[ADD] JsonToken t = jp.getCurrentToken (  ) ; if  ( t == JsonToken.VALUE_TRUE )  return true;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_TRUE )  return true;^134^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_TRUE )  return true;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return false  ;^134^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_TRUE )  return true;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_FALSE )  return false;^135^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_FALSE )  return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_FALSE )  return true;^135^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_FALSE )  return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NULL )  return false;^136^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^136^137^^139^^132^174^[ADD] if  ( t == JsonToken.VALUE_NULL )  return false;  if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NULL )  return true;^136^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ) {^139^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^139^140^141^142^143^132^174^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT )  {  if  ( jp.getNumberType (  )  == NumberType.INT )  { return  ( jp.getIntValue (  )  != 0 ) ; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getNumberType (  )   !=  NumberType.INT )  {^141^^^^^132^174^[REPLACE] if  ( jp.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return p.getIntValue (  )  ;^142^^^^^132^174^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return  ( jp.getIntValue (  )   ;^142^^^^^132^174^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getNumberType (  )   ) {^141^^^^^132^174^[REPLACE] if  ( jp.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return true ;^142^^^^^132^174^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return false ;^142^^^^^132^174^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getNumberType (  )  )  ==  ( INT )  && ( t  !=  JsonToken.VALUE_STRING )  {^147^^^^^132^174^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "true".equals ( text )  && "True".equals ( text )  )  {^150^^^^^132^174^[REPLACE] if  ( "true".equals ( text )  || "True".equals ( text )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return false;^151^^^^^132^174^[REPLACE] return true;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "false".equals ( text )  || "False".equals ( text )  || text .isEmpty (  )   - 4 == 0 )  {^153^^^^^132^174^[REPLACE] if  ( "false".equals ( text )  || "False".equals ( text )  || text.length (  )  == 0 )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^153^154^155^^^132^174^[ADD] if  ( "false".equals ( text )  || "False".equals ( text )  || text.length (  )  == 0 )  { return false; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return true;^154^^^^^132^174^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _hasTextualNull ( text  )  &&  (  ( "false".equals ( text )  )  ||  ( "False".equals ( text )  )  )  ||  (  ( text.length (  )  )  == 0 )  )  )  {^156^^^^^132^174^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return true;^157^^^^^132^174^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^148^^^^^132^174^[ADD] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^159^^^^^132^174^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "true".valueOf ( text )  && "True".equals ( text )  )  {^150^^^^^132^174^[REPLACE] if  ( "true".equals ( text )  || "True".equals ( text )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "false".valueOf ( text )  || "False".equals ( text )  || text.size (  )  == 0 )  {^153^^^^^132^174^[REPLACE] if  ( "false".equals ( text )  || "False".equals ( text )  || text.length (  )  == 0 )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return null  ;^154^^^^^132^174^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  (  (  ( "false".equals ( text )  )  ||  ( "False".equals ( text )  )  )  ||  (  ( text.length (  )  )  == 0 )  || ( _hasTextualNull ( text )  )  {^156^^^^^132^174^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^String text = p.getText (  ) .trim (  )  ;^148^^^^^132^174^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.START_ARRAY || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^162^^^^^132^174^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^162^163^164^165^^132^174^[ADD] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { jp.nextToken (  ) ; final boolean parsed = _parseBooleanPrimitive ( jp, ctxt ) ; t = jp.nextToken (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  (  ( jp.getNumberType (  )  )  ==  ( INT )  || ( t  ==  JsonToken.END_ARRAY )  {^166^^^^^132^174^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^166^167^168^169^^132^174^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return ;^167^168^^^^132^174^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;^167^168^^^^132^174^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^165^^^^^132^174^[ADD] t = jp.nextToken (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return true;^170^^^^^132^174^[REPLACE] return parsed;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[ADD]^^164^^^^^132^174^[ADD] final boolean parsed = _parseBooleanPrimitive ( jp, ctxt ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^166^^^^^132^174^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array" )  ;^167^168^^^^132^174^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^t = p.nextToken (  )  ;^165^^^^^132^174^[REPLACE] t = jp.nextToken (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return true  ;^170^^^^^132^174^[REPLACE] return parsed;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^164^^^^^132^174^[REPLACE] final boolean parsed = _parseBooleanPrimitive ( jp, ctxt ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^return ;^173^^^^^132^174^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^173^^^^^132^174^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REMOVE]^( jp.getIntValue (  )  )  ;^173^^^^^132^174^[REMOVE] ^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  parsed  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getCurrentToken (  )  ;^179^^^^^178^228^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_TRUE )  {^180^^^^^178^228^[REPLACE] if  ( t == JsonToken.VALUE_TRUE )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return FALSE  ;^181^^^^^178^228^[REPLACE] return Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_FALSE )  {^183^^^^^178^228^[REPLACE] if  ( t == JsonToken.VALUE_FALSE )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return TRUE  ;^184^^^^^178^228^[REPLACE] return Boolean.FALSE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  (   JsonToken.VALUE_NUMBER_INT )  {^187^^^^^178^228^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  (   NumberType.INT )  {^189^^^^^178^228^[REPLACE] if  ( p.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return  ( p.getLongValue (  )  )  == 0L ? FALSE : TRUE  ;^190^^^^^178^228^[REPLACE] return  ( p.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.getNumberType (  )   ) {^189^^^^^178^228^[REPLACE] if  ( p.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return   Boolean.FALSE ;^190^^^^^178^228^[REPLACE] return  ( p.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return  ( p.getIntValue (  )   !=  0 )  ? Boolean.FALSE : Boolean.TRUE;;^190^^^^^178^228^[REPLACE] return  ( p.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NULL )  {^194^^^^^178^228^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getEmptyValue ( ctxt )  )  )  ;^195^^^^^178^228^[REPLACE] return  ( Boolean )  getNullValue ( ctxt ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^198^^^^^178^228^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( "true".equals ( text )  && "True".equals ( text )  )  {^201^^^^^178^228^[REPLACE] if  ( "true".equals ( text )  || "True".equals ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return FALSE  ;^202^^^^^178^228^[REPLACE] return Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( "false".equals ( text )  && "False".equals ( text )  )  {^204^^^^^178^228^[REPLACE] if  ( "false".equals ( text )  || "False".equals ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return TRUE  ;^205^^^^^178^228^[REPLACE] return Boolean.FALSE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( text.length (  )  %  2 == 0 )  {^207^^^^^178^228^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^return  ( Boolean )  getEmptyValue ( ctxt ) ;^207^208^209^^^178^228^[ADD] if  ( text.length (  )  == 0 )  { return  ( Boolean )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^208^^^^^178^228^[REPLACE] return  ( Boolean )  getEmptyValue ( ctxt ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^return  ( Boolean )  getNullValue ( ctxt ) ;^210^211^212^^^178^228^[ADD] if  ( _hasTextualNull ( text )  )  { return  ( Boolean )  getNullValue ( ctxt ) ; }^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getEmptyValue ( ctxt )  )  )  ;^211^^^^^178^228^[REPLACE] return  ( Boolean )  getNullValue ( ctxt ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^^199^^^^^178^228^[ADD] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "overflow, value can not be represented as 8-bit value" )  ;^213^^^^^178^228^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( "false".valueOf ( text )  && "False".equals ( text )  )  {^204^^^^^178^228^[REPLACE] if  ( "false".equals ( text )  || "False".equals ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( text.length (  )  + 3 == 0 )  {^207^^^^^178^228^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^^207^208^209^^^178^228^[ADD] if  ( text.length (  )  == 0 )  { return  ( Boolean )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( _hasTextualNull ( text  )  && t ==  ( JsonToken.VALUE_FALSE )  )  )  {^210^^^^^178^228^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^String text = p.nextToken (  ) .trim (  ) ;^199^^^^^178^228^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( t == JsonToken.START_ARRAY || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^216^^^^^178^228^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REMOVE]^if  (  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  {     jp.nextToken (  ) ;     final boolean parsed = _parseBooleanPrimitive ( jp, ctxt ) ;     t = jp.nextToken (  ) ;     if  ( t !=  ( JsonToken.END_ARRAY )  )  {         throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;     }     return parsed; }^216^^^^^178^228^[REMOVE] ^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  (  ( p.getNumberType (  )  )  ==  ( INT )  && ( t  ==  JsonToken.END_ARRAY )  {^220^^^^^178^228^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^221^222^^^^178^228^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array" ) ;^221^222^^^^178^228^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^^219^^^^^178^228^[ADD] t = p.nextToken (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^224^^^^^178^228^[REPLACE] return parsed;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^^218^^^^^178^228^[ADD] final Boolean parsed = _parseBoolean ( p, ctxt ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^^221^222^^^^178^228^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^220^^^^^178^228^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^return ;^221^222^^^^178^228^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array" ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^final boolean parsed = _parseBooleanPrimitive ( jp, ctxt )  ;^218^^^^^178^228^[REPLACE] final Boolean parsed = _parseBoolean ( p, ctxt ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^227^^^^^178^228^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^227^^^^^178^228^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Boolean parsed  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  [TYPE]  JsonParser p 
[ADD]^^247^^^^^246^294^[ADD] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NUMBER_INT )  {^248^^^^^246^294^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^return p.getByteValue (  ) ;^248^249^250^^^246^294^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT )  { return p.getByteValue (  ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getIntValue (  ) ;^249^^^^^246^294^[REPLACE] return p.getByteValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getShortValue (  )  ;^249^^^^^246^294^[REPLACE] return p.getByteValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (   JsonToken.VALUE_STRING )  {^251^^^^^246^294^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_STRING )  )  {     String text = p.getText (  ) .trim (  ) ;     if  (  ( "true".equals ( text )  )  ||  ( "True".equals ( text )  )  )  {         return TRUE;     }     if  (  ( "false".equals ( text )  )  ||  ( "False".equals ( text )  )  )  {         return FALSE;     }     if  (  ( text.length (  )  )  == 0 )  {         return  (  ( Boolean )   ( getEmptyValue ( ctxt )  )  ) ;     }     if  ( _hasTextualNull ( text )  )  {         return  (  ( Boolean )   ( getNullValue ( ctxt )  )  ) ;     }     throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" ) ; }^251^^^^^246^294^[REMOVE] ^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( _hasTextualNull ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^253^^^^^246^294^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^return  ( Byte )  getNullValue ( ctxt ) ;^253^254^255^^^246^294^[ADD] if  ( _hasTextualNull ( text )  )  { return  ( Byte )  getNullValue ( ctxt ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^254^^^^^246^294^[REPLACE] return  ( Byte )  getNullValue ( ctxt ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( value  ) {^259^^^^^246^294^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^260^^^^^246^294^[REPLACE] return  ( Byte )  getEmptyValue ( ctxt ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( value < Byte.MIN_VALUE && value > 255 )  {^268^^^^^246^294^[REPLACE] if  ( value < Byte.MIN_VALUE || value > 255 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^269^^^^^246^294^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^269^^^^^246^294^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^int len = text.length (  ) ;return  ( Byte )  getEmptyValue ( ctxt ) ;^257^258^259^260^261^246^294^[ADD] try { int len = text.length (  ) ; if  ( len == 0 )  { return  ( Byte )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (value  ||  0 / 4 )  {^259^^^^^246^294^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^value =  NumberInput.parseInt ( null ) ;^262^^^^^246^294^[REPLACE] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^258^^^^^246^294^[ADD] int len = text.length (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^262^^^^^246^294^[ADD] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return Byte .valueOf ( text )  ;^271^^^^^246^294^[REPLACE] return Byte.valueOf (  ( byte )  value ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^252^^^^^246^294^[ADD] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^int len = text.isEmpty (  ) ;^258^^^^^246^294^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^264^^^^^246^294^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^269^^^^^246^294^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( _hasTextualNull ( text  )  && t ==  ( JsonToken.VALUE_STRING )  )  )  {^253^^^^^246^294^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (   2 )  {^259^^^^^246^294^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_NULL )  )  {     return  (  ( Boolean )   ( getNullValue ( ctxt )  )  ) ; }^259^^^^^246^294^[REMOVE] ^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( value < Byte.MIN_VALUE &&true )  {^268^^^^^246^294^[REPLACE] if  ( value < Byte.MIN_VALUE || value > 255 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw ctxt.weirdStringException ( text, _valueClass, "overflow, value can not be represented as 16-bit value" ) ; }^268^^^^^246^294^[REMOVE] ^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (   0 )  {^259^^^^^246^294^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^int len = text .isEmpty (  )  ;^258^^^^^246^294^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return valueOf (  (  ( short )   ( value )  )  )  ;^271^^^^^246^294^[REPLACE] return Byte.valueOf (  ( byte )  value ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^String text = jp.getText (  ) .trim (  )  ;^252^^^^^246^294^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^264^^^^^246^294^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^269^^^^^246^294^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (   JsonToken.VALUE_NUMBER_FLOAT )  {^273^^^^^246^294^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^273^274^275^276^^246^294^[ADD] if  ( t == JsonToken.VALUE_NUMBER_FLOAT )  { if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  { _failDoubleToIntCoercion ( p, ctxt, "Byte" ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  && ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^274^^^^^246^294^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^_failDoubleToIntCoercion ( p, ctxt, "Short" )  ;^275^^^^^246^294^[REPLACE] _failDoubleToIntCoercion ( p, ctxt, "Byte" ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getShortValue (  )  ;^277^^^^^246^294^[REPLACE] return p.getByteValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT  )  && t ==  ( JsonToken.VALUE_STRING )  )  )  {^274^^^^^246^294^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^279^^^^^246^294^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^280^^^^^246^294^[REPLACE] return  ( Byte )  getNullValue ( ctxt ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t == JsonToken.START_ARRAY || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^283^^^^^246^294^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^283^284^285^286^^246^294^[ADD] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { p.nextToken (  ) ; final Byte parsed = _parseByte ( p, ctxt ) ; t = p.nextToken (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^287^^^^^246^294^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^288^289^^^^246^294^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^288^289^^^^246^294^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^288^289^^^^246^294^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^t = jp.nextToken (  )  ;^286^^^^^246^294^[REPLACE] t = p.nextToken (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^291^^^^^246^294^[REPLACE] return parsed;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^285^^^^^246^294^[REPLACE] final Byte parsed = _parseByte ( p, ctxt ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^288^289^^^^246^294^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^285^^^^^246^294^[ADD] final Byte parsed = _parseByte ( p, ctxt ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^293^^^^^246^294^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^293^^^^^246^294^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Byte parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = p .getCurrentTokenId (  )  ;^299^^^^^298^345^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NUMBER_INT )  {^300^^^^^298^345^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return p.getFloatValue (  ) ;^301^^^^^298^345^[REPLACE] return p.getShortValue (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^303^^^^^298^345^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  (value  ||  0 )  {^308^^^^^298^345^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_NULL )  )  {     return  (  ( Boolean )   ( getNullValue ( ctxt )  )  ) ; }^308^^^^^298^345^[REMOVE] ^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^309^^^^^298^345^[REPLACE] return  ( Short )  getEmptyValue ( ctxt ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  && ( _hasTextualNull ( text )  )  {^311^^^^^298^345^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^312^^^^^298^345^[REPLACE] return  ( Short )  getNullValue ( ctxt ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  (  value > Short.MAX_VALUE )  {^319^^^^^298^345^[REPLACE] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return ;^320^^^^^298^345^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.handleUnknownProperty  (" ")  ;^320^^^^^298^345^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^int len = text.length (  ) ;return  ( Short )  getEmptyValue ( ctxt ) ;^306^307^308^309^310^298^345^[ADD] try { int len = text.length (  ) ; if  ( len == 0 )  { return  ( Short )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( len  ||  0 )  {^308^^^^^298^345^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^return  ( Short )  getEmptyValue ( ctxt ) ;^308^309^310^^^298^345^[ADD] if  ( len == 0 )  { return  ( Short )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^^314^^^^^298^345^[ADD] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^final int len = text.length (  )  ;^307^^^^^298^345^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^value =  NumberInput.parseInt ( null ) ;^314^^^^^298^345^[REPLACE] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return valueOf (  (  ( byte )   ( value )  )  )  ;^322^^^^^298^345^[REPLACE] return Short.valueOf (  ( short )  value ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^String text = p .getByteValue (  )  .trim (  ) ;^304^^^^^298^345^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return ;^316^^^^^298^345^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( _hasTextualNull ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^311^^^^^298^345^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( value < Short.MIN_VALUE && value > Short.MAX_VALUE )  {^319^^^^^298^345^[REPLACE] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^320^^^^^298^345^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^int len = text.isEmpty (  ) ;^307^^^^^298^345^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^String text = jp.getText (  ) .trim (  )  ;^304^^^^^298^345^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^^316^^^^^298^345^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NUMBER_FLOAT )  {^324^^^^^298^345^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^^324^325^326^327^^298^345^[ADD] if  ( t == JsonToken.VALUE_NUMBER_FLOAT )  { if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  { _failDoubleToIntCoercion ( p, ctxt, "Short" ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^325^^^^^298^345^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^_failDoubleToIntCoercion ( p, ctxt, "Byte" )  ;^326^^^^^298^345^[REPLACE] _failDoubleToIntCoercion ( p, ctxt, "Short" ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return p.getFloatValue (  ) ;^328^^^^^298^345^[REPLACE] return p.getShortValue (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.parseDate ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^325^^^^^298^345^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^^325^326^327^^^298^345^[ADD] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  { _failDoubleToIntCoercion ( p, ctxt, "Short" ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NULL )  {^330^^^^^298^345^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^return  ( Short )  getNullValue ( ctxt ) ;^330^331^332^^^298^345^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return  ( Short )  getNullValue ( ctxt ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^331^^^^^298^345^[REPLACE] return  ( Short )  getNullValue ( ctxt ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t == JsonToken.START_ARRAY ) {^334^^^^^298^345^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY  ||  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  {^338^^^^^298^345^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REMOVE]^if  (  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  {     jp.nextToken (  ) ;     final boolean parsed = _parseBooleanPrimitive ( jp, ctxt ) ;     t = jp.nextToken (  ) ;     if  ( t !=  ( JsonToken.END_ARRAY )  )  {         throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;     }     return parsed; }^338^^^^^298^345^[REMOVE] ^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return ;^339^340^^^^298^345^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array" ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array" ) ;^339^340^^^^298^345^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array" ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^t = jp.nextToken (  )  ;^337^^^^^298^345^[REPLACE] t = p.nextToken (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^342^^^^^298^345^[REPLACE] return parsed;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^336^^^^^298^345^[REPLACE] final Short parsed = _parseShort ( p, ctxt ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY  &&  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  {^338^^^^^298^345^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^^338^339^340^341^^298^345^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array" ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt .weirdStringException ( text , null , text )  ;^339^340^^^^298^345^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array" ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^339^340^^^^298^345^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array" ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[ADD]^^344^^^^^298^345^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^344^^^^^298^345^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Short parsed  [TYPE]  JsonParser p 
[REPLACE]^if  (  ( l <  ( MIN_VALUE )  )  ||  ( l >  ( MAX_VALUE )  )  || ( p.hasToken ( JsonToken.VALUE_NUMBER_INT )  )  {^362^^^^^361^410^[REPLACE] if  ( p.hasToken ( JsonToken.VALUE_NUMBER_INT )  )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getLongValue (  ) ;^363^^^^^361^410^[REPLACE] return p.getIntValue (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = jp.getCurrentToken (  )  ;^365^^^^^361^410^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_STRING )  {^366^^^^^361^410^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( _hasTextualNull ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^368^^^^^361^410^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_TRUE )  )      return true;^368^^^^^361^410^[REMOVE] ^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 1;^369^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( len == 0  && ( len  != value )  {^373^^^^^361^410^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^long l = Long.parseLong ( text ) ;"Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^373^374^375^376^377^361^410^[ADD] if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( l < Integer.MIN_VALUE ) {^375^^^^^361^410^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass,  (  (  (  (  (  ( "Overflow: numeric value  ( " + text )  + " )  out of range of Integer  ( " )  +  ( MIN_VALUE )  )  + " - " )  +  ( MAX_VALUE )  )  + " ) " )  )  ;^376^377^^^^361^410^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "text" )  out of range of int  ( "Integer.MIN_VALUE" - "Integer.MAX_VALUE" ) " ) ;^376^377^^^^361^410^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( short )   ( value )  )  ;^379^^^^^361^410^[REPLACE] return  ( int )  l;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^long l = Long.valueOf ( text ) ;^374^^^^^361^410^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^376^377^^^^361^410^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( l < Integer.MIN_VALUE && l > Integer.MAX_VALUE )  {^375^^^^^361^410^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^375^376^377^378^^361^410^[ADD] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ; }^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^376^377^^^^361^410^[ADD] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( len > 9  && ( len  !=  0 )  {^381^^^^^361^410^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 0 >>> 2;^382^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^int len = text.length (  ) ;long l = Long.parseLong ( text ) ;^371^372^373^374^375^361^410^[ADD] try { int len = text.length (  ) ; if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( len  !=  9 )  {^373^^^^^361^410^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value >  ( MAX_VALUE )  )  )  {     throw ctxt.weirdStringException ( text, _valueClass, "overflow, value can not be represented as 16-bit value" ) ; }^373^^^^^361^410^[REMOVE] ^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.reportUnknownProperty ( text, _valueClass, "Overflow: numeric value  ( "text" )  out of range of int  ( "Integer.MIN_VALUE" - "Integer.MAX_VALUE" ) " ) ;^376^377^^^^361^410^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (value  !=  0  && len > 9  )  {^381^^^^^361^410^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  ( _hasTextualNull ( text )  )  {     return false; }^381^^^^^361^410^[REMOVE] ^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 2;^382^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 3;^382^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return NumberInput.parseLong ( text ) ;^384^^^^^361^410^[REPLACE] return NumberInput.parseInt ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^int len = text .isEmpty (  )  ;^372^^^^^361^410^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^long l = Long .valueOf ( text )  ;^374^^^^^361^410^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 4;^369^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return NumberInput .parseLong ( text )  ;^384^^^^^361^410^[REPLACE] return NumberInput.parseInt ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^String text = p.getText (  ) .getNullValue (  ) ;^367^^^^^361^410^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^int len = text.isEmpty (  ) ;^372^^^^^361^410^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^374^^^^^361^410^[ADD] long l = Long.parseLong ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^386^^^^^361^410^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  || ( _hasTextualNull ( text )  )  {^368^^^^^361^410^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 0L  ;^369^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( value  <  9  || len == 0  )  {^373^^^^^361^410^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt .mappingException ( null , t )  " ) ;^376^377^^^^361^410^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( value  !=  0 )  {^381^^^^^361^410^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^381^382^383^^^361^410^[ADD] if  ( len == 0 )  { return 0; }^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 4;^382^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( len == 0  || ( len  >=  9 )  {^373^^^^^361^410^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( serialVersionUID < Integer.MIN_VALUE && l > Integer.MAX_VALUE )  {^375^^^^^361^410^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (  value )  {^381^^^^^361^410^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 0L  ;^382^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^372^^^^^361^410^[ADD] int len = text.length (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return valueOf ( parseInt ( text )  )  ;^384^^^^^361^410^[REPLACE] return NumberInput.parseInt ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^367^^^^^361^410^[ADD] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final int len = text.length (  )  ;^372^^^^^361^410^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^386^^^^^361^410^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NUMBER_FLOAT  &&  ( l <  ( MIN_VALUE )  )  ||  ( l >  ( MAX_VALUE )  )  )  {^389^^^^^361^410^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^389^390^391^392^^361^410^[ADD] if  ( t == JsonToken.VALUE_NUMBER_FLOAT )  { if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  { _failDoubleToIntCoercion ( p, ctxt, "int" ) ; }^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.parseDate ( DeserializationFeature.ACCEPT_FLOAT_AS_INT  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^390^^^^^361^410^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^_failDoubleToIntCoercion ( p, ctxt, "Byte" )  ;^391^^^^^361^410^[REPLACE] _failDoubleToIntCoercion ( p, ctxt, "int" ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getValueAsLong (  ) ;^393^^^^^361^410^[REPLACE] return p.getValueAsInt (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^390^^^^^361^410^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p .getValueAsLong (  )  ;^393^^^^^361^410^[REPLACE] return p.getValueAsInt (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ) {^395^^^^^361^410^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 1;^396^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 0 >> 1;^396^^^^^361^410^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t == JsonToken.START_ARRAY || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^398^^^^^361^410^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^398^399^400^401^^361^410^[ADD] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { p.nextToken (  ) ; final int parsed = _parseIntPrimitive ( p, ctxt ) ; t = p.nextToken (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  || ( t  ==  JsonToken.END_ARRAY )  {^402^^^^^361^410^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^403^404^^^^361^410^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array" ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array" ) ;^403^404^^^^361^410^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array" ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^401^^^^^361^410^[ADD] t = p.nextToken (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return value;^406^^^^^361^410^[REPLACE] return parsed;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final boolean parsed = _parseBooleanPrimitive ( jp, ctxt )  ;^400^^^^^361^410^[REPLACE] final int parsed = _parseIntPrimitive ( p, ctxt ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  && ( t  ==  JsonToken.END_ARRAY )  {^402^^^^^361^410^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^403^404^^^^361^410^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array" ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^t = jp.nextToken (  )  ;^401^^^^^361^410^[REPLACE] t = p.nextToken (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^400^^^^^361^410^[ADD] final int parsed = _parseIntPrimitive ( p, ctxt ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^403^404^^^^361^410^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array" ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^409^^^^^361^410^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^409^^^^^361^410^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.parseDate ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^420^^^^^414^462^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^_failDoubleToIntCoercion ( p, ctxt, "Byte" )  ;^421^^^^^414^462^[REPLACE] _failDoubleToIntCoercion ( p, ctxt, "Integer" ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^429^^^^^414^462^[REPLACE] return  ( Integer )  getNullValue ( ctxt ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( len == 0  || (value  <=  9 )  {^431^^^^^414^462^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (  l > Integer.MAX_VALUE )  {^433^^^^^414^462^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^433^434^435^436^^414^462^[ADD] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ; }^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^434^435^^^^414^462^[ADD] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.reportUnknownProperty ( text, _valueClass, "Overflow: numeric value  ( "text" )  out of range of Integer  ( "Integer.MIN_VALUE" - "Integer.MAX_VALUE" ) " ) ;^434^435^^^^414^462^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return Integer .valueOf ( text )  ;^437^^^^^414^462^[REPLACE] return Integer.valueOf (  ( int )  l ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^long l = Long.valueOf ( text ) ;^432^^^^^414^462^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass,  (  (  (  (  (  ( "Overflow: numeric value  ( " + text )  + " )  out of range of int  ( " )  +  ( MIN_VALUE )  )  + " - " )  +  ( MAX_VALUE )  )  + " ) " )  )  ;^434^435^^^^414^462^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( l < Integer.MIN_VALUE && l > Integer.MAX_VALUE )  {^433^^^^^414^462^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^434^435^^^^414^462^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "text" )  out of range of Integer  ( "Integer.MIN_VALUE" - "Integer.MAX_VALUE" ) " ) ;^434^435^^^^414^462^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  (   0 )  {^439^^^^^414^462^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^440^^^^^414^462^[REPLACE] return  ( Integer )  getEmptyValue ( ctxt ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS  )  &&  ( p.nextToken (  )  )  !=  ( JsonToken.END_ARRAY )  )  )  {^449^^^^^414^462^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (  )   ==  JsonToken.END_ARRAY )  {^452^^^^^414^462^[REPLACE] if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  (  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  {     jp.nextToken (  ) ;     final boolean parsed = _parseBooleanPrimitive ( jp, ctxt ) ;     t = jp.nextToken (  ) ;     if  ( t !=  ( JsonToken.END_ARRAY )  )  {         throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" ) ;     }     return parsed; }^452^^^^^414^462^[REMOVE] ^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^453^454^^^^414^462^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array" ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array" ) ;^453^454^^^^414^462^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array" ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^456^^^^^414^462^[REPLACE] return parsed;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^451^^^^^414^462^[REPLACE] final Integer parsed = _parseInteger ( p, ctxt ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^int len = text.length (  ) ;return  ( Integer )  getNullValue ( ctxt ) ;^426^427^428^429^430^414^462^[ADD] try { int len = text.length (  ) ; if  ( _hasTextualNull ( text )  )  { return  ( Integer )  getNullValue ( ctxt ) ; }^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( serialVersionUIDen  <  9 >> 1 )  {^431^^^^^414^462^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_STRING )  )  {     String text = p.getText (  ) .trim (  ) ;     if  ( _hasTextualNull ( text )  )  {         return 0;     }     try {         int len = text.length (  ) ;         if  ( len > 9 )  {             long l = parseLong ( text ) ;             if  (  ( l <  ( MIN_VALUE )  )  ||  ( l >  ( MAX_VALUE )  )  )  {                 throw ctxt.weirdStringException ( text, _valueClass,  (  (  (  (  (  ( "Overflow: numeric value  ( " + text )  + " )  out of range of int  ( " )  +  ( MIN_VALUE )  )  + " - " )  +  ( MAX_VALUE )  )  + " ) " )  ) ;             }             return  (  ( int )   ( l )  ) ;         }         if  ( len == 0 )  {             return 0;         }         return parseInt ( text ) ;     } catch  ( IllegalArgumentException iae )  {         throw ctxt.weirdStringException ( text, _valueClass, "not a valid int value" ) ;     } }^431^^^^^414^462^[REMOVE] ^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REMOVE]^if  (  ( value <  ( MIN_VALUE )  )  ||  ( value > 255 )  )  {     throw ctxt.weirdStringException ( text, _valueClass, "overflow, value can not be represented as 8-bit value" ) ; }^433^^^^^414^462^[REMOVE] ^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return valueOf (  (  ( byte )   ( value )  )  )  ;^437^^^^^414^462^[REPLACE] return Integer.valueOf (  ( int )  l ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( l < Integer.MIN_VALUE ) {^433^^^^^414^462^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( len  && value )  {^439^^^^^414^462^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return parseInt ( text )  ;^442^^^^^414^462^[REPLACE] return Integer.valueOf ( NumberInput.parseInt ( text )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^int len = text .isEmpty (  )  ;^427^^^^^414^462^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^long l = Long .valueOf ( text )  ;^432^^^^^414^462^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return Integer.valueOf ( p.getLongValue (  )  ) ;^418^^^^^414^462^[REPLACE] return Integer.valueOf ( p.getIntValue (  )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return Integer.valueOf ( p .getValueAsLong (  )   ) ;^423^^^^^414^462^[REPLACE] return Integer.valueOf ( p.getValueAsInt (  )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^447^^^^^414^462^[REPLACE] return  ( Integer )  getNullValue ( ctxt ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^String text = p.getText (  ) .getNullValue (  ) ;^425^^^^^414^462^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final int len = text.length (  )  ;^427^^^^^414^462^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^444^^^^^414^462^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^453^454^^^^414^462^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array" ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.mappingException ( _valueClass, t )  ;^461^^^^^414^462^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, t )  ;^461^^^^^414^462^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^jp.getCurrentToken (  )  ;^461^^^^^414^462^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Integer parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^471^^^^^465^506^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^_failDoubleToIntCoercion ( p, ctxt, "Byte" )  ;^472^^^^^465^506^[REPLACE] _failDoubleToIntCoercion ( p, ctxt, "Long" ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( text.length (  )  %  2 == 0 )  {^479^^^^^465^506^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^480^^^^^465^506^[REPLACE] return  ( Long )  getEmptyValue ( ctxt ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^483^^^^^465^506^[REPLACE] return  ( Long )  getNullValue ( ctxt ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS  )  && t !=  ( JsonToken.END_ARRAY )  )  )  {^492^^^^^465^506^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY  || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^496^^^^^465^506^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^497^498^^^^465^506^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array" ) ;^497^498^^^^465^506^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^497^498^^^^465^506^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^500^^^^^465^506^[REPLACE] return parsed;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^494^^^^^465^506^[REPLACE] final Long parsed = _parseLong ( p, ctxt ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = p.hasToken (  ) ;^495^^^^^465^506^[REPLACE] JsonToken t = p.nextToken (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^497^498^^^^465^506^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^496^^^^^465^506^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^485^486^487^^^465^506^[ADD] try { return Long.valueOf ( NumberInput.parseLong ( text )  ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return Long.parseLong ( NumberInput.parseLong ( text )  ) ;^486^^^^^465^506^[REPLACE] return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getFloatValue (  ) ;^469^^^^^465^506^[REPLACE] return p.getLongValue (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p .getValueAsInt (  )  ;^474^^^^^465^506^[REPLACE] return p.getValueAsLong (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^490^^^^^465^506^[REPLACE] return  ( Long )  getNullValue ( ctxt ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^478^^^^^465^506^[ADD] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = jp.getCurrentToken (  )  ;^495^^^^^465^506^[REPLACE] JsonToken t = p.nextToken (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^488^^^^^465^506^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^505^^^^^465^506^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, t )  ;^505^^^^^465^506^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^jp.getCurrentToken (  )  ;^505^^^^^465^506^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  Long parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT  )  &&  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  )  )  {^515^^^^^510^544^[REPLACE] if  ( !ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^_failDoubleToIntCoercion ( p, ctxt, "Byte" )  ;^516^^^^^510^544^[REPLACE] _failDoubleToIntCoercion ( p, ctxt, "long" ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^516^^^^^510^544^[ADD] _failDoubleToIntCoercion ( p, ctxt, "long" ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( text.length (  )  - 2 == 0 ) {^521^^^^^510^544^[REPLACE] if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return null  ;^522^^^^^510^544^[REPLACE] return 0L;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( ctxt.parseDate ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS  )  || t !=  ( JsonToken.END_ARRAY )  )  )  {^531^^^^^510^544^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^535^^^^^510^544^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^535^536^537^538^^510^544^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array" ) ; }^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^536^537^^^^510^544^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array" ) ;^536^537^^^^510^544^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return serialVersionUID;^539^^^^^510^544^[REPLACE] return parsed;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^final boolean parsed = _parseBooleanPrimitive ( jp, ctxt )  ;^533^^^^^510^544^[REPLACE] final long parsed = _parseLongPrimitive ( p, ctxt ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = p.hasToken (  ) ;^534^^^^^510^544^[REPLACE] JsonToken t = p.nextToken (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  || ( t  ==  JsonToken.END_ARRAY )  {^535^^^^^510^544^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^536^537^^^^510^544^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array" ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^return NumberInput.parseLong ( text ) ;^524^525^526^^^510^544^[ADD] try { return NumberInput.parseLong ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return parseInt ( text )  ;^525^^^^^510^544^[REPLACE] return NumberInput.parseLong ( text ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p .getFloatValue (  )  ;^513^^^^^510^544^[REPLACE] return p.getLongValue (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return p.getValueAsInt (  ) ;^518^^^^^510^544^[REPLACE] return p.getValueAsLong (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 0;^522^^^^^510^544^[REPLACE] return 0L;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return NumberInput.parseInt ( text ) ;^525^^^^^510^544^[REPLACE] return NumberInput.parseLong ( text ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return 0;^529^^^^^510^544^[REPLACE] return 0L;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^String text = p.nextToken (  ) .trim (  ) ;^520^^^^^510^544^[REPLACE] String text = p.getText (  ) .trim (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^533^^^^^510^544^[ADD] final long parsed = _parseLongPrimitive ( p, ctxt ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^534^^^^^510^544^[ADD] JsonToken t = p.nextToken (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^527^^^^^510^544^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^return ;^543^^^^^510^544^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, t )  ;^543^^^^^510^544^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[REPLACE]^jp.getCurrentToken (  )  ;^543^^^^^510^544^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser p 
[ADD]^^550^^^^^548^602^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^552^^^^^548^602^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return jp.getFloatValue (  ) ;^552^553^554^^^548^602^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  { return jp.getFloatValue (  ) ; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^553^^^^^548^602^[REPLACE] return jp.getFloatValue (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^556^^^^^548^602^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  *  2 == 0 )  {^558^^^^^548^602^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Float )  getEmptyValue ( ctxt ) ;^558^559^560^^^548^602^[ADD] if  ( text.length (  )  == 0 )  { return  ( Float )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^559^^^^^548^602^[REPLACE] return  ( Float )  getEmptyValue ( ctxt ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^561^562^563^^^548^602^[ADD] if  ( _hasTextualNull ( text )  )  { return  ( Float )  getNullValue ( ctxt ) ; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^562^^^^^548^602^[REPLACE] return  ( Float )  getNullValue ( ctxt ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return NEGATIVE_INFINITY  ;^567^^^^^548^602^[REPLACE] return Float.POSITIVE_INFINITY;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNaN ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^571^^^^^548^602^[REPLACE] if  ( _isNaN ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return TRUE  ;^572^^^^^548^602^[REPLACE] return Float.NaN;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNegInf ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^576^^^^^548^602^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return POSITIVE_INFINITY  ;^577^^^^^548^602^[REPLACE] return Float.NEGATIVE_INFINITY;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Float.parseFloat ( text ) ;^581^582^583^^^548^602^[ADD] try { return Float.parseFloat ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^557^^^^^548^602^[ADD] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^584^^^^^548^602^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  *  0 .5  == 0  )  {^558^^^^^548^602^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _hasTextualNull ( text  )  && t ==  ( JsonToken.VALUE_STRING )  )  )  {^561^^^^^548^602^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Float )  getNullValue ( ctxt ) ;^561^562^563^^^548^602^[ADD] if  ( _hasTextualNull ( text )  )  { return  ( Float )  getNullValue ( ctxt ) ; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Float.POSITIVE_INFINITY;^566^567^568^^^548^602^[ADD] if  ( _isPosInf ( text )  )  { return Float.POSITIVE_INFINITY; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( _hasTextualNull ( text )  )  {     return false; }^571^^^^^548^602^[REMOVE] ^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNegInf ( text  )  && t ==  ( JsonToken.VALUE_STRING )  )  )  {^576^^^^^548^602^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^576^577^578^^^548^602^[ADD] if  ( _isNegInf ( text )  )  { return Float.NEGATIVE_INFINITY; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getNullValue (  ) ;^557^^^^^548^602^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^584^^^^^548^602^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^586^^^^^548^602^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^587^^^^^548^602^[REPLACE] return  ( Float )  getNullValue ( ctxt ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.START_ARRAY ) {^590^^^^^548^602^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^594^^^^^548^602^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^594^595^596^597^^548^602^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^595^596^^^^548^602^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^595^596^^^^548^602^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^595^596^^^^548^602^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^t = p.nextToken (  )  ;^593^^^^^548^602^[REPLACE] t = jp.nextToken (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return true  ;^598^^^^^548^602^[REPLACE] return parsed;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^592^^^^^548^602^[REPLACE] final Float parsed = _parseFloat ( jp, ctxt ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^595^596^^^^548^602^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^601^^^^^548^602^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^601^^^^^548^602^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  Float parsed  [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getCurrentTokenId (  ) ;^607^^^^^606^653^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT && t == JsonToken.VALUE_NUMBER_FLOAT )  {^609^^^^^606^653^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return p.getByteValue (  )  ;^610^^^^^606^653^[REPLACE] return jp.getFloatValue (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp .getLongValue (  )  ;^610^^^^^606^653^[REPLACE] return jp.getFloatValue (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^612^^^^^606^653^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^String text = jp.getText (  ) .trim (  ) ;return 0.0f;^612^613^614^615^616^606^653^[ADD] if  ( t == JsonToken.VALUE_STRING )  { String text = jp.getText (  ) .trim (  ) ; if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  { return 0.0f; }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  + 2 == 0 || _hasTextualNull ( text )  )  {^614^^^^^606^653^[REPLACE] if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0  ;^615^^^^^606^653^[REPLACE] return 0.0f;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return NEGATIVE_INFINITY  ;^620^^^^^606^653^[REPLACE] return Float.POSITIVE_INFINITY;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return TRUE  ;^624^^^^^606^653^[REPLACE] if  ( _isNaN ( text )  )  { return Float.NaN; }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNegInf ( text  )  ||  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  )  )  {^627^^^^^606^653^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return POSITIVE_INFINITY  ;^628^^^^^606^653^[REPLACE] return Float.NEGATIVE_INFINITY;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Float.parseFloat ( text ) ;^632^633^634^^^606^653^[ADD] try { return Float.parseFloat ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getNullValue (  ) ;^613^^^^^606^653^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^635^^^^^606^653^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.size (  )  == 0 || _hasTextualNull ( text )  )  {^614^^^^^606^653^[REPLACE] if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  || ( _isPosInf ( text )  )  {^619^^^^^606^653^[REPLACE] if  ( _isPosInf ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( _hasTextualNull ( text )  )  {     return false; }^619^^^^^606^653^[REMOVE] ^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNaN ( text  )  &&  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  )  )  { return Float.NaN; }^624^^^^^606^653^[REPLACE] if  ( _isNaN ( text )  )  { return Float.NaN; }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNegInf ( text  )  &&  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  )  )  {^627^^^^^606^653^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^613^^^^^606^653^[ADD] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ) {^637^^^^^606^653^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0  ;^638^^^^^606^653^[REPLACE] return 0.0f;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.START_ARRAY ) {^641^^^^^606^653^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^645^^^^^606^653^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^646^647^^^^606^653^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .weirdStringException ( text , null , text )  ;^646^647^^^^606^653^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^t = p.nextToken (  )  ;^644^^^^^606^653^[REPLACE] t = jp.nextToken (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return true  ;^649^^^^^606^653^[REPLACE] return parsed;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^final boolean parsed = _parseBooleanPrimitive ( jp, ctxt )  ;^643^^^^^606^653^[REPLACE] final float parsed = _parseFloatPrimitive ( jp, ctxt ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^646^647^^^^606^653^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array" ) ;^646^647^^^^606^653^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array" ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^652^^^^^606^653^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^652^^^^^606^653^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  float parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = p.getCurrentToken (  )  ;^658^^^^^657^708^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT && t == JsonToken.VALUE_NUMBER_FLOAT )  {^660^^^^^657^708^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^661^^^^^657^708^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (   JsonToken.VALUE_STRING )  {^663^^^^^657^708^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  - 1 == 0 )  {^665^^^^^657^708^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Double )  getEmptyValue ( ctxt ) ;^665^666^667^^^657^708^[ADD] if  ( text.length (  )  == 0 )  { return  ( Double )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^666^^^^^657^708^[REPLACE] return  ( Double )  getEmptyValue ( ctxt ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  || ( _hasTextualNull ( text )  )  {^668^^^^^657^708^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^668^669^670^^^657^708^[ADD] if  ( _hasTextualNull ( text )  )  { return  ( Double )  getNullValue ( ctxt ) ; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^669^^^^^657^708^[REPLACE] return  ( Double )  getNullValue ( ctxt ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  && ( _isPosInf ( text )  )  {^673^^^^^657^708^[REPLACE] if  ( _isPosInf ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return POSITIVE_INFINITY  ;^674^^^^^657^708^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return TRUE  ;^679^^^^^657^708^[REPLACE] return Double.NaN;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNegInf ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^683^^^^^657^708^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return POSITIVE_INFINITY  ;^684^^^^^657^708^[REPLACE] return Double.NEGATIVE_INFINITY;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return parseDouble ( text ) ;^688^689^690^^^657^708^[ADD] try { return parseDouble ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = p.getText (  ) .trim (  )  ;^664^^^^^657^708^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^691^^^^^657^708^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^690^691^^^^657^708^[ADD] catch  ( IllegalArgumentException iae )  { } throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  + 4 == 0  )  {^665^^^^^657^708^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_TRUE )  )  {     return TRUE; }^665^^^^^657^708^[REMOVE] ^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _hasTextualNull ( text  )  && t ==  ( JsonToken.VALUE_STRING )  )  )  {^668^^^^^657^708^[REPLACE] if  ( _hasTextualNull ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  || ( _isPosInf ( text )  )  {^673^^^^^657^708^[REPLACE] if  ( _isPosInf ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Double.POSITIVE_INFINITY;^673^674^675^^^657^708^[ADD] if  ( _isPosInf ( text )  )  { return Double.POSITIVE_INFINITY; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNaN ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^678^^^^^657^708^[REPLACE] if  ( _isNaN ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NULL )  {^693^^^^^657^708^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Double )  getNullValue ( ctxt ) ;^693^694^695^^^657^708^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return  ( Double )  getNullValue ( ctxt ) ; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^694^^^^^657^708^[REPLACE] return  ( Double )  getNullValue ( ctxt ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.START_ARRAY ) {^696^^^^^657^708^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^700^^^^^657^708^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^700^701^702^703^^657^708^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^701^702^^^^657^708^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ;^701^702^^^^657^708^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^701^702^^^^657^708^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^t = p.nextToken (  )  ;^699^^^^^657^708^[REPLACE] t = jp.nextToken (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return true  ;^704^^^^^657^708^[REPLACE] return parsed;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^698^^^^^657^708^[REPLACE] final Double parsed = _parseDouble ( jp, ctxt ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^701^702^^^^657^708^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .weirdStringException ( text , this , text )  ;^701^702^^^^657^708^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array" ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^707^^^^^657^708^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^707^^^^^657^708^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  Double parsed  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp .getCurrentTokenId (  )  ;^714^^^^^712^763^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  t == JsonToken.VALUE_NUMBER_FLOAT )  {^716^^^^^712^763^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^717^^^^^712^763^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return p.getByteValue (  )  ;^717^^^^^712^763^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^720^^^^^712^763^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  _hasTextualNull ( text )  )  {^722^^^^^712^763^[REPLACE] if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^722^723^724^^^712^763^[ADD] if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  { return 0.0; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 1.0d;^723^^^^^712^763^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isPosInf ( text  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^727^^^^^712^763^[REPLACE] if  ( _isPosInf ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return POSITIVE_INFINITY  ;^728^^^^^712^763^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNaN ( text  )  &&  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  )  )  {^732^^^^^712^763^[REPLACE] if  ( _isNaN ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return TRUE  ;^733^^^^^712^763^[REPLACE] return Double.NaN;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( _isNegInf ( text  )  ||  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  )  )  {^737^^^^^712^763^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^737^738^739^^^712^763^[ADD] if  ( _isNegInf ( text )  )  { return Double.NEGATIVE_INFINITY; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return POSITIVE_INFINITY  ;^738^^^^^712^763^[REPLACE] return Double.NEGATIVE_INFINITY;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return parseDouble ( text ) ;^742^743^744^^^712^763^[ADD] try { return parseDouble ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0  ;^723^^^^^712^763^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = p.getText (  ) .trim (  )  ;^721^^^^^712^763^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" )  ;^745^^^^^712^763^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.size (  )  == 0 || _hasTextualNull ( text )  )  {^722^^^^^712^763^[REPLACE] if  ( text.length (  )  == 0 || _hasTextualNull ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  && ( _isPosInf ( text )  )  {^727^^^^^712^763^[REPLACE] if  ( _isPosInf ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  && ( _isNaN ( text )  )  {^732^^^^^712^763^[REPLACE] if  ( _isNaN ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Double.NaN;^732^733^734^^^712^763^[ADD] if  ( _isNaN ( text )  )  { return Double.NaN; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  (  ( text.length (  )  )  == 0 )  ||  ( _hasTextualNull ( text )  )  || ( _isNegInf ( text )  )  {^737^^^^^712^763^[REPLACE] if  ( _isNegInf ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Double.NEGATIVE_INFINITY;^737^738^739^^^712^763^[ADD] if  ( _isNegInf ( text )  )  { return Double.NEGATIVE_INFINITY; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0d;^723^^^^^712^763^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^721^^^^^712^763^[ADD] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^747^^^^^712^763^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0d;^748^^^^^712^763^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.START_ARRAY ) {^751^^^^^712^763^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^755^^^^^712^763^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^755^756^757^758^^712^763^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^756^757^^^^712^763^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^756^757^^^^712^763^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^756^757^^^^712^763^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array" ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^754^^^^^712^763^[ADD] t = jp.nextToken (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return true  ;^759^^^^^712^763^[REPLACE] return parsed;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^final boolean parsed = _parseBooleanPrimitive ( jp, ctxt )  ;^753^^^^^712^763^[REPLACE] final double parsed = _parseDoublePrimitive ( jp, ctxt ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY  &&  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  {^755^^^^^712^763^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^t = p.nextToken (  )  ;^754^^^^^712^763^[REPLACE] t = jp.nextToken (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "not a valid Byte value" )  ;^762^^^^^712^763^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( 1 )   ;^762^^^^^712^763^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  double parsed  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getCurrentToken (  )  ;^768^^^^^767^806^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NUMBER_INT )  {^769^^^^^767^806^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^769^770^771^^^767^806^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT )  { return new java.util.Date ( p.getLongValue (  )  ) ; }^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return new java.util.Date ( p.getFloatValue (  )  ) ;^770^^^^^767^806^[REPLACE] return new java.util.Date ( p.getLongValue (  )  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ) {^772^^^^^767^806^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^773^^^^^767^806^[REPLACE] return  ( java.util.Date )  getNullValue ( ctxt ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ) {^775^^^^^767^806^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_STRING )  )  {     String text = jp.getText (  ) .trim (  ) ;     if  (  ( "true".equals ( text )  )  ||  ( "True".equals ( text )  )  )  {         return true;     }     if  (  (  ( "false".equals ( text )  )  ||  ( "False".equals ( text )  )  )  ||  (  ( text.length (  )  )  == 0 )  )  {         return false;     }     if  ( _hasTextualNull ( text )  )  {         return false;     }     throw ctxt.weirdStringException ( text, _valueClass, "only \"true\" or \"false\" recognized" ) ; }^775^^^^^767^806^[REMOVE] ^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( value .isEmpty (  )   + 3 == 0 )  {^780^^^^^767^806^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^780^781^782^^^767^806^[ADD] if  ( value.length (  )  == 0 )  { return  ( Date )  getEmptyValue ( ctxt ) ; }^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^781^^^^^767^806^[REPLACE] return  ( Date )  getEmptyValue ( ctxt ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return  (  ( Boolean )   ( getNullValue ( ctxt )  )  )  ;^784^^^^^767^806^[REPLACE] return  ( java.util.Date )  getNullValue ( ctxt ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^value = p.getText (  ) .trim (  ) ;return  ( Date )  getEmptyValue ( ctxt ) ;^777^778^779^780^781^767^806^[ADD] try {  value = p.getText (  ) .trim (  ) ; if  ( value.length (  )  == 0 )  { return  ( Date )  getEmptyValue ( ctxt ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( value.size (  )  == 0 )  {^780^^^^^767^806^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  || ( _hasTextualNull ( value )  )  {^783^^^^^767^806^[REPLACE] if  ( _hasTextualNull ( value )  )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^779^^^^^767^806^[ADD] value = p.getText (  ) .trim (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return ctxt.converterInstance ( value ) ;^786^^^^^767^806^[REPLACE] return ctxt.parseDate ( value ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^String value = true;^776^^^^^767^806^[REPLACE] String value = null;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return ;^788^789^^^^767^806^[REPLACE] throw ctxt.weirdStringException ( value, _valueClass, "not a valid representation  ( error: "+iae.getMessage (  ) +" ) " ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( _hasTextualNull ( value  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^783^^^^^767^806^[REPLACE] if  ( _hasTextualNull ( value )  )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REMOVE]^if  ( _hasTextualNull ( text )  )  {     return false; }^783^^^^^767^806^[REMOVE] ^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( value.length (  )  - 3 == 0 )  {^780^^^^^767^806^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^return  ( java.util.Date )  getNullValue ( ctxt ) ;^783^784^785^^^767^806^[ADD] if  ( _hasTextualNull ( value )  )  { return  ( java.util.Date )  getNullValue ( ctxt ) ; }^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^value =  null.getText (  ) .trim (  ) ;^779^^^^^767^806^[REPLACE] value = p.getText (  ) .trim (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return ctxt .converterInstance ( null )  ;^786^^^^^767^806^[REPLACE] return ctxt.parseDate ( value ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^String value = false;^776^^^^^767^806^[REPLACE] String value = null;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^787^788^789^^^767^806^[ADD] catch  ( IllegalArgumentException iae )  { throw ctxt.weirdStringException ( value, _valueClass, "not a valid representation  ( error: "+iae.getMessage (  ) +" ) " ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.START_ARRAY  || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^793^^^^^767^806^[REPLACE] if  ( t == JsonToken.START_ARRAY )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^793^794^795^796^797^767^806^[ADD] if  ( t == JsonToken.START_ARRAY )  { if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { p.nextToken (  ) ; final Date parsed = _parseDate ( p, ctxt ) ; t = p.nextToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS  )  && t ==  ( JsonToken.VALUE_NUMBER_INT )  )  )  {^794^^^^^767^806^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY )  {^798^^^^^767^806^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^798^799^800^801^^767^806^[ADD] if  ( t != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array" ) ; }^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return ;^799^800^^^^767^806^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array" ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array" ) ;^799^800^^^^767^806^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array" ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^797^^^^^767^806^[ADD] t = p.nextToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^802^^^^^767^806^[REPLACE] return parsed;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^796^^^^^767^806^[REPLACE] final Date parsed = _parseDate ( p, ctxt ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^799^800^^^^767^806^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array" ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^t = jp.nextToken (  )  ;^797^^^^^767^806^[REPLACE] t = p.nextToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^t = p.nextToken (  ) ;^796^797^^^^767^806^[ADD] final Date parsed = _parseDate ( p, ctxt ) ; t = p.nextToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^799^800^^^^767^806^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array" ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_NUMBER_INT )  && ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^794^^^^^767^806^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^794^795^796^797^^767^806^[ADD] if  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { p.nextToken (  ) ; final Date parsed = _parseDate ( p, ctxt ) ; t = p.nextToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  ==  JsonToken.END_ARRAY  || ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^798^^^^^767^806^[REPLACE] if  ( t != JsonToken.END_ARRAY )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[ADD]^^805^^^^^767^806^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^805^^^^^767^806^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  IllegalArgumentException iae  [TYPE]  Date parsed  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = p.getCurrentTokenId (  ) ;^829^^^^^828^848^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^830^^^^^828^848^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^return p.getByteValue (  )  ;^831^^^^^828^848^[REPLACE] return p.getText (  ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^return p.nextToken (  ) ;^831^^^^^828^848^[REPLACE] return p.getText (  ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^if  (  ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^834^^^^^828^848^[REPLACE] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[ADD]^p.nextToken (  ) ;final String parsed = _parseString ( p, ctxt ) ;^834^835^836^837^838^828^848^[ADD] if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { p.nextToken (  ) ; final String parsed = _parseString ( p, ctxt ) ; if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY,^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (   )  ||  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )   ==  JsonToken.END_ARRAY )  {^837^^^^^828^848^[REPLACE] if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[ADD]^^837^838^839^840^^828^848^[ADD] if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ; }^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^return ;^838^839^^^^828^848^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.weirdStringException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^838^839^^^^828^848^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[ADD]^^838^839^^^^828^848^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^return value;^841^^^^^828^848^[REPLACE] return parsed;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^final Boolean parsed = _parseBoolean ( p, ctxt )  ;^836^^^^^828^848^[REPLACE] final String parsed = _parseString ( p, ctxt ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array" )  ;^838^839^^^^828^848^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (  )   ==  JsonToken.END_ARRAY )  {^837^^^^^828^848^[REPLACE] if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[ADD]^^843^^^^^828^848^[ADD] String value = p.getValueAsString (  ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^if  ( value == false )  {^844^^^^^828^848^[REPLACE] if  ( value != null )  {^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^return parsed;^845^^^^^828^848^[REPLACE] return value;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^return ;^847^^^^^828^848^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^ctxt.mappingException ( _valueClass, p.getCurrentToken (  )  )  ;^847^^^^^828^848^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REPLACE]^jp.getCurrentToken (  )  ;^847^^^^^828^848^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[REMOVE]^jp.getCurrentToken (  )  ;^847^^^^^828^848^[REMOVE] ^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String parsed  value  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser p 
[ADD]^^859^^^^^858^877^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT )  && ( t  !=  JsonToken.START_ARRAY )  {^860^^^^^858^877^[REPLACE] if  ( t == JsonToken.START_ARRAY )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^}  else {^868^^^^^858^877^[REPLACE] } else if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT  )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^869^^^^^858^877^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  || ( str .length (  )   )  {^871^^^^^858^877^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^872^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^872^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .trim (  )  ;^870^^^^^858^877^[REPLACE] String str = jp.getText (  ) .trim (  ) ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( str.length (  )  )  {^871^^^^^858^877^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^return null;^871^872^873^^^858^877^[ADD] if  ( str.isEmpty (  )  )  { return null; }^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return false  ;^872^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return this;^872^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.nextToken (  ) .trim (  ) ;^870^^^^^858^877^[REPLACE] String str = jp.getText (  ) .trim (  ) ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  && ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^869^^^^^858^877^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REMOVE]^if  ( ! ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  )  {     _failDoubleToIntCoercion ( p, ctxt, "Byte" ) ; }^869^^^^^858^877^[REMOVE] ^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( str.length (   )  && t ==  ( JsonToken.VALUE_STRING )  )  )  {^871^^^^^858^877^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( str .length (  )   )  {^871^^^^^858^877^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^^870^^^^^858^877^[ADD] String str = jp.getText (  ) .trim (  ) ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT  )  || t ==  ( JsonToken.END_ARRAY )  )  )  {^861^^^^^858^877^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT )  && ( t  !=  JsonToken.END_ARRAY )  {^863^^^^^858^877^[REPLACE] if  ( t == JsonToken.END_ARRAY )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^return null;^863^864^865^^^858^877^[ADD] if  ( t == JsonToken.END_ARRAY )  { return null; }^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return this;^864^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^t = p.nextToken (  )  ;^862^^^^^858^877^[REPLACE] t = jp.nextToken (  ) ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return false;^864^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException ( _valueClass, t )  ;^866^^^^^858^877^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.END_ARRAY )  {^863^^^^^858^877^[REPLACE] if  ( t == JsonToken.END_ARRAY )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return true;^864^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^^866^^^^^858^877^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT  )  && t ==  ( JsonToken.END_ARRAY )  )  )  {^861^^^^^858^877^[REPLACE] if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^^861^862^863^864^865^858^877^[ADD] if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT )  )  { t = jp.nextToken (  ) ; if  ( t == JsonToken.END_ARRAY )  { return null; }^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ) {^863^^^^^858^877^[REPLACE] if  ( t == JsonToken.END_ARRAY )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_TRUE )  )      return true;^863^^^^^858^877^[REMOVE] ^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return false  ;^864^^^^^858^877^[REPLACE] return null;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^}  if  (   JsonToken.VALUE_STRING )  {^868^^^^^858^877^[REPLACE] } else if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_NUMBER_FLOAT )  )  {     if  ( ! ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_FLOAT_AS_INT )  )  )  {         _failDoubleToIntCoercion ( p, ctxt, "Byte" ) ;     }     return p.getByteValue (  ) ; }^868^^^^^858^877^[REMOVE] ^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^String str = jp.getText (  ) .trim (  ) ;return null;^869^870^871^872^873^858^877^[ADD] if  ( ctxt.isEnabled ( DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT )  )  { String str = jp.getText (  ) .trim (  ) ; if  ( str.isEmpty (  )  )  { return null; }^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t ==  ( JsonToken.VALUE_STRING )  && ( str.length (  )  )  {^871^^^^^858^877^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( str.length (   )  || t ==  ( JsonToken.VALUE_STRING )  )  )  {^871^^^^^858^877^[REPLACE] if  ( str.isEmpty (  )  )  {^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp .getByteValue (  )  .trim (  ) ;^870^^^^^858^877^[REPLACE] String str = jp.getText (  ) .trim (  ) ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException ( _valueClass, t )  ;^876^^^^^858^877^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( null , t )   ;^876^^^^^858^877^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^^876^^^^^858^877^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _deserializeFromEmpty [TYPE] T [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String str  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^final int len = text .isEmpty (  )  ;^957^^^^^956^971^[REPLACE] final int len = text.length (  ) ;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^if  ( len  !=  0 )  {^958^^^^^956^971^[REPLACE] if  ( len > 0 )  {^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^if  ( F_MASK_INT_COERCIONS > '9' && ch < '0' )  {^964^^^^^956^971^[REPLACE] if  ( ch > '9' || ch < '0' )  {^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[ADD]^^964^965^966^^^956^971^[ADD] if  ( ch > '9' || ch < '0' )  { return false; }^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^return null  ;^965^^^^^956^971^[REPLACE] return false;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^return false;^968^^^^^956^971^[REPLACE] return true;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^int ch = text.charAt ( i )  ;^959^^^^^956^971^[REPLACE] char c = text.charAt ( 0 ) ;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^int i  =  1 ;^961^^^^^956^971^[REPLACE] int i =  ( c == '-' || c == '+' )  ? 1 : 0;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^char c = text.charAt ( 0 )  ;^963^^^^^956^971^[REPLACE] int ch = text.charAt ( i ) ;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^return true;^970^^^^^956^971^[REPLACE] return false;^[METHOD] _isIntNumber [TYPE] boolean [PARAMETER] String text [CLASS] StdDeserializer   [TYPE]  char c  [TYPE]  Class _valueClass  vc  [TYPE]  String text  [TYPE]  boolean false  true  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value 
[REPLACE]^final AnnotationIntrospector intr = ctxt.getDeserializationFeatures (  ) ;^993^^^^^992^1009^[REPLACE] final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector (  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( intr == false && prop != false )  {^994^^^^^992^1009^[REPLACE] if  ( intr != null && prop != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( member == null )  {^996^^^^^992^1009^[REPLACE] if  ( member != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( convDef == true )  {^998^^^^^992^1009^[REPLACE] if  ( convDef != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( existingDeserializer != null )  {^1001^^^^^992^1009^[REPLACE] if  ( existingDeserializer == null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^1001^1002^1003^^^992^1009^[ADD] if  ( existingDeserializer == null )  { existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ; }^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^existingDeserializer =  null.findContextualValueDeserializer ( delegateType, prop ) ;^1002^^^^^992^1009^[REPLACE] existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( conv, delegateType, null ) ;^1004^^^^^992^1009^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt.converterInstance ( prop .findPropertyFormat ( null )  , convDef ) ;^999^^^^^992^1009^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^^1000^^^^^992^1009^[ADD] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^^1002^^^^^992^1009^[ADD] existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( this, delegateType, existingDeserializer ) ;^1004^^^^^992^1009^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt .findContextualValueDeserializer ( delegateType , prop )  ;^999^^^^^992^1009^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = conv.getInputType ( ctxt .getDefaultPropertyFormat ( false )   ) ;^1000^^^^^992^1009^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( convDef == false )  {^998^^^^^992^1009^[REPLACE] if  ( convDef != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^998^999^1000^1001^1002^992^1009^[ADD] if  ( convDef != null )  { Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ; JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ; if  ( existingDeserializer == null )  { existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( null != null )  {^1001^^^^^992^1009^[REPLACE] if  ( existingDeserializer == null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( conv, delegateType, false ) ;^1004^^^^^992^1009^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt.parseDate ( prop.getMember (  ) , convDef ) ;^999^^^^^992^1009^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = true.getInputType ( ctxt.getTypeFactory (  )  ) ;^1000^^^^^992^1009^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^AnnotatedMember member = prop .findPropertyFormat ( null )  ;^995^^^^^992^1009^[REPLACE] AnnotatedMember member = prop.getMember (  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( convDef == null )  {^998^^^^^992^1009^[REPLACE] if  ( convDef != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( conv, delegateType, this ) ;^1004^^^^^992^1009^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = false.getInputType ( ctxt.getTypeFactory (  )  ) ;^1000^^^^^992^1009^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( existingDeserializer != this )  {^1001^^^^^992^1009^[REPLACE] if  ( existingDeserializer == null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^^1001^1002^1003^^^992^1009^[ADD] if  ( existingDeserializer == null )  { existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ; }^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( true, delegateType, existingDeserializer ) ;^1004^^^^^992^1009^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^999^1000^^^^992^1009^[ADD] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ; JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( trueDef == null )  {^998^^^^^992^1009^[REPLACE] if  ( convDef != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt.converterInstance ( prop .findPropertyFormat ( 0 )  , convDef ) ;^999^^^^^992^1009^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = null.getInputType ( ctxt.getTypeFactory (  )  ) ;^1000^^^^^992^1009^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^AnnotatedMember member = prop .findPropertyFormat ( false )  ;^995^^^^^992^1009^[REPLACE] AnnotatedMember member = prop.getMember (  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[ADD]^^999^^^^^992^1009^[ADD] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^return null;^1008^^^^^992^1009^[REPLACE] return existingDeserializer;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  AnnotatedMember member  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( instanceOrClass != null  && ctxt.handleUnknownProperty ( jp, this, instanceOrClass, propName )  )  {^1077^^^^^1076^1091^[REPLACE] if  ( instanceOrClass == null )  {^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  typeForDefaults  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  JsonParser jp 
[ADD]^^1078^^^^^1076^1091^[ADD] instanceOrClass = handledType (  ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  typeForDefaults  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( ctxt .handledType (  )   )  {^1081^^^^^1076^1091^[REPLACE] if  ( ctxt.handleUnknownProperty ( jp, this, instanceOrClass, propName )  )  {^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  typeForDefaults  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^return 0  ;^1082^^^^^1076^1091^[REPLACE] return;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  typeForDefaults  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^ctxt.weirdStringException ( instanceOrClass, propName, this ) ;^1085^^^^^1076^1091^[REPLACE] ctxt.reportUnknownProperty ( instanceOrClass, propName, this ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  typeForDefaults  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  JsonParser jp 
[REPLACE]^jp.getIntValue (  ) ;^1090^^^^^1076^1091^[REPLACE] jp.skipChildren (  ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  typeForDefaults  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  parsed  serialVersionUID  [TYPE]  int F_MASK_INT_COERCIONS  ch  feats  i  len  parsed  value  [TYPE]  JsonParser jp 
