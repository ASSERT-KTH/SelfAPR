[REPLACE]^private static final long serialVersionUID = 1;^16^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] SimpleType  
[REPLACE]^if  ( cls.isArray (  )  || ( Map.class.isAssignableFrom ( null )  )  {^106^^^^^102^119^[REPLACE] if  ( Map.class.isAssignableFrom ( cls )  )  {^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[ADD]^^106^107^108^^^102^119^[ADD] if  ( Map.class.isAssignableFrom ( cls )  )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^return ;^107^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^( subclass.getName (  )  )  ;^107^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^throw new IllegalArgumentException (  (  ( "Can not construct SimpleType for a Collection  ( class: " +  ( cls.getName (  )  )  )  + " ) " )  )  ;^107^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^if  ( Collection.class .isArray (  )   )  {^109^^^^^102^119^[REPLACE] if  ( Collection.class.isAssignableFrom ( cls )  )  {^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[ADD]^^110^^^^^102^119^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^( subclass.getName (  )  )  ;^110^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^throw new IllegalArgumentException (  (  ( "Can not construct SimpleType for a Map  ( class: " +  ( cls.getName (  )  )  )  + " ) " )  )  ;^110^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^if  ( cls.getName (  )  )  {^113^^^^^102^119^[REPLACE] if  ( cls.isArray (  )  )  {^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^throw new IllegalArgumentException (  (  ( "Can not construct SimpleType for a Map  ( class: " +  ( cls.getName (  )  )  )  + " ) " )  )  ;^114^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^( subclass.getName (  )  )  ;^114^^^^^102^119^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[ADD]^^116^^^^^102^119^[ADD] TypeBindings b = TypeBindings.emptyBindings (  ) ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^return new SimpleType ( true, b, _buildSuperClass ( cls.getSuperclass (  ) , b ) , false, false, false, false ) ;^117^118^^^^102^119^[REPLACE] return new SimpleType ( cls, b, _buildSuperClass ( cls.getSuperclass (  ) , b ) , null, null, null, false ) ;^[METHOD] construct [TYPE] SimpleType [PARAMETER] Class<?> cls [CLASS] SimpleType   [TYPE]  Class cls  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  TypeBindings b 
[REPLACE]^if  (false  &&  false )  {^125^^^^^124^167^[REPLACE] if  ( _class == subclass )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^return this;^125^126^127^^^124^167^[ADD] if  ( _class == subclass )  { return this; }^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return null;^126^^^^^124^167^[REPLACE] return this;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !_class.isAssignableFrom ( this )  )  {^132^^^^^124^167^[REPLACE] if  ( !_class.isAssignableFrom ( subclass )  )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new SimpleType ( subclass, _bindings, superb, null, _valueHandler, _typeHandler, _asStatic )  ;^137^138^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^141^^^^^124^167^[ADD] Class<?> next = subclass.getSuperclass (  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( next  ||  _class )  {^142^^^^^124^167^[REPLACE] if  ( next == _class )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new SimpleType ( subclass, _bindings, superb, null, _valueHandler, _typeHandler, _asStatic )  ;^143^144^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  (  ( next == null )  && _class.isAssignableFrom ( next )  )  {^146^^^^^124^167^[REPLACE] if  (  ( next != null )  && _class.isAssignableFrom ( next )  )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^146^147^148^149^150^124^167^[ADD] if  (  ( next != null )  && _class.isAssignableFrom ( next )  )  { JavaType superb = _narrow ( next ) ; return new SimpleType ( subclass, _bindings, superb, null, _valueHandler, _typeHandler, _asStatic ) ; }^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new SimpleType ( subclass, _bindings, superb, true, _valueHandler, _typeHandler, _asStatic ) ;^148^149^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, superb, null, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^JavaType superb = _narrow ( iface )  ;^147^^^^^124^167^[REPLACE] JavaType superb = _narrow ( next ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new SimpleType ( this, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic )  ;^148^149^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, superb, null, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^JavaType superb = _narrow ( null ) ;^147^^^^^124^167^[REPLACE] JavaType superb = _narrow ( next ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^Class<?>[] nextI = null.getInterfaces (  ) ;^152^^^^^124^167^[REPLACE] Class<?>[] nextI = subclass.getInterfaces (  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  (   _class )  {^154^^^^^124^167^[REPLACE] if  ( iface == _class )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( ! ( _class.isAssignableFrom ( subclass )  )  )  {     return new SimpleType ( subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic ) ; }^154^^^^^124^167^[REMOVE] ^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new SimpleType ( subclass, _bindings, true, new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic ) ;^155^156^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, null, new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( _class.isAssignableFrom ( iface  )  ||  ( _class )  == subclass  )  )  {^158^^^^^124^167^[REPLACE] if  ( _class.isAssignableFrom ( iface )  )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new SimpleType ( this, _bindings, this, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^160^161^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, null, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^JavaType superb = _narrow ( next )  ;^159^^^^^124^167^[REPLACE] JavaType superb = _narrow ( iface ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^153^154^155^156^157^124^167^[ADD] for  ( Class<?> iface : nextI )  { if  ( iface == _class )  { return new SimpleType ( subclass, _bindings, null, new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic ) ; }^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( true  !=  _class )  {^154^^^^^124^167^[REPLACE] if  ( iface == _class )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^154^155^156^157^^124^167^[ADD] if  ( iface == _class )  { return new SimpleType ( subclass, _bindings, null, new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic ) ; }^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( _class.isAssignableFrom ( iface  )  &&  ( _class )  == subclass  )  )  {^158^^^^^124^167^[REPLACE] if  ( _class.isAssignableFrom ( iface )  )  {^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new SimpleType ( this, _bindings, false, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^160^161^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, null, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^159^160^161^162^^124^167^[ADD] JavaType superb = _narrow ( iface ) ; return new SimpleType ( subclass, _bindings, null, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ; }^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new SimpleType ( false, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic )  ;^155^156^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, null, new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return  new SimpleType ( this, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic )  ;^160^161^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, null, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new SimpleType ( subclass, _bindings, false, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^160^161^^^^124^167^[REPLACE] return new SimpleType ( subclass, _bindings, null, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException (  (  ( "Can not construct SimpleType for a Map  ( class: " +  ( cls.getName (  )  )  )  + " ) " )  )  ;^165^166^^^^124^167^[REPLACE] throw new IllegalArgumentException  (" ")  +" to " +_class.getName (  )  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException  (" ")  +" to " +_class.isAssignableFrom (  )  ) ;^165^166^^^^124^167^[REPLACE] throw new IllegalArgumentException  (" ")  +" to " +_class.getName (  )  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^165^166^^^^124^167^[ADD] throw new IllegalArgumentException  (" ")  +" to " +_class.getName (  )  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^( cls.getName (  )  )  ;^166^^^^^124^167^[REPLACE] +_class.getName (  )  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^166^^^^^124^167^[ADD] +_class.getName (  )  ) ;^[METHOD] _narrow [TYPE] JavaType [PARAMETER] Class<?> subclass [CLASS] SimpleType   [TYPE]  Class iface  next  subclass  [TYPE]  JavaType superb  [TYPE]  Class[] nextI  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^StringBuilder sb = new StringBuilder ( 40 )  ;^218^^^^^217^234^[REPLACE] StringBuilder sb = new StringBuilder (  ) ;^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^( _class.getName (  )  )  ;^219^^^^^217^234^[REPLACE] sb.append ( _class.getName (  )  ) ;^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^sb.append ( _class .getInterfaces (  )   ) ;^219^^^^^217^234^[REPLACE] sb.append ( _class.getName (  )  ) ;^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^if  ( count  ==  0 )  {^222^^^^^217^234^[REPLACE] if  ( count > 0 )  {^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^if  ( i  !=  0 << 1 )  {^226^^^^^217^234^[REPLACE] if  ( i > 0 )  {^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[ADD]^sb.append ( ',' ) ;^226^227^228^^^217^234^[ADD] if  ( i > 0 )  { sb.append ( ',' ) ; }^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^sb.append ( '<' )  ;^227^^^^^217^234^[REPLACE] sb.append ( ',' ) ;^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[ADD]^^224^225^226^227^228^217^234^[ADD] for  ( int i = 0; i < count; ++i )  { JavaType t = containedType ( i ) ; if  ( i > 0 )  { sb.append ( ',' ) ; }^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^JavaType superb = _narrow ( next )  ;^225^^^^^217^234^[REPLACE] JavaType t = containedType ( i ) ;^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^if  ( i  <  0 )  {^226^^^^^217^234^[REPLACE] if  ( i > 0 )  {^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[ADD]^^226^227^228^^^217^234^[ADD] if  ( i > 0 )  { sb.append ( ',' ) ; }^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
[REPLACE]^return sb.StringBuilder (  ) ;^233^^^^^217^234^[REPLACE] return sb.toString (  ) ;^[METHOD] buildCanonicalName [TYPE] String [PARAMETER] [CLASS] SimpleType   [TYPE]  JavaType t  [TYPE]  boolean false  true  [TYPE]  StringBuilder sb  [TYPE]  long serialVersionUID  [TYPE]  int count  i 
