[REPLACE]^private static final long serialVersionUID  = null ;^14^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] StringDeserializer  
[REPLACE]^public  static StringDeserializer instance = new StringDeserializer (  ) ;^19^^^^^^^[REPLACE] public final static StringDeserializer instance = new StringDeserializer (  ) ;^ [CLASS] StringDeserializer  
[REPLACE]^if  ( p.hasToken ( JsonToken.VALUE_STRING  )  ||  ( t ==  ( JsonToken.START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )  )  {^30^^^^^29^62^[REPLACE] if  ( p.hasToken ( JsonToken.VALUE_STRING )  )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^return p.getText (  ) ;^30^31^32^^^29^62^[ADD] if  ( p.hasToken ( JsonToken.VALUE_STRING )  )  { return p.getText (  ) ; }^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return p .getCurrentToken (  )  ;^31^^^^^29^62^[REPLACE] return p.getText (  ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return p.nextToken (  ) ;^31^^^^^29^62^[REPLACE] return p.getText (  ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^JsonToken t = p.nextToken (  ) ;^33^^^^^29^62^[REPLACE] JsonToken t = p.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  (  ctxt .getBase64Variant (  )   )  {^35^^^^^29^62^[REPLACE] if  (  ( t == JsonToken.START_ARRAY )  && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( p.nextToken (  )   ==  JsonToken.END_ARRAY )  {^38^^^^^29^62^[REPLACE] if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return ;^39^40^^^^29^62^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt .mappingException (  )  ;^39^40^^^^29^62^[REPLACE] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^42^^^^^29^62^[REPLACE] return parsed;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^38^39^40^41^^29^62^[ADD] if  ( p.nextToken (  )  != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ; }^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^39^40^^^^29^62^[ADD] throw ctxt.wrongTokenException ( p, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array" ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_EMBEDDED_OBJECT )  {^45^^^^^29^62^[REPLACE] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^45^46^47^48^49^29^62^[ADD] if  ( t == JsonToken.VALUE_EMBEDDED_OBJECT )  { Object ob = p.getEmbeddedObject (  ) ; if  ( ob == null )  { return null; }^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( ob != null )  {^47^^^^^29^62^[REPLACE] if  ( ob == null )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return true;^48^^^^^29^62^[REPLACE] return null;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( !String instanceof byte[] )  {^50^^^^^29^62^[REPLACE] if  ( ob instanceof byte[] )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return ctxt.getBase64Variant (  ) .encode (  ( byte[] )  ob, true ) ;^51^^^^^29^62^[REPLACE] return ctxt.getBase64Variant (  ) .encode (  ( byte[] )  ob, false ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return false;^48^^^^^29^62^[REPLACE] return null;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return ctxt .isEnabled (  )  .encode (  ( byte[] )  ob, true ) ;^51^^^^^29^62^[REPLACE] return ctxt.getBase64Variant (  ) .encode (  ( byte[] )  ob, false ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^Object ob = p.getText (  ) ;^46^^^^^29^62^[REPLACE] Object ob = p.getEmbeddedObject (  ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return this;^48^^^^^29^62^[REPLACE] return null;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( ! ob instanceof byte[] )  {^50^^^^^29^62^[REPLACE] if  ( ob instanceof byte[] )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^50^51^52^^^29^62^[ADD] if  ( ob instanceof byte[] )  { return ctxt.getBase64Variant (  ) .encode (  ( byte[] )  ob, false ) ; }^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^57^^^^^29^62^[ADD] String text = p.getValueAsString (  ) ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^if  ( text == this )  {^58^^^^^29^62^[REPLACE] if  ( text != null )  {^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return true  ;^59^^^^^29^62^[REPLACE] return text;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^return ;^61^^^^^29^62^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[REPLACE]^throw ctxt.wrongTokenException  (" ")  ;^61^^^^^29^62^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
[ADD]^^61^^^^^29^62^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] String [PARAMETER] JsonParser p DeserializationContext ctxt [CLASS] StringDeserializer   [TYPE]  boolean false  true  [TYPE]  StringDeserializer instance  [TYPE]  DeserializationContext ctxt  [TYPE]  JsonToken t  [TYPE]  Object ob  [TYPE]  String parsed  text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser p 
