[REPLACE]^private static final long serialVersionUID  = null ;^15^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] StackTraceElementDeserializer  
[REPLACE]^JsonToken t = jp.getCurrentName (  ) ;^22^^^^^21^61^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.START_OBJECT )  {^24^^^^^21^61^[REPLACE] if  ( t == JsonToken.START_OBJECT )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  else {^49^^^^^21^61^[REPLACE] } else if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^}   jp.nextToken (  ) ;final StackTraceElement value = deserialize ( jp, ctxt ) ;^49^50^51^52^53^21^61^[ADD] else if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  { jp.nextToken (  ) ; final StackTraceElement value = deserialize ( jp, ctxt ) ; if  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY,^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (  )   ==  JsonToken.END_ARRAY )  {^52^^^^^21^61^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^52^53^54^55^56^21^61^[ADD] if  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  { throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array" ) ; }^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^return ;^53^54^55^^^21^61^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( t )  ;^53^54^55^^^21^61^[REPLACE] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^51^^^^^21^61^[ADD] final StackTraceElement value = deserialize ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "className".equals ( propName  )  && t.isNumeric (  )  )  )  {^30^^^^^21^61^[REPLACE] if  ( "className".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  else {^32^^^^^21^61^[REPLACE] } else if  ( "fileName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "lineNumber".equals ( propName )  )  {^34^^^^^21^61^[REPLACE] } else if  ( "lineNumber".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  else {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  else {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^}   handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;^42^43^44^45^46^21^61^[ADD] else if  ( "nativeMethod".equals ( propName )  )  {  } else { handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ; }^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^handleUnknownProperty ( jp, ctxt, _valueClass, methodName ) ;^45^^^^^42^46^[REPLACE] handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^fileName = jp.getText (  )  ;^41^^^^^21^61^[REPLACE] methodName = jp.getText (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^} else if  ( "nativeMethod".equals ( methodName )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^38^39^^^^35^39^[ADD] throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ; }^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^throw JsonMappingException.from ( jp, "Non-numeric token  ( "t" )  for property 'lineNumber'" ) ;^38^^^^^35^39^[REPLACE] throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^36^^^^^21^61^[ADD] lineNumber = jp.getIntValue (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^38^39^^^^21^61^[ADD] throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ; }^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t.isNumeric (   )  || "methodName".equals ( propName )  )  )  {^35^^^^^21^61^[REPLACE] if  ( t.isNumeric (  )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^return ;^38^^^^^35^39^[REPLACE] throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "nativeMethod".equals ( propName )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^} else if  ( "nativeMethod".equals ( propName  )  && "className".equals ( propName )  )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^return ;^38^^^^^21^61^[REPLACE] throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^methodName = jp.getText (  )  ;^33^^^^^21^61^[REPLACE] fileName = jp.getText (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  else {^34^^^^^21^61^[REPLACE] } else if  ( "lineNumber".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^}   lineNumber = jp.getIntValue (  ) ;^34^35^36^37^38^21^61^[ADD] else if  ( "lineNumber".equals ( propName )  )  { if  ( t.isNumeric (  )  )  { lineNumber = jp.getIntValue (  ) ; } else { throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "methodName".equals ( methodName )  )  {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^41^^^^^21^61^[ADD] methodName = jp.getText (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t.isNumeric (   )  && "methodName".equals ( propName )  )  )  {^35^^^^^21^61^[REPLACE] if  ( t.isNumeric (  )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^lineNumber = jp.getIntValue (  ) ;^35^36^37^38^39^21^61^[ADD] if  ( t.isNumeric (  )  )  { lineNumber = jp.getIntValue (  ) ; } else { throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ; }^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^lineNumber =  null.getIntValue (  ) ;^36^^^^^21^61^[REPLACE] lineNumber = jp.getIntValue (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "methodName".equals ( propName )  && ( t.isNumeric (  )  )  {^35^^^^^21^61^[REPLACE] if  ( t.isNumeric (  )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( t.isNumeric (  )  && ( "methodName".equals ( propName )  )  {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^}^40^41^42^^^21^61^[ADD] else if  ( "methodName".equals ( propName )  )  { methodName = jp.getText (  ) ; } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^31^^^^^21^61^[ADD] className = jp.getText (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REMOVE]^if  ( "className".equals ( propName )  )  {     className = jp.getText (  ) ; }else     if  ( "fileName".equals ( propName )  )  {         fileName = jp.getText (  ) ;     }else         if  ( "lineNumber".equals ( propName )  )  {             if  ( t.isNumeric (  )  )  {                 lineNumber = jp.getIntValue (  ) ;             }else {                 throw from ( jp,  (  ( "Non-numeric token  ( " + t )  + " )  for property 'lineNumber'" )  ) ;             }         }else             if  ( "methodName".equals ( propName )  )  {                 methodName = jp.getText (  ) ;             }else                 if  ( "nativeMethod".equals ( propName )  )  {                 }else {                     handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;                 }^32^^^^^21^61^[REMOVE] ^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "methodName".equals ( propName )  )  {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^} else if  ( "className".equals ( propName )  || ( "nativeMethod".equals ( propName )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^45^^^^^42^46^[ADD] handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "nativeMethod".equals ( propName  )  && "className".equals ( propName )  )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^33^^^^^21^61^[ADD] fileName = jp.getText (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^} else if  ( "lineNumber".equals ( propName  )  && t.isNumeric (  )  )  )  {^34^^^^^21^61^[REPLACE] } else if  ( "lineNumber".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "methodName".equals ( propName  )  && t.isNumeric (  )  )  )  {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "className".equals ( propName )  && ( "nativeMethod".equals ( methodName )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^} else if  ( "nativeMethod".equals ( methodName  )  && "className".equals ( propName )  )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REMOVE]^"lineNumber".equals ( propName )  ;^45^^^^^42^46^[REMOVE] ^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^28^29^^^^21^61^[ADD] while  (  ( t = jp.nextValue (  )  )  != JsonToken.END_OBJECT )  { String propName = jp.getCurrentName (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^methodName = jp.getText (  )  ;^31^^^^^21^61^[REPLACE] className = jp.getText (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^return new StackTraceElement ( className, methodName, propName, lineNumber ) ;^48^^^^^21^61^[REPLACE] return new StackTraceElement ( className, methodName, fileName, lineNumber ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^String methodName = ""  ;^25^^^^^21^61^[REPLACE] String className = "", methodName = "", fileName = "";^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^String className = ""  ;^25^^^^^21^61^[REPLACE] String className = "", methodName = "", fileName = "";^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^25^^^^^21^61^[ADD] String className = "", methodName = "", fileName = "";^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^int lineNumber = -3;^26^^^^^21^61^[REPLACE] int lineNumber = -1;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^String propName = jp.getIntValue (  ) ;^29^^^^^21^61^[REPLACE] String propName = jp.getCurrentName (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "className".equals ( propName  )  || t.isNumeric (  )  )  )  {^30^^^^^21^61^[REPLACE] if  ( "className".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REMOVE]^if  ( "className".equals ( propName )  )  {     className = jp.getText (  ) ; }else     if  ( "fileName".equals ( propName )  )  {         fileName = jp.getText (  ) ;     }else         if  ( "lineNumber".equals ( propName )  )  {             if  ( t.isNumeric (  )  )  {                 lineNumber = jp.getIntValue (  ) ;             }else {                 throw from ( jp,  (  ( "Non-numeric token  ( " + t )  + " )  for property 'lineNumber'" )  ) ;             }         }else             if  ( "methodName".equals ( propName )  )  {                 methodName = jp.getText (  ) ;             }else                 if  ( "nativeMethod".equals ( propName )  )  {                 }else {                     handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;                 }^34^^^^^21^61^[REMOVE] ^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( t.isNumeric (  )  || ( "methodName".equals ( methodName )  )  {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^35^36^37^38^39^21^61^[ADD] if  ( t.isNumeric (  )  )  { lineNumber = jp.getIntValue (  ) ; } else { throw JsonMappingException.from ( jp, "Non-numeric token  ( "+t+" )  for property 'lineNumber'" ) ; }^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "nativeMethod".equals ( propName  )  || "className".equals ( propName )  )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "lineNumber".equals ( propName  )  && t.isNumeric (  )  )  )  {^34^^^^^21^61^[REPLACE] } else if  ( "lineNumber".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "className".equals ( propName )  && ( "nativeMethod".equals ( propName )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "methodName".equals ( methodName  )  && t.isNumeric (  )  )  )  {^40^^^^^21^61^[REPLACE] } else if  ( "methodName".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REMOVE]^if  ( "lineNumber".equals ( propName )  )  {     if  ( t.isNumeric (  )  )  {         lineNumber = jp.getIntValue (  ) ;     }else {         throw from ( jp,  (  ( "Non-numeric token  ( " + t )  + " )  for property 'lineNumber'" )  ) ;     } }else     if  ( "methodName".equals ( propName )  )  {         methodName = jp.getText (  ) ;     }else         if  ( "nativeMethod".equals ( propName )  )  {         }else {             handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;         }^40^^^^^21^61^[REMOVE] ^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^}  if  ( "nativeMethod".equals ( methodName )  )  {^42^^^^^21^61^[REPLACE] } else if  ( "nativeMethod".equals ( propName )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "methodName".equals ( propName )  || ( t.isNumeric (  )  )  {^35^^^^^21^61^[REPLACE] if  ( t.isNumeric (  )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REMOVE]^if  ( "methodName".equals ( propName )  )  {     methodName = jp.getText (  ) ; }else     if  ( "nativeMethod".equals ( propName )  )  {     }else {         handleUnknownProperty ( jp, ctxt, _valueClass, propName ) ;     }^42^^^^^21^61^[REMOVE] ^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^} else if  (  ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^49^^^^^21^61^[REPLACE] } else if  ( t == JsonToken.START_ARRAY && ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.nextToken (   )  &&  ( t ==  ( START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )   ==  JsonToken.END_ARRAY )  {^52^^^^^21^61^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^53^54^55^^^21^61^[ADD] throw ctxt.wrongTokenException ( jp, JsonToken.END_ARRAY, "Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array" ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp .getCurrentToken (   )  &&  ( t ==  ( START_ARRAY )  )  &&  ( ctxt.isEnabled ( DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS )  )  )    ==  JsonToken.END_ARRAY )  {^52^^^^^21^61^[REPLACE] if  ( jp.nextToken (  )  != JsonToken.END_ARRAY )  {^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^return new StackTraceElement ( propName, methodName, fileName, lineNumber ) ;^48^^^^^21^61^[REPLACE] return new StackTraceElement ( className, methodName, fileName, lineNumber ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^int lineNumber = -0;^26^^^^^21^61^[REPLACE] int lineNumber = -1;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[ADD]^^29^^^^^21^61^[ADD] String propName = jp.getCurrentName (  ) ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^return ;^60^^^^^21^61^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.wrongTokenException  (" ")  ;^60^^^^^21^61^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] deserialize [TYPE] StackTraceElement [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StackTraceElementDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  StackTraceElement value  [TYPE]  JsonToken t  [TYPE]  String className  fileName  methodName  propName  [TYPE]  long serialVersionUID  [TYPE]  int lineNumber  [TYPE]  JsonParser jp 
