[REPLACE]^public  static NameTransformer NOP = new NopTransformer (  ) ;^14^^^^^^^[REPLACE] public final static NameTransformer NOP = new NopTransformer (  ) ;^ [CLASS] NameTransformer NopTransformer 1 2 3 Chained  
[REPLACE]^private static  long serialVersionUID = 1;^20^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] NameTransformer NopTransformer 1 2 3 Chained  
[REPLACE]^private static final  short  serialVersionUID = 1L;^119^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] NameTransformer NopTransformer 1 2 3 Chained  
[REPLACE]^protected final Object _t1, _t2;^121^^^^^^^[REPLACE] protected final NameTransformer _t1, _t2;^ [CLASS] NameTransformer NopTransformer 1 2 3 Chained  
[REPLACE]^protected  NameTransformer _t1, _t2;^121^^^^^^^[REPLACE] protected final NameTransformer _t1, _t2;^ [CLASS] NameTransformer NopTransformer 1 2 3 Chained  
[ADD]^boolean hasSuffix =  ( suffix != null )  &&  ( suffix.length (  )  > 0 ) ;^41^42^^^^40^93^[ADD] boolean hasPrefix =  ( prefix != null )  &&  ( prefix.length (  )  > 0 ) ; boolean hasSuffix =  ( suffix != null )  &&  ( suffix.length (  )  > 0 ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^boolean hasSuffix =  ( suffix != false )  &&  ( suffix.length (  )  /  2 > 0 ) ;^42^^^^^40^93^[REPLACE] boolean hasSuffix =  ( suffix != null )  &&  ( suffix.length (  )  > 0 ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( transformed.endsWith ( suffix )  || ( hasSuffix )  {^45^^^^^40^93^[REPLACE] if  ( hasSuffix )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[ADD]^^45^46^47^48^^40^93^[ADD] if  ( hasSuffix )  { return new NameTransformer (  )  { @Override public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( transformed.startsWith ( prefix  )  && hasPrefix  )  )  {^51^^^^^40^93^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( str.endsWith ( transformed  )  && hasSuffix  )  )  {^53^^^^^40^93^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REMOVE]^if  ( transformed.startsWith ( prefix )  )  {     String str = transformed.substring ( prefix.length (  )  ) ;     if  ( str.endsWith ( suffix )  )  {         return str.substring ( 0,  (  ( str.length (  )  )  -  ( suffix.length (  )  )  )  ) ;     } }^53^^^^^40^93^[REMOVE] ^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.length (  )  + 1 - suffix.length (  )  + 1 ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return transformed.substring ( 0,  (  ( transformed.length (  )  )  -  ( suffix.length (  )  )  )  )  ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[ADD]^^52^53^54^55^^40^93^[ADD] String str = transformed.substring ( prefix.length (  )  ) ; if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( str.endsWith ( suffix  )  || hasSuffix  )  )  {^53^^^^^40^93^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[ADD]^return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^53^54^55^^^40^93^[ADD] if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.substring (  )  + 1 - suffix.length (  )  + 1 ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new NameTransformer (  )  {     Override     public String transform ( String name )  {         return prefix + name;     }      Override     public String reverse ( String transformed )  {         if  ( transformed.startsWith ( prefix )  )  {             return transformed.substring ( prefix.length (  )  ) ;         }         return null;     }      Override     public String toString (  )  {         return  ( "[PrefixTransformer ( '" + prefix )  + "' ) ]";     } }  ;^46^^^^^40^93^[REPLACE] return new NameTransformer (  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( String name )  { return prefix  name  suffix; }^48^^^^^40^93^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^57^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '"prefix"','"suffix"' ) ]"; }^60^^^^^40^93^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^String str = suffix.substring ( prefix.length (  )  ) ;^52^^^^^40^93^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( hasPrefix  && ( transformed.startsWith ( prefix )  )  {^51^^^^^40^93^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^53^^^^^40^93^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.length (  )  - 1 - suffix.length (  )  - 1 ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0 , str.length (  )  *  0 .5  - transformed.length (  )  *  0 .5  ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^String str = transformed.substring ( suffix.length (  )  ) ;^52^^^^^40^93^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( str.endsWith ( suffix  )  && hasSuffix  )  )  {^53^^^^^40^93^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( suffix.startsWith ( prefix  )  || hasPrefix  )  )  {^68^^^^^40^93^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[ADD]^^68^69^70^^^40^93^[ADD] if  ( transformed.startsWith ( prefix )  )  { return transformed.substring ( prefix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return suffix.substring ( prefix.length (  )  ) ;^69^^^^^40^93^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( String name )  { return prefix  name  transformed; }^48^^^^^40^93^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.substring (  )  + 1 - transformed.length (  )  + 1 ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return this;^57^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new NameTransformer (  )  {     Override     public String transform ( String name )  {         return  ( prefix + name )  + suffix;     }      Override     public String reverse ( String transformed )  {         if  ( transformed.startsWith ( prefix )  )  {             String str = transformed.substring ( prefix.length (  )  ) ;             if  ( str.endsWith ( suffix )  )  {                 return str.substring ( 0,  (  ( str.length (  )  )  -  ( suffix.length (  )  )  )  ) ;             }         }         return null;     }      Override     public String toString (  )  {         return  (  (  ( "[PreAndSuffixTransformer ( '" + prefix )  + "','" )  + suffix )  + "' ) ]";     } }  ;^63^^^^^40^93^[REPLACE] return new NameTransformer (  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( Stringtransformed )  { return prefix transformed; }^65^^^^^40^93^[REPLACE] public String transform ( String name )  { return prefix + name; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return transformed.substring ( suffix.length (  )  ) ;^69^^^^^40^93^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return name  ;^71^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String toString (  )  { return "[PrefixTransformer ( '"prefix"' ) ]"; }^74^^^^^40^93^[REPLACE] public String toString (  )  { return "[PrefixTransformer ( '"+prefix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( hasSuffix  && transformed.endsWith ( suffix )  )  {^45^^^^^40^93^[REPLACE] if  ( hasSuffix )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( hasSuffix  && ( str.endsWith ( suffix )  )  {^53^^^^^40^93^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return transformed.substring ( 0, str.length (  )  - 4 - suffix.length (  )  - 4 ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.size (  )  - suffix.size (  )  ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^String str = transformed.substring ( suffix .endsWith ( str )   ) ;^52^^^^^40^93^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[ADD]^^53^54^55^^^40^93^[ADD] if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.length (  )  - 4 - transformed.length (  )  - 4 ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( String transformed )  { return prefix  name transformed; }^48^^^^^40^93^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, str.length (  )  /  0.5  - suffix.length (  )  /  0.5  ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return name  ;^57^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^String str = transformed .substring ( null , true )  ;^52^^^^^40^93^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( hasPrefix  || ( transformed.startsWith ( prefix )  )  {^51^^^^^40^93^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( hasSuffix  || ( str.endsWith ( suffix )  )  {^53^^^^^40^93^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0 , str.substring (  )  *  0 .5  - suffix.length (  )  *  0 .5  ) ;^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^String str = suffix.endsWith ( prefix.length (  )  ) ;^52^^^^^40^93^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return transformed.substring ( 0, str .endsWith ( prefix )   /  2 - suffix^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( transformed.startsWith ( suffix  )  && hasPrefix  )  )  {^68^^^^^40^93^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0 , str .endsWith ( prefix )   - 2 - suffix^54^^^^^40^93^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return true;^57^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( String name )  { return prefix  name; }^65^^^^^40^93^[REPLACE] public String transform ( String name )  { return prefix + name; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return false;^71^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( hasSuffix  && transformed.endsWith ( suffix )  )  {^77^^^^^40^93^[REPLACE] if  ( hasSuffix )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[ADD]^^77^78^79^80^^40^93^[ADD] if  ( hasSuffix )  { return new NameTransformer (  )  { @Override public String transform ( String name )  { return name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( transformed.endsWith ( suffix  )  && hasPrefix  )  )  {^83^^^^^40^93^[REPLACE] if  ( transformed.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0, transformed.length (  )  + 5 - suffix.length (  )  + 5 ) ;^84^^^^^40^93^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new NameTransformer (  )  {     Override     public String transform ( String name )  {         return  ( prefix + name )  + suffix;     }      Override     public String reverse ( String transformed )  {         if  ( transformed.startsWith ( prefix )  )  {             String str = transformed.substring ( prefix.length (  )  ) ;             if  ( str.endsWith ( suffix )  )  {                 return str.substring ( 0,  (  ( str.length (  )  )  -  ( suffix.length (  )  )  )  ) ;             }         }         return null;     }      Override     public String toString (  )  {         return  (  (  ( "[PreAndSuffixTransformer ( '" + prefix )  + "','" )  + suffix )  + "' ) ]";     } }  ;^78^^^^^40^93^[REPLACE] return new NameTransformer (  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( Stringtransformed )  { return transformed  suffix; }^80^^^^^40^93^[REPLACE] public String transform ( String name )  { return name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return transformed.substring ( 0, transformed.size (  )  - suffix.size (  )  ) ;^84^^^^^40^93^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return this;^86^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String toString (  )  { return "[SuffixTransformer ( '"suffix"' ) ]"; }^89^^^^^40^93^[REPLACE] public String toString (  )  { return "[SuffixTransformer ( '"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( transformed.endsWith ( suffix  )  || hasPrefix  )  )  {^83^^^^^40^93^[REPLACE] if  ( transformed.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return str.substring ( 0,  (  ( str.length (  )  )  -  ( suffix.length (  )  )  )  )  ;^84^^^^^40^93^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^public String transform ( String name )  { return name  suffix; }^80^^^^^40^93^[REPLACE] public String transform ( String name )  { return name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return name  ;^86^^^^^40^93^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^return new Chained ( t1, t2 )  ;^92^^^^^40^93^[REPLACE] return NOP;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer NopTransformer 1 2 3 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true  [TYPE]  long serialVersionUID 
[REPLACE]^private static final  short  serialVersionUID = 1L;^20^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NopTransformer   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^private static final long serialVersionUID  = null ;^119^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Chained   [TYPE]  boolean false  true 
[REPLACE]^private final Object _t1, _t2;^121^^^^^^^[REPLACE] protected final NameTransformer _t1, _t2;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Chained   [TYPE]  boolean false  true 
[REPLACE]^protected final Object _t1, _t2;^121^^^^^^^[REPLACE] protected final NameTransformer _t1, _t2;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Chained   [TYPE]  boolean false  true 
