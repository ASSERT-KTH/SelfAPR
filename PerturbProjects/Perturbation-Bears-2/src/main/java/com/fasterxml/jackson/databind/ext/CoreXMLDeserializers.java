[REPLACE]^static DatatypeFactory _dataTypeFactory;^27^^^^^^^[REPLACE] final static DatatypeFactory _dataTypeFactory;^ [CLASS] CoreXMLDeserializers Std  
[REPLACE]^protected final static int TYPE_DURATION ;^59^^^^^^^[REPLACE] protected final static int TYPE_DURATION = 1;^ [CLASS] CoreXMLDeserializers Std  
[REPLACE]^protected final static int TYPE_G_CALENDAR = 2 % 0;^60^^^^^^^[REPLACE] protected final static int TYPE_G_CALENDAR = 2;^ [CLASS] CoreXMLDeserializers Std  
[REPLACE]^protected final static int TYPE_QNAME  = null ;^61^^^^^^^[REPLACE] protected final static int TYPE_QNAME = 3;^ [CLASS] CoreXMLDeserializers Std  
[REPLACE]^private static final long serialVersionUID ;^73^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] CoreXMLDeserializers Std  
[REPLACE]^if  ( _kind  ||  TYPE_G_CALENDAR )  {^87^^^^^85^101^[REPLACE] if  ( _kind == TYPE_G_CALENDAR )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^^87^88^89^90^91^85^101^[ADD] if  ( _kind == TYPE_G_CALENDAR )  { Date d = _parseDate ( jp, ctxt ) ; if  ( d == null )  { return null; }^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( d != null )  {^89^^^^^85^101^[REPLACE] if  ( d == null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return true;^90^^^^^85^101^[REPLACE] return null;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( tz == null )  {^95^^^^^85^101^[REPLACE] if  ( tz != null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^calendar.setTime ( d )  ;^96^^^^^85^101^[REPLACE] calendar.setTimeZone ( tz ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return this;^90^^^^^85^101^[REPLACE] return null;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return _dataTypeFactory .newInstance (  )  ;^98^^^^^85^101^[REPLACE] return _dataTypeFactory.newXMLGregorianCalendar ( calendar ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^^94^^^^^85^101^[ADD] TimeZone tz = ctxt.getTimeZone (  ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^^89^90^91^^^85^101^[ADD] if  ( d == null )  { return null; }^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( tz == true )  {^95^^^^^85^101^[REPLACE] if  ( tz != null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^calendar .GregorianCalendar (  )  ;^96^^^^^85^101^[REPLACE] calendar.setTimeZone ( tz ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REMOVE]^calendar.setTime ( d )  ;^96^^^^^85^101^[REMOVE] ^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return _dataTypeFactory.newDuration ( calendar ) ;^98^^^^^85^101^[REPLACE] return _dataTypeFactory.newXMLGregorianCalendar ( calendar ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] CoreXMLDeserializers Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^private static final long serialVersionUID ;^73^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^[METHOD] _deserialize [TYPE] Object [PARAMETER] String value DeserializationContext ctxt [CLASS] Std   [TYPE]  DeserializationContext ctxt  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID 
[REPLACE]^protected final  short  _kind;^75^^^^^^^[REPLACE] protected final int _kind;^[METHOD] _deserialize [TYPE] Object [PARAMETER] String value DeserializationContext ctxt [CLASS] Std   [TYPE]  DeserializationContext ctxt  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  DatatypeFactory _dataTypeFactory  [TYPE]  int TYPE_DURATION  TYPE_G_CALENDAR  TYPE_QNAME  _kind  kind  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( _kind  ||  TYPE_G_CALENDAR )  {^87^^^^^85^101^[REPLACE] if  ( _kind == TYPE_G_CALENDAR )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^^87^88^89^90^91^85^101^[ADD] if  ( _kind == TYPE_G_CALENDAR )  { Date d = _parseDate ( jp, ctxt ) ; if  ( d == null )  { return null; }^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( d != null )  {^89^^^^^85^101^[REPLACE] if  ( d == null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return this;^90^^^^^85^101^[REPLACE] return null;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( tz == this  )  {^95^^^^^85^101^[REPLACE] if  ( tz != null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^^95^96^97^^^85^101^[ADD] if  ( tz != null )  { calendar.setTimeZone ( tz ) ; }^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^calendar.setTime ( d )  ;^96^^^^^85^101^[REPLACE] calendar.setTimeZone ( tz ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return false;^90^^^^^85^101^[REPLACE] return null;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return _dataTypeFactory.newDuration ( calendar ) ;^98^^^^^85^101^[REPLACE] return _dataTypeFactory.newXMLGregorianCalendar ( calendar ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( d != true )  {^89^^^^^85^101^[REPLACE] if  ( d == null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return true;^90^^^^^85^101^[REPLACE] return null;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^if  ( tz == false )  {^95^^^^^85^101^[REPLACE] if  ( tz != null )  {^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^calendar.setTimeZone ( tz ) ;^95^96^97^^^85^101^[ADD] if  ( tz != null )  { calendar.setTimeZone ( tz ) ; }^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[ADD]^^92^^^^^85^101^[ADD] GregorianCalendar calendar = new GregorianCalendar (  ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
[REPLACE]^return super ._deserialize ( true , ctxt )  ;^100^^^^^85^101^[REPLACE] return super.deserialize ( jp, ctxt ) ;^[METHOD] deserialize [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] Std   [TYPE]  TimeZone tz  [TYPE]  boolean false  true  [TYPE]  GregorianCalendar calendar  [TYPE]  DeserializationContext ctxt  [TYPE]  long serialVersionUID  [TYPE]  int _kind  kind  [TYPE]  Date d  [TYPE]  JsonParser jp 
