[REPLACE]^protected Object _idType;^22^^^^^^^[REPLACE] protected JsonTypeInfo.Id _idType;^ [CLASS] StdTypeResolverBuilder  
[REPLACE]^protected TypeSerializer _includeAs;^24^^^^^^^[REPLACE] protected JsonTypeInfo.As _includeAs;^ [CLASS] StdTypeResolverBuilder  
[REPLACE]^protected  char  _typeProperty;^26^^^^^^^[REPLACE] protected String _typeProperty;^ [CLASS] StdTypeResolverBuilder  
[REPLACE]^protected boolean _typeIdVisible ;^31^^^^^^^[REPLACE] protected boolean _typeIdVisible = false;^ [CLASS] StdTypeResolverBuilder  
[REPLACE]^protected StdTypeResolverBuilder _customIdResolver;^41^^^^^^^[REPLACE] protected TypeIdResolver _customIdResolver;^ [CLASS] StdTypeResolverBuilder  
[REPLACE]^if  ( _idType != JsonTypeInfo.Id.NONE )  { return null; }^73^^^^^72^89^[REPLACE] if  ( _idType == JsonTypeInfo.Id.NONE )  { return null; }^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^if  ( _idType == JsonTypeInfo.Id.NONE )  { return this; }^73^^^^^72^89^[REPLACE] if  ( _idType == JsonTypeInfo.Id.NONE )  { return null; }^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^if  ( _idType == JsonTypeInfo.Id.NONE )  { return false; }^73^^^^^72^89^[REPLACE] if  ( _idType == JsonTypeInfo.Id.NONE )  { return null; }^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^TypeIdResolver idRes = idResolver ( config, baseType, subtypes, false, true )  ;^74^^^^^72^89^[REPLACE] TypeIdResolver idRes = idResolver ( config, baseType, subtypes, true, false ) ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsPropertyTypeSerializer ( idRes, null, _typeProperty )  ;^77^^^^^72^89^[REPLACE] return new AsArrayTypeSerializer ( idRes, null ) ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsArrayTypeSerializer ( idRes, null )  ;^79^^^^^72^89^[REPLACE] return new AsPropertyTypeSerializer ( idRes, null, _typeProperty ) ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsWrapperTypeSerializer ( _customIdResolver, false ) ;^81^^^^^72^89^[REPLACE] return new AsWrapperTypeSerializer ( idRes, null ) ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsArrayTypeSerializer ( idRes, null )  ;^83^^^^^72^89^[REPLACE] return new AsExternalTypeSerializer ( idRes, null, _typeProperty ) ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsExistingPropertyTypeSerializer ( idRes, false, _typeProperty ) ;^86^^^^^72^89^[REPLACE] return new AsExistingPropertyTypeSerializer ( idRes, null, _typeProperty ) ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^throw new IllegalStateException (  ( "Do not know how to construct standard type id resolver for idType: " +  ( _idType )  )  )  ;^88^^^^^72^89^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] buildTypeSerializer [TYPE] TypeSerializer [PARAMETER] SerializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  SerializationConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^if  (this != JsonTypeInfo.Id.NONE )  { return null; }^101^^^^^100^122^[REPLACE] if  ( _idType == JsonTypeInfo.Id.NONE )  { return null; }^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^if  ( _idType == JsonTypeInfo.Id.NONE )  { return this; }^101^^^^^100^122^[REPLACE] if  ( _idType == JsonTypeInfo.Id.NONE )  { return null; }^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^if  ( _idType == JsonTypeInfo.Id.NONE )  { return true; }^101^^^^^100^122^[REPLACE] if  ( _idType == JsonTypeInfo.Id.NONE )  { return null; }^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^TypeIdResolver idRes = idResolver ( config, baseType, subtypes, true, false )  ;^103^^^^^100^122^[REPLACE] TypeIdResolver idRes = idResolver ( config, baseType, subtypes, false, true ) ;^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsPropertyTypeDeserializer ( baseType, _customIdResolver, _typeProperty, _typeIdVisible, _defaultImpl, _includeAs ) ;^112^113^^^^100^122^[REPLACE] return new AsPropertyTypeDeserializer ( baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl, _includeAs ) ;^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new AsExternalTypeDeserializer ( baseType, _customIdResolver, _typeProperty, _typeIdVisible, _defaultImpl ) ;^118^119^^^^100^122^[REPLACE] return new AsExternalTypeDeserializer ( baseType, idRes, _typeProperty, _typeIdVisible, _defaultImpl ) ;^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return ;^121^^^^^100^122^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] buildTypeDeserializer [TYPE] TypeDeserializer [PARAMETER] DeserializationConfig config JavaType baseType NamedType> subtypes [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  true  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  [TYPE]  DeserializationConfig config  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^if  ( _customIdResolver ==idRes )  { return _customIdResolver; }^191^^^^^189^205^[REPLACE] if  ( _customIdResolver != null )  { return _customIdResolver; }^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[ADD]^^191^192^193^194^195^189^205^[ADD] if  ( _customIdResolver != null )  { return _customIdResolver; } if   (" ")  ; switch  ( _idType )  { case CLASS: return new ClassNameIdResolver ( baseType, config.getTypeFactory (  )  ) ;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^throw new IllegalArgumentException ( "idType can not be null" )  ;^192^^^^^189^205^[REPLACE] if   (" ")  ;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new ClassNameIdResolver ( baseType, null.getTypeFactory (  )  ) ;^195^^^^^189^205^[REPLACE] return new ClassNameIdResolver ( baseType, config.getTypeFactory (  )  ) ;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return new MinimalClassNameIdResolver ( baseType, false.getTypeFactory (  )  ) ;^197^^^^^189^205^[REPLACE] return new MinimalClassNameIdResolver ( baseType, config.getTypeFactory (  )  ) ;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return TypeNameIdResolver.construct ( config, baseType, null, forSer, forDeser ) ;^199^^^^^189^205^[REPLACE] return TypeNameIdResolver.construct ( config, baseType, subtypes, forSer, forDeser ) ;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return this;^201^^^^^189^205^[REPLACE] return null;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
[REPLACE]^return ;^204^^^^^189^205^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] idResolver [TYPE] TypeIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] StdTypeResolverBuilder   [TYPE]  As _includeAs  includeAs  [TYPE]  JavaType baseType  [TYPE]  boolean _typeIdVisible  false  forDeser  forSer  isVisible  true  [TYPE]  MapperConfig config  [TYPE]  Collection subtypes  [TYPE]  Class _defaultImpl  defaultImpl  [TYPE]  Id _idType  idType  [TYPE]  String _typeProperty  typeIdPropName  [TYPE]  TypeIdResolver _customIdResolver  idRes 
