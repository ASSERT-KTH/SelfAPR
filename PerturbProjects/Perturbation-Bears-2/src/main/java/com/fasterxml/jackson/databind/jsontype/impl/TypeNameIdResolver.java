[REPLACE]^protected final Map<String, Object _idToType;^24^^^^^^^[REPLACE] protected final Map<String, JavaType> _idToType;^ [CLASS] TypeNameIdResolver  
[REPLACE]^if   ( forSer  || (" ")  ;^39^^^^^37^76^[REPLACE] if   (" ")  ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^return ;^39^^^^^37^76^[REPLACE] if   (" ")  ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^40^^^^^37^76^[ADD] Map<String, String> typeToId = null;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^41^^^^^37^76^[ADD] Map<String, JavaType> idToType = null;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( true )  {^43^^^^^37^76^[REPLACE] if  ( forSer )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REMOVE]^if  ( forDeser )  {     idToType = new String, JavaType> (  ) ;     typeToId = new String, String> (  ) ; }^43^^^^^37^76^[REMOVE] ^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId = new String, String> (  )  ;^44^^^^^37^76^[REPLACE] typeToId = new HashMap<String, String> (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^44^^^^^37^76^[ADD] typeToId = new HashMap<String, String> (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( forSer == forDeser  && ( true )  {^46^^^^^37^76^[REPLACE] if  ( forDeser )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^46^47^^^50^37^76^[ADD] if  ( forDeser )  { idToType = new HashMap<String, JavaType> (  ) ; typeToId = new TreeMap<String, String> (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^47^^^^^37^76^[ADD] idToType = new HashMap<String, JavaType> (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId = new String, String> (  )  ;^50^^^^^37^76^[REPLACE] typeToId = new TreeMap<String, String> (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^idToType = new HashMap<String, Object (  ) ;^47^^^^^37^76^[REPLACE] idToType = new HashMap<String, JavaType> (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( subtypes == null )  {^52^^^^^37^76^[REPLACE] if  ( subtypes != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( true  || forSer == forDeser  )  {^59^^^^^37^76^[REPLACE] if  ( forSer )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^59^60^61^^^37^76^[ADD] if  ( forSer )  { typeToId.put ( cls.getName (  ) , id ) ; }^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId.put ( null.getName (  ) , id ) ;^60^^^^^37^76^[REPLACE] typeToId.put ( cls.getName (  ) , id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  (baseType == null )  {^66^^^^^37^76^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( null.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^37^76^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^67^68^69^^^37^76^[ADD] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  { continue; }^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( cls.isAssignableFrom ( baseType.getRawClass (  )  )  )  {^67^^^^^37^76^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^65^^^^^37^76^[ADD] JavaType prev = idToType.get ( id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( baseType == null  || forSer == forDeser  )  {^66^^^^^37^76^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^continue;^67^68^69^^^37^76^[ADD] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  { continue; }^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( 0.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^37^76^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( forSer  || forSer == forDeser  )  {^59^^^^^52^74^[REPLACE] if  ( forSer )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^59^60^61^^^52^74^[ADD] if  ( forSer )  { typeToId.put ( cls.getName (  ) , id ) ; }^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId .put ( null , true )  ;^60^^^^^52^74^[REPLACE] typeToId.put ( cls.getName (  ) , id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId.put ( this.getName (  ) , id ) ;^60^^^^^52^74^[REPLACE] typeToId.put ( cls.getName (  ) , id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( forDeser  && forSer == forDeser  )  {^62^^^^^52^74^[REPLACE] if  ( forDeser )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^62^63^^65^^52^74^[ADD] if  ( forDeser )  {  JavaType prev = idToType.get ( id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( baseType == null )  {^66^^^^^52^74^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( true.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^52^74^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^NamedType t  ;^65^^^^^52^74^[REPLACE] JavaType prev = idToType.get ( id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( prev == null  && forSer == forDeser  )  {^66^^^^^52^74^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( 0.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^52^74^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( cls.isAssignableFrom ( baseType.getRawClass (  )  )  )  {^67^^^^^52^74^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^Class<?> cls = t .getName (  )  ;^57^^^^^52^74^[REPLACE] Class<?> cls = t.getType (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^String id = t.getName (  )  ? t.getName (  )  : _defaultTypeId ( cls ) ;^58^^^^^52^74^[REPLACE] String id = t.hasName (  )  ? t.getName (  )  : _defaultTypeId ( cls ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[ADD]^^53^54^^^57^52^74^[ADD] for  ( NamedType t : subtypes )  {  Class<?> cls = t.getType (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^String id = t.getName (  )  ? t.getName (  )  : _defaultTypeId ( 1 ) ;^58^^^^^52^74^[REPLACE] String id = t.hasName (  )  ? t.getName (  )  : _defaultTypeId ( cls ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^JavaType prev = idToType.put ( id ) ;^65^^^^^52^74^[REPLACE] JavaType prev = idToType.get ( id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( forSer  || forSer == forDeser  )  {^59^^^^^37^76^[REPLACE] if  ( forSer )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId.put ( false.getName (  ) , id ) ;^60^^^^^37^76^[REPLACE] typeToId.put ( cls.getName (  ) , id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( baseType == this )  {^66^^^^^37^76^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( true.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^37^76^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( false.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^37^76^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^for  ( NamedType t : this )  {^53^^^^^52^74^[REPLACE] for  ( NamedType t : subtypes )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( true )  {^59^^^^^52^74^[REPLACE] if  ( forSer )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId.put ( cls .getType (  )  , id ) ;^60^^^^^52^74^[REPLACE] typeToId.put ( cls.getName (  ) , id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^typeToId.put ( null.getName (  ) , id ) ;^60^^^^^52^74^[REPLACE] typeToId.put ( cls.getName (  ) , id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( prev == this  )  {^66^^^^^52^74^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( null.isAssignableFrom ( prev.getRawClass (  )  )  )  {^67^^^^^52^74^[REPLACE] if  ( cls.isAssignableFrom ( prev.getRawClass (  )  )  )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  (baseType == null  && forSer == forDeser  )  {^66^^^^^52^74^[REPLACE] if  ( prev != null )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^Class<?> cls = t.getName (  ) ;^57^^^^^52^74^[REPLACE] Class<?> cls = t.getType (  ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^JavaType prev = idToType.get ( id )  ;^53^^^^^52^74^[REPLACE] for  ( NamedType t : subtypes )  {^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^String id = t.hasName (  )  ? t.getType (  )  : _defaultTypeId ( cls ) ;^58^^^^^52^74^[REPLACE] String id = t.hasName (  )  ? t.getName (  )  : _defaultTypeId ( cls ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^JavaType prev = null .put ( this , this )  ;^65^^^^^52^74^[REPLACE] JavaType prev = idToType.get ( id ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^return new TypeNameIdResolver ( config, prev, typeToId, idToType ) ;^75^^^^^37^76^[REPLACE] return new TypeNameIdResolver ( config, baseType, typeToId, idToType ) ;^[METHOD] construct [TYPE] TypeNameIdResolver [PARAMETER] MapperConfig<?> config JavaType baseType NamedType> subtypes boolean forSer boolean forDeser [CLASS] TypeNameIdResolver   [TYPE]  JavaType baseType  prev  [TYPE]  boolean false  forDeser  forSer  true  [TYPE]  NamedType t  [TYPE]  MapperConfig _config  config  [TYPE]  Collection subtypes  [TYPE]  Class cls  [TYPE]  String id  [TYPE]  Map _idToType  _typeToId  idToType  typeToId 
[REPLACE]^if  ( null != null )  {^89^^^^^88^113^[REPLACE] if  ( clazz == null )  {^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^return this;^90^^^^^88^113^[REPLACE] return null;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^return false;^90^^^^^88^113^[REPLACE] return null;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^Class<?> cls = _typeFactory.constructType ( 1 ) .getRawClass (  ) ;^92^^^^^88^113^[REPLACE] Class<?> cls = _typeFactory.constructType ( clazz ) .getRawClass (  ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^final String key = this.getName (  ) ;^93^^^^^88^113^[REPLACE] final String key = cls.getName (  ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[ADD]^^94^^^^^88^113^[ADD] String name;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^if  ( name != this  )  {^98^^^^^88^113^[REPLACE] if  ( name == null )  {^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^if  ( _config .getAnnotationIntrospector (  )   )  {^101^^^^^88^113^[REPLACE] if  ( _config.isAnnotationProcessingEnabled (  )  )  {^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^name =  _config.getAnnotationIntrospector (  ) .findTypeName ( null.getClassInfo (  )  ) ;^103^^^^^88^113^[REPLACE] name = _config.getAnnotationIntrospector (  ) .findTypeName ( beanDesc.getClassInfo (  )  ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[ADD]^name = _config.getAnnotationIntrospector (  ) .findTypeName ( beanDesc.getClassInfo (  )  ) ;^102^103^^^^88^113^[ADD] BeanDescription beanDesc = _config.introspectClassAnnotations ( cls ) ; name = _config.getAnnotationIntrospector (  ) .findTypeName ( beanDesc.getClassInfo (  )  ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^if  ( name != true )  {^105^^^^^88^113^[REPLACE] if  ( name == null )  {^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^name =  _defaultTypeId ( this ) ;^107^^^^^88^113^[REPLACE] name = _defaultTypeId ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[ADD]^^103^^^^^88^113^[ADD] name = _config.getAnnotationIntrospector (  ) .findTypeName ( beanDesc.getClassInfo (  )  ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^name =  _defaultTypeId ( false ) ;^107^^^^^88^113^[REPLACE] name = _defaultTypeId ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[ADD]^^102^^^^^88^113^[ADD] BeanDescription beanDesc = _config.introspectClassAnnotations ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[ADD]^BeanDescription beanDesc = _config.introspectClassAnnotations ( cls ) ;name = _config.getAnnotationIntrospector (  ) .findTypeName ( beanDesc.getClassInfo (  )  ) ;^101^102^103^104^^88^113^[ADD] if  ( _config.isAnnotationProcessingEnabled (  )  )  { BeanDescription beanDesc = _config.introspectClassAnnotations ( cls ) ; name = _config.getAnnotationIntrospector (  ) .findTypeName ( beanDesc.getClassInfo (  )  ) ; }^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^BeanDescription beanDesc = _config.constructType ( cls ) ;^102^^^^^88^113^[REPLACE] BeanDescription beanDesc = _config.introspectClassAnnotations ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[ADD]^^107^^^^^88^113^[ADD] name = _defaultTypeId ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^name =  _typeToId.get ( null ) ;^97^^^^^88^113^[REPLACE] name = _typeToId.get ( key ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^name =  _defaultTypeId ( null ) ;^107^^^^^88^113^[REPLACE] name = _defaultTypeId ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^BeanDescription beanDesc = _config.introspectClassAnnotations ( this ) ;^102^^^^^88^113^[REPLACE] BeanDescription beanDesc = _config.introspectClassAnnotations ( cls ) ;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
[REPLACE]^return null  ;^112^^^^^88^113^[REPLACE] return name;^[METHOD] idFromClass [TYPE] String [PARAMETER] Class<?> clazz [CLASS] TypeNameIdResolver   [TYPE]  MapperConfig _config  config  [TYPE]  Class clazz  cls  [TYPE]  String key  name  [TYPE]  boolean false  true  [TYPE]  Map _idToType  _typeToId  idToType  typeToId  [TYPE]  BeanDescription beanDesc 
