[REPLACE]^final static TextNode EMPTY_STRING_NODE ;^17^^^^^^^[REPLACE] final static TextNode EMPTY_STRING_NODE = new TextNode ( "" ) ;^ [CLASS] TextNode  
[REPLACE]^protected final  long  _value;^19^^^^^^^[REPLACE] protected final String _value;^ [CLASS] TextNode  
[ADD]^^65^66^^^^61^152^[ADD] int ptr = 0; int len = str.length (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^int len = str.trim (  ) ;^66^^^^^61^152^[REPLACE] int len = str.length (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  <  len )  {^74^^^^^61^152^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^break main_loop;^74^75^76^^^61^152^[ADD] if  ( ptr >= len )  { break main_loop; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  ==  0 )  {^79^^^^^61^152^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 4 ) ;^80^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 0 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REMOVE]^_reportBase64EOF (  )  ;^80^^^^^61^152^[REMOVE] ^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  ==  len )  {^84^^^^^61^152^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  >  0 )  {^89^^^^^61^152^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 1 - 1 ) ;^90^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 1 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^90^^^^^61^152^[ADD] _reportInvalidBase64 ( b64variant, ch, 1 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  !=  len )  {^94^^^^^61^152^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( !b64 >> 3variant.usesPadding (  )  )  {^96^^^^^61^152^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^96^97^98^99^100^61^152^[ADD] if  ( !b64variant.usesPadding (  )  )  {  decodedData >>= 4; builder.append ( decodedData ) ; break;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2;^98^^^^^61^152^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 4 / 0;^98^^^^^61^152^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( !b64Lvariant.usesPaddingChar (  )  )  {^96^^^^^61^152^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  >  0 )  {^108^^^^^61^152^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^108^109^110^111^^61^152^[ADD] if  ( bits < 0 )  { if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  { _reportInvalidBase64 ( b64variant, ch, 2 ) ; }^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  == ptr )  {^109^^^^^61^152^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 1 ) ;^110^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 2 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  <  len )  {^113^^^^^61^152^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REMOVE]^_reportInvalidBase64 ( b64variant, ch, 0 )  ;^114^^^^^61^152^[REMOVE] ^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( b64variant .getPaddingChar (  )   )  {^117^^^^^61^152^[REPLACE] if  ( !b64variant.usesPaddingChar ( ch )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"b64variant.getPaddingChar (  ) "'" ) ;^118^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^( b64variant.usesPadding (  )  )  ;^118^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^116^^^^^61^152^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 2  ;^121^^^^^61^152^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  ==  Base64Variant.BASE64_VALUE_PADDING )  {^109^^^^^61^152^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 0 )  ;^110^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 2 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  !=  len )  {^113^^^^^61^152^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( b64variant.usesPaddingChar ( ch  )  || bits !=  ( Base64Variant.BASE64_VALUE_PADDING )  )  )  {^117^^^^^61^152^[REPLACE] if  ( !b64variant.usesPaddingChar ( ch )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 2, "expected padding character '"b64variant.getPaddingChar (  ) "'" ) ;^118^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.usesPaddingChar (  ) +"'" ) ;^118^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3, "expected padding character '"+b64variant.getPaddingChar (  ) +"'" ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ptr  !=  len )  {^128^^^^^61^152^[REPLACE] if  ( ptr >= len )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( !b64variant.usesPaddingChar (   )  || bits !=  ( Base64Variant.BASE64_VALUE_PADDING )  )  )  {^130^^^^^61^152^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 4  ;^131^^^^^61^152^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 1;^131^^^^^61^152^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits !=  ( Base64Variant.BASE64_VALUE_PADDING )  || ( !b64variant.usesPadding (  )  )  {^130^^^^^61^152^[REPLACE] if  ( !b64variant.usesPadding (  )  )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^131^^^^^61^152^[ADD] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  (ptr  !=  0 )  {^139^^^^^61^152^[REPLACE] if  ( bits < 0 )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^147^^^^^139^149^[ADD] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( bits  ==  Base64Variant.BASE64_VALUE_PADDING  || ! ( b64variant.usesPaddingChar ( ch )  )  )  {^140^^^^^61^152^[REPLACE] if  ( bits != Base64Variant.BASE64_VALUE_PADDING )  {^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 2 ) ;^141^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 4  ;^143^^^^^61^152^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^_reportInvalidBase64 ( b64variant, ch, 0 )  ;^141^^^^^61^152^[REPLACE] _reportInvalidBase64 ( b64variant, ch, 3 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^141^^^^^61^152^[ADD] _reportInvalidBase64 ( b64variant, ch, 3 ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^73^^^^^61^152^[ADD] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^87^^^^^61^152^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^bits =  null.decodeBase64Char ( ch ) ;^88^^^^^61^152^[REPLACE] bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData =  (ptr )  & bits;^92^^^^^61^152^[REPLACE] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 4 % 4;^98^^^^^61^152^[REPLACE] decodedData >>= 4;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^104^^^^^61^152^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^bits =  null.decodeBase64Char ( ch ) ;^105^^^^^61^152^[REPLACE] bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^116^^^^^61^152^[ADD] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData =  ( decodedData << 4 )  & bits;^126^^^^^61^152^[REPLACE] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^ch =  null.charAt ( ptr++ ) ;^137^^^^^61^152^[REPLACE] ch = str.charAt ( ptr++ ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[ADD]^^138^^^^^61^152^[ADD] bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData >>= 5;^143^^^^^61^152^[REPLACE] decodedData >>= 2;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^decodedData =  ( decodedData << 6 )  & bits;^147^^^^^61^152^[REPLACE] decodedData =  ( decodedData << 6 )  | bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^int bits = b64variant .getPaddingChar (  )  ;^78^^^^^61^152^[REPLACE] int bits = b64variant.decodeBase64Char ( ch ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^int decodedData = ptr;^82^^^^^61^152^[REPLACE] int decodedData = bits;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^return builder .ByteArrayBuilder ( len )  ;^151^^^^^61^152^[REPLACE] return builder.toByteArray (  ) ;^[METHOD] getBinaryValue [TYPE] byte[] [PARAMETER] Base64Variant b64variant [CLASS] TextNode   [TYPE]  boolean false  true  [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  str  v  [TYPE]  ByteArrayBuilder builder  [TYPE]  int bits  decodedData  len  ptr 
[REPLACE]^if  ( ch  !=  ' ' )  {^282^^^^^280^296^[REPLACE] if  ( ch <= ' ' )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[ADD]^base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^282^283^284^285^^280^296^[ADD] if  ( ch <= ' ' )  { base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units"; } else if  ( b64variant.usesPaddingChar ( ch )  )  { base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^}  if  ( b64variant.usesPaddingChar ( ch )  )  {^284^^^^^280^296^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^}  else {^286^^^^^280^296^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base = "Illegal character '"ch"'  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^290^^^^^286^291^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base = "Illegal character  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^288^^^^^280^296^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base =  (  (  ( "Illegal character '" + ch )  + "'  ( code 0x" )  +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^288^^^^^280^296^[REPLACE] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^290^^^^^280^296^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base = "Unexpected padding character  ( '"b64variant.getPaddingChar (  ) "' )  as character #" ( bindex1 ) " of 4-char base64 unit: padding only legal as 3rd or 4th character";^285^^^^^280^296^[REPLACE] base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^}  if  (  Character.isISOControl ( ch )  )  {^286^^^^^280^296^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base =  ( "Illegal character  ( code 0x" +  ( toHexString ( ch )  )  )  + " )  in base64 content"  ;^290^^^^^286^291^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base = "Illegal character '"ch"'  ( code 0x"Integer.toHexString ( ch ) " )  in base64 content";^290^^^^^280^296^[REPLACE] base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base = "Illegal white space character  ( code 0x"Integer.toHexString ( ch ) " )  as character #" ( bindex1 )str;^283^^^^^280^296^[REPLACE] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^}  else {^284^^^^^280^296^[REPLACE] } else if  ( b64variant.usesPaddingChar ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[ADD]^}   base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character";base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^284^285^286^^288^280^296^[ADD] else if  ( b64variant.usesPaddingChar ( ch )  )  { base = "Unexpected padding character  ( '"+b64variant.getPaddingChar (  ) +"' )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: padding only legal as 3rd or 4th character"; } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  { base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^}  if  ( Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^286^^^^^280^296^[REPLACE] } else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[ADD]^}   base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^286^287^288^289^290^280^296^[ADD] else if  ( !Character.isDefined ( ch )  || Character.isISOControl ( ch )  )  {  base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content"; } else { base = "Illegal character '"+ch+"'  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[ADD]^^288^^^^^280^296^[ADD] base = "Illegal character  ( code 0x"+Integer.toHexString ( ch ) +" )  in base64 content";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[ADD]^^283^^^^^280^296^[ADD] base = "Illegal white space character  ( code 0x"+Integer.toHexString ( ch ) +" )  as character #"+ ( bindex+1 ) +" of 4-char base64 unit: can only used between units";^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^if  ( msg == null  || ch <= ' '  )  {^292^^^^^280^296^[REPLACE] if  ( msg != null )  {^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^base = base  ": "  msg;^293^^^^^280^296^[REPLACE] base = base + ": " + msg;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[ADD]^^293^^^^^280^296^[ADD] base = base + ": " + msg;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
[REPLACE]^throw new JsonParseException ( null, "Unexpected end-of-String when base64 content" )  ;^295^^^^^280^296^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] _reportInvalidBase64 [TYPE] void [PARAMETER] Base64Variant b64variant char ch int bindex String msg [CLASS] TextNode   [TYPE]  char ch  [TYPE]  Base64Variant b64variant  [TYPE]  TextNode EMPTY_STRING_NODE  [TYPE]  String _value  base  content  defaultValue  msg  str  v  [TYPE]  boolean false  true  [TYPE]  int bindex 
