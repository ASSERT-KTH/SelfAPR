[REPLACE]^public  TypeName type;^45^^^^^^^[REPLACE] public final TypeName type;^ [CLASS] AnnotationSpec Builder Visitor  
[REPLACE]^private  TypeName type;^194^^^^^^^[REPLACE] private final TypeName type;^ [CLASS] AnnotationSpec Builder Visitor  
[REPLACE]^private final Map<String, List<CodeBlock>> members  = null ;^195^^^^^^^[REPLACE] private final Map<String, List<CodeBlock>> members = new LinkedHashMap<> (  ) ;^ [CLASS] AnnotationSpec Builder Visitor  
[REPLACE]^final Object builder;^249^^^^^^^[REPLACE] final Builder builder;^ [CLASS] AnnotationSpec Builder Visitor  
[ADD]^^54^^^^^53^85^[ADD] String whitespace = inline ? "" : "\n";^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^55^^^^^53^85^[ADD] String memberSeparator = inline ? ", " : ",\n";^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( members.isEmpty (   )  ||  (  ( members.size (  )  )  == 1 )  &&  ( members.containsKey ( "value" )  )  )  )  {^56^^^^^53^85^[REPLACE] if  ( members.isEmpty (  )  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^}  else {^59^^^^^53^85^[REPLACE] } else if  ( members.size (  )  == 1 && members.containsKey ( "value" )  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( members.isEmpty (  )  || ( false.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^80^^^^^59^84^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( i.hasNext (  )  )  codeWriter.CodeWriter ( memberSeparator ) ;^80^^^^^59^84^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members.keySet (  ) .iterator (  ) ; i.hasNext (  ) ;  )  {^75^76^^^^59^84^[REPLACE] for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ;  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^Map.Entry<String, List<CodeBlock>> entry = null.hasNext (  ) ;^77^^^^^59^84^[REPLACE] Map.Entry<String, List<CodeBlock>> entry = i.next (  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.emit ( "@$T", type )  ;^61^^^^^53^85^[REPLACE] codeWriter.emit ( "@$T ( ", type ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ;^61^62^^^^53^85^[ADD] codeWriter.emit ( "@$T ( ", type ) ; emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^emitAnnotationValues ( codeWriter, whitespace, memberSeparator, entry.getValue (  )  )  ;^62^^^^^53^85^[REPLACE] emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members .get ( null , inline )   ) ;^62^^^^^53^85^[REPLACE] emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^62^^^^^53^85^[ADD] emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.CodeWriter ( " ) " ) ;^63^^^^^53^85^[REPLACE] codeWriter.emit ( " ) " ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^63^^^^^53^85^[ADD] codeWriter.emit ( " ) " ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( i.hasNext (  )  )  codeWriter.emit ( whitespace ) ;^80^^^^^53^85^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( i.hasNext (  )  )  codeWriter.CodeWriter ( memberSeparator ) ;^80^^^^^53^85^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^80^81^^^^53^85^[ADD] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ; }^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members.keySet (  ) .iterator (  ) ; i.hasNext (  ) ;  )  {^75^76^^^^53^85^[REPLACE] for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ;  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^String, CodeBlock>> entry  ;^77^^^^^53^85^[REPLACE] Map.Entry<String, List<CodeBlock>> entry = i.next (  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.emit ( "@$T ( ", type )  ;^58^^^^^53^85^[REPLACE] codeWriter.emit ( "@$T", type ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^} else if  ( members.size (  )  + 4 == 1 && members.computeIfAbsent ( "value" )  )  {^59^^^^^53^85^[REPLACE] } else if  ( members.size (  )  == 1 && members.containsKey ( "value" )  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( members.isEmpty (  )  && ( i.hasNext (  )  )  codeWriter.emit ( whitespace ) ;^80^^^^^59^84^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( i.hasNext (  )  )  codeWriter .emit ( codeWriter , inline )  ;^80^^^^^59^84^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^80^81^^^^59^84^[ADD] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ; }^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members .keySet (  )  .iterator (  ) ; i.hasNext (  ) ;  )  {^75^76^^^^59^84^[REPLACE] for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ;  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^codeWriter.emit ( "$L = ", entry.getKey (  )  ) ;^77^78^^^^59^84^[ADD] Map.Entry<String, List<CodeBlock>> entry = i.next (  ) ; codeWriter.emit ( "$L = ", entry.getKey (  )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^62^63^^^^53^85^[ADD] emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ; codeWriter.emit ( " ) " ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members .get ( true , inline )   ) ;^62^^^^^53^85^[REPLACE] emitAnnotationValues ( codeWriter, whitespace, memberSeparator, members.get ( "value" )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter .emit ( codeWriter , inline )  " ) ;^63^^^^^53^85^[REPLACE] codeWriter.emit ( " ) " ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( i.next (   )  || members.isEmpty (  )  )  )  codeWriter.emit ( memberSeparator ) ;^80^^^^^53^85^[REPLACE] if  ( i.hasNext (  )  )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members .keySet (  )  .iterator (  ) ; i.hasNext (  ) ;  )  {^75^76^^^^53^85^[REPLACE] for  ( Iterator<Map.Entry<String, List<CodeBlock>>> i = members.entrySet (  ) .iterator (  ) ; i.hasNext (  ) ;  )  {^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^77^78^^^^53^85^[ADD] Map.Entry<String, List<CodeBlock>> entry = i.next (  ) ; codeWriter.emit ( "$L = ", entry.getKey (  )  ) ;^[METHOD] emit [TYPE] void [PARAMETER] CodeWriter codeWriter boolean inline [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  Entry entry  [TYPE]  boolean false  inline  true  [TYPE]  Builder builder  [TYPE]  Iterator i  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( values.length (  )  == 0  )  {^89^^^^^88^106^[REPLACE] if  ( values.size (  )  == 1 )  {^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.emit ( "{"  whitespace ) ;^96^^^^^88^106^[REPLACE] codeWriter.emit ( "{" + whitespace ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.unindent ( 2 )  ;^97^^^^^88^106^[REPLACE] codeWriter.indent ( 2 ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^boolean first = false;^98^^^^^88^106^[REPLACE] boolean first = true;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( !first )  codeWriter.emit ( whitespace ) ;^100^^^^^88^106^[REPLACE] if  ( !first )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^codeWriter.emit ( codeBlock ) ;first = false;^100^101^102^103^^88^106^[ADD] if  ( !first )  codeWriter.emit ( memberSeparator ) ; codeWriter.emit ( codeBlock ) ; first = false; }^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( !first )  codeWriter.CodeWriter ( memberSeparator ) ;^100^^^^^88^106^[REPLACE] if  ( !first )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^99^100^101^102^103^88^106^[ADD] for  ( CodeBlock codeBlock : values )  { if  ( !first )  codeWriter.emit ( memberSeparator ) ; codeWriter.emit ( codeBlock ) ; first = false; }^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( !true )  codeWriter.emit ( memberSeparator ) ;^100^^^^^88^106^[REPLACE] if  ( !first )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^if  ( !first )  codeWriter .emit ( codeWriter , true )  ;^100^^^^^88^106^[REPLACE] if  ( !first )  codeWriter.emit ( memberSeparator ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^first = true;^102^^^^^88^106^[REPLACE] first = false;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.indent ( 2 )  ;^104^^^^^88^106^[REPLACE] codeWriter.unindent ( 2 ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^104^^^^^88^106^[ADD] codeWriter.unindent ( 2 ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[REPLACE]^codeWriter.emit (memberSeparator  "}" ) ;^105^^^^^88^106^[REPLACE] codeWriter.emit ( whitespace + "}" ) ;^[METHOD] emitAnnotationValues [TYPE] void [PARAMETER] CodeWriter codeWriter String whitespace String memberSeparator CodeBlock> values [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  first  true  [TYPE]  Builder builder  [TYPE]  CodeBlock codeBlock  [TYPE]  List values  [TYPE]  String memberSeparator  whitespace  [TYPE]  Map members  [TYPE]  CodeWriter codeWriter 
[ADD]^^113^^^^^112^140^[ADD] Builder builder = builder ( annotation.annotationType (  )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( !includeDefaultValues  || deepEquals ( value, method.getDefaultValue (  )  )  )  {^119^^^^^112^140^[REPLACE] if  ( !includeDefaultValues )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REMOVE]^if  ( deepEquals ( value, method.getDefaultValue (  )  )  )  {     continue; }^119^^^^^112^140^[REMOVE] ^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( Objects.deepEquals ( value, method.getName (  )  )  )  {^120^^^^^112^140^[REPLACE] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^continue;^120^121^122^^^112^140^[ADD] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  { continue; }^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( value.getClass (   )  && deepEquals ( value, method.getDefaultValue (  )  )  ) .isArray (  )  )  {^124^^^^^112^140^[REPLACE] if  ( value.getClass (  ) .isArray (  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^for  ( int i = 3; i < Array.getLength ( value ) ; i++ )  {^125^^^^^112^140^[REPLACE] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( ! value instanceof Annotation )  {^130^^^^^112^140^[REPLACE] if  ( value instanceof Annotation )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^get (  (  ( Annotation )   ( value )  )  )  ;^131^^^^^112^140^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^builder.addMember ( method .getDefaultValue (  )  , "$L", get (  ( Annotation )  value )  ) ;^131^^^^^112^140^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^builder.addMember ( method.toStringName (  ) , "$L", get (  ( Annotation )  value )  ) ;^131^^^^^112^140^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^117^118^119^120^121^114^136^[ADD] for  ( Method method : methods )  { Object value = method.invoke ( annotation ) ; if  ( !includeDefaultValues )  { if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  { continue;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( !includeDefaultValues  || deepEquals ( value, method.getDefaultValue (  )  )  )  {^119^^^^^114^136^[REPLACE] if  ( !includeDefaultValues )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( Objects.deepEquals ( value, method.getName (  )  )  )  {^120^^^^^114^136^[REPLACE] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( value.getClass (  ) .isArray (  )  || ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  {^120^^^^^114^136^[REPLACE] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( value.getClass (   )  && deepEquals ( value, method.getDefaultValue (  )  )  ) .isArray (  )  )  {^124^^^^^114^136^[REPLACE] if  ( value.getClass (  ) .isArray (  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^for  ( int i = 1; i < Array.getLength ( value ) ; i++ )  {^125^^^^^114^136^[REPLACE] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( ! value instanceof Annotation  && value.getClass (  ) .isArray (  )  )  {^130^^^^^114^136^[REPLACE] if  ( value instanceof Annotation )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^130^131^132^133^^114^136^[ADD] if  ( value instanceof Annotation )  { builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ; continue; }^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^builder.addMember ( method.toStringName (  ) , "$L", get (  ( Annotation )  value )  ) ;^131^^^^^114^136^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REMOVE]^get (  (  ( Annotation )   ( value )  )  )  ;^131^^^^^114^136^[REMOVE] ^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^builder.addMember ( method.getDefaultValue (  ) , "$L", get (  ( Annotation )  value )  ) ;^131^^^^^114^136^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^118^^^^^114^136^[ADD] Object value = method.invoke ( annotation ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^125^126^127^^^114^136^[ADD] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  { builder.addMemberForValue ( method.getName (  ) , Array.get ( value, i )  ) ; }^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^Method[] methods = annotation.annotationType (  ) .getDeclaredMethods (  ) ;Arrays.sort ( methods, Comparator.comparing ( Method::getName )  ) ;Object value = method.invoke ( annotation ) ;^114^115^116^117^118^114^136^[ADD] try { Method[] methods = annotation.annotationType (  ) .getDeclaredMethods (  ) ; Arrays.sort ( methods, Comparator.comparing ( Method::getName )  ) ; for  ( Method method : methods )  { Object value = method.invoke ( annotation ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( includeDefaultValues )  {^119^^^^^114^136^[REPLACE] if  ( !includeDefaultValues )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( Objects.deepEquals ( value, method.getDefaultValue (   )  && value.getClass (  ) .isArray (  )  )  )  )  {^120^^^^^114^136^[REPLACE] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^continue;^120^121^122^^^114^136^[ADD] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  { continue; }^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^for  ( int i = 2; i < Array.getLength ( value ) ; i++ )  {^125^^^^^114^136^[REPLACE] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( ! value instanceof Annotation )  {^130^^^^^114^136^[REPLACE] if  ( value instanceof Annotation )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^get (  (  ( Annotation )   ( value )  )  )  ;^131^^^^^114^136^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^131^^^^^114^136^[ADD] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REMOVE]^if  ( deepEquals ( value, method.getDefaultValue (  )  )  )  {     continue; }^119^^^^^114^136^[REMOVE] ^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( Objects.deepEquals ( value, method.getDefaultValue (   )  || value.getClass (  ) .isArray (  )  )  )  )  {^120^^^^^114^136^[REPLACE] if  ( Objects.deepEquals ( value, method.getDefaultValue (  )  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( value.getClass (   )  || deepEquals ( value, method.getDefaultValue (  )  )  ) .isArray (  )  )  {^124^^^^^114^136^[REPLACE] if  ( value.getClass (  ) .isArray (  )  )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^for  ( int i = 0L; i < Array.getLength ( value ) ; i++ )  {^125^^^^^114^136^[REPLACE] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^if  ( !AnnotationSpec instanceof Annotation  && value.getClass (  ) .isArray (  )  )  {^130^^^^^114^136^[REPLACE] if  ( value instanceof Annotation )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^builder.addMember ( method .getDefaultValue (  )  , "$L", get (  ( Annotation )  value )  ) ;^131^^^^^114^136^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^builder ( annotation.annotationType (  )  )  ;^131^^^^^114^136^[REPLACE] builder.addMember ( method.getName (  ) , "$L", get (  ( Annotation )  value )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^for  ( int i = 0 * 1; i < Array.getLength ( value ) ; i++ )  {^125^^^^^114^136^[REPLACE] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^115^116^^^^114^136^[ADD] Method[] methods = annotation.annotationType (  ) .getDeclaredMethods (  ) ; Arrays.sort ( methods, Comparator.comparing ( Method::getName )  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^Object value = method .getName (  )  ;^118^^^^^114^136^[REPLACE] Object value = method.invoke ( annotation ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^115^^^^^114^136^[ADD] Method[] methods = annotation.annotationType (  ) .getDeclaredMethods (  ) ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[REPLACE]^for  ( int i = 3; i < Array.getLength ( value ) ; i++ )  {^125^^^^^114^136^[REPLACE] for  ( int i = 0; i < Array.getLength ( value ) ; i++ )  {^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
[ADD]^^137^^^^^114^136^[ADD] throw new RuntimeException  (" ")  ;^[METHOD] get [TYPE] AnnotationSpec [PARAMETER] Annotation annotation boolean includeDefaultValues [CLASS] AnnotationSpec Builder Visitor   [TYPE]  TypeName type  [TYPE]  boolean false  includeDefaultValues  true  [TYPE]  Builder builder  [TYPE]  Object value  [TYPE]  Method method  [TYPE]  Method[] methods  [TYPE]  Map members  [TYPE]  Annotation annotation  [TYPE]  int i  [TYPE]  Exception e 
