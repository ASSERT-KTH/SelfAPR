[REPLACE]^private static final long DEFAULT_TIMEOUT ;^40^^^^^^^[REPLACE] private static final long DEFAULT_TIMEOUT = 600;^ [CLASS] ConnectionManager 1  
[REPLACE]^private   short  deviceTimeout;^42^^^^^^^[REPLACE] private final long deviceTimeout;^ [CLASS] ConnectionManager 1  
[REPLACE]^private  boolean enableStatusEvents;^43^^^^^^^[REPLACE] private final boolean enableStatusEvents;^ [CLASS] ConnectionManager 1  
[REPLACE]^private final Map<Long, ActiveDevice> activeDevices  = null ;^45^^^^^^^[REPLACE] private final Map<Long, ActiveDevice> activeDevices = new ConcurrentHashMap<> (  ) ;^ [CLASS] ConnectionManager 1  
[REPLACE]^private final Map<Long, Set<UpdateListener>> listeners  = null ;^46^^^^^^^[REPLACE] private final Map<Long, Set<UpdateListener>> listeners = new ConcurrentHashMap<> (  ) ;^ [CLASS] ConnectionManager 1  
[REPLACE]^private final Map<Long, Timeout> timeouts  = null ;^47^^^^^^^[REPLACE] private final Map<Long, Timeout> timeouts = new ConcurrentHashMap<> (  ) ;^ [CLASS] ConnectionManager 1  
[REPLACE]^Device device = Context.getIdentityManager (  ) .getDeviceById ( deviceTimeout ) ;^73^^^^^72^125^[REPLACE] Device device = Context.getIdentityManager (  ) .getDeviceById ( deviceId ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  ( device != null  || ! ( timeout.isCancelled (  )  )  )  {^74^^^^^72^125^[REPLACE] if  ( device == null )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  (true && status.equals ( device.getStatus (  )  )  )  {^78^^^^^72^125^[REPLACE] if  ( enableStatusEvents && !status.equals ( device.getStatus (  )  )  )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^78^79^80^81^82^72^125^[ADD] if  ( enableStatusEvents && !status.equals ( device.getStatus (  )  )  )  { String eventType; switch  ( status )  { case Device.STATUS_ONLINE: eventType = Event.TYPE_DEVICE_ONLINE;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  ( Context.getNotificationManager (   )  && ! ( timeout.isCancelled (  )  )  )  == null )  {^92^^^^^72^125^[REPLACE] if  ( Context.getNotificationManager (  )  != null )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^92^93^94^^^72^125^[ADD] if  ( Context.getNotificationManager (  )  != null )  { Context.getNotificationManager (  ) .updateEvent ( event, null ) ; }^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^Context .getIdentityManager (  )  .updateEvent ( event, true ) ;^93^^^^^72^125^[REPLACE] Context.getNotificationManager (  ) .updateEvent ( event, null ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^Context.getIdentityManager (  ) .updateEvent ( event, null ) ;^93^^^^^72^125^[REPLACE] Context.getNotificationManager (  ) .updateEvent ( event, null ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^82^83^^^^72^125^[ADD] eventType = Event.TYPE_DEVICE_ONLINE; break;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^eventType = TYPE_DEVICE_ONLINE  ;^85^^^^^72^125^[REPLACE] eventType = Event.TYPE_DEVICE_UNKNOWN;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^eventType = TYPE_DEVICE_ONLINE  ;^88^^^^^72^125^[REPLACE] eventType = Event.TYPE_DEVICE_OFFLINE;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^79^^^^^72^125^[ADD] String eventType;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^Event event = new Event ( eventType, deviceTimeout ) ;^91^^^^^72^125^[REPLACE] Event event = new Event ( eventType, deviceId ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^Context.getNotificationManager (  ) .updateEvent ( event, false ) ;^93^^^^^72^125^[REPLACE] Context.getNotificationManager (  ) .updateEvent ( event, null ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^eventType = TYPE_DEVICE_OFFLINE  ;^82^^^^^72^125^[REPLACE] eventType = Event.TYPE_DEVICE_ONLINE;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^88^^^^^72^125^[ADD] eventType = Event.TYPE_DEVICE_OFFLINE;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^device.getStatus (  )  ;^96^^^^^72^125^[REPLACE] device.setStatus ( status ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^Timeout timeout = timeouts.get ( deviceId ) ;^98^^^^^72^125^[REPLACE] Timeout timeout = timeouts.remove ( deviceId ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  ( timeout == null )  {^99^^^^^72^125^[REPLACE] if  ( timeout != null )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^timeout .isCancelled (  )  ;^100^^^^^72^125^[REPLACE] timeout.cancel (  ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  ( time == null )  {^103^^^^^72^125^[REPLACE] if  ( time != null )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^103^104^105^^^72^125^[ADD] if  ( time != null )  { device.setLastUpdate ( time ) ; }^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^device.setStatus ( time ) ;^104^^^^^72^125^[REPLACE] device.setLastUpdate ( time ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  (  ( enableStatusEvents )  &&  ( ! ( status.equals ( device.getStatus (  )  )  )  )  || ( eventType.equals ( Device.STATUS_ONLINE )  )  {^107^^^^^72^125^[REPLACE] if  ( status.equals ( Device.STATUS_ONLINE )  )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  ( !timeout .cancel (  )   )  {^111^^^^^72^125^[REPLACE] if  ( !timeout.isCancelled (  )  )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^updateDevice ( deviceId, Device.STATUS_UNKNOWN, null ) ;^111^112^113^^^72^125^[ADD] if  ( !timeout.isCancelled (  )  )  { updateDevice ( deviceId, Device.STATUS_UNKNOWN, null ) ; }^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^updateDevice ( deviceTimeout, Device.STATUS_UNKNOWN, true ) ;^112^^^^^72^125^[REPLACE] updateDevice ( deviceId, Device.STATUS_UNKNOWN, null ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^if  ( timeout.isCancelled (  )  )  {^111^^^^^72^125^[REPLACE] if  ( !timeout.isCancelled (  )  )  {^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^updateDevice ( deviceId, Device.STATUS_UNKNOWN, this ) ;^112^^^^^72^125^[REPLACE] updateDevice ( deviceId, Device.STATUS_UNKNOWN, null ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^Context.getDeviceManager (  ) .updateDeviceStatus ( device ) ;Log.warning ( error ) ;^118^119^120^121^122^72^125^[ADD] try { Context.getDeviceManager (  ) .updateDeviceStatus ( device ) ; } catch  ( SQLException error )  { Log.warning ( error ) ; }^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^getIdentityManager (  ) .getDeviceById ( deviceId )  ;^119^^^^^72^125^[REPLACE] Context.getDeviceManager (  ) .updateDeviceStatus ( device ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[ADD]^^119^^^^^72^125^[ADD] Context.getDeviceManager (  ) .updateDeviceStatus ( device ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^getIdentityManager (  )  ;^119^^^^^72^125^[REPLACE] Context.getDeviceManager (  ) .updateDeviceStatus ( device ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
[REPLACE]^listener.onUpdateDevice ( device )  ;^124^^^^^72^125^[REPLACE] updateDevice ( device ) ;^[METHOD] updateDevice [TYPE] void [PARAMETER] final long deviceId String status Date time [CLASS] ConnectionManager 1   [TYPE]  boolean enableStatusEvents  false  true  [TYPE]  SQLException error  [TYPE]  Device device  [TYPE]  Timeout timeout  [TYPE]  Event event  [TYPE]  String eventType  status  [TYPE]  Map activeDevices  listeners  timeouts  [TYPE]  long DEFAULT_TIMEOUT  deviceId  deviceTimeout  [TYPE]  Date time 
