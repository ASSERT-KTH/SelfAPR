[REPLACE]^private static final Pattern PATTERN ;^147^148^149^150^^147^179^[REPLACE] private static final Pattern PATTERN = new PatternBuilder (  ) .text ( "*" ) .expression ( "..," ) .number ( " ( d+ ) ," )^ [CLASS] H02ProtocolDecoder  
[REPLACE]^private static final Pattern PATTERN_NBR  = null ;^181^182^183^184^^181^195^[REPLACE] private static final Pattern PATTERN_NBR = new PatternBuilder (  ) .text ( "*" ) .expression ( "..," ) .number ( " ( d+ ) ," )^ [CLASS] H02ProtocolDecoder  
[ADD]^^45^^^^^43^66^[ADD] int degrees = BcdUtil.readInteger ( buf, 2 ) ;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  ( false )  {^46^^^^^43^66^[REPLACE] if  ( lon )  {^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[ADD]^^46^47^48^^^43^66^[ADD] if  ( lon )  { degrees = degrees * 10 +  ( buf.getUnsignedByte ( buf.readerIndex (  )  )  >> 4 ) ; }^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^degrees = degrees * 10 >>> 4   ( buf.getUnsignedByte ( buf.readerIndex (  )  )  >> 4 ) ;^47^^^^^43^66^[REPLACE] degrees = degrees * 10 +  ( buf.getUnsignedByte ( buf.readerIndex (  )  )  >> 4 ) ;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^degrees = degrees * 10   ( buf.getUnsignedByte ( buf.readerIndex (  )  )  >> 4 ) ;^47^^^^^43^66^[REPLACE] degrees = degrees * 10 +  ( buf.getUnsignedByte ( buf.readerIndex (  )  )  >> 4 ) ;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^double result = 0 + 2;^50^^^^^43^66^[REPLACE] double result = 0;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  ( false )  {^51^^^^^43^66^[REPLACE] if  ( lon )  {^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[ADD]^^52^^^^^43^66^[ADD] result = buf.readUnsignedByte (  )  & 0x0f;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^int length = 0 ;^55^^^^^43^66^[REPLACE] int length = 6;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[ADD]^length = 5;^56^57^58^^^43^66^[ADD] if  ( lon )  { length = 5; }^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[ADD]^^57^^^^^43^66^[ADD] length = 5;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^result = result * 10 + BcdUtil.readInteger ( buf, length - 2 )  * 0.0001;^60^^^^^43^66^[REPLACE] result = result * 10 + BcdUtil.readInteger ( buf, length )  * 0.0001;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[ADD]^^62^^^^^43^66^[ADD] result /= 60;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[REPLACE]^result +=  length;^63^^^^^43^66^[REPLACE] result += degrees;^[METHOD] readCoordinate [TYPE] double [PARAMETER] ChannelBuffer buf boolean lon [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  lon  true  [TYPE]  int degrees  length  [TYPE]  double result  [TYPE]  ChannelBuffer buf 
[ADD]^^103^104^^^^101^145^[ADD] Position position = new Position (  ) ; position.setProtocol ( getProtocolName (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.set ( getProtocolName (  )  ) ;^104^^^^^101^145^[REPLACE] position.setProtocol ( getProtocolName (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[ADD]^^104^^^^^101^145^[ADD] position.setProtocol ( getProtocolName (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^buf.readerIndex (  ) ;^106^^^^^101^145^[REPLACE] buf.readByte (  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[ADD]^^106^^^^^101^145^[ADD] buf.readByte (  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^DeviceSession deviceSession = getDeviceSession ( channel, remoteAddress, ChannelBuffers.hexDump ( buf.readBytes ( 5 << 4 )  )  ) ;^108^109^^^^101^145^[REPLACE] DeviceSession deviceSession = getDeviceSession ( channel, remoteAddress, ChannelBuffers.hexDump ( buf.readBytes ( 5 )  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  ( deviceSession != true  ||  ( flags & 4 )  == 0  )  {^110^^^^^101^145^[REPLACE] if  ( deviceSession == null )  {^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REMOVE]^if  ( ! ( parser.matches (  )  )  )  {     return null; }^110^^^^^101^145^[REMOVE] ^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^return this;^111^^^^^101^145^[REPLACE] return null;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^return true;^111^^^^^101^145^[REPLACE] return null;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.set ( deviceSession.getDeviceId (  )  ) ;^113^^^^^101^145^[REPLACE] position.setDeviceId ( deviceSession.getDeviceId (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^DateBuilder dateBuilder = new DateBuilder (  ) .setHour ( BcdUtil.readInteger ( buf, 4 )  ) .setMinute ( BcdUtil.readInteger ( buf, 4 )  ) .setSecond ( BcdUtil.readInteger ( buf, 4 )  )^115^116^117^118^^101^145^[REPLACE] DateBuilder dateBuilder = new DateBuilder (  ) .setHour ( BcdUtil.readInteger ( buf, 2 )  ) .setMinute ( BcdUtil.readInteger ( buf, 2 )  ) .setSecond ( BcdUtil.readInteger ( buf, 2 )  )^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position .setLatitude ( longitude )  ;^122^^^^^101^145^[REPLACE] position.setTime ( dateBuilder.getDate (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REMOVE]^getLastLocation ( position, dateBuilder.getDate (  )  )  ;^122^^^^^101^145^[REMOVE] ^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setTime ( dateBuilder.setTime (  )  ) ;^122^^^^^101^145^[REPLACE] position.setTime ( dateBuilder.getDate (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^double longitude = readCoordinate ( buf, true )  ;^124^^^^^101^145^[REPLACE] double latitude = readCoordinate ( buf, false ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position .set (  )   ) ;^125^^^^^101^145^[REPLACE] position.set ( Position.KEY_BATTERY, decodeBattery ( buf.readUnsignedByte (  )  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^( buf.readUnsignedByte (  )  )  ;^125^^^^^101^145^[REPLACE] position.set ( Position.KEY_BATTERY, decodeBattery ( buf.readUnsignedByte (  )  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REMOVE]^( buf.readUnsignedByte (  )  )  ;^125^^^^^101^145^[REMOVE] ^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^double longitude = readCoordinate ( buf, false ) ;^126^^^^^101^145^[REPLACE] double longitude = readCoordinate ( buf, true ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[ADD]^^128^^^^^101^145^[ADD] int flags = buf.readUnsignedByte (  )  & 0x0f;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setValid (  ( flags & 0x02 )   ==  0 ) ;^129^^^^^101^145^[REPLACE] position.setValid (  ( flags & 0x02 )  != 0 ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  (  ( flags & 0x04 )   ) {^130^^^^^101^145^[REPLACE] if  (  ( flags & 0x04 )  == 0 )  {^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[ADD]^latitude = -latitude;^130^131^132^^^101^145^[ADD] if  (  ( flags & 0x04 )  == 0 )  { latitude = -latitude; }^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^longitude = -longitude  ;^131^^^^^101^145^[REPLACE] latitude = -latitude;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  (  ( flags & 0x09 )   !=  0 )  {^133^^^^^101^145^[REPLACE] if  (  ( flags & 0x08 )  == 0 )  {^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[ADD]^longitude = -longitude;^133^134^135^^^101^145^[ADD] if  (  ( flags & 0x08 )  == 0 )  { longitude = -longitude; }^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^latitude = -latitude  ;^134^^^^^101^145^[REPLACE] longitude = -longitude;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[ADD]^^134^^^^^101^145^[ADD] longitude = -longitude;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setLatitude ( longitude ) ;^137^^^^^101^145^[REPLACE] position.setLatitude ( latitude ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REMOVE]^position.setLongitude ( longitude )  ;^137^^^^^101^145^[REMOVE] ^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setLongitude ( latitude ) ;^138^^^^^101^145^[REPLACE] position.setLongitude ( longitude ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setSpeed ( BcdUtil.readInteger ( buf, 2 )  ) ;^140^^^^^101^145^[REPLACE] position.setSpeed ( BcdUtil.readInteger ( buf, 3 )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setSpeed ( BcdUtil.readInteger ( buf, 3 + 1 )  ) ;^140^^^^^101^145^[REPLACE] position.setSpeed ( BcdUtil.readInteger ( buf, 3 )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setCourse (  ( buf.readBytes (  )  & 0x0f )  * 100.0  BcdUtil.readInteger ( buf, 2 )  ) ;^141^^^^^101^145^[REPLACE] position.setCourse (  ( buf.readUnsignedByte (  )  & 0x0f )  * 100.0 + BcdUtil.readInteger ( buf, 2 )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setCourse (  ( buf.readBytes (  )  & 0x0f )  * 100.0 + BcdUtil.readInteger ( buf, 2 )  ) ;^141^^^^^101^145^[REPLACE] position.setCourse (  ( buf.readUnsignedByte (  )  & 0x0f )  * 100.0 + BcdUtil.readInteger ( buf, 2 )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^position.setCourse (  ( buf.readUnsignedByte (  )  & 0x0f )  * 100.0 + BcdUtil.readInteger ( buf, 2L )  ) ;^141^^^^^101^145^[REPLACE] position.setCourse (  ( buf.readUnsignedByte (  )  & 0x0f )  * 100.0 + BcdUtil.readInteger ( buf, 2 )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^processStatus ( position, buf.readUnsignedByte (  )  ) ;^143^^^^^101^145^[REPLACE] processStatus ( position, buf.readUnsignedInt (  )  ) ;^[METHOD] decodeBinary [TYPE] Position [PARAMETER] ChannelBuffer buf Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  double latitude  longitude  [TYPE]  Channel channel  [TYPE]  SocketAddress remoteAddress  [TYPE]  int flags  [TYPE]  ChannelBuffer buf 
[REPLACE]^Parser parser = new Parser ( PATTERN_NBR, sentence )  ;^199^^^^^197^259^[REPLACE] Parser parser = new Parser ( PATTERN, sentence ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( !parser.hasNext (  )  )  {^200^^^^^197^259^[REPLACE] if  ( !parser.matches (  )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return this;^201^^^^^197^259^[REPLACE] return null;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^DeviceSession deviceSession = getDeviceSession ( channel, remoteAddress, parser.nextInt (  )  ) ;^204^^^^^197^259^[REPLACE] DeviceSession deviceSession = getDeviceSession ( channel, remoteAddress, parser.next (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( deviceSession != null )  {^205^^^^^197^259^[REPLACE] if  ( deviceSession == null )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REMOVE]^if  ( ! ( parser.matches (  )  )  )  {     return null; }^205^^^^^197^259^[REMOVE] ^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return true;^206^^^^^197^259^[REPLACE] return null;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return this;^206^^^^^197^259^[REPLACE] return null;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^Network network = new Network (  )  ;^209^^^^^197^259^[REPLACE] Position position = new Position (  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.set ( getProtocolName (  )  ) ;^210^^^^^197^259^[REPLACE] position.setProtocol ( getProtocolName (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.set ( deviceSession.getDeviceId (  )  ) ;^211^^^^^197^259^[REPLACE] position.setDeviceId ( deviceSession.getDeviceId (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.hasNext ( 3L  )  && ! ( parser.matches (  )  )  )  )  {^214^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 3 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^214^215^216^^^197^259^[ADD] if  ( parser.hasNext ( 3 )  )  { dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ; }^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  )  ;^215^^^^^197^259^[REPLACE] dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^parser.nextInt ( 16 )  ;^215^^^^^197^259^[REPLACE] dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^215^^^^^197^259^[ADD] dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^dateBuilder.setTime ( parser.next (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^215^^^^^197^259^[REPLACE] dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( ! ( parser.matches (  )  )  && ( parser.hasNext (  )  )  {^218^^^^^197^259^[REPLACE] if  ( parser.hasNext (  )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setSpeed ( parser.nextDouble (  )  )  ;^219^^^^^197^259^[REPLACE] position.setValid ( parser.next (  ) .equals ( "A" )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^parser.next (  ) .split ( "," )  ;^219^^^^^197^259^[REPLACE] position.setValid ( parser.next (  ) .equals ( "A" )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^parser.nextInt (  )  ;^219^^^^^197^259^[REPLACE] position.setValid ( parser.next (  ) .equals ( "A" )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^219^^^^^197^259^[ADD] position.setValid ( parser.next (  ) .equals ( "A" )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.hasNext ( 0 )  )  {^222^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 2 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setLatitude ( -parser .nextInt (  )   ) ;^223^^^^^197^259^[REPLACE] position.setLatitude ( -parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^parser.nextCoordinate (  )  ;^223^^^^^197^259^[REPLACE] position.setLatitude ( -parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.hasNext ( 3 )  )  {^225^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 2 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setLongitude ( parser.nextCoordinate (  )  )  ;^226^^^^^197^259^[REPLACE] position.setLatitude ( parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setLatitude ( parser.nextInt (  )  ) ;^226^^^^^197^259^[REPLACE] position.setLatitude ( parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.nextInt ( 2 + 1 )  )  {^229^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 2 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^229^230^231^^^197^259^[ADD] if  ( parser.hasNext ( 2 )  )  { position.setLongitude ( -parser.nextCoordinate (  )  ) ; }^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setLongitude ( -parser.nextLong (  )  ) ;^230^^^^^197^259^[REPLACE] position.setLongitude ( -parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^230^^^^^197^259^[ADD] position.setLongitude ( -parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.hasNext ( 2 << 4 )  )  {^232^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 2 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setLatitude ( parser.nextCoordinate (  )  )  ;^233^^^^^197^259^[REPLACE] position.setLongitude ( parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setLongitude ( parser.nextInt (  )  ) ;^233^^^^^197^259^[REPLACE] position.setLongitude ( parser.nextCoordinate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.set ( parser.nextDouble (  )  ) ;^236^^^^^197^259^[REPLACE] position.setSpeed ( parser.nextDouble (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setSpeed ( parser .nextLong ( lac )   ) ;^236^^^^^197^259^[REPLACE] position.setSpeed ( parser.nextDouble (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setSpeed ( parser.nextDouble (  )  )  ;^237^^^^^197^259^[REPLACE] position.setCourse ( parser.nextDouble (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^237^^^^^197^259^[ADD] position.setCourse ( parser.nextDouble (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^parser.next (  )  ;^237^^^^^197^259^[REPLACE] position.setCourse ( parser.nextDouble (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.hasNext ( 4 )  )  {^239^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 3 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;position.setTime ( dateBuilder.getDate (  )  ) ;position.setTime ( new Date (  )  ) ;^239^240^241^242^243^197^259^[ADD] if  ( parser.hasNext ( 3 )  )  { dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ; position.setTime ( dateBuilder.getDate (  )  ) ; } else { position.setTime ( new Date (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position .setLatitude ( 0 )  ;^243^^^^^239^244^[REPLACE] position.setTime ( new Date (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^dateBuilder.setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  )  ;^240^^^^^197^259^[REPLACE] dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^parser.nextInt ( 16 )  ;^240^^^^^197^259^[REPLACE] dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.set ( dateBuilder.getDate (  )  ) ;^241^^^^^197^259^[REPLACE] position.setTime ( dateBuilder.getDate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setTime ( dateBuilder.setTime (  )  ) ;^241^^^^^197^259^[REPLACE] position.setTime ( dateBuilder.getDate (  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^processStatus ( position, buf.readUnsignedInt (  )  )  ;^246^^^^^197^259^[REPLACE] processStatus ( position, parser.nextLong ( 16 )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^processStatus ( position, parser.nextLong ( 16 % 3 )  ) ;^246^^^^^197^259^[REPLACE] processStatus ( position, parser.nextLong ( 16 )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( parser.hasNext ( 4  )  && ! ( parser.matches (  )  )  )  )  {^248^^^^^197^259^[REPLACE] if  ( parser.hasNext ( 4 )  )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( mcc != 1 || mnc != 1 || lac != 1 || cid != 1 )  {^253^^^^^197^259^[REPLACE] if  ( mcc != 0 && mnc != 0 && lac != 0 && cid != 0 )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^253^254^255^^^197^259^[ADD] if  ( mcc != 0 && mnc != 0 && lac != 0 && cid != 0 )  { position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ; }^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position .setTime (  )   ) ;^254^^^^^197^259^[REPLACE] position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^254^^^^^197^259^[ADD] position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setNetwork ( new Network ( CellTower .from ( lac , lac , mcc , cid , mcc )   )  ) ;^254^^^^^197^259^[REPLACE] position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int mcc = parser.nextInt ( 16 - 0 ) ;^249^^^^^197^259^[REPLACE] int mcc = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^250^^^^^197^259^[ADD] int mnc = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int lac = parser.nextInt ( 6 ) ;^251^^^^^197^259^[REPLACE] int lac = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^252^^^^^197^259^[ADD] int cid = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  (  mnc != 0 || lac != 0 || cid != 0 )  {^253^^^^^197^259^[REPLACE] if  ( mcc != 0 && mnc != 0 && lac != 0 && cid != 0 )  {^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[ADD]^position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ;^253^254^255^^^197^259^[ADD] if  ( mcc != 0 && mnc != 0 && lac != 0 && cid != 0 )  { position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ; }^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setNetwork ( new Network ( CellTower .from ( mnc , mcc , cid , cid , cid )   )  ) ;^254^^^^^197^259^[REPLACE] position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setNetwork ( new Network ( CellTower.from ( mcc, lac, lac, cid )  )  ) ;^254^^^^^197^259^[REPLACE] position.setNetwork ( new Network ( CellTower.from ( mcc, mnc, lac, cid )  )  ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int mcc = parser.nextInt ( 16 - 1 ) ;^249^^^^^197^259^[REPLACE] int mcc = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int mnc = parser.nextLong ( 6 ) ;^250^^^^^197^259^[REPLACE] int mnc = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int lac = parser.nextInt ( 8 ) ;^251^^^^^197^259^[REPLACE] int lac = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int mcc = parser.nextInt ( 16 )  ;^252^^^^^197^259^[REPLACE] int cid = parser.nextInt ( 16 ) ;^[METHOD] decodeText [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  String sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  int cid  lac  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^Parser parser = new Parser ( PATTERN, sentence )  ;^263^^^^^261^299^[REPLACE] Parser parser = new Parser ( PATTERN_NBR, sentence ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( !parser.hasNext (  )  )  {^264^^^^^261^299^[REPLACE] if  ( !parser.matches (  )  )  {^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return true;^265^^^^^261^299^[REPLACE] return null;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return false;^265^^^^^261^299^[REPLACE] return null;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^DeviceSession deviceSession = getDeviceSession ( channel, remoteAddress, parser .hasNext ( i )   ) ;^268^^^^^261^299^[REPLACE] DeviceSession deviceSession = getDeviceSession ( channel, remoteAddress, parser.next (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^if  ( deviceSession != null )  {^269^^^^^261^299^[REPLACE] if  ( deviceSession == null )  {^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REMOVE]^if  ( ! ( parser.matches (  )  )  )  {     return null; }^269^^^^^261^299^[REMOVE] ^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return false;^270^^^^^261^299^[REPLACE] return null;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^return true;^270^^^^^261^299^[REPLACE] return null;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^Network network = new Network (  )  ;^273^^^^^261^299^[REPLACE] Position position = new Position (  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.set ( getProtocolName (  )  ) ;^274^^^^^261^299^[REPLACE] position.setProtocol ( getProtocolName (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.set ( deviceSession.getDeviceId (  )  ) ;^275^^^^^261^299^[REPLACE] position.setDeviceId ( deviceSession.getDeviceId (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^275^^^^^261^299^[ADD] position.setDeviceId ( deviceSession.getDeviceId (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^277^278^^^^261^299^[ADD] DateBuilder dateBuilder = new DateBuilder (  ) .setTime ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^Position position = new Position (  )  ;^280^^^^^261^299^[REPLACE] Network network = new Network (  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int mcc = parser .nextInt (  )  ;^281^^^^^261^299^[REPLACE] int mcc = parser.nextInt (  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^int mnc = parser.next (  ) ;^282^^^^^261^299^[REPLACE] int mnc = parser.nextInt (  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^String[] cells = parser.next (  ) .text ( "," ) ;^284^^^^^261^299^[REPLACE] String[] cells = parser.next (  ) .split ( "," ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^for  ( int i = 0 ; i < cells.length / 3; i++ )  {^285^^^^^261^299^[REPLACE] for  ( int i = 0; i < cells.length / 3; i++ )  {^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^position.setTime ( network ) ;^290^^^^^261^299^[REPLACE] position.setNetwork ( network ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^dateBuilder.setDateReverse ( parser.next (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^292^^^^^261^299^[REPLACE] dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^dateBuilder.setDateReverse ( parser .nextInt (  )  , parser^292^^^^^261^299^[REPLACE] dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^292^^^^^261^299^[ADD] dateBuilder.setDateReverse ( parser.nextInt (  ) , parser.nextInt (  ) , parser.nextInt (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^getLastLocation ( position, dateBuilder.setTime (  )  ) ;^294^^^^^261^299^[REPLACE] getLastLocation ( position, dateBuilder.getDate (  )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^processStatus ( position, buf.readUnsignedInt (  )  )  ;^296^^^^^261^299^[REPLACE] processStatus ( position, parser.nextLong ( 16 )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REPLACE]^processStatus ( position, parser.nextLong ( 11 )  ) ;^296^^^^^261^299^[REPLACE] processStatus ( position, parser.nextLong ( 16 )  ) ;^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[REMOVE]^parser.nextInt ( 16 )  ;^296^^^^^261^299^[REMOVE] ^[METHOD] decodeLbs [TYPE] Position [PARAMETER] String sentence Channel channel SocketAddress remoteAddress [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  DeviceSession deviceSession  [TYPE]  Position position  [TYPE]  DateBuilder dateBuilder  [TYPE]  Channel channel  [TYPE]  Network network  [TYPE]  String sentence  [TYPE]  String[] cells  [TYPE]  SocketAddress remoteAddress  [TYPE]  int i  mcc  mnc  [TYPE]  Parser parser 
[ADD]^^305^306^^^^303^322^[ADD] ChannelBuffer buf =  ( ChannelBuffer )  msg; String marker = buf.toString ( 0, 1, StandardCharsets.US_ASCII ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^String marker = buf.toString ( 0L, 1, StandardCharsets.US_ASCII ) ;^306^^^^^303^322^[REPLACE] String marker = buf.toString ( 0, 1, StandardCharsets.US_ASCII ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  ( sentence.equals ( "*" )  )  {^310^^^^^303^322^[REPLACE] if  ( marker.equals ( "*" )  )  {^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[ADD]^^310^311^312^313^^303^322^[ADD] if  ( marker.equals ( "*" )  )  { String sentence = buf.toString ( StandardCharsets.US_ASCII ) ; if  ( sentence.contains ( ",NBR," )  )  { return decodeLbs ( sentence, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^}  else {^317^^^^^303^322^[REPLACE] } else if  ( marker.equals ( "$" )  )  {^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return decodeLbs ( sentence, channel, remoteAddress )  ;^318^^^^^303^322^[REPLACE] return decodeBinary ( buf, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  ( marker.equals ( "*" )  || ( marker.contains ( ",NBR," )  )  {^312^^^^^303^322^[REPLACE] if  ( sentence.contains ( ",NBR," )  )  {^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return decodeLbs ( sentence, channel, remoteAddress )  ;^315^^^^^312^316^[REPLACE] return decodeText ( sentence, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return decodeText ( sentence, channel, remoteAddress )  ;^313^^^^^303^322^[REPLACE] return decodeLbs ( sentence, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return decodeLbs ( marker, channel, remoteAddress ) ;^313^^^^^303^322^[REPLACE] return decodeLbs ( sentence, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return decodeText ( marker, channel, remoteAddress ) ;^315^^^^^303^322^[REPLACE] return decodeText ( sentence, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^String marker = buf.toString ( 0, 1, US_ASCII )  ;^311^^^^^303^322^[REPLACE] String sentence = buf.toString ( StandardCharsets.US_ASCII ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^if  ( sentence.contains ( ",NBR,"  )  && marker.equals ( "*" )  )  )  {^312^^^^^303^322^[REPLACE] if  ( sentence.contains ( ",NBR," )  )  {^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return decodeLbs ( sentence, channel, remoteAddress )  ;^315^^^^^303^322^[REPLACE] return decodeText ( sentence, channel, remoteAddress ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^String sentence = buf .toString ( this , this , null )  ;^311^^^^^303^322^[REPLACE] String sentence = buf.toString ( StandardCharsets.US_ASCII ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
[REPLACE]^return false;^321^^^^^303^322^[REPLACE] return null;^[METHOD] decode [TYPE] Object [PARAMETER] Channel channel SocketAddress remoteAddress Object msg [CLASS] H02ProtocolDecoder   [TYPE]  Pattern PATTERN  PATTERN_NBR  [TYPE]  boolean false  true  [TYPE]  Channel channel  [TYPE]  Object msg  [TYPE]  String marker  sentence  [TYPE]  SocketAddress remoteAddress  [TYPE]  ChannelBuffer buf 
