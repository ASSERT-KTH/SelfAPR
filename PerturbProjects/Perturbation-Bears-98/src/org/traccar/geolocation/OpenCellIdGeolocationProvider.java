[REPLACE]^private  byte  url;^30^^^^^^^[REPLACE] private String url;^ [CLASS] OpenCellIdGeolocationProvider 1  
[REPLACE]^if  ( network.getCellTowers (  )  == this ) {^42^^^^^41^73^[REPLACE] if  ( network.getCellTowers (  )  != null && !network.getCellTowers (  ) .isEmpty (  )  )  {^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^42^43^44^45^46^41^73^[ADD] if  ( network.getCellTowers (  )  != null && !network.getCellTowers (  ) .isEmpty (  )  )  {  CellTower cellTower = network.getCellTowers (  ) .iterator (  ) .next (  ) ; String request = String.format ( url, cellTower.getMobileCountryCode (  ) , cellTower.getMobileNetworkCode (  ) , cellTower.getLocationAreaCode (  ) , cellTower.getCellId (  )  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^callback .onSuccess ( null )  ;^71^^^^^42^72^[REPLACE] callback.onFailure ( new GeolocationException ( "No network information" )  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^if  ( json.containsKey ( "lat" )  || json.containsKey ( "lon" )  )  {^53^^^^^41^73^[REPLACE] if  ( json.containsKey ( "lat" )  && json.containsKey ( "lon" )  )  {^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^callback .onSuccess ( null )  ;^58^^^^^53^59^[REPLACE] callback.onFailure ( new GeolocationException ( "Coordinates are missing" )  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^callback.onFailure ( json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^54^55^56^^^41^73^[REPLACE] callback.onSuccess ( json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json.containsKey ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^55^56^^^^41^73^[REPLACE] json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^55^56^^^^41^73^[ADD] json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json.containsKey ( "lon" ) .doubleValue (  ) , 0 ) ;^56^^^^^41^73^[REPLACE] json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json.getJsonNumber ( "lat" )  ;^56^^^^^41^73^[REPLACE] json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^JsonObject json = reader.readObject (  ) ;^51^52^53^54^55^41^73^[ADD] try  ( JsonReader reader = Json.createReader ( response.getResponseBodyAsStream (  )  )  )  { JsonObject json = reader.readObject (  ) ; if  ( json.containsKey ( "lat" )  && json.containsKey ( "lon" )  )  { callback.onSuccess ( json.getJsonNumber ( "lat" ) .doubleValue (  ) ,^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^callback .onSuccess ( false )  ;^58^^^^^53^59^[REPLACE] callback.onFailure ( new GeolocationException ( "Coordinates are missing" )  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^callback.onSuccess ( json.getJsonNumber ( "lat" ) .prepareGet (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^54^55^56^^^41^73^[REPLACE] callback.onSuccess ( json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json.getJsonNumber ( "lat" ) .prepareGet (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^55^56^^^^41^73^[REPLACE] json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json .containsKey ( url )  .doubleValue (  ) , 0 ) ;^56^^^^^41^73^[REPLACE] json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^return this;^61^^^^^41^73^[REPLACE] return null;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^CellTower cellTower = network.getCellTowers (  ) .prepareGet (  ) .next (  ) ;^44^^^^^41^73^[REPLACE] CellTower cellTower = network.getCellTowers (  ) .iterator (  ) .next (  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^String request = String.format ( url, cellTower.getMobileCountryCode (  ) , cellTower.getMobileNetworkCode (  ) , cellTower.getMobileCountryCode (  ) , cellTower.getCellId (  )  ) ;^45^46^^^^41^73^[REPLACE] String request = String.format ( url, cellTower.getMobileCountryCode (  ) , cellTower.getMobileNetworkCode (  ) , cellTower.getLocationAreaCode (  ) , cellTower.getCellId (  )  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^52^^^^^41^73^[ADD] JsonObject json = reader.readObject (  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json .containsKey ( request )  .doubleValue (  ) , json^55^56^^^^41^73^[REPLACE] json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json .containsKey ( url )  .doubleValue (  ) , json^55^56^^^^41^73^[REPLACE] json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json.getJsonNumber ( "lat" ) .doubleValue (  )  ;^56^^^^^41^73^[REPLACE] json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^56^^^^^41^73^[ADD] json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^if  ( json.containsKey ( "lat" )  ) {^53^^^^^41^73^[REPLACE] if  ( json.containsKey ( "lat" )  && json.containsKey ( "lon" )  )  {^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^53^54^55^56^^41^73^[ADD] if  ( json.containsKey ( "lat" )  && json.containsKey ( "lon" )  )  { callback.onSuccess ( json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^callback.onSuccess ( json.containsKey ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^54^55^56^^^41^73^[REPLACE] callback.onSuccess ( json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^json .containsKey ( key )  .doubleValue (  ) , json^55^56^^^^41^73^[REPLACE] json.getJsonNumber ( "lat" ) .doubleValue (  ) , json.getJsonNumber ( "lon" ) .doubleValue (  ) , 0 ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REMOVE]^json.getJsonNumber ( "lat" )  ;^56^^^^^41^73^[REMOVE] ^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[REPLACE]^return false;^61^^^^^41^73^[REPLACE] return null;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^44^^^^^41^73^[ADD] CellTower cellTower = network.getCellTowers (  ) .iterator (  ) .next (  ) ;^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
[ADD]^^45^46^^48^49^41^73^[ADD] String request = String.format ( url, cellTower.getMobileCountryCode (  ) , cellTower.getMobileNetworkCode (  ) , cellTower.getLocationAreaCode (  ) , cellTower.getCellId (  )  ) ; Context.getAsyncHttpClient (  ) .prepareGet ( request ) .execute ( new AsyncCompletionHandler (  )  { @Override^[METHOD] getLocation [TYPE] void [PARAMETER] Network network LocationProviderCallback callback [CLASS] OpenCellIdGeolocationProvider 1   [TYPE]  Response response  [TYPE]  boolean false  true  [TYPE]  Network network  [TYPE]  CellTower cellTower  [TYPE]  JsonReader reader  [TYPE]  JsonObject json  [TYPE]  Throwable t  [TYPE]  String key  request  url  [TYPE]  LocationProviderCallback callback 
