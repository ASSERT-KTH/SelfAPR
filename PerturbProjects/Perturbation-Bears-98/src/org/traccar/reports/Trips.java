[REPLACE]^Position endTrip = positions.get ( endIndex )  ;^51^^^^^50^90^[REPLACE] Position startTrip = positions.get ( startIndex ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^Position endTrip = true.get ( endIndex ) ;^52^^^^^50^90^[REPLACE] Position endTrip = positions.get ( endIndex ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^double speedMax = 1.0d;^54^^^^^50^90^[REPLACE] double speedMax = 0.0;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^double speedSum = 0.0d;^55^^^^^50^90^[REPLACE] double speedSum = 0.0;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^if  ( speed  !=  speedSum )  {^59^^^^^50^90^[REPLACE] if  ( speed > speedMax )  {^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^60^^^^^50^90^[ADD] speedMax = speed;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^speedMax = speed  ;^58^^^^^50^90^[REPLACE] speedSum += speed;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^56^57^58^59^60^50^90^[ADD] for  ( int i = startIndex; i <= endIndex; i++ )  { double speed = positions.get ( i ) .getSpeed (  ) ; speedSum += speed; if  ( speed > speedMax )  { speedMax = speed;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^double speed = positions .isEmpty (  )^57^^^^^50^90^[REPLACE] double speed = positions.get ( i ) .getSpeed (  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^DeviceReport deviceTrips = new DeviceReport (  )  ;^64^^^^^50^90^[REPLACE] TripReport trip = new TripReport (  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^long tripDuration =  ( positions.get ( i ) .getFixTime (  ) .getTime (  )  )  -  ( positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  )  )  ;^66^^^^^50^90^[REPLACE] long tripDuration = endTrip.getFixTime (  ) .getTime (  )  - positions.get ( startIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^long deviceId = endTrip.getDeviceId (  ) ;^67^^^^^50^90^[REPLACE] long deviceId = startTrip.getDeviceId (  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDuration ( deviceId ) ;^68^^^^^50^90^[REPLACE] trip.setDeviceId ( deviceId ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REMOVE]^deviceTrips.setDeviceName ( device.getName (  )  )  ;^68^^^^^50^90^[REMOVE] ^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDeviceId ( Context.getIdentityManager (  ) .getDeviceById ( tripDuration ) .getName (  )  ) ;^69^^^^^50^90^[REPLACE] trip.setDeviceName ( Context.getIdentityManager (  ) .getDeviceById ( deviceId ) .getName (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDeviceName ( Context.getDeviceManager (  ) .getDeviceById ( tripDuration ) .getName (  )  ) ;^69^^^^^50^90^[REPLACE] trip.setDeviceName ( Context.getIdentityManager (  ) .getDeviceById ( deviceId ) .getName (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^getIdentityManager (  ) .getDeviceById ( deviceId ) .getName (  )  ;^69^^^^^50^90^[REPLACE] trip.setDeviceName ( Context.getIdentityManager (  ) .getDeviceById ( deviceId ) .getName (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDeviceName ( Context.getDeviceManager (  ) .getDeviceById ( deviceId ) .getName (  )  ) ;^69^^^^^50^90^[REPLACE] trip.setDeviceName ( Context.getIdentityManager (  ) .getDeviceById ( deviceId ) .getName (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartPositionId ( endTrip.getId (  )  ) ;^71^^^^^50^90^[REPLACE] trip.setStartPositionId ( startTrip.getId (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^71^^^^^50^90^[ADD] trip.setStartPositionId ( startTrip.getId (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartPositionId ( endTrip.getDeviceId (  )  ) ;^71^^^^^50^90^[REPLACE] trip.setStartPositionId ( startTrip.getId (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDuration ( startTrip.getLatitude (  )  ) ;^72^^^^^50^90^[REPLACE] trip.setStartLat ( startTrip.getLatitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartLat ( endTrip.getLatitude (  )  ) ;^72^^^^^50^90^[REPLACE] trip.setStartLat ( startTrip.getLatitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^72^^^^^50^90^[ADD] trip.setStartLat ( startTrip.getLatitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDuration ( endTrip.getLongitude (  )  ) ;^73^^^^^50^90^[REPLACE] trip.setStartLon ( startTrip.getLongitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartLon ( endTrip.getLatitude (  )  ) ;^73^^^^^50^90^[REPLACE] trip.setStartLon ( startTrip.getLongitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^73^^^^^50^90^[ADD] trip.setStartLon ( startTrip.getLongitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartLat ( startTrip.getLatitude (  )  )  ;^74^^^^^50^90^[REPLACE] trip.setStartTime ( startTrip.getFixTime (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^74^^^^^50^90^[ADD] trip.setStartTime ( startTrip.getFixTime (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartTime ( endTrip.getFixTime (  )  ) ;^74^^^^^50^90^[REPLACE] trip.setStartTime ( startTrip.getFixTime (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDeviceId ( startTrip.getAddress (  )  ) ;^75^^^^^50^90^[REPLACE] trip.setStartAddress ( startTrip.getAddress (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartAddress ( endTrip.getId (  )  ) ;^75^^^^^50^90^[REPLACE] trip.setStartAddress ( startTrip.getAddress (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartPositionId ( startTrip.getId (  )  )  ;^77^^^^^50^90^[REPLACE] trip.setEndPositionId ( endTrip.getId (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setEndPositionId ( startTrip.getId (  )  ) ;^77^^^^^50^90^[REPLACE] trip.setEndPositionId ( endTrip.getId (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setEndLon ( endTrip.getLongitude (  )  )  ;^78^^^^^50^90^[REPLACE] trip.setEndLat ( endTrip.getLatitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^78^^^^^50^90^[ADD] trip.setEndLat ( endTrip.getLatitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setEndLat ( startTrip.getLatitude (  )  ) ;^78^^^^^50^90^[REPLACE] trip.setEndLat ( endTrip.getLatitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setEndLon ( endTrip.getLatitude (  )  ) ;^79^^^^^50^90^[REPLACE] trip.setEndLon ( endTrip.getLongitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setEndLon ( startTrip.getLongitude (  )  ) ;^79^^^^^50^90^[REPLACE] trip.setEndLon ( endTrip.getLongitude (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartTime ( startTrip.getFixTime (  )  )  ;^80^^^^^50^90^[REPLACE] trip.setEndTime ( endTrip.getFixTime (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^80^^^^^50^90^[ADD] trip.setEndTime ( endTrip.getFixTime (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setEndTime ( startTrip.getFixTime (  )  ) ;^80^^^^^50^90^[REPLACE] trip.setEndTime ( endTrip.getFixTime (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setStartAddress ( startTrip.getAddress (  )  )  ;^81^^^^^50^90^[REPLACE] trip.setEndAddress ( endTrip.getAddress (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^81^^^^^50^90^[ADD] trip.setEndAddress ( endTrip.getAddress (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^startTrip.getAddress (  )  ;^81^^^^^50^90^[REPLACE] trip.setEndAddress ( endTrip.getAddress (  )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^calculateDistance ( startTrip, endTrip,  ( !ignoreOdometer )  )  ;^83^^^^^50^90^[REPLACE] trip.setDistance ( ReportUtils.calculateDistance ( startTrip, endTrip, !ignoreOdometer )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^83^^^^^50^90^[ADD] trip.setDistance ( ReportUtils.calculateDistance ( startTrip, endTrip, !ignoreOdometer )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDistance ( calculateDistance ( startTrip, endTrip,  ( !ignoreOdometer )  )  )  ;^83^^^^^50^90^[REPLACE] trip.setDistance ( ReportUtils.calculateDistance ( startTrip, endTrip, !ignoreOdometer )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setDeviceId ( tripDuration ) ;^84^^^^^50^90^[REPLACE] trip.setDuration ( tripDuration ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^84^85^^^^50^90^[ADD] trip.setDuration ( tripDuration ) ; trip.setAverageSpeed ( speedSum /  ( endIndex - startIndex )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setAverageSpeed ( speedSum   (speedMax )  ) ;^85^^^^^50^90^[REPLACE] trip.setAverageSpeed ( speedSum /  ( endIndex - startIndex )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setAverageSpeed ( speedMax ) ;^86^^^^^50^90^[REPLACE] trip.setMaxSpeed ( speedMax ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[ADD]^^86^^^^^50^90^[ADD] trip.setMaxSpeed ( speedMax ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^trip.setSpentFuel ( ReportUtils.getDeviceList ( startTrip, endTrip )  ) ;^87^^^^^50^90^[REPLACE] trip.setSpentFuel ( ReportUtils.calculateFuel ( startTrip, endTrip )  ) ;^[METHOD] calculateTrip [TYPE] TripReport [PARAMETER] Position> positions int startIndex int endIndex boolean ignoreOdometer [CLASS] Trips   [TYPE]  TripReport trip  [TYPE]  boolean false  ignoreOdometer  true  [TYPE]  Position endTrip  startTrip  [TYPE]  double speed  speedMax  speedSum  [TYPE]  ArrayList positions  [TYPE]  int endIndex  i  startIndex  [TYPE]  long deviceId  tripDuration 
[REPLACE]^TripReport> result = new ArrayList<> (  )  ;^97^^^^^95^165^[REPLACE] Collection<TripReport> result = new ArrayList<> (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^ArrayList<Position> positions = new ArrayList<> ( null ) ;^99^^^^^95^165^[REPLACE] ArrayList<Position> positions = new ArrayList<> ( positionCollection ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  (  !positions.isEmpty (  )  )  {^100^^^^^95^165^[REPLACE] if  ( positions != null && !positions.isEmpty (  )  )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^int previousStartParkingIndex = 0;int startParkingIndex = -1;int previousEndParkingIndex = 0;int endParkingIndex = 0;^100^101^102^103^104^95^165^[ADD] if  ( positions != null && !positions.isEmpty (  )  )  { int previousStartParkingIndex = 0; int startParkingIndex = -1; int previousEndParkingIndex = 0; int endParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^isMovingif  (  ( isMoving || isLast )  || startParkingIndex != -1 )  {^115^^^^^95^165^[REPLACE] if  (  ( isMoving || isLast )  && startParkingIndex != -1 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( skipped ||tripFiltered )  {^116^^^^^95^165^[REPLACE] if  ( !skipped || previousEndParkingIndex == 0 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^previousEndParkingIndex = endParkingIndex;^116^117^118^^^95^165^[ADD] if  ( !skipped || previousEndParkingIndex == 0 )  { previousEndParkingIndex = endParkingIndex; }^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^previousEndParkingIndex =  startParkingIndex;^117^^^^^95^165^[REPLACE] previousEndParkingIndex = endParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = i  ;^119^^^^^95^165^[REPLACE] endParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( true || previousEndParkingIndex == 0 )  {^116^^^^^95^165^[REPLACE] if  ( !skipped || previousEndParkingIndex == 0 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( isMoving ) {^121^^^^^95^165^[REPLACE] if  ( !isMoving && startParkingIndex == -1 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( greedyParking  ||  ( !skipped )  ||  ( previousEndParkingIndex == 0 )  )  {^122^^^^^95^165^[REPLACE] if  ( greedyParking )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered =tripFiltered ;^141^^^^^122^143^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = -1  ;^142^^^^^122^143^[REPLACE] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^137^138^^^^122^143^[ADD] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.getDistanceUnit ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , true ) ;^139^140^^^^122^143^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( true )  {^128^^^^^95^165^[REPLACE] if  ( tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^128^129^130^131^^95^165^[ADD] if  ( tripFiltered )  { startParkingIndex = previousStartParkingIndex; endParkingIndex = previousEndParkingIndex; tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = i  ;^133^^^^^128^135^[REPLACE] previousStartParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = -1  ;^134^^^^^128^135^[REPLACE] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^endParkingIndex = previousEndParkingIndex  ;^129^^^^^95^165^[REPLACE] startParkingIndex = previousStartParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = previousStartParkingIndex  ;^130^^^^^95^165^[REPLACE] endParkingIndex = previousEndParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = true;^131^^^^^95^165^[REPLACE] tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration ;^127^^^^^95^165^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^131^^^^^95^165^[ADD] tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^133^134^^^^95^165^[ADD] previousStartParkingIndex = i; startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^134^^^^^95^165^[ADD] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = positions.get ( startParkingIndex ) .getFixTime (  ) .getTime (  )  positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^123^124^^^^95^165^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^125^126^^^^95^165^[ADD] double tripDistance = ReportUtils.calculateDistance ( positions.get ( endParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^129^130^^^^95^165^[ADD] startParkingIndex = previousStartParkingIndex; endParkingIndex = previousEndParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^127^^^^^95^165^[ADD] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^tripFiltered = false;^130^131^^^^95^165^[ADD] endParkingIndex = previousEndParkingIndex; tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = i  ;^133^^^^^95^165^[REPLACE] previousStartParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration  !=  tripDistance < minimalTripDistance;^141^^^^^95^165^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^142^^^^^95^165^[ADD] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  )  positions.get ( startParkingIndex ) .getFixTime (  ) .getTime (  ) ;^123^124^^^^95^165^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  )  positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^137^138^^^^95^165^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , true ) ;^139^140^^^^95^165^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  (  ( !skipped )  ||  ( previousEndParkingIndex == 0 )  || ( greedyParking )  {^122^^^^^95^165^[REPLACE] if  ( greedyParking )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^141^^^^^122^143^[ADD] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , true ) ;^139^140^^^^122^143^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^130^131^^^^95^165^[ADD] endParkingIndex = previousEndParkingIndex; tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = -1  ;^134^^^^^95^165^[REPLACE] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^123^124^^^^95^165^[ADD] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( positions.get ( endParkingIndex ) , positions.get ( i ) , true ) ;^125^126^^^^95^165^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( endParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( tripFiltered  || !tripFiltered  )  {^128^^^^^95^165^[REPLACE] if  ( tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( startParkingIndex != -1 ||  ( endParkingIndex > startParkingIndex || isLast )  )  {^145^^^^^95^165^[REPLACE] if  ( startParkingIndex != -1 &&  ( endParkingIndex > startParkingIndex || isLast )  )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^145^146^147^148^^95^165^[ADD] if  ( startParkingIndex != -1 &&  ( endParkingIndex > startParkingIndex || isLast )  )  { long parkingDuration = positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) - positions.get ( startParkingIndex ) .getFixTime (  ) .getTime (  ) ; if  (  ( parkingDuration >= minimalParkingDuration || isLast )^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^trueif  (  ( parkingDuration >= minimalParkingDuration || isLast ) || previousEndParkingIndex < startParkingIndex )  {^148^149^^^^95^165^[REPLACE] if  (  ( parkingDuration >= minimalParkingDuration || isLast ) && previousEndParkingIndex < startParkingIndex )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = false;^157^^^^^148^158^[REPLACE] skipped = true;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( tripFiltered )  {^150^^^^^148^158^[REPLACE] if  ( !tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^150^151^152^153^^148^158^[ADD] if  ( !tripFiltered )  { result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ; }^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^154^^^^^148^158^[ADD] previousEndParkingIndex = endParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = true;^155^^^^^148^158^[REPLACE] skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( !tripFiltered  || tripFiltered  )  {^150^^^^^95^165^[REPLACE] if  ( !tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^150^151^152^153^^95^165^[ADD] if  ( !tripFiltered )  { result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ; }^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^result.add ( calculateTrip ( positions, previousEndParkingIndex, previousStartParkingIndex, ignoreOdometer )  ) ;^151^152^^^^95^165^[REPLACE] result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^151^152^^^^95^165^[ADD] result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^result.add ( calculateTrip ( positions, startParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^151^152^^^^95^165^[REPLACE] result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^previousEndParkingIndex =  startParkingIndex;^154^^^^^95^165^[REPLACE] previousEndParkingIndex = endParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^155^^^^^95^165^[ADD] skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = false  ;^157^^^^^95^165^[REPLACE] skipped = true;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = -0;^159^^^^^95^165^[REPLACE] startParkingIndex = -1;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^146^147^^^^95^165^[ADD] long parkingDuration = positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) - positions.get ( startParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  (  isLast ) || previousEndParkingIndex < startParkingIndex )  {^148^149^^^^95^165^[REPLACE] if  (  ( parkingDuration >= minimalParkingDuration || isLast ) && previousEndParkingIndex < startParkingIndex )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^previousEndParkingIndex =  startParkingIndex;^154^^^^^148^158^[REPLACE] previousEndParkingIndex = endParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = true  ;^155^^^^^148^158^[REPLACE] skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( tripFiltered  && ( !true )  {^150^^^^^95^165^[REPLACE] if  ( !tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^result.add ( calculateTrip ( null, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^151^152^^^^95^165^[REPLACE] result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^isMoving = positions.get ( i ) .getSpeed (  )   <=  speedThreshold;^112^^^^^95^165^[REPLACE] isMoving = positions.get ( i ) .getSpeed (  )  > speedThreshold;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^isLast = i == positions.size (  )  + 0  - 0 ;^113^^^^^95^165^[REPLACE] isLast = i == positions.size (  )  - 1;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration || tripDistance < minimalTripDistance;^141^^^^^95^165^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^startParkingIndex = -1  ;^142^^^^^95^165^[REPLACE] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^previousEndParkingIndex =  null;^154^^^^^95^165^[REPLACE] previousEndParkingIndex = endParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = true;^155^^^^^95^165^[REPLACE] skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = false;^157^^^^^95^165^[REPLACE] skipped = true;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^159^^^^^95^165^[ADD] startParkingIndex = -1;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int previousStartParkingIndex = 1;^101^^^^^95^165^[REPLACE] int previousStartParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int startParkingIndex = -1 + 1;^102^^^^^95^165^[REPLACE] int startParkingIndex = -1;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int previousStartParkingIndex = 0  ;^103^^^^^95^165^[REPLACE] int previousEndParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int endParkingIndex = 2;^104^^^^^95^165^[REPLACE] int endParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^boolean isMoving = true;^106^^^^^95^165^[REPLACE] boolean isMoving = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^boolean isLast = true;^107^^^^^95^165^[REPLACE] boolean isLast = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^boolean skipped = true;^108^^^^^95^165^[REPLACE] boolean skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^boolean tripFiltered = true;^109^^^^^95^165^[REPLACE] boolean tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^for  ( int i = 0 ; i < positions.size (  ) ; i++ )  {^111^^^^^95^165^[REPLACE] for  ( int i = 0; i < positions.size (  ) ; i++ )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = positions.add ( i ) .getFixTime (  ) .getTime (  )  positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^123^124^^^^95^165^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^137^138^^^^95^165^[ADD] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( positions.get ( startParkingIndex ) , positions.get ( i ) , true ) ;^139^140^^^^95^165^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFilteredif  (  ( isMoving || isLast )  || previousStartParkingIndex != -1 )  {^115^^^^^95^165^[REPLACE] if  (  ( isMoving || isLast )  && startParkingIndex != -1 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( skipped || previousEndParkingIndex == 0 )  {^116^^^^^95^165^[REPLACE] if  ( !skipped || previousEndParkingIndex == 0 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( skipped ) {^116^^^^^95^165^[REPLACE] if  ( !skipped || previousEndParkingIndex == 0 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  (  startParkingIndex == -4 )  {^121^^^^^95^165^[REPLACE] if  ( !isMoving && startParkingIndex == -1 )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^122^123^124^125^126^95^165^[ADD] if  ( greedyParking )  { long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ; double tripDistance = ReportUtils.calculateDistance ( positions.get ( endParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration  &  tripDistance < minimalTripDistance;^141^^^^^122^143^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = null.add ( i ) .getFixTime (  ) .getTime (  )  positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^137^138^^^^122^143^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( true  && !tripFiltered  )  {^128^^^^^95^165^[REPLACE] if  ( tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^134^^^^^128^135^[ADD] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration  <=  tripDistance < minimalTripDistance;^127^^^^^95^165^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  )  positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^123^124^^^^95^165^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( !tripFiltered  && ( tripFiltered )  {^128^^^^^95^165^[REPLACE] if  ( tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^startParkingIndex = previousStartParkingIndex;endParkingIndex = previousEndParkingIndex;tripFiltered = false;^128^129^130^131^^95^165^[ADD] if  ( tripFiltered )  { startParkingIndex = previousStartParkingIndex; endParkingIndex = previousEndParkingIndex; tripFiltered = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^133^134^^^^128^135^[ADD] previousStartParkingIndex = i; startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^129^^^^^95^165^[ADD] startParkingIndex = previousStartParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( positions.add ( endParkingIndex ) , positions.get ( i ) , true ) ;^125^126^^^^95^165^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( endParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration ;^141^^^^^122^143^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^142^^^^^122^143^[ADD] startParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long tripDuration = positions.add ( i ) .getFixTime (  ) .getTime (  )  positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^137^138^^^^122^143^[REPLACE] long tripDuration = positions.get ( i ) .getFixTime (  ) .getTime (  ) - positions.get ( previousEndParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( null.add ( previousEndParkingIndex ) , positions.get ( i ) , true ) ;^139^140^^^^122^143^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( tripFiltered  && !tripFiltered  )  {^128^^^^^95^165^[REPLACE] if  ( tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( startParkingIndex != -2 ||  ( endParkingIndex > startParkingIndex || isLast )  )  {^145^^^^^95^165^[REPLACE] if  ( startParkingIndex != -1 &&  ( endParkingIndex > startParkingIndex || isLast )  )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^154^155^^^^148^158^[ADD] previousEndParkingIndex = endParkingIndex; skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^155^^^^^148^158^[ADD] skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^157^^^^^95^165^[ADD] skipped = true;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  (  ( parkingDuration >= minimalParkingDuration ) {^148^149^^^^95^165^[REPLACE] if  (  ( parkingDuration >= minimalParkingDuration || isLast ) && previousEndParkingIndex < startParkingIndex )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^157^^^^^148^158^[ADD] skipped = true;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^previousEndParkingIndex =  null;^154^^^^^148^158^[REPLACE] previousEndParkingIndex = endParkingIndex;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^if  ( tripFiltered )  {^150^^^^^95^165^[REPLACE] if  ( !tripFiltered )  {^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, skipped )  ) ;^151^152^^^^95^165^[REPLACE] result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, tripFiltered )  ) ;^151^152^^^^95^165^[REPLACE] result.add ( calculateTrip ( positions, previousEndParkingIndex, startParkingIndex, ignoreOdometer )  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^isMoving = positions.get ( i ) .getSpeed (  )   ==  tripDistance;^112^^^^^95^165^[REPLACE] isMoving = positions.get ( i ) .getSpeed (  )  > speedThreshold;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^isLast = i == positions.size (  )  - 1 - 1;^113^^^^^95^165^[REPLACE] isLast = i == positions.size (  )  - 1;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^119^^^^^95^165^[ADD] endParkingIndex = i;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^tripFiltered = tripDuration < minimalTripDuration  ||  tripDistance < minimalTripDistance;^141^^^^^95^165^[REPLACE] tripFiltered = tripDuration < minimalTripDuration && tripDistance < minimalTripDistance;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^skipped = true  ;^155^^^^^95^165^[REPLACE] skipped = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^101^^^^^95^165^[ADD] int previousStartParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int startParkingIndex = -1L;^102^^^^^95^165^[REPLACE] int startParkingIndex = -1;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int previousEndParkingIndex = 0 * 1;^103^^^^^95^165^[REPLACE] int previousEndParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^int endParkingIndex = 3;^104^^^^^95^165^[REPLACE] int endParkingIndex = 0;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[ADD]^^106^^^^^95^165^[ADD] boolean isMoving = false;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( startParkingIndex ) , true ) ;^139^140^^^^95^165^[REPLACE] double tripDistance = ReportUtils.calculateDistance ( positions.get ( previousEndParkingIndex ) , positions.get ( i ) , false ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^long parkingDuration = positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  )  positions.get ( startParkingIndex ) .getFixTime (  ) .getTime (  ) ;^146^147^^^^95^165^[REPLACE] long parkingDuration = positions.get ( endParkingIndex ) .getFixTime (  ) .getTime (  ) - positions.get ( startParkingIndex ) .getFixTime (  ) .getTime (  ) ;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^return false;^164^^^^^95^165^[REPLACE] return result;^[METHOD] detectTrips [TYPE] Collection [PARAMETER] double speedThreshold double minimalTripDistance long minimalTripDuration long minimalParkingDuration boolean greedyParking boolean ignoreOdometer Position> positionCollection [CLASS] Trips   [TYPE]  boolean false  greedyParking  ignoreOdometer  isLast  isMoving  skipped  tripFiltered  true  [TYPE]  double minimalTripDistance  speedThreshold  tripDistance  [TYPE]  ArrayList positions  [TYPE]  Collection positionCollection  result  [TYPE]  long minimalParkingDuration  minimalTripDuration  parkingDuration  tripDuration  [TYPE]  int endParkingIndex  i  previousEndParkingIndex  previousStartParkingIndex  startParkingIndex 
[REPLACE]^TripReport> result = new ArrayList<> (  )  ;^196^^^^^195^235^[REPLACE] ArrayList<DeviceReport> devicesTrips = new ArrayList<> (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^TripReport> result = new ArrayList<> (  )  ;^197^^^^^195^235^[REPLACE] ArrayList<String> sheetNames = new ArrayList<> (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^if  ( device.getGroupId (  )   ==  0 )  {^205^^^^^195^235^[REPLACE] if  ( device.getGroupId (  )  != 0 )  {^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^205^206^207^208^209^195^235^[ADD] if  ( device.getGroupId (  )  != 0 )  { Group group = Context.getDeviceManager (  ) .getGroupById ( device.getGroupId (  )  ) ; if  ( group != null )  { deviceTrips.setGroupName ( group.getName (  )  ) ; }^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^if  ( group == true )  {^207^^^^^195^235^[REPLACE] if  ( group != null )  {^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^207^208^209^^^195^235^[ADD] if  ( group != null )  { deviceTrips.setGroupName ( group.getName (  )  ) ; }^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^deviceTrips.setDeviceName ( device.getName (  )  )  ;^208^^^^^195^235^[REPLACE] deviceTrips.setGroupName ( group.getName (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^device.getName (  )  ;^208^^^^^195^235^[REPLACE] deviceTrips.setGroupName ( group.getName (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^208^^^^^195^235^[ADD] deviceTrips.setGroupName ( group.getName (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^Group group = Context .getIdentityManager (  )  .getGroupById ( device.getGroupId (  )  ) ;^206^^^^^195^235^[REPLACE] Group group = Context.getDeviceManager (  ) .getGroupById ( device.getGroupId (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^deviceTrips.setGroupName ( group .getTime (  )   ) ;^208^^^^^195^235^[REPLACE] deviceTrips.setGroupName ( group.getName (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^if  ( group == null )  {^207^^^^^195^235^[REPLACE] if  ( group != null )  {^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^deviceTrips .setDeviceName (  )  ;^208^^^^^195^235^[REPLACE] deviceTrips.setGroupName ( group.getName (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^206^^^^^195^235^[ADD] Group group = Context.getDeviceManager (  ) .getGroupById ( device.getGroupId (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^if  ( group == null  &&  ( device.getGroupId (  )  )  != 0  )  {^207^^^^^195^235^[REPLACE] if  ( group != null )  {^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^Collection<TripReport> trips = detectTrips ( userId, from.toDate (  ) , to.toDate (  )  ) ;^200^^^^^195^235^[REPLACE] Collection<TripReport> trips = detectTrips ( deviceId, from.toDate (  ) , to.toDate (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^TripReport trip = new TripReport (  )  ;^201^^^^^195^235^[REPLACE] DeviceReport deviceTrips = new DeviceReport (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^Device device = Context.getIdentityManager (  ) .getDeviceById ( userId ) ;^202^^^^^195^235^[REPLACE] Device device = Context.getIdentityManager (  ) .getDeviceById ( deviceId ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^Collection<TripReport> trips = detectTrips ( deviceId, from.getZone (  ) , to.toDate (  )  ) ;^200^^^^^195^235^[REPLACE] Collection<TripReport> trips = detectTrips ( deviceId, from.toDate (  ) , to.toDate (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^201^^^^^195^235^[ADD] DeviceReport deviceTrips = new DeviceReport (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^Device device = getIdentityManager (  ) .getDeviceById ( deviceId )  ;^206^^^^^195^235^[REPLACE] Group group = Context.getDeviceManager (  ) .getGroupById ( device.getGroupId (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^String templatePath = Context.getDataManager (  ) .getString ( "report.templatesPath", "templates/export/" ) ;^214^215^^^^195^235^[REPLACE] String templatePath = Context.getConfig (  ) .getString ( "report.templatesPath", "templates/export/" ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^227^228^229^230^231^216^234^[ADD] for  ( Area xlsArea : xlsAreas )  { xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ; xlsArea.setFormulaProcessor ( new StandardFormulaProcessor (  )  ) ; xlsArea.processFormulas (  ) ; }^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea.applyAt ( new CellRef ( xlsArea .setFormulaProcessor ( null )  .getCellName (  )  ) , jxlsContext ) ;^228^^^^^216^234^[REPLACE] xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea.applyAt ( new CellRef ( xlsArea.processFormulas (  ) .getCellName (  )  ) , jxlsContext ) ;^228^^^^^216^234^[REPLACE] xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^228^^^^^216^234^[ADD] xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea .getStartCellRef (  )  ;^229^^^^^216^234^[REPLACE] xlsArea.setFormulaProcessor ( new StandardFormulaProcessor (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea .setFormulaProcessor ( true )  ;^230^^^^^216^234^[REPLACE] xlsArea.processFormulas (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^org.jxls.common.Context jxlsContext = PoiTransformer.createInitialContext (  ) ;jxlsContext.putVar ( "devices", devicesTrips ) ;jxlsContext.putVar ( "sheetNames", sheetNames ) ;jxlsContext.putVar ( "from", from ) ;^216^217^218^219^220^216^234^[ADD] try  ( InputStream inputStream = new FileInputStream ( templatePath + "/trips.xlsx" )  )  { org.jxls.common.Context jxlsContext = PoiTransformer.createInitialContext (  ) ; jxlsContext.putVar ( "devices", devicesTrips ) ; jxlsContext.putVar ( "sheetNames", sheetNames ) ; jxlsContext.putVar ( "from", from ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getDeviceById (  )  ) , jxlsContext ) ;^228^^^^^216^234^[REPLACE] xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea.applyAt ( new CellRef ( xlsArea .setFormulaProcessor ( this )  .getCellName (  )  ) , jxlsContext ) ;^228^^^^^216^234^[REPLACE] xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^xlsArea.getStartCellRef (  ) ;^230^^^^^216^234^[REPLACE] xlsArea.processFormulas (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REMOVE]^xlsArea.getStartCellRef (  )  ;^230^^^^^216^234^[REMOVE] ^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[ADD]^^225^226^227^228^229^216^234^[ADD] Transformer transformer = TransformerFactory.createTransformer ( inputStream, outputStream ) ; List<Area> xlsAreas = new XlsCommentAreaBuilder ( transformer ) .build (  ) ; for  ( Area xlsArea : xlsAreas )  { xlsArea.applyAt ( new CellRef ( xlsArea.getStartCellRef (  ) .getCellName (  )  ) , jxlsContext ) ; xlsArea.setFormulaProcessor ( new StandardFormulaProcessor (  )  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^List<Area> xlsAreas = new XlsCommentAreaBuilder ( transformer ) .getDeviceById (  ) ;^226^^^^^216^234^[REPLACE] List<Area> xlsAreas = new XlsCommentAreaBuilder ( transformer ) .build (  ) ;^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
[REPLACE]^try  ( InputStream inputStream = new FileInputStream ( templatePath  "/trips.xlsx" )  )  {^216^^^^^216^234^[REPLACE] try  ( InputStream inputStream = new FileInputStream ( templatePath + "/trips.xlsx" )  )  {^[METHOD] getExcel [TYPE] void [PARAMETER] OutputStream outputStream long userId Long> deviceIds Long> groupIds DateTime from DateTime to [CLASS] Trips   [TYPE]  Context jxlsContext  [TYPE]  Group group  [TYPE]  Transformer transformer  [TYPE]  Device device  [TYPE]  InputStream inputStream  [TYPE]  OutputStream outputStream  [TYPE]  ArrayList devicesTrips  sheetNames  [TYPE]  String templatePath  [TYPE]  long deviceId  userId  [TYPE]  DateTime from  to  [TYPE]  Area xlsArea  [TYPE]  boolean false  true  [TYPE]  Collection deviceIds  groupIds  trips  [TYPE]  List xlsAreas  [TYPE]  DeviceReport deviceTrips 
