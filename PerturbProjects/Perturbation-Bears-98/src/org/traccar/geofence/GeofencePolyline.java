[REPLACE]^private ArrayList<Object coordinates;^26^^^^^^^[REPLACE] private ArrayList<Coordinate> coordinates;^ [CLASS] GeofencePolyline  
[REPLACE]^if  ( coordinates != null )  {^64^^^^^63^101^[REPLACE] if  ( coordinates == null )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinates .get ( false )  ;^67^^^^^64^68^[REPLACE] coordinates.clear (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinates ;^65^^^^^63^101^[REPLACE] coordinates = new ArrayList<> (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( !wkt.split ( "LINESTRING" )  )  {^70^^^^^63^101^[REPLACE] if  ( !wkt.startsWith ( "LINESTRING" )  )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException ( "No content", 0 )  ;^71^^^^^63^101^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^71^^^^^63^101^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^String content = wkt.trim ( wkt.indexOf ( " ( " )   1, wkt.indexOf ( " ) " )  ) ;^73^^^^^63^101^[REPLACE] String content = wkt.substring ( wkt.indexOf ( " ( " )  + 1, wkt.indexOf ( " ) " )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( wkt.isEmpty (  )  )  {^74^^^^^63^101^[REPLACE] if  ( content.isEmpty (  )  )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^74^75^76^^^63^101^[ADD] if  ( content.isEmpty (  )  )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^75^^^^^63^101^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^String[] commaTokens = wkt.substring ( "," ) ;^77^^^^^63^101^[REPLACE] String[] commaTokens = content.split ( "," ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( commaTokens.length + 0  < 0  )  {^78^^^^^63^101^[REPLACE] if  ( commaTokens.length < 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^78^79^80^^^63^101^[ADD] if  ( commaTokens.length < 2 )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^return ;^79^^^^^63^101^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( tokens.length *  0.5  != 2 )  {^84^^^^^63^101^[REPLACE] if  ( tokens.length != 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^84^85^86^^^63^101^[ADD] if  ( tokens.length != 2 )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException (  (  ( tokens[0] )  + " is not a double" ) , 0 )  ;^85^^^^^63^101^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^82^83^84^85^86^63^101^[ADD] for  ( String commaToken : commaTokens )  { String[] tokens = commaToken.trim (  ) .split ( "\\s" ) ; if  ( tokens.length != 2 )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( tokens.length (   )  &&  ( commaTokens.length )  < 2  )  != 2 )  {^84^^^^^63^101^[REPLACE] if  ( tokens.length != 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^88^89^90^91^92^63^101^[ADD] try { coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( Double.parseDouble ( tokens[0 / 4] )  ) ;^89^^^^^63^101^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^parseDouble ( tokens[1] )  ;^89^^^^^63^101^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^93^94^95^96^97^63^101^[ADD] try { coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( parseDouble ( tokens[0] )  )  ;^94^^^^^63^101^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REMOVE]^coordinate.setLat ( parseDouble ( tokens[0] )  )  ;^94^^^^^63^101^[REMOVE] ^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^parseDouble ( tokens[0] )  ;^94^^^^^63^101^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^83^^^^^63^101^[ADD] String[] tokens = commaToken.trim (  ) .split ( "\\s" ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^return ;^91^^^^^63^101^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException (  (  ( tokens[0] )  + " is not a double" ) , 0 )  ;^96^^^^^63^101^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( Double.parseDouble ( tokens[4] )  ) ;^89^^^^^63^101^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( Double.parseDouble ( tokens[0 * 2] )  ) ;^89^^^^^63^101^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLon ( Double.parseDouble ( tokens[1 << 1] )  ) ;^94^^^^^63^101^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLon ( Double.parseDouble ( tokens[0] )  ) ;^94^^^^^63^101^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^String[] tokens = wkt.trim (  ) .split ( "\\s" ) ;^83^^^^^63^101^[REPLACE] String[] tokens = commaToken.trim (  ) .split ( "\\s" ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^87^^^^^63^101^[ADD] Coordinate coordinate = new Coordinate (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^91^^^^^63^101^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolyline   [TYPE]  boolean false  true  [TYPE]  Coordinate coordinate  [TYPE]  double distance  latitude  longitude  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
