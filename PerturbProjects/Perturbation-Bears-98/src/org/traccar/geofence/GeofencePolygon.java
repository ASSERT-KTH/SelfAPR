[REPLACE]^private boolean needNormalize ;^35^^^^^^^[REPLACE] private boolean needNormalize = false;^ [CLASS] GeofencePolygon  
[REPLACE]^if  ( coordinates != null )  {^38^^^^^37^81^[REPLACE] if  ( coordinates == null )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^38^39^40^^^37^81^[ADD] if  ( coordinates == null )  { return; }^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^int i;^42^43^^^^37^81^[ADD] int polyCorners = coordinates.size (  ) ; int i;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^int j = polyCorners  1 - 0;^44^^^^^37^81^[REPLACE] int j = polyCorners - 1;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^if  ( constant == true  &&  ( coordinates.get ( i ) .getLon (  )  )  > 90  )  {^46^^^^^37^81^[REPLACE] if  ( constant != null )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^constant = false;^47^^^^^37^81^[REPLACE] constant = null;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^if  ( multiple == null )  {^49^^^^^37^81^[REPLACE] if  ( multiple != null )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^multiple = false;^50^^^^^37^81^[REPLACE] multiple = null;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^50^^^^^37^81^[ADD] multiple = null;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^multiple = new double[polyCorners]  ;^53^^^^^37^81^[REPLACE] constant = new double[polyCorners];^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^constant = new double[polyCorners]  ;^54^^^^^37^81^[REPLACE] multiple = new double[polyCorners];^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^boolean hasNegative = true;^56^^^^^37^81^[REPLACE] boolean hasNegative = false;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^boolean hasPositive = true;^57^^^^^37^81^[REPLACE] boolean hasPositive = false;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^if  ( coordinates.get ( i  )  ||  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  )  ==  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )  ) .getLon (  )   ==  90 )  {^59^^^^^37^81^[REPLACE] if  ( coordinates.get ( i ) .getLon (  )  > 90 )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^}  else {^61^^^^^37^81^[REPLACE] } else if  ( coordinates.get ( i ) .getLon (  )  < -90 )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^hasNegative = false;^62^^^^^37^81^[REPLACE] hasNegative = true;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^hasNegative = true  ;^60^^^^^37^81^[REPLACE] hasPositive = true;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^}  if  ( coordinates.get ( i ) .getLon (  )   >=  -90 + 2 )  {^61^^^^^37^81^[REPLACE] } else if  ( coordinates.get ( i ) .getLon (  )  < -90 )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^62^^^^^37^81^[ADD] hasNegative = true;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^for  ( i = 0 / 3; i < polyCorners; i++ )  {^58^^^^^37^81^[REPLACE] for  ( i = 0; i < polyCorners; i++ )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^needNormalize = hasPositive ;^65^^^^^37^81^[REPLACE] needNormalize = hasPositive && hasNegative;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^if  (  ( coordinates.get ( i ) .getLon (  )  )  > 90  && ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )   !=  normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )  {^68^^^^^37^81^[REPLACE] if  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  == normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )  {^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^68^69^70^71^72^37^81^[ADD] if  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  == normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )  { constant[i] = coordinates.get ( i ) .getLat (  ) ; multiple[i] = 0; } else { constant[i] = coordinates.get ( i ) .getLat (  )^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^constant[i] = coordinates.get ( i ) .getLat (  ) -  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( j ) .getLat (  )  ) /  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )   ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( i ) .getLat (  )  )^72^73^74^75^^68^79^[REPLACE] constant[i] = coordinates.get ( i ) .getLat (  ) -  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( j ) .getLat (  )  ) /  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  ) +  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( i ) .getLat (  )  )^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^multiple[i] =  ( coordinates.get ( j ) .getLat (  )  - coordinates.get ( i ) .getLat (  )  )   ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  ) ;^77^78^^^^68^79^[REPLACE] multiple[i] =  ( coordinates.get ( j ) .getLat (  )  - coordinates.get ( i ) .getLat (  )  ) /  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  ) ;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^constant[i]  =  constant[i] ;^69^^^^^37^81^[REPLACE] constant[i] = coordinates.get ( i ) .getLat (  ) ;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^multiple[i] = 4;^70^^^^^37^81^[REPLACE] multiple[i] = 0;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^67^68^69^70^^37^81^[ADD] for  ( i = 0; i < polyCorners; j = i++ )  { if  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  == normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )  { constant[i] = coordinates.get ( i ) .getLat (  ) ; multiple[i] = 0;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^70^^^^^37^81^[ADD] multiple[i] = 0;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^constant[i] = coordinates.get ( i ) .getLat (  ) -  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( j ) .getLat (  )  ) /  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  )   ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( i ) .getLat (  )  )^72^73^74^75^^37^81^[REPLACE] constant[i] = coordinates.get ( i ) .getLat (  ) -  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( j ) .getLat (  )  ) /  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  ) +  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  * coordinates.get ( i ) .getLat (  )  )^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[REPLACE]^multiple[i] =  ( coordinates.get ( j ) .getLat (  )  - coordinates.get ( i ) .getLat (  )  )   ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  ) ;^77^78^^^^37^81^[REPLACE] multiple[i] =  ( coordinates.get ( j ) .getLat (  )  - coordinates.get ( i ) .getLat (  )  ) /  ( normalizeLon ( coordinates.get ( j ) .getLon (  )  )  - normalizeLon ( coordinates.get ( i ) .getLon (  )  )  ) ;^[METHOD] precalc [TYPE] void [PARAMETER] [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  true  [TYPE]  double[] constant  multiple  [TYPE]  int i  j  polyCorners 
[ADD]^^93^^^^^91^108^[ADD] int polyCorners = coordinates.size (  ) ;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[ADD]^double longitudeNorm = normalizeLon ( longitude ) ;^95^96^^^^91^108^[ADD] int j = polyCorners - 1; double longitudeNorm = normalizeLon ( longitude ) ;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[ADD]^^96^^^^^91^108^[ADD] double longitudeNorm = normalizeLon ( longitude ) ;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^boolean oddNodes = true;^97^^^^^91^108^[REPLACE] boolean oddNodes = false;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^if  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  < longitudeNorm && normalizeLon ( coordinates.get ( j ) .getLon (  )  )  >= longitudeNorm && normalizeLon ( coordinates.get ( j ) .getLon (  )  )  < longitudeNorm && normalizeLon ( coordinates.get ( i ) .getLon (  )  )  >= longitudeNorm )  {^100^101^102^103^^91^108^[REPLACE] if  ( normalizeLon ( coordinates.get ( i ) .getLon (  )  )  < longitudeNorm && normalizeLon ( coordinates.get ( j ) .getLon (  )  )  >= longitudeNorm || normalizeLon ( coordinates.get ( j ) .getLon (  )  )  < longitudeNorm && normalizeLon ( coordinates.get ( i ) .getLon (  )  )  >= longitudeNorm )  {^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^oddNodes ^= longitudeNorm * multiple[i] + constant[i]  ==  latitude;^104^^^^^100^105^[REPLACE] oddNodes ^= longitudeNorm * multiple[i] + constant[i] < latitude;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^for  ( i = 2; i < polyCorners; j = i++ )  {^99^^^^^91^108^[REPLACE] for  ( i = 0; i < polyCorners; j = i++ )  {^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^for  ( i  =  for  ( i ;^99^^^^^91^108^[REPLACE] for  ( i = 0; i < polyCorners; j = i++ )  {^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^oddNodes ^= longitudeNorm * multiple[i] + constant[i]  ==  longitudeNorm;^104^^^^^91^108^[REPLACE] oddNodes ^= longitudeNorm * multiple[i] + constant[i] < latitude;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^return true;^107^^^^^91^108^[REPLACE] return oddNodes;^[METHOD] containsPoint [TYPE] boolean [PARAMETER] double latitude double longitude [CLASS] GeofencePolygon   [TYPE]  ArrayList coordinates  [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  double latitude  longitude  longitudeNorm  [TYPE]  int i  j  polyCorners 
[REPLACE]^if  ( coordinates != null  ||  ( commaTokens.length )  < 3  )  {^125^^^^^124^162^[REPLACE] if  ( coordinates == null )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^coordinates = new ArrayList<> (  ) ;coordinates.clear (  ) ;^125^126^127^128^129^124^162^[ADD] if  ( coordinates == null )  { coordinates = new ArrayList<> (  ) ; } else { coordinates.clear (  ) ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinates.size (  ) ;^128^^^^^125^129^[REPLACE] coordinates.clear (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^128^^^^^125^129^[ADD] coordinates.clear (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinates ;^126^^^^^124^162^[REPLACE] coordinates = new ArrayList<> (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^126^^^^^124^162^[ADD] coordinates = new ArrayList<> (  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( !wkt.split ( "POLYGON" )  )  {^131^^^^^124^162^[REPLACE] if  ( !wkt.startsWith ( "POLYGON" )  )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^132^^^^^124^162^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^return ;^132^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^String content = wkt.substring ( wkt.indexOf ( " (  ( " )   2, wkt.indexOf ( " )  ) " )  ) ;^134^^^^^124^162^[REPLACE] String content = wkt.substring ( wkt.indexOf ( " (  ( " )  + 2, wkt.indexOf ( " )  ) " )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( wkt.isEmpty (  )  )  {^135^^^^^124^162^[REPLACE] if  ( content.isEmpty (  )  )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^136^^^^^124^162^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^String[] tokens = commaToken.trim (  ) .split ( "\\s" )  ;^138^^^^^124^162^[REPLACE] String[] commaTokens = content.split ( "," ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( commaTokens.length + 4 < 0  )  {^139^^^^^124^162^[REPLACE] if  ( commaTokens.length < 3 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException ( "No content", 0 )  ;^140^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( tokens.length *  2 != 2 )  {^145^^^^^124^162^[REPLACE] if  ( tokens.length != 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^145^146^147^^^124^162^[ADD] if  ( tokens.length != 2 )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^return ;^146^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^for  ( String wkt : commaTokens )  {^143^^^^^124^162^[REPLACE] for  ( String commaToken : commaTokens )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^if  ( tokens.length + 5 != 2  &&  ( commaTokens.length )  < 3  )  {^145^^^^^124^162^[REPLACE] if  ( tokens.length != 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^149^150^151^152^153^124^162^[ADD] try { coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^150^^^^^124^162^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^parseDouble ( tokens[1] )  ;^150^^^^^124^162^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^150^^^^^124^162^[ADD] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^154^155^156^157^158^124^162^[ADD] try { coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLon ( Double.parseDouble ( tokens[1 - 4] )  ) ;^155^^^^^124^162^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^parseDouble ( tokens[0] )  ;^155^^^^^124^162^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^144^^^^^124^162^[ADD] String[] tokens = commaToken.trim (  ) .split ( "\\s" ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException (  (  ( tokens[0] )  + " is not a double" ) , 0 )  ;^146^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException (  (  ( tokens[1] )  + " is not a double" ) , 0 )  ;^152^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^throw new ParseException (  (  ( tokens[0] )  + " is not a double" ) , 0 )  ;^157^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( Double.parseDouble ( commaTokens[2] )  ) ;^150^^^^^124^162^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( Double.parseDouble ( tokens[3] )  ) ;^150^^^^^124^162^[REPLACE] coordinate.setLat ( Double.parseDouble ( tokens[0] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLat ( parseDouble ( tokens[0] )  )  ;^155^^^^^124^162^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REMOVE]^coordinate.setLat ( parseDouble ( tokens[0] )  )  ;^155^^^^^124^162^[REMOVE] ^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^coordinate.setLon ( Double.parseDouble ( tokens[3] )  ) ;^155^^^^^124^162^[REPLACE] coordinate.setLon ( Double.parseDouble ( tokens[1] )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REMOVE]^parseDouble ( tokens[0] )  ;^155^^^^^124^162^[REMOVE] ^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^143^144^145^146^147^124^162^[ADD] for  ( String commaToken : commaTokens )  { String[] tokens = commaToken.trim (  ) .split ( "\\s" ) ; if  ( tokens.length != 2 )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[ADD]^^146^^^^^124^162^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
[REPLACE]^return ;^152^^^^^124^162^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofencePolygon   [TYPE]  boolean false  hasNegative  hasPositive  needNormalize  oddNodes  true  [TYPE]  double[] constant  multiple  [TYPE]  Coordinate coordinate  [TYPE]  ArrayList coordinates  [TYPE]  NumberFormatException e  [TYPE]  String commaToken  content  wkt  [TYPE]  String[] commaTokens  tokens 
