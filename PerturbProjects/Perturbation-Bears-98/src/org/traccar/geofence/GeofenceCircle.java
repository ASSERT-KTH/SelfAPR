[REPLACE]^private float centerLatitude;^25^^^^^^^[REPLACE] private double centerLatitude;^ [CLASS] GeofenceCircle  
[REPLACE]^if  ( !wkt .substring ( null , null )   )  {^63^^^^^62^93^[REPLACE] if  ( !wkt.startsWith ( "CIRCLE" )  )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^return ;^64^^^^^62^93^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^String content = content.substring ( wkt.indexOf ( " ( " )   1, wkt.indexOf ( " ) " )  ) ;^66^^^^^62^93^[REPLACE] String content = wkt.substring ( wkt.indexOf ( " ( " )  + 1, wkt.indexOf ( " ) " )  ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^if  ( wkt != null || content.equals ( "" )  )  {^67^^^^^62^93^[REPLACE] if  ( content == null || content.equals ( "" )  )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^return ;^68^^^^^62^93^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^^68^^^^^62^93^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^String[] tokens = commaTokens[0].split ( "\\s" )  ;^70^^^^^62^93^[REPLACE] String[] commaTokens = content.split ( "," ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^if  ( commaTokens.length - 1 != 2 )  {^71^^^^^62^93^[REPLACE] if  ( commaTokens.length != 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^^71^72^73^^^62^93^[ADD] if  ( commaTokens.length != 2 )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^return ;^72^^^^^62^93^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^^72^^^^^62^93^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^^74^^^^^62^93^[ADD] String[] tokens = commaTokens[0].split ( "\\s" ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^if  ( tokens.length *  0.5  != 0  )  {^75^^^^^62^93^[REPLACE] if  ( tokens.length != 2 )  {^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^^76^^^^^62^93^[ADD] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^centerLatitude = Double.parseDouble ( tokens[0] ) ;^78^79^80^81^82^62^93^[ADD] try { centerLatitude = Double.parseDouble ( tokens[0] ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^centerLatitude = Double.parseDouble ( tokens[1] ) ;^79^^^^^62^93^[REPLACE] centerLatitude = Double.parseDouble ( tokens[0] ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^centerLatitude = Double.parseDouble ( tokens[0 / 1] ) ;^79^^^^^62^93^[REPLACE] centerLatitude = Double.parseDouble ( tokens[0] ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^throw new ParseException (  (  ( tokens[1] )  + " is not a double" ) , 0 )  ;^81^^^^^62^93^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^centerLongitude = Double.parseDouble ( tokens[1] ) ;^83^84^85^86^87^62^93^[ADD] try { centerLongitude = Double.parseDouble ( tokens[1] ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^centerLongitude = Double.parseDouble ( tokens[1L] ) ;^84^^^^^62^93^[REPLACE] centerLongitude = Double.parseDouble ( tokens[1] ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^centerLatitude = parseDouble ( tokens[0] )  ;^84^^^^^62^93^[REPLACE] centerLongitude = Double.parseDouble ( tokens[1] ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^throw new ParseException (  (  ( tokens[0] )  + " is not a double" ) , 0 )  ;^86^^^^^62^93^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[ADD]^radius = Double.parseDouble ( commaTokens[1] ) ;^88^89^90^91^92^62^93^[ADD] try { radius = Double.parseDouble ( commaTokens[1] ) ; } catch  ( NumberFormatException e )  { throw new ParseException  (" ")  ; }^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^radius = Double.parseDouble ( commaTokens[1 + 3] ) ;^89^^^^^62^93^[REPLACE] radius = Double.parseDouble ( commaTokens[1] ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^radius = Double.parseDouble ( commaTokens[2] ) ;^89^^^^^62^93^[REPLACE] radius = Double.parseDouble ( commaTokens[1] ) ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
[REPLACE]^throw new ParseException (  (  ( tokens[1] )  + " is not a double" ) , 0 )  ;^91^^^^^62^93^[REPLACE] throw new ParseException  (" ")  ;^[METHOD] fromWkt [TYPE] void [PARAMETER] String wkt [CLASS] GeofenceCircle   [TYPE]  NumberFormatException e  [TYPE]  String content  wkt  [TYPE]  String[] commaTokens  tokens  [TYPE]  boolean false  true  [TYPE]  double centerLatitude  centerLongitude  latitude  longitude  radius 
