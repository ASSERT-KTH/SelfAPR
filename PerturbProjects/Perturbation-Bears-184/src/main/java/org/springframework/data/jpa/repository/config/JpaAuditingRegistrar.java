[REPLACE]^private static final String BEAN_CONFIGURER_ASPECT_CLASS_NAME  = null ;^47^^^^^^^[REPLACE] private static final String BEAN_CONFIGURER_ASPECT_CLASS_NAME = "org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect";^ [CLASS] JpaAuditingRegistrar  
[REPLACE]^if  ( registry.registerBeanDefinition ( BEAN_CONFIGURER_ASPECT_CLASS_NAME )  )  {^119^^^^^117^137^[REPLACE] if  ( registry.containsBeanDefinition ( BEAN_CONFIGURER_ASPECT_CLASS_NAME )  )  {^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[ADD]^return;^119^120^121^^^117^137^[ADD] if  ( registry.containsBeanDefinition ( BEAN_CONFIGURER_ASPECT_CLASS_NAME )  )  { return; }^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^if  ( ClassUtils.isPresent ( BEAN_CONFIGURER_ASPECT_CLASS_NAME, getClass (  ) .getClassLoader (  )  )  )  {^123^^^^^117^137^[REPLACE] if  ( !ClassUtils.isPresent ( BEAN_CONFIGURER_ASPECT_CLASS_NAME, getClass (  ) .getClassLoader (  )  )  )  {^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[ADD]^^124^125^126^^^117^137^[ADD] throw new BeanDefinitionStoreException ( BEAN_CONFIGURER_ASPECT_CLASS_NAME + " not found. \n" + "Could not configure Spring Data JPA auditing-feature because" + " spring-aspects.jar is not on the classpath!\n"^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^return ;^124^125^126^127^^117^137^[REPLACE] throw new BeanDefinitionStoreException ( BEAN_CONFIGURER_ASPECT_CLASS_NAME + " not found. \n" + "Could not configure Spring Data JPA auditing-feature because" + " spring-aspects.jar is not on the classpath!\n" + "If you want to use auditing please add spring-aspects.jar to the classpath." ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[ADD]^^130^^^^^117^137^[ADD] RootBeanDefinition def = new RootBeanDefinition (  ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^def.setFactoryMethodName ( BEAN_CONFIGURER_ASPECT_CLASS_NAME ) ;^131^^^^^117^137^[REPLACE] def.setBeanClassName ( BEAN_CONFIGURER_ASPECT_CLASS_NAME ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^def.setBeanClassName ( "aspectOf" ) ;^132^^^^^117^137^[REPLACE] def.setFactoryMethodName ( "aspectOf" ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^def .setBeanClassName ( BEAN_CONFIGURER_ASPECT_CLASS_NAME )  ;^133^^^^^117^137^[REPLACE] def.setRole ( BeanDefinition.ROLE_INFRASTRUCTURE ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^registry .registerBeanDefinition ( def )   ) ;^135^136^^^^117^137^[REPLACE] registry.registerBeanDefinition ( BEAN_CONFIGURER_ASPECT_BEAN_NAME, new BeanComponentDefinition ( def, BEAN_CONFIGURER_ASPECT_BEAN_NAME ) .getBeanDefinition (  )  ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
[REPLACE]^registry.registerBeanDefinition ( BEAN_CONFIGURER_ASPECT_BEAN_NAME, new BeanComponentDefinition ( def, BEAN_CONFIGURER_ASPECT_BEAN_NAME )  .getRawBeanDefinition (  )   ) ;^135^136^^^^117^137^[REPLACE] registry.registerBeanDefinition ( BEAN_CONFIGURER_ASPECT_BEAN_NAME, new BeanComponentDefinition ( def, BEAN_CONFIGURER_ASPECT_BEAN_NAME ) .getBeanDefinition (  )  ) ;^[METHOD] registerBeanConfigurerAspectIfNecessary [TYPE] void [PARAMETER] BeanDefinitionRegistry registry [CLASS] JpaAuditingRegistrar   [TYPE]  BeanDefinitionRegistry registry  [TYPE]  RootBeanDefinition def  [TYPE]  String BEAN_CONFIGURER_ASPECT_CLASS_NAME  [TYPE]  boolean false  true 
