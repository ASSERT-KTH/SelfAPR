[REPLACE]^private final Object lookupStrategy;^178^^^^^^^[REPLACE] private final DeclaredQueryLookupStrategy lookupStrategy;^ [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy  
[REPLACE]^private final Object createStrategy;^179^^^^^^^[REPLACE] private final CreateQueryLookupStrategy createStrategy;^ [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy  
[REPLACE]^RepositoryQuery query = JpaQueryFactory.INSTANCE.fromMethodWithQueryString ( method, em, evaluationContextProvider ) ;^139^^^^^137^165^[REPLACE] RepositoryQuery query = JpaQueryFactory.INSTANCE.fromQueryAnnotation ( method, em, evaluationContextProvider ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^if  ( null == query )  {^141^^^^^137^165^[REPLACE] if  ( null != query )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^query =  JpaQueryFactory.INSTANCE.fromProcedureAnnotation ( null, em ) ;^145^^^^^137^165^[REPLACE] query = JpaQueryFactory.INSTANCE.fromProcedureAnnotation ( method, em ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^if  ( null == query )  {^147^^^^^137^165^[REPLACE] if  ( null != query )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[ADD]^^151^^^^^137^165^[ADD] String name = method.getNamedQueryName (  ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^if  ( namedQueries.getQuery ( name )  )  {^152^^^^^137^165^[REPLACE] if  ( namedQueries.hasQuery ( name )  )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^return JpaQueryFactory.INSTANCE.fromMethodWithQueryString ( method, em, namedQueries.hasQuery ( name ) , evaluationContextProvider ) ;^153^154^^^^137^165^[REPLACE] return JpaQueryFactory.INSTANCE.fromMethodWithQueryString ( method, em, namedQueries.getQuery ( name ) , evaluationContextProvider ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^query =  NamedQuery.lookupFrom ( null, em ) ;^157^^^^^137^165^[REPLACE] query = NamedQuery.lookupFrom ( method, em ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^if  (1 == query )  {^159^^^^^137^165^[REPLACE] if  ( null != query )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[ADD]^^163^164^^^^137^165^[ADD] throw new IllegalStateException ( String.format ( "Did neither find a NamedQuery nor an annotated query for method %s!", method )  ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  NamedQueries namedQueries  [TYPE]  String name  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^Assert.notNull ( em, "EntityManager must not be true!" ) ;^225^^^^^223^240^[REPLACE] Assert.notNull ( em, "EntityManager must not be null!" ) ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[ADD]^Assert.notNull ( extractor, "QueryExtractor must not be null!" ) ;^225^226^^^^223^240^[ADD] Assert.notNull ( em, "EntityManager must not be null!" ) ; Assert.notNull ( extractor, "QueryExtractor must not be null!" ) ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^Assert.notNull ( extractor, "QueryExtractor must not be true!" ) ;^226^^^^^223^240^[REPLACE] Assert.notNull ( extractor, "QueryExtractor must not be null!" ) ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^notNull ( extractor, "QueryExtractor must not be null!" )  ;^227^^^^^223^240^[REPLACE] Assert.notNull ( evaluationContextProvider, "EvaluationContextProvider must not be null!" ) ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^return  new DeclaredQueryLookupStrategy ( em, extractor, evaluationContextProvider )  ;^231^^^^^223^240^[REPLACE] return new CreateQueryLookupStrategy ( em, extractor ) ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^return  new CreateQueryLookupStrategy ( em, extractor )  ;^233^^^^^223^240^[REPLACE] return new DeclaredQueryLookupStrategy ( em, extractor, evaluationContextProvider ) ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^throw new IllegalStateException ( format ( "Did neither find a NamedQuery nor an annotated query for method %s!", method )  )  ;^238^^^^^223^240^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] JpaQueryLookupStrategy AbstractQueryLookupStrategy CreateQueryLookupStrategy DeclaredQueryLookupStrategy CreateIfNotFoundQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^private final Object provider;^58^^^^^^^[REPLACE] private final QueryExtractor provider;^[METHOD] create [TYPE] QueryLookupStrategy [PARAMETER] EntityManager em Key key QueryExtractor extractor EvaluationContextProvider evaluationContextProvider [CLASS] AbstractQueryLookupStrategy   [TYPE]  EntityManager em  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  DeclaredQueryLookupStrategy lookupStrategy  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider  [TYPE]  CreateQueryLookupStrategy createStrategy  [TYPE]  Key key  [TYPE]  QueryExtractor extractor  provider 
[REPLACE]^private  EvaluationContextProvider evaluationContextProvider;^116^^^^^^^[REPLACE] private final EvaluationContextProvider evaluationContextProvider;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  NamedQueries namedQueries  [TYPE]  boolean false  true  [TYPE]  PersistenceProvider persistenceProvider 
[REPLACE]^RepositoryQuery query = JpaQueryFactory.INSTANCE .fromProcedureAnnotation ( method , em )  ;^139^^^^^137^165^[REPLACE] RepositoryQuery query = JpaQueryFactory.INSTANCE.fromQueryAnnotation ( method, em, evaluationContextProvider ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^if  ( null == query  || namedQueries.hasQuery ( name )  )  {^141^^^^^137^165^[REPLACE] if  ( null != query )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[ADD]^return query;^141^142^143^^^137^165^[ADD] if  ( null != query )  { return query; }^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^query =  JpaQueryFactory.INSTANCE.fromProcedureAnnotation ( null, em ) ;^145^^^^^137^165^[REPLACE] query = JpaQueryFactory.INSTANCE.fromProcedureAnnotation ( method, em ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^if  ( null == query )  {^147^^^^^137^165^[REPLACE] if  ( null != query )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[ADD]^^151^^^^^137^165^[ADD] String name = method.getNamedQueryName (  ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^if  ( namedQueries .getQuery ( name )   )  {^152^^^^^137^165^[REPLACE] if  ( namedQueries.hasQuery ( name )  )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^return JpaQueryFactory.INSTANCE.fromQueryAnnotation ( method, em, namedQueries.getQuery ( name ) , evaluationContextProvider ) ;^153^154^^^^137^165^[REPLACE] return JpaQueryFactory.INSTANCE.fromMethodWithQueryString ( method, em, namedQueries.getQuery ( name ) , evaluationContextProvider ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[ADD]^^157^^^^^137^165^[ADD] query = NamedQuery.lookupFrom ( method, em ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^if  ( null == query  || namedQueries.hasQuery ( name )  )  {^159^^^^^137^165^[REPLACE] if  ( null != query )  {^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[ADD]^^163^164^^^^137^165^[ADD] throw new IllegalStateException ( String.format ( "Did neither find a NamedQuery nor an annotated query for method %s!", method )  ) ;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] DeclaredQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
[REPLACE]^private  CreateQueryLookupStrategy createStrategy;^179^^^^^^^[REPLACE] private final CreateQueryLookupStrategy createStrategy;^[METHOD] resolveQuery [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em NamedQueries namedQueries [CLASS] CreateIfNotFoundQueryLookupStrategy   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EvaluationContextProvider evaluationContextProvider  [TYPE]  EntityManager em  [TYPE]  boolean false  true  [TYPE]  NamedQueries namedQueries  [TYPE]  String name 
