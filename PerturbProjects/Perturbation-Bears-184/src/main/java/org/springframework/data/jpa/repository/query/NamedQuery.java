[REPLACE]^private static final String CANNOT_EXTRACT_QUERY ;^39^40^41^42^^39^42^[REPLACE] private static final String CANNOT_EXTRACT_QUERY = "Your persistence provider does not support extracting the JPQL query from a " + "named query thus you can't use Pageable inside your query method. Make sure you " + "have a JpaDialect configured at your EntityManagerFactoryBean as this affects " + "discovering the concrete persistence provider.";^ [CLASS] NamedQuery  
[REPLACE]^private  final Logger LOG = LoggerFactory.getLogger ( NamedQuery.class ) ;^44^^^^^^^[REPLACE] private static final Logger LOG = LoggerFactory.getLogger ( NamedQuery.class ) ;^ [CLASS] NamedQuery  
[REPLACE]^private final  char  queryName;^46^^^^^^^[REPLACE] private final String queryName;^ [CLASS] NamedQuery  
[REPLACE]^private final  short  countQueryName;^47^^^^^^^[REPLACE] private final String countQueryName;^ [CLASS] NamedQuery  
[REPLACE]^private final @RepositoryQuery String countProjection;^48^^^^^^^[REPLACE] private final @Nullable String countProjection;^ [CLASS] NamedQuery  
[REPLACE]^private  QueryExtractor extractor;^49^^^^^^^[REPLACE] private final QueryExtractor extractor;^ [CLASS] NamedQuery  
[REPLACE]^private  boolean namedCountQueryIsPresent;^50^^^^^^^[REPLACE] private final boolean namedCountQueryIsPresent;^ [CLASS] NamedQuery  
[ADD]^^59^^^^^55^84^[ADD] this.queryName = method.getNamedQueryName (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^this.queryName = method.getNamedQueryName (  )  ;^60^^^^^55^84^[REPLACE] this.countQueryName = method.getNamedCountQueryName (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^this.extractor =  null.getQueryExtractor (  ) ;^61^^^^^55^84^[REPLACE] this.extractor = method.getQueryExtractor (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^this.countProjection =  null.getCountQueryProjection (  ) ;^62^^^^^55^84^[REPLACE] this.countProjection = method.getCountQueryProjection (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^Parameters<?, ?> parameters = method.getNamedQueryName (  ) ;^64^^^^^55^84^[REPLACE] Parameters<?, ?> parameters = method.getParameters (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^if  ( null.hasSortParameter (  )  )  {^66^^^^^55^84^[REPLACE] if  ( parameters.hasSortParameter (  )  )  {^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REMOVE]^if  ( parameters.hasPageableParameter (  )  )  {     warn (  ( "Finder method {} is backed by a NamedQuery" +  ( " but contains a Pageable parameter! Sorting delivered " + "via this Pageable will not be applied!" )  ) , method ) ; }^66^^^^^55^84^[REMOVE] ^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^return ;^67^68^^^^55^84^[REPLACE] throw new IllegalStateException ( String.format ( "Finder method %s is backed " + "by a NamedQuery and must " + "not contain a sort parameter as we cannot modify the query! Use @Query instead!", method )  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^throw new IllegalStateException ( String.format ( queryName + "by a NamedQuery and must " + "not contain a sort parameter as we cannot modify the query Use @Query instead!", method )  ) ;^67^68^^^^55^84^[REPLACE] throw new IllegalStateException ( String.format ( "Finder method %s is backed " + "by a NamedQuery and must " + "not contain a sort parameter as we cannot modify the query! Use @Query instead!", method )  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[ADD]^^67^68^69^^^55^84^[ADD] throw new IllegalStateException ( String.format ( "Finder method %s is backed " + "by a NamedQuery and must " + "not contain a sort parameter as we cannot modify the query! Use @Query instead!", method )  ) ; }^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^this.namedCountQueryIsPresent =  hasNamedQuery ( null, countQueryName ) ;^71^^^^^55^84^[REPLACE] this.namedCountQueryIsPresent = hasNamedQuery ( em, countQueryName ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^boolean weNeedToCreateCountQuery = namedCountQueryIsPresent ;^73^^^^^55^84^[REPLACE] boolean weNeedToCreateCountQuery = !namedCountQueryIsPresent && method.getParameters (  ) .hasPageableParameter (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[ADD]^^74^^^^^55^84^[ADD] boolean cantExtractQuery = !this.extractor.canExtractQuery (  ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^if  ( weNeedToCreateCountQuery || cantExtractQuery )  {^76^^^^^55^84^[REPLACE] if  ( weNeedToCreateCountQuery && cantExtractQuery )  {^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^return ;^77^^^^^55^84^[REPLACE] throw QueryCreationException.create ( method, CANNOT_EXTRACT_QUERY ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^if  ( null.hasPageableParameter (  )  )  {^80^^^^^55^84^[REPLACE] if  ( parameters.hasPageableParameter (  )  )  {^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^LOG.warn ( "Finder method {} is backed by a NamedQuery" + " but contains a Pageable parameter Sorting delivered " + "via this Pageable will not be applied!", method ) ;^81^82^^^^55^84^[REPLACE] LOG.warn ( "Finder method {} is backed by a NamedQuery" + " but contains a Pageable parameter! Sorting delivered " + "via this Pageable will not be applied!", method ) ;^[METHOD] <init> [TYPE] EntityManager) [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Parameters parameters  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  QueryExtractor extractor 
[REPLACE]^EntityManager lookupEm = lookupEm.getEntityManagerFactory (  ) .createEntityManager (  ) ;^98^^^^^92^109^[REPLACE] EntityManager lookupEm = em.getEntityManagerFactory (  ) .createEntityManager (  ) ;^[METHOD] hasNamedQuery [TYPE] boolean [PARAMETER] EntityManager em String queryName [CLASS] NamedQuery   [TYPE]  EntityManager em  lookupEm  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[ADD]^lookupEm.createNamedQuery ( queryName ) ;return true;LOG.debug ( "Did not find named query {}", queryName ) ;^100^101^102^103^104^92^109^[ADD] try { lookupEm.createNamedQuery ( queryName ) ; return true; } catch  ( IllegalArgumentException e )  { LOG.debug ( "Did not find named query {}", queryName ) ;^[METHOD] hasNamedQuery [TYPE] boolean [PARAMETER] EntityManager em String queryName [CLASS] NamedQuery   [TYPE]  EntityManager em  lookupEm  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^return false;^102^^^^^92^109^[REPLACE] return true;^[METHOD] hasNamedQuery [TYPE] boolean [PARAMETER] EntityManager em String queryName [CLASS] NamedQuery   [TYPE]  EntityManager em  lookupEm  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^return true;^105^^^^^92^109^[REPLACE] return false;^[METHOD] hasNamedQuery [TYPE] boolean [PARAMETER] EntityManager em String queryName [CLASS] NamedQuery   [TYPE]  EntityManager em  lookupEm  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[ADD]^^103^104^^^^92^109^[ADD] catch  ( IllegalArgumentException e )  { LOG.debug ( "Did not find named query {}", queryName ) ;^[METHOD] hasNamedQuery [TYPE] boolean [PARAMETER] EntityManager em String queryName [CLASS] NamedQuery   [TYPE]  EntityManager em  lookupEm  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[ADD]^^120^^^^^118^135^[ADD] final String queryName = method.getNamedQueryName (  ) ;^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^debug ( "Found named query {}!", queryName )  ;^122^^^^^118^135^[REPLACE] LOG.debug ( "Looking up named query {}", queryName ) ;^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REMOVE]^debug ( "Found named query {}!", queryName )  ;^122^^^^^118^135^[REMOVE] ^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^if  ( !hasNamedQuery ( em, countQueryName )  )  {^124^^^^^118^135^[REPLACE] if  ( !hasNamedQuery ( em, queryName )  )  {^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[ADD]^return null;^124^125^126^^^118^135^[ADD] if  ( !hasNamedQuery ( em, queryName )  )  { return null; }^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^return false;^125^^^^^118^135^[REPLACE] return null;^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^return this;^125^^^^^118^135^[REPLACE] return null;^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[ADD]^RepositoryQuery query = new NamedQuery ( method, em ) ;LOG.debug ( "Found named query {}!", queryName ) ;return query;^128^129^130^131^132^118^135^[ADD] try { RepositoryQuery query = new NamedQuery ( method, em ) ; LOG.debug ( "Found named query {}!", queryName ) ; return query; } catch  ( IllegalArgumentException e )  {^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^return this;^133^^^^^118^135^[REPLACE] return null;^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[ADD]^^132^133^^^^118^135^[ADD] catch  ( IllegalArgumentException e )  { return null;^[METHOD] lookupFrom [TYPE] RepositoryQuery [PARAMETER] JpaQueryMethod method EntityManager em [CLASS] NamedQuery   [TYPE]  JpaQueryMethod method  [TYPE]  RepositoryQuery query  [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  [TYPE]  Logger LOG  [TYPE]  IllegalArgumentException e  [TYPE]  QueryExtractor extractor 
[REPLACE]^TypedQuery<Long> countQuery = this;^156^^^^^153^172^[REPLACE] TypedQuery<Long> countQuery = null;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^if  (queryName != false )  {^164^^^^^158^169^[REPLACE] if  ( queryString == null )  {^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[ADD]^^164^165^166^^^158^169^[ADD] if  ( queryString == null )  { throw new IllegalStateException  (" ")  ; }^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^countQuery =  null.createQuery ( QueryUtils.createCountQueryFor ( queryString, countProjection ) , Long.class ) ;^168^^^^^158^169^[REPLACE] countQuery = em.createQuery ( QueryUtils.createCountQueryFor ( queryString, countProjection ) , Long.class ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[ADD]^^161^162^^^^158^169^[ADD] Query query = createQuery ( values ) ; String queryString = extractor.extractQueryString ( query ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^String queryString = extractor .canExtractQuery (  )  ;^162^^^^^158^169^[REPLACE] String queryString = extractor.extractQueryString ( query ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^return ;^165^^^^^158^169^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^countQuery =  null.createNamedQuery ( countQueryName, Long.class ) ;^159^^^^^153^172^[REPLACE] countQuery = em.createNamedQuery ( countQueryName, Long.class ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^if  ( queryName != null )  {^164^^^^^153^172^[REPLACE] if  ( queryString == null )  {^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[ADD]^^164^165^166^^^153^172^[ADD] if  ( queryString == null )  { throw new IllegalStateException  (" ")  ; }^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^return ;^165^^^^^153^172^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[ADD]^^168^^^^^153^172^[ADD] countQuery = em.createQuery ( QueryUtils.createCountQueryFor ( queryString, countProjection ) , Long.class ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[ADD]^^161^^^^^153^172^[ADD] Query query = createQuery ( values ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^String queryString = extractor .canExtractQuery (  )  ;^162^^^^^153^172^[REPLACE] String queryString = extractor.extractQueryString ( query ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
[REPLACE]^return parameterBinder.get (  ) .bind ( this, values ) ;^171^^^^^153^172^[REPLACE] return parameterBinder.get (  ) .bind ( countQuery, values ) ;^[METHOD] doCreateCountQuery [TYPE] TypedQuery [PARAMETER] Object[] values [CLASS] NamedQuery   [TYPE]  EntityManager em  [TYPE]  boolean cantExtractQuery  false  namedCountQueryIsPresent  true  weNeedToCreateCountQuery  [TYPE]  Query query  [TYPE]  TypedQuery countQuery  [TYPE]  String CANNOT_EXTRACT_QUERY  countProjection  countQueryName  queryName  queryString  [TYPE]  Logger LOG  [TYPE]  Object[] values  [TYPE]  QueryExtractor extractor 
