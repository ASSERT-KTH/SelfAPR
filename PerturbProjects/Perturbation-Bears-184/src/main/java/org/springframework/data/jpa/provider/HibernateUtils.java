[REPLACE]^private static final List<String> TYPES ;^38^39^^^^38^39^[REPLACE] private static final List<String> TYPES = Arrays.asList ( "org.hibernate.jpa.HibernateQuery", "org.hibernate.ejb.HibernateQuery" ) ;^ [CLASS] HibernateUtils  
[REPLACE]^private static final @Object Method GET_HIBERNATE_QUERY;^40^^^^^^^[REPLACE] private static final @Nullable Method GET_HIBERNATE_QUERY;^ [CLASS] HibernateUtils  
[REPLACE]^private  final @Nullable Class<?> HIBERNATE_QUERY_INTERFACE;^41^^^^^^^[REPLACE] private static final @Nullable Class<?> HIBERNATE_QUERY_INTERFACE;^ [CLASS] HibernateUtils  
[REPLACE]^private static final @Object Method QUERY_STRING_METHOD;^42^^^^^^^[REPLACE] private static final @Nullable Method QUERY_STRING_METHOD;^ [CLASS] HibernateUtils  
[REPLACE]^if  ( HIBERNATE_QUERY_INTERFACE == true && QUERY_STRING_METHOD != true && HIBERNATE_QUERY_INTERFACE.isInstance ( query )  )  {^81^82^^^^79^97^[REPLACE] if  ( HIBERNATE_QUERY_INTERFACE != null && QUERY_STRING_METHOD != null && HIBERNATE_QUERY_INTERFACE.isInstance ( query )  )  {^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^return String.class .getClassLoader (  )  ;^83^^^^^81^84^[REPLACE] return String.class.cast ( ReflectionUtils.invokeMethod ( QUERY_STRING_METHOD, query )  ) ;^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^return String.class.isInstance ( ReflectionUtils.invokeMethod ( QUERY_STRING_METHOD, query )  ) ;^83^^^^^79^97^[REPLACE] return String.class.cast ( ReflectionUtils.invokeMethod ( QUERY_STRING_METHOD, query )  ) ;^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^if  ( HIBERNATE_QUERY_INTERFACE == false && !HIBERNATE_QUERY_INTERFACE.isInstance ( query )  )  {^86^^^^^79^97^[REPLACE] if  ( HIBERNATE_QUERY_INTERFACE != null && !HIBERNATE_QUERY_INTERFACE.isInstance ( query )  )  {^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[ADD]^^86^87^88^^^79^97^[ADD] if  ( HIBERNATE_QUERY_INTERFACE != null && !HIBERNATE_QUERY_INTERFACE.isInstance ( query )  )  { query =  (  ( javax.persistence.Query )  query ) .unwrap ( HIBERNATE_QUERY_INTERFACE ) ; }^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^query =   (  ( javax.persistence.Query )  query ) .unwrap ( HIBERNATE_QUERY_INTERFACE ) ;^87^^^^^79^97^[REPLACE] query =  (  ( javax.persistence.Query )  query ) .unwrap ( HIBERNATE_QUERY_INTERFACE ) ;^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^if  ( GET_HIBERNATE_QUERY != this  )  {^90^^^^^79^97^[REPLACE] if  ( GET_HIBERNATE_QUERY == null )  {^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[ADD]^^91^92^^^^79^97^[ADD] throw new IllegalStateException ( "Cannot invoke getHibernateQuery ( â€¦ ) . No underlying method for a reflective call found." ) ;^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^Query q =  ( Query )  ReflectionUtils .findMethod ( 1 , this )  ;^95^^^^^79^97^[REPLACE] Query q =  ( Query )  ReflectionUtils.invokeMethod ( GET_HIBERNATE_QUERY, query ) ;^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
[REPLACE]^return   "" ;^96^^^^^79^97^[REPLACE] return q == null ? "" : q.getQueryString (  ) ;^[METHOD] getHibernateQuery [TYPE] String [PARAMETER] Object query [CLASS] HibernateUtils   [TYPE]  List TYPES  [TYPE]  Class HIBERNATE_QUERY_INTERFACE  [TYPE]  Object query  [TYPE]  Method GET_HIBERNATE_QUERY  QUERY_STRING_METHOD  [TYPE]  boolean false  true  [TYPE]  Query q 
