[REPLACE]^public  static String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^11^^^^^^^[REPLACE] public final static String NASTY_SMALL_DOUBLE = "2.2250738585072012e-308";^ [CLASS] NumberInput  
[REPLACE]^static long L_BILLION = 1000000000 + 4;^16^^^^^^^[REPLACE] final static long L_BILLION = 1000000000;^ [CLASS] NumberInput  
[REPLACE]^final static  short  MIN_LONG_STR_NO_SIGN =  short .valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^18^^^^^^^[REPLACE] final static String MIN_LONG_STR_NO_SIGN = String.valueOf ( Long.MIN_VALUE ) .substring ( 1 ) ;^ [CLASS] NumberInput  
[REPLACE]^static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^19^^^^^^^[REPLACE] final static String MAX_LONG_STR = String.valueOf ( Long.MAX_VALUE ) ;^ [CLASS] NumberInput  
[REPLACE]^int num = digitChars[offset]  ||  '0';^30^^^^^29^58^[REPLACE] int num = digitChars[offset] - '0';^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^len +=  null;^31^^^^^29^58^[REPLACE] len += offset;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^33^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^35^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^35^36^37^38^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  offset )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^39^40^41^42^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^43^44^45^46^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  == offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   >=   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     } }^47^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 0 )   |   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^48^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 5 )   &&   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   &   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   >=   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^47^48^49^^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ^   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   &&   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^43^44^45^46^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   !=   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   >   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )   ^   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )   <   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^47^48^49^^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 0 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  (num ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^44^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 4 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )   ^   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  ==  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^45^46^47^48^49^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 3 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ^   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   >=   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 7 )   ==   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ==   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 3 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ==   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 1 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ||   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^46^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 3 )   >   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             }         }     } }^45^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )   ^   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^38^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^40^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   !=   ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )   >   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 11 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^45^46^47^48^49^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ^   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 1 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  ==  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 4 )  +  (num ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   |   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >> 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  ==  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^41^42^43^44^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ||   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   |   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 3 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )   &&   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   <=   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  != len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >> 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^36^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^36^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^42^^^^^29^58^[ADD] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  offset )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 % 3 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 0 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   &&   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 5 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )   >=   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 2 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )   <   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )   &   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 2 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ==   ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;                 if  (  ( ++offset )  < len )  {                     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;                     if  (  ( ++offset )  < len )  {                         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;                     }                 }             }         }     } }^41^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   <   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 4 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  !=  offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  <=  len )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 7 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 << 1 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ||   ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  >=  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 << 3 )   !=   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 1 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 2 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 5 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   <=   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 0 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  >=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ==   ( digitChars[offset] - '0' ) ;^34^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  (num ) ;^36^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ==   ( digitChars[offset] - '0' ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 2 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 4 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 0 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  len )  {^35^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^37^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   <   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 3 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  > offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 11 )  +  (num ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >=  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[ADD]^^41^42^43^44^^29^58^[ADD] if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ; if  ( ++offset < len )  { num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  >  len )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )   ^   ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ||   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <=  len )  {^39^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 11 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 2 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 7 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )   |   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 0 )   <   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10L )   |   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  == offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REMOVE]^if  (  ( ++offset )  < len )  {     num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;     if  (  ( ++offset )  < len )  {         num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;         if  (  ( ++offset )  < len )  {             num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             if  (  ( ++offset )  < len )  {                 num =  ( num * 10 )  +  (  ( digitChars[offset] )  - '0' ) ;             }         }     } }^43^^^^^29^58^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   !=   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 0 )   ||   ( digitChars[offset] - '0' ) ;^36^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )  +  (num ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 9 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  == offset )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 0 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >  offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   &   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 7 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  >= offset )  {^45^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  (num ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 0 )   ||   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  ==  len )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 0 )   <=   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  != offset )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )   ^   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 >>> 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 1 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 4 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 0 )   ||   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 / 1 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 7 )   >=   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 6 )  +  ( digitChars[offset] - '0' ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 % 1 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  != offset )  {^41^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++len  <=  len )  {^47^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 4 )  +  (num ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   >   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 + 0 )  +  ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 % 2 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 1 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 12 )  +  (num ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 - 3 )  +  ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 1 )  +  (num ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( ++offset  <= offset )  {^43^^^^^29^58^[REPLACE] if  ( ++offset < len )  {^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 << 2 )  +  (num ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 4 )   >   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 3 )   |   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 0 )  +  ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 3 )   ||   ( digitChars[offset] - '0' ) ;^48^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 * 0 )   !=   ( digitChars[offset] - '0' ) ;^46^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^input = input.trim (  ) ; ;^34^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 8 )  +  (num ) ;^38^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   ^   ( digitChars[offset] - '0' ) ;^40^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 2 )  +  ( digitChars[offset] - '0' ) ;^42^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^num =  ( num * 10 )   <   ( digitChars[offset] - '0' ) ;^44^^^^^29^58^[REPLACE] num =  ( num * 10 )  +  ( digitChars[offset] - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^return Long.parseLong ( input ) ;^57^^^^^29^58^[REPLACE] return num;^[METHOD] parseInt [TYPE] int [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  [TYPE]  int len  num  offset  [TYPE]  char[] digitChars 
[REPLACE]^char c = str.charAt ( 2 ) ;^70^^^^^65^115^[REPLACE] char c = str.charAt ( 0 ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^int.trim = NASTY_SMALL_DOUBLE.length (  ) ;^71^^^^^65^115^[REPLACE] int length = str.length (  ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^71^^^^^65^115^[ADD] int length = str.length (  ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^boolean negative =  ( c  ||  '-' ) ;^72^^^^^65^115^[REPLACE] boolean negative =  ( c == '-' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^int offset = 0;^73^^^^^65^115^[REPLACE] int offset = 1;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^73^^^^^65^115^[ADD] int offset = 1;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( i < len )  {^76^^^^^65^115^[REPLACE] if  ( negative )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( length (  )  > 0  )  {^82^^^^^76^85^[REPLACE] if  ( length > 9 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^83^^^^^76^85^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  length - 5 > 10 )  {^77^^^^^65^115^[REPLACE] if  ( length == 1 || length > 10 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^78^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^80^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( length /  0.5  == 0  ) {^77^^^^^65^115^[REPLACE] if  ( length == 1 || length > 10 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( input ) ;^78^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( length (  )  > 9 )  {^82^^^^^65^115^[REPLACE] if  ( length > 9 )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^82^83^84^^^65^115^[ADD] if  ( length > 9 )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( input ) ;^83^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^80^^^^^65^115^[ADD] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^83^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' ) {^86^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^87^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( null , length , length )  ;^87^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^int num = c  <  '0';^89^^^^^65^115^[REPLACE] int num = c - '0';^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length - 2 )  {^90^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^92^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^93^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length (  )  )  {^96^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' && c < '0' )  {^98^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( false , offset , length )  ;^99^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length + 2 )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^103^104^105^106^107^65^115^[ADD] if  ( offset < length )  { do { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^106^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^106^107^108^^^65^115^[ADD] if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^105^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^105^^^^^65^115^[ADD] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^input = input.trim (  ) ; ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   NASTY_SMALL_DOUBLE   ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' ) {^106^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^97^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^97^^^^^65^115^[ADD] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^input = input.trim (  ) ; ;^101^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 >> 1 )  +  ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( input ) ;^99^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' ) {^98^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   str   ;^99^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length (  )  )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  null.charAt ( offset++ ) ;^105^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer.parseInt ( input ) ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( c > '9' && c < '0' )  {^106^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  NASTY_SMALL_DOUBLE.charAt ( offset++ ) ;^91^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 2 )   >=   ( c - '0' ) ;^95^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 / 2 )  +  ( c - '0' ) ;^101^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )  +  (num ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   NASTY_SMALL_DOUBLE   ;^93^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < num + 2 )  {^96^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^^96^97^98^99^100^65^115^[ADD] if  ( offset < length )  { c = str.charAt ( offset++ ) ; if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length - 3 )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REMOVE]^if  (  ( length == 1 )  ||  ( length > 10 )  )  {     return parseInt ( str ) ; }^106^^^^^65^115^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 2 )  +  ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( this , offset , length )  ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 - 0 )   &&   ( c - '0' ) ;^101^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 10 )   >   ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return   NASTY_SMALL_DOUBLE   ;^99^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  (  c < '0' )  {^98^^^^^65^115^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^if  ( offset < length %  0.5  )  {^103^^^^^65^115^[REPLACE] if  ( offset < length )  {^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REMOVE]^if  ( offset < length )  {     c = str.charAt (  ( offset++ )  ) ;     if  (  ( c > '9' )  ||  ( c < '0' )  )  {         return parseInt ( str ) ;     }     num =  ( num * 10 )  +  ( c - '0' ) ;     if  ( offset < length )  {         do {             c = str.charAt (  ( offset++ )  ) ;             if  (  ( c > '9' )  ||  ( c < '0' )  )  {                 return parseInt ( str ) ;             }             num =  ( num * 10 )  +  ( c - '0' ) ;         } while  ( offset < length  ) ;     } }^103^^^^^65^115^[REMOVE] ^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( false , num , offset )  ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 7 )  +  ( c - '0' ) ;^109^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[ADD]^return Integer.parseInt ( str ) ;^106^107^108^^^65^115^[ADD] if  ( c > '9' || c < '0' )  { return Integer.parseInt ( str ) ; }^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^c =  null.charAt ( offset++ ) ;^91^^^^^65^115^[REPLACE] c = str.charAt ( offset++ ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^num =  ( num * 1 )  +  (num ) ;^95^^^^^65^115^[REPLACE] num =  ( num * 10 )  +  ( c - '0' ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return Integer .parseInt ( null , offset , num )  ;^107^^^^^65^115^[REPLACE] return Integer.parseInt ( str ) ;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^return negative ? -num : length;^114^^^^^65^115^[REPLACE] return negative ? -num : num;^[METHOD] parseInt [TYPE] int [PARAMETER] String str [CLASS] NumberInput   [TYPE]  char c  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  [TYPE]  int length  num  offset 
[REPLACE]^int len1 = len <= 9 / 1;^120^^^^^117^123^[REPLACE] int len1 = len-9;^[METHOD] parseLong [TYPE] long [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int len  len1  offset  [TYPE]  char[] digitChars 
[ADD]^^120^121^^^^117^123^[ADD] int len1 = len-9; long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[METHOD] parseLong [TYPE] long [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int len  len1  offset  [TYPE]  char[] digitChars 
[REPLACE]^long val = parseInt ( digitChars, offset, len1 )   ;^121^^^^^117^123^[REPLACE] long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[METHOD] parseLong [TYPE] long [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int len  len1  offset  [TYPE]  char[] digitChars 
[ADD]^^121^^^^^117^123^[ADD] long val = parseInt ( digitChars, offset, len1 )  * L_BILLION;^[METHOD] parseLong [TYPE] long [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int len  len1  offset  [TYPE]  char[] digitChars 
[REPLACE]^return val  |   ( long )  parseInt ( digitChars, offset | len1, 9 ) ;^122^^^^^117^123^[REPLACE] return val +  ( long )  parseInt ( digitChars, offset+len1, 9 ) ;^[METHOD] parseLong [TYPE] long [PARAMETER] char[] digitChars int offset int len [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int len  len1  offset  [TYPE]  char[] digitChars 
[REPLACE]^int length = NASTY_SMALL_DOUBLE.length (  ) ;^130^^^^^125^136^[REPLACE] int length = str.length (  ) ;^[METHOD] parseLong [TYPE] long [PARAMETER] String str [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int length 
[REPLACE]^if  ( length (  )  <= 9 )  {^131^^^^^125^136^[REPLACE] if  ( length <= 9 )  {^[METHOD] parseLong [TYPE] long [PARAMETER] String str [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int length 
[REPLACE]^return  ( long )  parseInt ( NASTY_SMALL_DOUBLE ) ;^132^^^^^125^136^[REPLACE] return  ( long )  parseInt ( str ) ;^[METHOD] parseLong [TYPE] long [PARAMETER] String str [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int length 
[REPLACE]^return Long .parseLong ( this , length , length )  ;^135^^^^^125^136^[REPLACE] return Long.parseLong ( str ) ;^[METHOD] parseLong [TYPE] long [PARAMETER] String str [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int length 
[REPLACE]^String cmpStr = true ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^150^^^^^147^162^[REPLACE] String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[ADD]^^150^^^^^147^162^[ADD] String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^int cmpLen = NASTY_SMALL_DOUBLE.length (  ) ;^151^^^^^147^162^[REPLACE] int cmpLen = cmpStr.length (  ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[ADD]^^151^152^^^^147^162^[ADD] int cmpLen = cmpStr.length (  ) ; if  ( len < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  (offset  <=  cmpLen )  return true;^152^^^^^147^162^[REPLACE] if  ( len < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[ADD]^^152^153^^155^156^147^162^[ADD] if  ( len < cmpLen )  return true; if  ( len > cmpLen )  return false; for  ( int i = 0; i < cmpLen; ++i )  { int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( len < cmpLen )  return false;^152^^^^^147^162^[REPLACE] if  ( len < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( len  ==  cmpLen )  return false;^153^^^^^147^162^[REPLACE] if  ( len > cmpLen )  return false;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[ADD]^^153^154^155^156^^147^162^[ADD] if  ( len > cmpLen )  return false;  for  ( int i = 0; i < cmpLen; ++i )  { int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( len > cmpLen )  return true;^153^^^^^147^162^[REPLACE] if  ( len > cmpLen )  return false;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^if  ( diff  ==  0 )  {^157^^^^^147^162^[REPLACE] if  ( diff != 0 )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^return  ( diff  ;^158^^^^^147^162^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^for  (diffnt i = 0; i  !=  cmpLen; ++i )  {^155^^^^^147^162^[REPLACE] for  ( int i = 0; i < cmpLen; ++i )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^return false ;^158^^^^^147^162^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^return  ( offset  !=  0 + 4 ) ;;^158^^^^^147^162^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^int diff = digitChars[offset+i]  &  cmpStr.charAt ( i ) ;^156^^^^^147^162^[REPLACE] int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^for  ( int i = 1; i < cmpLen; ++i )  {^155^^^^^147^162^[REPLACE] for  ( int i = 0; i < cmpLen; ++i )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^int diff = digitChars[offset+i]  |  cmpStr.charAt ( i ) ;^156^^^^^147^162^[REPLACE] int diff = digitChars[offset+i] - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^return false;^161^^^^^147^162^[REPLACE] return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] char[] digitChars int offset int len boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int cmpLen  diff  i  len  offset  [TYPE]  char[] digitChars 
[REPLACE]^String cmpStr = true ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^173^^^^^171^187^[REPLACE] String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^int cmpLen = str.trim (  ) ;^174^^^^^171^187^[REPLACE] int cmpLen = cmpStr.length (  ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^int actualLen = str.length (  ) ;^175^^^^^171^187^[REPLACE] int actualLen = numberStr.length (  ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen  !=  cmpLen )  return true;^176^^^^^171^187^[REPLACE] if  ( actualLen < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REMOVE]^if  ( len == 0 )  {     return defaultValue; }^176^^^^^171^187^[REMOVE] ^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen < cmpLen )  return false;^176^^^^^171^187^[REPLACE] if  ( actualLen < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen > cmpLen )  return false;^176^^^^^171^187^[REPLACE] if  ( actualLen < cmpLen )  return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen  ==  cmpLen )  return true;^177^^^^^171^187^[REPLACE] if  ( actualLen > cmpLen )  return false;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( actualLen > cmpLen )  return true;^177^^^^^171^187^[REPLACE] if  ( actualLen > cmpLen )  return false;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( i  ==  4 )  {^182^^^^^171^187^[REPLACE] if  ( diff != 0 )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^return  ( i  ;^183^^^^^171^187^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^for  (diffnt i = 0; i  >=  cmpLen; ++i )  {^180^^^^^171^187^[REPLACE] for  ( int i = 0; i < cmpLen; ++i )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( diff  == i )  {^182^^^^^171^187^[REPLACE] if  ( diff != 0 )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REMOVE]^if  ( c == '-' )  {     ++i; }^182^^^^^171^187^[REMOVE] ^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^return false ;^183^^^^^171^187^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^int diff = numberStr.substring ( i )   &&  cmpStr.charAt ( i ) ;^181^^^^^171^187^[REPLACE] int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^return  ( diff  ;^183^^^^^171^187^[REPLACE] return  ( diff < 0 ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^for  ( int i = 3; i < cmpLen; ++i )  {^180^^^^^171^187^[REPLACE] for  ( int i = 0; i < cmpLen; ++i )  {^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^int diff = numberStr.substring ( diff )   &  cmpStr.charAt ( i ) ;^181^^^^^171^187^[REPLACE] int diff = numberStr.charAt ( i )  - cmpStr.charAt ( i ) ;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^return false;^186^^^^^171^187^[REPLACE] return true;^[METHOD] inLongRange [TYPE] boolean [PARAMETER] String numberStr boolean negative [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  numberStr  str  [TYPE]  boolean false  negative  true  [TYPE]  long L_BILLION  val  [TYPE]  int actualLen  cmpLen  diff  i 
[REPLACE]^if  ( input != null )  {^191^^^^^190^225^[REPLACE] if  ( input == null )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return len;^192^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.substring ( 1 ) ; ;^194^^^^^190^225^[REPLACE] input = input.trim (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^int len = numberStr.trim (  ) ;^195^^^^^190^225^[REPLACE] int len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( len  != defaultValue )  {^196^^^^^190^225^[REPLACE] if  ( len == 0 )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^196^197^198^^^190^225^[ADD] if  ( len == 0 )  { return defaultValue; }^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return Integer.parseInt ( input ) ;^197^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return len;^197^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^int i = 1;^200^^^^^190^225^[REPLACE] int i = 0;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( i  <=  len )  {^201^^^^^190^225^[REPLACE] if  ( i < len )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^char c = input.charAt ( 0 ) ;input = input.substring ( 1 ) ;len = input.length (  ) ;^201^202^203^204^205^190^225^[ADD] if  ( i < len )  { char c = input.charAt ( 0 ) ; if  ( c == '+' )  { input = input.substring ( 1 ) ; len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( c  &&  '+' )  {^203^^^^^190^225^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^}  if  ( c  &&  '-' )  {^206^^^^^190^225^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.substring ( 4 ) ;^204^^^^^190^225^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^204^205^^^^190^225^[ADD] input = input.substring ( 1 ) ; len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^len =  numberStr.length (  ) ;^205^^^^^190^225^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^205^^^^^190^225^[ADD] len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^}  if  ( c  !=  '-' )  {^206^^^^^190^225^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.substring ( 0 ) ;^204^^^^^190^225^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^char c = cmpStr.charAt ( 2 ) ;^202^^^^^190^225^[REPLACE] char c = input.charAt ( 0 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( c  !=  '+' )  {^203^^^^^190^225^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^}  else {^206^^^^^190^225^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^len =  null.length (  ) ;^205^^^^^190^225^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^}  if  ( c  ||  '-' )  {^206^^^^^190^225^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^input = input.substring ( 1 >>> 2 ) ;^204^^^^^190^225^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^char c = numberStr.substring ( 2 ) ;^202^^^^^190^225^[REPLACE] char c = input.charAt ( 0 ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  (  c < '0' )  {^213^^^^^190^225^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^return  ( int )  parseDouble ( input ) ;return defaultValue;^214^215^216^217^218^190^225^[ADD] try { return  ( int )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return  ( int )  parseDouble ( numberStr ) ;^215^^^^^190^225^[REPLACE] return  ( int )  parseDouble ( input ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return len;^217^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^for  ( ; i  <=  len; ++i )  {^210^^^^^190^225^[REPLACE] for  ( ; i < len; ++i )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( c > '9' ) {^213^^^^^190^225^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^^216^217^^^^190^225^[ADD] catch  ( NumberFormatException e )  { return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return  ( long )  parseDouble ( input ) ;^215^^^^^190^225^[REPLACE] return  ( int )  parseDouble ( input ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return Integer.parseInt ( input ) ;^217^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^char c = input.substring ( i ) ;^211^^^^^190^225^[REPLACE] char c = input.charAt ( i ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^char c = numberStr.substring ( i ) ;^211^^^^^190^225^[REPLACE] char c = input.charAt ( i ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[ADD]^return Integer.parseInt ( input ) ;^221^222^223^^^190^225^[ADD] try { return Integer.parseInt ( input ) ; } catch  ( NumberFormatException e )  { }^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return   input   ;^222^^^^^190^225^[REPLACE] return Integer.parseInt ( input ) ;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^return len;^224^^^^^190^225^[REPLACE] return defaultValue;^[METHOD] parseAsInt [TYPE] int [PARAMETER] String input int defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  val  [TYPE]  int defaultValue  i  len 
[REPLACE]^if  ( input !=numberStr )  {^229^^^^^228^263^[REPLACE] if  ( input == null )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^230^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^input = input.substring ( 1 ) ; ;^232^^^^^228^263^[REPLACE] input = input.trim (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^int len = input.length (  ) ;^232^233^^^^228^263^[ADD] input = input.trim (  ) ; int len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^int len = numberStr.length (  ) ;^233^^^^^228^263^[REPLACE] int len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^^233^^^^^228^263^[ADD] int len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( len  ||  0 )  {^234^^^^^228^263^[REPLACE] if  ( len == 0 )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^235^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^int i = 4;^238^^^^^228^263^[REPLACE] int i = 0;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( i  ==  len )  {^239^^^^^228^263^[REPLACE] if  ( i < len )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( c  &&  '+' )  {^241^^^^^228^263^[REPLACE] if  ( c == '+' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^}  if  ( c  &&  '-' )  {^244^^^^^228^263^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REMOVE]^if  ( len == 0 )  {     return defaultValue; }^244^^^^^228^263^[REMOVE] ^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^input = input.substring ( 3 ) ;^242^^^^^228^263^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^len =  cmpStr.length (  ) ;^243^^^^^228^263^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^input = input.substring ( 1 - 3 ) ;^242^^^^^228^263^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^len =  numberStr.length (  ) ;^243^^^^^228^263^[REPLACE] len = input.length (  ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = input.charAt ( 0 / 0 ) ;^240^^^^^228^263^[REPLACE] char c = input.charAt ( 0 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^} else if  ( c  &&  '-' )  {^244^^^^^228^263^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^input = input.trim (  ) ; ;^242^^^^^228^263^[REPLACE] input = input.substring ( 1 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^}  else {^244^^^^^228^263^[REPLACE] } else if  ( c == '-' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = input.charAt ( 3 ) ;^240^^^^^228^263^[REPLACE] char c = input.charAt ( 0 ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( c > '9' ) {^251^^^^^228^263^[REPLACE] if  ( c > '9' || c < '0' )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^return  ( long )  parseDouble ( input ) ;return defaultValue;^252^253^254^255^256^228^263^[ADD] try { return  ( long )  parseDouble ( input ) ; } catch  ( NumberFormatException e )  { return defaultValue; }^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return  ( long )  parseDouble ( numberStr ) ;^253^^^^^228^263^[REPLACE] return  ( long )  parseDouble ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^255^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^for  ( ; i  ==  len; ++i )  {^248^^^^^228^263^[REPLACE] for  ( ; i < len; ++i )  {^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return  ( long )  parseDouble ( cmpStr ) ;^253^^^^^228^263^[REPLACE] return  ( long )  parseDouble ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = cmpStr.substring ( i ) ;^249^^^^^228^263^[REPLACE] char c = input.charAt ( i ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^^249^^^^^228^263^[ADD] char c = input.charAt ( i ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return  ( int )  parseDouble ( input ) ;^253^^^^^228^263^[REPLACE] return  ( long )  parseDouble ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^char c = numberStr .trim (  )  ;^249^^^^^228^263^[REPLACE] char c = input.charAt ( i ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[ADD]^return Long.parseLong ( input ) ;^259^260^261^^^228^263^[ADD] try { return Long.parseLong ( input ) ; } catch  ( NumberFormatException e )  { }^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return Long.parseLong ( str ) ;^260^^^^^228^263^[REPLACE] return Long.parseLong ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return   input   ;^260^^^^^228^263^[REPLACE] return Long.parseLong ( input ) ;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^return val;^262^^^^^228^263^[REPLACE] return defaultValue;^[METHOD] parseAsLong [TYPE] long [PARAMETER] String input long defaultValue [CLASS] NumberInput   [TYPE]  char c  [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int i  len 
[REPLACE]^if  ( numberStr != null )  {^267^^^^^265^279^[REPLACE] if  ( input == null )  {^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^return Integer.parseInt ( input ) ;^268^^^^^265^279^[REPLACE] return defaultValue;^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^input = input.substring ( 1 ) ; ;^270^^^^^265^279^[REPLACE] input = input.trim (  ) ;^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^int len = numberStr .substring ( len )  ;^271^^^^^265^279^[REPLACE] int len = input.length (  ) ;^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^if  ( len  ||  0 )  {^272^^^^^265^279^[REPLACE] if  ( len == 0 )  {^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^return Integer.parseInt ( input ) ;^273^^^^^265^279^[REPLACE] return defaultValue;^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[ADD]^return parseDouble ( input ) ;^275^276^277^^^265^279^[ADD] try { return parseDouble ( input ) ; } catch  ( NumberFormatException e )  { }^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^return parseDouble ( numberStr ) ;^276^^^^^265^279^[REPLACE] return parseDouble ( input ) ;^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^return Integer.parseInt ( input ) ;^278^^^^^265^279^[REPLACE] return defaultValue;^[METHOD] parseAsDouble [TYPE] double [PARAMETER] String input double defaultValue [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  double defaultValue  [TYPE]  int len 
[REPLACE]^if  ( NASTY_SMALL_DOUBLE.equals ( str )  )  {^287^^^^^281^291^[REPLACE] if  ( NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] NumberInput   [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true 
[REPLACE]^return Integer.parseInt ( input ) ;^288^^^^^281^291^[REPLACE] return Double.MIN_VALUE;^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] NumberInput   [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true 
[REPLACE]^return   numStr   ;^290^^^^^281^291^[REPLACE] return Double.parseDouble ( numStr ) ;^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] NumberInput   [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true 
[ADD]^return new BigDecimal ( numStr ) ;^295^296^297^298^299^293^300^[ADD] try { return new BigDecimal ( numStr ) ; } catch  ( NumberFormatException e )  { throw _badBigDecimal ( numStr ) ; }^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] String numStr [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val 
[REPLACE]^return new BigDecimal ( str ) ;^296^^^^^293^300^[REPLACE] return new BigDecimal ( numStr ) ;^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] String numStr [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val 
[REPLACE]^return ;^298^^^^^293^300^[REPLACE] throw _badBigDecimal ( numStr ) ;^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] String numStr [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val 
[REPLACE]^return parseBigDecimal ( buffer, 0 , buffer.length ) ;^303^^^^^302^304^[REPLACE] return parseBigDecimal ( buffer, 0, buffer.length ) ;^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] char[] buffer [CLASS] NumberInput   [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  char[] buffer 
[ADD]^return new BigDecimal ( buffer, offset, len ) ;^309^310^311^312^313^306^314^[ADD] try { return new BigDecimal ( buffer, offset, len ) ; } catch  ( NumberFormatException e )  { throw _badBigDecimal ( new String ( buffer, offset, len )  ) ; }^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] char[] buffer int offset int len [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int len  offset  [TYPE]  char[] buffer 
[REPLACE]^return  new String ( buffer, offset, len )  ;^310^^^^^306^314^[REPLACE] return new BigDecimal ( buffer, offset, len ) ;^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] char[] buffer int offset int len [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int len  offset  [TYPE]  char[] buffer 
[REPLACE]^return ;^312^^^^^306^314^[REPLACE] throw _badBigDecimal ( new String ( buffer, offset, len )  ) ;^[METHOD] parseBigDecimal [TYPE] BigDecimal [PARAMETER] char[] buffer int offset int len [CLASS] NumberInput   [TYPE]  NumberFormatException e  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true  [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  int len  offset  [TYPE]  char[] buffer 
[REPLACE]^return new NumberFormatException ( "Value \"" ^ str ^ "\" can not be represented as BigDecimal" ) ;^317^^^^^316^318^[REPLACE] return new NumberFormatException ( "Value \""+str+"\" can not be represented as BigDecimal" ) ;^[METHOD] _badBigDecimal [TYPE] NumberFormatException [PARAMETER] String str [CLASS] NumberInput   [TYPE]  long L_BILLION  defaultValue  val  [TYPE]  String MAX_LONG_STR  MIN_LONG_STR_NO_SIGN  NASTY_SMALL_DOUBLE  cmpStr  input  numStr  numberStr  str  [TYPE]  boolean false  true 
