[REPLACE]^int mQuadLen;^11^^^^^^^[REPLACE] final int mQuadLen;^ [CLASS] NameN  
[REPLACE]^super ( name, quadLen ) ;^15^^^^^13^24^[REPLACE] super ( name, hash ) ;^[METHOD] <init> [TYPE] String,int,int[],int) [PARAMETER] String name int hash int[] quads int quadLen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int hash  mQuadLen  quadLen 
[REPLACE]^if  ( quadLen  >  3 )  {^19^^^^^13^24^[REPLACE] if  ( quadLen < 3 )  {^[METHOD] <init> [TYPE] String,int,int[],int) [PARAMETER] String name int hash int[] quads int quadLen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int hash  mQuadLen  quadLen 
[REPLACE]^return ;^20^^^^^13^24^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] <init> [TYPE] String,int,int[],int) [PARAMETER] String name int hash int[] quads int quadLen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int hash  mQuadLen  quadLen 
[REPLACE]^mQuads =  null;^22^^^^^13^24^[REPLACE] mQuads = quads;^[METHOD] <init> [TYPE] String,int,int[],int) [PARAMETER] String name int hash int[] quads int quadLen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int hash  mQuadLen  quadLen 
[ADD]^^22^23^^^^13^24^[ADD] mQuads = quads; mQuadLen = quadLen;^[METHOD] <init> [TYPE] String,int,int[],int) [PARAMETER] String name int hash int[] quads int quadLen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int hash  mQuadLen  quadLen 
[REPLACE]^mQuadLen =  null;^23^^^^^13^24^[REPLACE] mQuadLen = quadLen;^[METHOD] <init> [TYPE] String,int,int[],int) [PARAMETER] String name int hash int[] quads int quadLen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  String name  [TYPE]  boolean false  true  [TYPE]  int hash  mQuadLen  quadLen 
[REPLACE]^public boolean equals ( int quad )  { return true; }^28^^^^^^^[REPLACE] public boolean equals ( int quad )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] int quad [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  mQuadLen  quad  quadLen  [TYPE]  boolean false  true 
[REPLACE]^public boolean equals ( int quad1, int quad2 )  { return true; }^32^^^^^^^[REPLACE] public boolean equals ( int quad1, int quad2 )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] int quad1 int quad2 [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  mQuadLen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^if  ( quadLen  ==  quad2 )  {^37^^^^^36^67^[REPLACE] if  ( qlen != mQuadLen )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[ADD]^^37^38^39^^^36^67^[ADD] if  ( qlen != mQuadLen )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return true;^38^^^^^36^67^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^if  ( quads[i]  ==  mQuads[i] )  {^62^^^^^36^67^[REPLACE] if  ( quads[i] != mQuads[i] )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[ADD]^return false;^62^63^64^^^36^67^[ADD] if  ( quads[i] != mQuads[i] )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return true;^63^^^^^36^67^[REPLACE] return false;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = 1; i  >=  qlen; ++i )  {^61^^^^^36^67^[REPLACE] for  ( int i = 0; i < qlen; ++i )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[ADD]^^61^62^63^64^^36^67^[ADD] for  ( int i = 0; i < qlen; ++i )  { if  ( quads[i] != mQuads[i] )  { return false; }^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^for  ( int i = 0 - 0; i < qlen; ++i )  {^61^^^^^36^67^[REPLACE] for  ( int i = 0; i < qlen; ++i )  {^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
[REPLACE]^return false;^66^^^^^36^67^[REPLACE] return true;^[METHOD] equals [TYPE] boolean [PARAMETER] int[] quads int qlen [CLASS] NameN   [TYPE]  int[] mQuads  quads  [TYPE]  int hash  i  mQuadLen  qlen  quad  quad1  quad2  quadLen  [TYPE]  boolean false  true 
