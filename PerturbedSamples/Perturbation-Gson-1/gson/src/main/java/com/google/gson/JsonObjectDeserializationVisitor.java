[REPLACE]^return  ( T )  objectConstructor.construct ( targetType ) ;^34^^^^^30^35^[REPLACE] super ( json, type, factory, objectConstructor, deserializers, context ) ;^[METHOD] <init> [TYPE] JsonDeserializationContext) [PARAMETER] JsonElement json Type type ObjectNavigatorFactory factory ObjectConstructor objectConstructor JsonDeserializer<?>> deserializers JsonDeserializationContext context [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type type  [TYPE]  JsonDeserializationContext context  [TYPE]  boolean false  true  [TYPE]  JsonElement json  [TYPE]  ObjectConstructor objectConstructor  [TYPE]  ParameterizedTypeHandlerMap deserializers  [TYPE]  ObjectNavigatorFactory factory 
[REPLACE]^return namingPolicy.translateName ( f ) ;^40^^^^^39^41^[REPLACE] return  ( T )  objectConstructor.construct ( targetType ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true 
[REPLACE]^throw new RuntimeException  (" ")  ; ;^49^^^^^47^50^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type componentType [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type componentType  [TYPE]  boolean false  true  [TYPE]  Object array 
[REPLACE]^if  ( json.isJsonObject (  )  )  {^54^^^^^52^69^[REPLACE] if  ( !json.isJsonObject (  )  )  {^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^throw new RuntimeException  (" ")  ; ;^55^^^^^52^69^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( jsonChild == null )  {^60^^^^^52^69^[REPLACE] if  ( jsonChild != null )  {^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( obj, false ) ;^64^^^^^52^69^[REPLACE] f.set ( obj, null ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^Object array = visitChildAsArray ( typeOfF, jsonChild ) ;^61^^^^^52^69^[REPLACE] Object child = visitChildAsObject ( typeOfF, jsonChild ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^53^54^55^56^^52^69^[ADD] try { if  ( !json.isJsonObject (  )  )  { throw new JsonParseException  (" ")  ; }^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^54^55^56^^^52^69^[ADD] if  ( !json.isJsonObject (  )  )  { throw new JsonParseException  (" ")  ; }^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^return ;^55^^^^^52^69^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^64^^^^^52^69^[ADD] f.set ( obj, null ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.isJsonObject (  ) ;^57^^^^^52^69^[REPLACE] JsonObject jsonObject = json.getAsJsonObject (  ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.getAsJsonObject (  ) ;^58^^^^^52^69^[REPLACE] String fName = getFieldName ( f ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.getAsJsonObject (  ) ;^59^^^^^52^69^[REPLACE] JsonElement jsonChild = jsonObject.get ( fName ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^61^^^^^52^69^[ADD] Object child = visitChildAsObject ( typeOfF, jsonChild ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^throw new JsonParseException  (" ")  ; ;^67^^^^^52^69^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  JsonObject jsonObject  [TYPE]  Object child  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( json.isJsonObject (  )  )  {^73^^^^^71^88^[REPLACE] if  ( !json.isJsonObject (  )  )  {^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^return ;^74^^^^^71^88^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( jsonChild == null )  {^79^^^^^71^88^[REPLACE] if  ( jsonChild != null )  {^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^Object array = visitChildAsArray ( typeOfF, jsonChild ) ;f.set ( obj, array ) ;f.set ( obj, null ) ;^79^80^81^82^83^71^88^[ADD] if  ( jsonChild != null )  { Object array = visitChildAsArray ( typeOfF, jsonChild ) ; f.set ( obj, array ) ; } else { f.set ( obj, null ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( obj, true ) ;^83^^^^^71^88^[REPLACE] f.set ( obj, null ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^Object child = visitChildAsObject ( typeOfF, jsonChild ) ;^80^^^^^71^88^[REPLACE] Object array = visitChildAsArray ( typeOfF, jsonChild ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^72^73^74^75^^71^88^[ADD] try { if  ( !json.isJsonObject (  )  )  { throw new JsonParseException  (" ")  ; }^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^throw new RuntimeException  (" ")  ; ;^74^^^^^71^88^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( jsonChild == false )  {^79^^^^^71^88^[REPLACE] if  ( jsonChild != null )  {^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^79^80^81^82^83^71^88^[ADD] if  ( jsonChild != null )  { Object array = visitChildAsArray ( typeOfF, jsonChild ) ; f.set ( obj, array ) ; } else { f.set ( obj, null ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json .isJsonObject (  )  ;^76^^^^^71^88^[REPLACE] JsonObject jsonObject = json.getAsJsonObject (  ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.getAsJsonObject (  ) ;^77^^^^^71^88^[REPLACE] String fName = getFieldName ( f ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^77^^^^^71^88^[ADD] String fName = getFieldName ( f ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.getAsJsonObject (  ) ;^78^^^^^71^88^[REPLACE] JsonArray jsonChild =  ( JsonArray )  jsonObject.get ( fName ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^80^^^^^71^88^[ADD] Object array = visitChildAsArray ( typeOfF, jsonChild ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[ADD]^^74^^^^^71^88^[ADD] throw new JsonParseException  (" ")  ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^throw new JsonParseException  (" ")  ; ;^86^^^^^71^88^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonObjectDeserializationVisitor   [TYPE]  JsonArray jsonChild  [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  JsonObject jsonObject  [TYPE]  Object array  obj  [TYPE]  String fName  [TYPE]  FieldAttributes f  [TYPE]  IllegalAccessException e 
[REPLACE]^String fName = getFieldName ( f ) ;^91^^^^^90^93^[REPLACE] FieldNamingStrategy2 namingPolicy = factory.getFieldNamingPolicy (  ) ;^[METHOD] getFieldName [TYPE] String [PARAMETER] FieldAttributes f [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  FieldNamingStrategy2 namingPolicy  [TYPE]  FieldAttributes f 
[REPLACE]^return  ( T )  objectConstructor.construct ( targetType ) ;^92^^^^^90^93^[REPLACE] return namingPolicy.translateName ( f ) ;^[METHOD] getFieldName [TYPE] String [PARAMETER] FieldAttributes f [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  FieldNamingStrategy2 namingPolicy  [TYPE]  FieldAttributes f 
[REPLACE]^if  ( json.isJsonObject (  )  )  {^98^^^^^95^124^[REPLACE] if  ( !json.isJsonObject (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^return ;^99^^^^^95^124^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( child != null )  {^103^^^^^95^124^[REPLACE] if  ( child == null )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^}  if  ( child.isJsonNull (  )  )  {^105^^^^^95^124^[REPLACE] } else if  ( child.isJsonNull (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( typeInfo.isPrimitive (  )  )  {^106^^^^^95^124^[REPLACE] if  ( !typeInfo.isPrimitive (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( parent, this ) ;^107^^^^^95^124^[REPLACE] f.set ( parent, null ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^return false;^109^^^^^95^124^[REPLACE] return true;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( !typeInfo.TypeInfo (  )  )  {^106^^^^^95^124^[REPLACE] if  ( !typeInfo.isPrimitive (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( parent, false ) ;^107^^^^^95^124^[REPLACE] f.set ( parent, null ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^return false;^104^^^^^95^124^[REPLACE] return true;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^}  else {^105^^^^^95^124^[REPLACE] } else if  ( child.isJsonNull (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^f.set ( parent, null ) ;^106^107^108^^^95^124^[ADD] if  ( !typeInfo.isPrimitive (  )  )  { f.set ( parent, null ) ; }^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( parent, true ) ;^107^^^^^95^124^[REPLACE] f.set ( parent, null ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( pair != null )  {^113^^^^^95^124^[REPLACE] if  ( pair == null )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^return true;^114^^^^^95^124^[REPLACE] return false;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( value == this || !typeInfo.isPrimitive (  )  )  {^117^^^^^95^124^[REPLACE] if  ( value != null || !typeInfo.isPrimitive (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^f.set ( parent, value ) ;^117^118^119^^^95^124^[ADD] if  ( value != null || !typeInfo.isPrimitive (  )  )  { f.set ( parent, value ) ; }^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( value, value ) ;^118^^^^^95^124^[REPLACE] f.set ( parent, value ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^String fName = getFieldName ( f ) ;^96^97^98^99^100^95^124^[ADD] try { String fName = getFieldName ( f ) ; if  ( !json.isJsonObject (  )  )  { throw new JsonParseException  (" ")  ; }^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^throw new RuntimeException  (" ")  ; ;^99^^^^^95^124^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( child != true )  {^103^^^^^95^124^[REPLACE] if  ( child == null )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^^107^^^^^95^124^[ADD] f.set ( parent, null ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  (  !typeInfo.isPrimitive (  )  )  {^117^^^^^95^124^[REPLACE] if  ( value != null || !typeInfo.isPrimitive (  )  )  {^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^f.set ( parent, parent ) ;^118^^^^^95^124^[REPLACE] f.set ( parent, value ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^return false;^120^^^^^95^124^[REPLACE] return true;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.getAsJsonObject (  ) ;^97^^^^^95^124^[REPLACE] String fName = getFieldName ( f ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^^97^^^^^95^124^[ADD] String fName = getFieldName ( f ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonElement child = json.isJsonObject (  ) .get ( fName ) ;^101^^^^^95^124^[REPLACE] JsonElement child = json.getAsJsonObject (  ) .get ( fName ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^ObjectTypePair objTypePair = new ObjectTypePair ( null, declaredTypeOfField, false ) ;^102^^^^^95^124^[REPLACE] TypeInfo typeInfo = new TypeInfo ( declaredTypeOfField ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^^102^^^^^95^124^[ADD] TypeInfo typeInfo = new TypeInfo ( declaredTypeOfField ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^ObjectTypePair objTypePair = new ObjectTypePair ( false, declaredTypeOfField, false ) ;^111^^^^^95^124^[REPLACE] ObjectTypePair objTypePair = new ObjectTypePair ( null, declaredTypeOfField, false ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonObject jsonObject = json.getAsJsonObject (  ) ;^112^^^^^95^124^[REPLACE] Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler ( deserializers ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^Object value = invokeCustomDeserializer ( child, false ) ;^116^^^^^95^124^[REPLACE] Object value = invokeCustomDeserializer ( child, pair ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^^99^^^^^95^124^[ADD] throw new JsonParseException  (" ")  ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^JsonElement child = json .isJsonObject (  )  .get ( fName ) ;^101^^^^^95^124^[REPLACE] JsonElement child = json.getAsJsonObject (  ) .get ( fName ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair .ObjectTypePair ( this , declaredTypeOfField , true )  ;^112^^^^^95^124^[REPLACE] Pair<JsonDeserializer<?>, ObjectTypePair> pair = objTypePair.getMatchingHandler ( deserializers ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^Object value = invokeCustomDeserializer ( child, null ) ;^116^^^^^95^124^[REPLACE] Object value = invokeCustomDeserializer ( child, pair ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[ADD]^^116^^^^^95^124^[ADD] Object value = invokeCustomDeserializer ( child, pair ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^throw new JsonParseException  (" ")  ; ;^122^^^^^95^124^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type declaredTypeOfField Object parent [CLASS] JsonObjectDeserializationVisitor   [TYPE]  Type declaredTypeOfField  [TYPE]  boolean false  true  [TYPE]  JsonElement child  [TYPE]  ObjectTypePair objTypePair  [TYPE]  Object parent  value  [TYPE]  String fName  [TYPE]  TypeInfo typeInfo  [TYPE]  FieldAttributes f  [TYPE]  Pair pair  [TYPE]  IllegalAccessException e 
[REPLACE]^if  ( json.isJsonPrimitive (  )  )  {^128^^^^^127^134^[REPLACE] if  ( !json.isJsonPrimitive (  )  )  {^[METHOD] visitPrimitive [TYPE] void [PARAMETER] Object primitive [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  JsonPrimitive prim  [TYPE]  Object primitive 
[REPLACE]^return ;^129^130^^^^127^134^[REPLACE] throw new JsonParseException ( "Type information is unavailable, and the target object is not a primitive: " + json ) ;^[METHOD] visitPrimitive [TYPE] void [PARAMETER] Object primitive [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  JsonPrimitive prim  [TYPE]  Object primitive 
[ADD]^^129^130^^^^127^134^[ADD] throw new JsonParseException ( "Type information is unavailable, and the target object is not a primitive: " + json ) ;^[METHOD] visitPrimitive [TYPE] void [PARAMETER] Object primitive [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  JsonPrimitive prim  [TYPE]  Object primitive 
[REPLACE]^JsonPrimitive prim = json .isJsonPrimitive (  )  ;^132^^^^^127^134^[REPLACE] JsonPrimitive prim = json.getAsJsonPrimitive (  ) ;^[METHOD] visitPrimitive [TYPE] void [PARAMETER] Object primitive [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  JsonPrimitive prim  [TYPE]  Object primitive 
[REPLACE]^target =   ( T )  null.getAsObject (  ) ;^133^^^^^127^134^[REPLACE] target =  ( T )  prim.getAsObject (  ) ;^[METHOD] visitPrimitive [TYPE] void [PARAMETER] Object primitive [CLASS] JsonObjectDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  JsonPrimitive prim  [TYPE]  Object primitive 
