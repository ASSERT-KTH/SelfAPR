[REPLACE]^this.visitor =  null;^32^^^^^31^34^[REPLACE] this.visitor = visitor;^[METHOD] <init> [TYPE] JsonElementVisitor,boolean) [PARAMETER] JsonElementVisitor visitor boolean visitNulls [CLASS] JsonTreeNavigator   [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  true  visitNulls 
[REPLACE]^this.visitNulls =  true;^33^^^^^31^34^[REPLACE] this.visitNulls = visitNulls;^[METHOD] <init> [TYPE] JsonElementVisitor,boolean) [PARAMETER] JsonElementVisitor visitor boolean visitNulls [CLASS] JsonTreeNavigator   [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  true  visitNulls 
[REPLACE]^if  ( child.isJsonNull (  )  )  {^37^^^^^36^64^[REPLACE] if  ( element.isJsonNull (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^}  if  ( element.isJsonArray (  )  )  {^39^^^^^36^64^[REPLACE] } else if  ( element.isJsonArray (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^}   JsonArray array = element.getAsJsonArray (  ) ;visitor.startArray ( array ) ;boolean isFirst = true;^39^40^41^42^^36^64^[ADD] else if  ( element.isJsonArray (  )  )  { JsonArray array = element.getAsJsonArray (  ) ; visitor.startArray ( array ) ; boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^}  else {^50^^^^^36^64^[REPLACE] } else if  ( element.isJsonObject (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor.visitPrimitive ( element .getAsJsonArray (  )   ) ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^62^^^^^50^63^[ADD] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited || isFirst )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^isFirst = false;^56^57^58^^^36^64^[ADD] if  ( visited && isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^57^^^^^36^64^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^57^^^^^36^64^[ADD] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonObject object = element.isJsonObject (  ) ;^51^^^^^36^64^[REPLACE] JsonObject object = element.getAsJsonObject (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean isFirst = false;^53^^^^^36^64^[REPLACE] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^53^^^^^36^64^[ADD] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^for  ( JsonElement child : array )  {^54^^^^^36^64^[REPLACE] for  ( Map.Entry<String, JsonElement> member : object.entrySet (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , visited ) ;^55^^^^^36^64^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^55^^^^^36^64^[ADD] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  (visitNulls || isFirst )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonObject object = element .isJsonObject (  )  ;^51^^^^^36^64^[REPLACE] JsonObject object = element.getAsJsonObject (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, null.getKey (  ) , member.getValue (  ) , isFirst ) ;^55^^^^^36^64^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited )  {^45^^^^^36^64^[REPLACE] if  ( isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^isFirst = true;^46^^^^^36^64^[REPLACE] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^46^^^^^36^64^[ADD] isFirst = false;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray array = element .isJsonArray (  )  ;^40^^^^^36^64^[REPLACE] JsonArray array = element.getAsJsonArray (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean isFirst = false;^42^^^^^36^64^[REPLACE] boolean isFirst = true;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray array = element.getAsJsonArray (  ) ;^43^^^^^36^64^[REPLACE] for  ( JsonElement child : array )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^43^44^45^46^47^36^64^[ADD] for  ( JsonElement child : array )  { visitChild ( array, child, isFirst ) ; if  ( isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^45^46^47^^^36^64^[ADD] if  ( isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^} else if  ( element.isJsonArray (  )  )  {^50^^^^^36^64^[REPLACE] } else if  ( element.isJsonObject (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor.visitPrimitive ( element.getAsJsonArray (  )  ) ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REMOVE]^JsonObject object = element.getAsJsonObject (  ) ;^62^^^^^50^63^[REMOVE] ^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  (  isFirst )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member.getKey (  ) , member.getKey (  ) , isFirst ) ;^55^^^^^36^64^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^JsonArray array = element.isJsonArray (  ) ;^40^^^^^36^64^[REPLACE] JsonArray array = element.getAsJsonArray (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^40^41^^^^36^64^[ADD] JsonArray array = element.getAsJsonArray (  ) ; visitor.startArray ( array ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, this.getValue (  ) , member.getValue (  ) , isFirst ) ;^55^^^^^36^64^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor.visitPrimitive (  ) ;^38^^^^^36^64^[REPLACE] visitor.visitNull (  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^} else if  ( element.isJsonObject (  )  )  {^39^^^^^36^64^[REPLACE] } else if  ( element.isJsonArray (  )  )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited || visitNulls )  {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^^56^57^58^^^36^64^[ADD] if  ( visited && isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member .getValue (  )  , member.getValue (  ) , isFirst ) ;^55^^^^^36^64^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^isFirst = false;^45^46^47^^^36^64^[ADD] if  ( isFirst )  { isFirst = false; }^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^visitor.startArray ( element.getAsJsonPrimitive (  )  ) ;^62^^^^^50^63^[REPLACE] visitor.visitPrimitive ( element.getAsJsonPrimitive (  )  ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  (visitNulls ) {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( visited ) {^56^^^^^36^64^[REPLACE] if  ( visited && isFirst )  {^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[ADD]^visitor.startObject ( object ) ;^51^52^^^^36^64^[ADD] JsonObject object = element.getAsJsonObject (  ) ; visitor.startObject ( object ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^boolean visited = visitChild ( object, member.getKey (  ) , member .getKey (  )  , visited ) ;^55^^^^^36^64^[REPLACE] boolean visited = visitChild ( object, member.getKey (  ) , member.getValue (  ) , isFirst ) ;^[METHOD] navigate [TYPE] void [PARAMETER] JsonElement element [CLASS] JsonTreeNavigator   [TYPE]  JsonArray array  [TYPE]  JsonObject object  [TYPE]  Entry member  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child  element 
[REPLACE]^if  ( element.isJsonNull (  )  )  {^71^^^^^69^90^[REPLACE] if  ( child.isJsonNull (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^71^72^73^74^^69^90^[ADD] if  ( child.isJsonNull (  )  )  { if  ( visitNulls )  { visitor.visitNullObjectMember ( parent, childName, isFirst ) ; navigate ( child.getAsJsonNull (  )  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^}  else {^78^^^^^69^90^[REPLACE] } else if  ( child.isJsonArray (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^}   JsonArray childAsArray = child.getAsJsonArray (  ) ;visitor.visitObjectMember ( parent, childName, childAsArray, isFirst ) ;navigate ( childAsArray ) ;^78^79^80^81^^69^90^[ADD] else if  ( child.isJsonArray (  )  )  { JsonArray childAsArray = child.getAsJsonArray (  ) ; visitor.visitObjectMember ( parent, childName, childAsArray, isFirst ) ; navigate ( childAsArray ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^}  if  ( child.isJsonObject (  )  )  {^82^^^^^69^90^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitObjectMember ( parent, childName, child .getAsJsonArray (  )  , isFirst ) ;^87^^^^^69^90^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitObjectMember ( parent, childName, child.getAsJsonArray (  ) , isFirst ) ;^87^^^^^69^90^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonObject childAsObject = child.isJsonObject (  ) ;^83^^^^^69^90^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonArray childAsArray = child .isJsonArray (  )  ;^79^^^^^69^90^[REPLACE] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^79^^^^^69^90^[ADD] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^87^^^^^69^90^[ADD] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonArray childAsArray = child.isJsonArray (  ) ;^79^^^^^69^90^[REPLACE] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^} else if  ( element.isJsonObject (  )  )  {^72^^^^^69^90^[REPLACE] if  ( visitNulls )  {^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return true;^76^^^^^69^90^[REPLACE] return false;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitObjectMember ( parent, childName, isFirst ) ;^73^^^^^69^90^[REPLACE] visitor.visitNullObjectMember ( parent, childName, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^navigate ( child.isJsonNull (  )  ) ;^74^^^^^69^90^[REPLACE] navigate ( child.getAsJsonNull (  )  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^navigate ( child .isJsonNull (  )   ) ;^74^^^^^69^90^[REPLACE] navigate ( child.getAsJsonNull (  )  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitNullObjectMember ( childAsObject, childName, isFirst ) ;^73^^^^^69^90^[REPLACE] visitor.visitNullObjectMember ( parent, childName, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^}   visitor.visitObjectMember ( parent, childName, childAsArray, isFirst ) ;navigate ( childAsArray ) ;^78^79^80^81^^69^90^[ADD] else if  ( child.isJsonArray (  )  )  { JsonArray childAsArray = child.getAsJsonArray (  ) ; visitor.visitObjectMember ( parent, childName, childAsArray, isFirst ) ; navigate ( childAsArray ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^}   JsonObject childAsObject = child.getAsJsonObject (  ) ;visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ;navigate ( childAsObject ) ;^82^83^84^85^^69^90^[ADD] else if  ( child.isJsonObject (  )  )  { JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ; navigate ( childAsObject ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitNullObjectMember ( childAsObject, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^87^^^^^69^90^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitObjectMember ( childAsObject, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^87^^^^^69^90^[REPLACE] visitor.visitObjectMember ( parent, childName, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ;^83^84^^^^69^90^[ADD] JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitObjectMember ( parent, childName, childAsObject, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[ADD]^^79^80^^^^69^90^[ADD] JsonArray childAsArray = child.getAsJsonArray (  ) ; visitor.visitObjectMember ( parent, childName, childAsArray, isFirst ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^JsonObject childAsObject = child .isJsonObject (  )  ;^83^^^^^69^90^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^return false;^89^^^^^69^90^[REPLACE] return true;^[METHOD] visitChild [TYPE] boolean [PARAMETER] JsonObject parent String childName JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  [TYPE]  JsonObject childAsObject  parent  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  String childName  [TYPE]  JsonElement child 
[REPLACE]^if  ( element.isJsonNull (  )  )  {^96^^^^^95^110^[REPLACE] if  ( child.isJsonNull (  )  )  {^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^}  if  ( child.isJsonArray (  )  )  {^99^^^^^95^110^[REPLACE] } else if  ( child.isJsonArray (  )  )  {^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^}  if  ( child.getAsJsonObject (  )  )  {^103^^^^^95^110^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^}   JsonObject childAsObject = child.getAsJsonObject (  ) ;visitor.visitArrayMember ( parent, childAsObject, isFirst ) ;navigate ( childAsObject ) ;^103^104^105^106^^95^110^[ADD] else if  ( child.isJsonObject (  )  )  { JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitArrayMember ( parent, childAsObject, isFirst ) ; navigate ( childAsObject ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , visited ) ;^108^^^^^95^110^[REPLACE] visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitArrayMember ( parent, child.getAsJsonArray (  ) , isFirst ) ;^108^^^^^95^110^[REPLACE] visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^JsonObject childAsObject = child.isJsonObject (  ) ;^104^^^^^95^110^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^visitor.visitArrayMember ( parent, childAsObject, isFirst ) ;^104^105^^^^95^110^[ADD] JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitArrayMember ( parent, childAsObject, isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^JsonArray childAsArray = child.isJsonArray (  ) ;^100^^^^^95^110^[REPLACE] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^}  else {^103^^^^^95^110^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^}   visitor.visitArrayMember ( parent, childAsObject, isFirst ) ;navigate ( childAsObject ) ;^103^104^105^106^^95^110^[ADD] else if  ( child.isJsonObject (  )  )  { JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitArrayMember ( parent, childAsObject, isFirst ) ; navigate ( childAsObject ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^^108^^^^^95^110^[ADD] visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitArrayMember ( parent, isFirst ) ;^97^^^^^95^110^[REPLACE] visitor.visitNullArrayMember ( parent, isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^^97^98^^^^95^110^[ADD] visitor.visitNullArrayMember ( parent, isFirst ) ; navigate ( child ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^navigate ( child.getAsJsonNull (  )  ) ;^98^^^^^95^110^[REPLACE] navigate ( child ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^}   visitor.visitArrayMember ( parent, childAsArray, isFirst ) ;navigate ( childAsArray ) ;^99^100^101^102^^95^110^[ADD] else if  ( child.isJsonArray (  )  )  { JsonArray childAsArray = child.getAsJsonArray (  ) ; visitor.visitArrayMember ( parent, childAsArray, isFirst ) ; navigate ( childAsArray ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^}  if  ( child.isJsonObject (  )  )  {^103^^^^^95^110^[REPLACE] } else if  ( child.isJsonObject (  )  )  {^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitNullArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst ) ;^108^^^^^95^110^[REPLACE] visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^JsonObject childAsObject = child .isJsonObject (  )  ;^104^^^^^95^110^[REPLACE] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^^104^105^^^^95^110^[ADD] JsonObject childAsObject = child.getAsJsonObject (  ) ; visitor.visitArrayMember ( parent, childAsObject, isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^visitor.visitArrayMember ( parent, childAsArray, isFirst ) ;^100^101^^^^95^110^[ADD] JsonArray childAsArray = child.getAsJsonArray (  ) ; visitor.visitArrayMember ( parent, childAsArray, isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^visitor.visitArrayMember ( parent, child .getAsJsonArray (  )  , isFirst ) ;^108^^^^^95^110^[REPLACE] visitor.visitArrayMember ( parent, child.getAsJsonPrimitive (  ) , isFirst ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[REPLACE]^JsonArray childAsArray = child .isJsonArray (  )  ;^100^^^^^95^110^[REPLACE] JsonArray childAsArray = child.getAsJsonArray (  ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
[ADD]^^104^^^^^95^110^[ADD] JsonObject childAsObject = child.getAsJsonObject (  ) ;^[METHOD] visitChild [TYPE] void [PARAMETER] JsonArray parent JsonElement child boolean isFirst [CLASS] JsonTreeNavigator   [TYPE]  JsonArray childAsArray  parent  [TYPE]  JsonObject childAsObject  [TYPE]  JsonElementVisitor visitor  [TYPE]  boolean false  isFirst  true  visitNulls  visited  [TYPE]  JsonElement child 
