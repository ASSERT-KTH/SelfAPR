[REPLACE]^if  ( jsonChild == null || jsonChild.isJsonNull (  )  )  { child = null;^35^^^^^31^36^[REPLACE] super ( jsonArray, arrayType, factory, objectConstructor, deserializers, context ) ;^[METHOD] <init> [TYPE] JsonDeserializationContext) [PARAMETER] JsonArray jsonArray Type arrayType ObjectNavigatorFactory factory ObjectConstructor objectConstructor JsonDeserializer<?>> deserializers JsonDeserializationContext context [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  Type arrayType  [TYPE]  JsonDeserializationContext context  [TYPE]  boolean false  true  [TYPE]  ObjectConstructor objectConstructor  [TYPE]  ParameterizedTypeHandlerMap deserializers  [TYPE]  ObjectNavigatorFactory factory 
[REPLACE]^TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( arrayType ) ;^42^^^^^40^57^[REPLACE] TypeInfo typeInfo = new TypeInfo ( targetType ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[ADD]^^42^^^^^40^57^[ADD] TypeInfo typeInfo = new TypeInfo ( targetType ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^if  ( json.isJsonArray (  )  )  {^44^^^^^40^57^[REPLACE] if  ( !json.isJsonArray (  )  )  {^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^return ;^45^^^^^40^57^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[ADD]^^45^^^^^40^57^[ADD] throw new JsonParseException  (" ")  ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^JsonArray jsonArray = json.isJsonArray (  ) ;^47^^^^^40^57^[REPLACE] JsonArray jsonArray = json.getAsJsonArray (  ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[ADD]^^47^^^^^40^57^[ADD] JsonArray jsonArray = json.getAsJsonArray (  ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^if  ( typeInfo.getRawClass (  )  )  {^48^^^^^40^57^[REPLACE] if  ( typeInfo.isArray (  )  )  {^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[ADD]^TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( targetType ) ;^48^49^^^52^40^57^[ADD] if  ( typeInfo.isArray (  )  )  { TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( targetType ) ; return  ( T )  objectConstructor.constructArray ( arrayTypeInfo.getSecondLevelType (  ) ,^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^return  ( T )  objectConstructor .construct (  )   ) ;^52^53^^^^40^57^[REPLACE] return  ( T )  objectConstructor.constructArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonArray.size (  )  ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^TypeInfoArray arrayTypeInfo =   targetType   ;^49^^^^^40^57^[REPLACE] TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( targetType ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^return  ( T )  objectConstructor.construct ( arrayTypeInfo.getSecondLevelType (  ) , jsonArray.size (  )  ) ;^52^53^^^^40^57^[REPLACE] return  ( T )  objectConstructor.constructArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonArray.size (  )  ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[ADD]^^49^^^^^40^57^[ADD] TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( targetType ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^return  ( T )  objectConstructor.construct ( typeInfo.isArray (  )  ) ;^56^^^^^40^57^[REPLACE] return  ( T )  objectConstructor.construct ( typeInfo.getRawClass (  )  ) ;^[METHOD] constructTarget [TYPE] T [PARAMETER] [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  boolean false  true  [TYPE]  TypeInfo typeInfo 
[REPLACE]^if  ( json.isJsonArray (  )  )  {^60^^^^^59^83^[REPLACE] if  ( !json.isJsonArray (  )  )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^60^61^62^^^59^83^[ADD] if  ( !json.isJsonArray (  )  )  { throw new JsonParseException  (" ")  ; }^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^return ;^61^^^^^59^83^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^61^^^^^59^83^[ADD] throw new JsonParseException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^throw new JsonParseException  (" ")   + ": " + parent ) ; ;^61^^^^^59^83^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^JsonArray jsonArray = json.isJsonArray (  ) ;^63^^^^^59^83^[REPLACE] JsonArray jsonArray = json.getAsJsonArray (  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^63^^^^^59^83^[ADD] JsonArray jsonArray = json.getAsJsonArray (  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^TypeInfoArray arrayTypeInfo =   arrayType   ;^64^^^^^59^83^[REPLACE] TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( arrayType ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^if  ( jsonChild != false || jsonChild.isJsonNull (  )  )  {^69^^^^^59^83^[REPLACE] if  ( jsonChild == null || jsonChild.isJsonNull (  )  )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^}  if  ( ! jsonChild instanceof JsonObject )  {^71^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonObject )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^}   child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild ) ;child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ;^71^72^73^74^^59^83^[ADD] else if  ( jsonChild instanceof JsonObject )  { child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild ) ; } else if  ( jsonChild instanceof JsonArray )  { child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^}  else {^73^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonArray )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^} else if  ( ! jsonChild instanceof JsonPrimitive )  {^75^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonPrimitive )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^}   jsonChild.getAsJsonPrimitive (  )  ) ;^75^76^77^78^79^59^83^[ADD] else if  ( jsonChild instanceof JsonPrimitive )  { child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ; } else { throw new IllegalStateException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^throw new JsonParseException  (" ")   + ": " + parent ) ; ;^79^^^^^59^83^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^child =  visitChildAsObject ( null.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ;^76^77^^^^59^83^[REPLACE] child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^76^77^^^^59^83^[ADD] child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^return ;^79^^^^^59^83^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^79^^^^^59^83^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ; ;^74^^^^^59^83^[REPLACE] child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^74^^^^^59^83^[ADD] child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^}  if  ( ! jsonChild instanceof JsonPrimitive )  {^75^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonPrimitive )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ; ;^72^^^^^59^83^[REPLACE] child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^}   jsonChild.getAsJsonPrimitive (  )  ) ;^73^74^75^76^77^59^83^[ADD] else if  ( jsonChild instanceof JsonArray )  { child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ; } else if  ( jsonChild instanceof JsonPrimitive )  { child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^child = false;^70^^^^^59^83^[REPLACE] child = null;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^}  else {^71^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonObject )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^}   child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ;jsonChild.getAsJsonPrimitive (  )  ) ;^73^74^75^76^77^59^83^[ADD] else if  ( jsonChild instanceof JsonArray )  { child = visitChildAsArray ( arrayTypeInfo.getSecondLevelType (  ) , jsonChild.getAsJsonArray (  )  ) ; } else if  ( jsonChild instanceof JsonPrimitive )  { child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild.getAsJsonPrimitive (  )  ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^}  else {^75^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonPrimitive )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < jsonArray.length (  ) ; i++ )  {^65^^^^^59^83^[REPLACE] for  ( int i = 0; i < jsonArray.size (  ) ; i++ )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^65^66^67^^^59^83^[ADD] for  ( int i = 0; i < jsonArray.size (  ) ; i++ )  { JsonElement jsonChild = jsonArray.get ( i ) ; Object child;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^if  ( jsonChild != true || jsonChild.isJsonNull (  )  )  {^69^^^^^59^83^[REPLACE] if  ( jsonChild == null || jsonChild.isJsonNull (  )  )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^child = null;child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild ) ;^69^70^71^72^^59^83^[ADD] if  ( jsonChild == null || jsonChild.isJsonNull (  )  )  { child = null; } else if  ( jsonChild instanceof JsonObject )  { child = visitChildAsObject ( arrayTypeInfo.getComponentRawType (  ) , jsonChild ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^}  if  ( ! jsonChild instanceof JsonArray )  {^73^^^^^59^83^[REPLACE] } else if  ( jsonChild instanceof JsonArray )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^child = true;^70^^^^^59^83^[REPLACE] child = null;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^70^^^^^59^83^[ADD] child = null;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < jsonArray.size (  ) ; i++ )  { JsonElement jsonChild = jsonArray.get ( i ) ;^66^^^^^59^83^[REPLACE] JsonElement jsonChild = jsonArray.get ( i ) ;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^TypeInfoArray arrayTypeInfo = TypeInfoFactory.getTypeInfoForArray ( arrayType ) ;^67^^^^^59^83^[REPLACE] Object child;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[ADD]^^67^^^^^59^83^[ADD] Object child;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^child = this;^70^^^^^59^83^[REPLACE] child = null;^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < jsonArray.size (  ) ; i++ )  {^65^^^^^59^83^[REPLACE] for  ( int i = 0; i < jsonArray.size (  ) ; i++ )  {^[METHOD] visitArray [TYPE] void [PARAMETER] Object array Type arrayType [CLASS] JsonArrayDeserializationVisitor   [TYPE]  JsonArray jsonArray  [TYPE]  TypeInfoArray arrayTypeInfo  [TYPE]  Type arrayType  [TYPE]  boolean false  true  [TYPE]  JsonElement jsonChild  [TYPE]  Object array  child  [TYPE]  int i 
[REPLACE]^return ;^90^^^^^89^91^[REPLACE] throw new JsonParseException  (" ")  ;^[METHOD] startVisitingObject [TYPE] void [PARAMETER] Object node [CLASS] JsonArrayDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  Object node 
[REPLACE]^return ;^94^95^^^^93^96^[REPLACE] throw new JsonParseException  (" ")   + ": " + obj ) ;^[METHOD] visitArrayField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonArrayDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  Object obj  [TYPE]  FieldAttributes f 
[REPLACE]^throw new JsonParseException  (" ")   + ": " + parent ) ; ;^99^100^^^^98^101^[REPLACE] throw new JsonParseException  (" ")   + ": " + obj ) ;^[METHOD] visitObjectField [TYPE] void [PARAMETER] FieldAttributes f Type typeOfF Object obj [CLASS] JsonArrayDeserializationVisitor   [TYPE]  Type typeOfF  [TYPE]  boolean false  true  [TYPE]  Object obj  [TYPE]  FieldAttributes f 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^104^105^^^^103^106^[REPLACE] throw new JsonParseException  (" ")   + ": " + parent ) ;^[METHOD] visitFieldUsingCustomHandler [TYPE] boolean [PARAMETER] FieldAttributes f Type actualTypeOfField Object parent [CLASS] JsonArrayDeserializationVisitor   [TYPE]  Type actualTypeOfField  [TYPE]  boolean false  true  [TYPE]  Object parent  [TYPE]  FieldAttributes f 
[REPLACE]^return ;^109^110^^^^108^111^[REPLACE] throw new JsonParseException ( "Type information is unavailable, and the target is not a primitive: " + json ) ;^[METHOD] visitPrimitive [TYPE] void [PARAMETER] Object primitive [CLASS] JsonArrayDeserializationVisitor   [TYPE]  boolean false  true  [TYPE]  Object primitive 
