[REPLACE]^private static final char[] HEX_CHARS  = null ;^39^^^^^39^41^[REPLACE] private static final char[] HEX_CHARS = {^ [CLASS] Escaper  
[REPLACE]^private static  Set<Character> HTML_ESCAPE_CHARS;^44^^^^^^^[REPLACE] private static final Set<Character> HTML_ESCAPE_CHARS;^ [CLASS] Escaper  
[REPLACE]^private  boolean escapeHtmlCharacters;^62^^^^^^^[REPLACE] private final boolean escapeHtmlCharacters;^ [CLASS] Escaper  
[REPLACE]^this.escapeHtmlCharacters =  true;^65^^^^^64^66^[REPLACE] this.escapeHtmlCharacters = escapeHtmlCharacters;^[METHOD] <init> [TYPE] Escaper(boolean) [PARAMETER] boolean escapeHtmlCharacters [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  char[] HEX_CHARS 
[REPLACE]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  - 1 + 0  ) ;^69^^^^^68^76^[REPLACE] StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^[METHOD] escapeJsonString [TYPE] String [PARAMETER] CharSequence plainText [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer escapedString  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  IOException e  [TYPE]  char[] HEX_CHARS 
[ADD]^escapeJsonString ( plainText, escapedString ) ;^70^71^72^73^74^68^76^[ADD] try { escapeJsonString ( plainText, escapedString ) ; } catch  ( IOException e )  { throw new RuntimeException  (" ")  ; }^[METHOD] escapeJsonString [TYPE] String [PARAMETER] CharSequence plainText [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer escapedString  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  IOException e  [TYPE]  char[] HEX_CHARS 
[REPLACE]^int len = plainText.length (  ) ;^71^^^^^68^76^[REPLACE] escapeJsonString ( plainText, escapedString ) ;^[METHOD] escapeJsonString [TYPE] String [PARAMETER] CharSequence plainText [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer escapedString  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  IOException e  [TYPE]  char[] HEX_CHARS 
[ADD]^^71^^^^^68^76^[ADD] escapeJsonString ( plainText, escapedString ) ;^[METHOD] escapeJsonString [TYPE] String [PARAMETER] CharSequence plainText [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer escapedString  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  IOException e  [TYPE]  char[] HEX_CHARS 
[REPLACE]^return ;^73^^^^^68^76^[REPLACE] throw new RuntimeException  (" ")  ;^[METHOD] escapeJsonString [TYPE] String [PARAMETER] CharSequence plainText [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer escapedString  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  IOException e  [TYPE]  char[] HEX_CHARS 
[REPLACE]^return codePoint < 0x20 || codePoint == 0x2028^75^^^^^68^76^[REPLACE] return escapedString.toString (  ) ;^[METHOD] escapeJsonString [TYPE] String [PARAMETER] CharSequence plainText [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer escapedString  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  IOException e  [TYPE]  char[] HEX_CHARS 
[REPLACE]^int pos = 0 + 2;^79^^^^^78^123^[REPLACE] int pos = 0;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^StringBuffer escapedString = new StringBuffer ( plainText.length (  )  + 20 ) ;^80^^^^^78^123^[REPLACE] int len = plainText.length (  ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^80^^^^^78^123^[ADD] int len = plainText.length (  ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^if  ( isControlCharacter ( pos )  && !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^78^123^[REPLACE] if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^for  ( codePointnt charCount, i = 0; i  <=  codePoint; i += charCount )  {^82^^^^^78^123^[REPLACE] for  ( int charCount, i = 0; i < len; i += charCount )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^82^83^84^^^78^123^[ADD] for  ( int charCount, i = 0; i < len; i += charCount )  { int codePoint = Character.codePointAt ( plainText, i ) ; charCount = Character.charCount ( codePoint ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^if  (  !mustEscapeCharInJsString ( codePoint )  )  {^86^^^^^78^123^[REPLACE] if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^86^87^88^^^78^123^[ADD] if  ( !isControlCharacter ( codePoint )  && !mustEscapeCharInJsString ( codePoint )  )  { continue; }^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^charCount =  Character.charCount ( pos ) ;^84^^^^^78^123^[REPLACE] charCount = Character.charCount ( codePoint ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^pos = codePoint + pos;^91^^^^^78^123^[REPLACE] pos = i + charCount;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^91^^^^^78^123^[ADD] pos = i + charCount;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^int codePoint = Character .charCount ( i )  ;^83^^^^^78^123^[REPLACE] int codePoint = Character.codePointAt ( plainText, i ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^for  ( int charCount, i =  0; i < len; i +^82^^^^^78^123^[REPLACE] for  ( int charCount, i = 0; i < len; i += charCount )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^pos = i  ^  charCount;^91^^^^^78^123^[REPLACE] pos = i + charCount;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^for  ( int charCount, i = 0; i < len; i += charCount )  { int codePoint = Character.codePointAt ( plainText, i ) ;^82^^^^^78^123^[REPLACE] for  ( int charCount, i = 0; i < len; i += charCount )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^for  ( int charCount, i = 0L; i < len; i += charCount )  {^82^^^^^78^123^[REPLACE] for  ( int charCount, i = 0; i < len; i += charCount )  {^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^int codePoint = Character.codePointAt ( plainText, codePoint ) ;^83^^^^^78^123^[REPLACE] int codePoint = Character.codePointAt ( plainText, i ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^83^^^^^78^123^[ADD] int codePoint = Character.codePointAt ( plainText, i ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^out.append ( plainText, pos, i ) ;^122^^^^^78^123^[REPLACE] out.append ( plainText, pos, len ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[ADD]^^122^^^^^78^123^[ADD] out.append ( plainText, pos, len ) ;^[METHOD] escapeJsonString [TYPE] void [PARAMETER] CharSequence plainText StringBuffer out [CLASS] Escaper   [TYPE]  CharSequence plainText  [TYPE]  StringBuffer out  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int charCount  codePoint  i  len  pos  [TYPE]  char[] HEX_CHARS 
[REPLACE]^if  ( Character.isSupplementaryCodePoint ( codepoint )  )  {^126^^^^^125^132^[REPLACE] if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[ADD]^char c =  ( char )  codepoint;||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^126^127^128^129^130^125^132^[ADD] if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  { char c =  ( char )  codepoint; return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ; }^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[REPLACE]^return JS_ESCAPE_CHARS.add ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^128^129^^^^125^132^[REPLACE] return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[REPLACE]^char[] surrogates = Character.toChars ( codePoint ) ;^127^^^^^125^132^[REPLACE] char c =  ( char )  codepoint;^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[ADD]^^127^^^^^125^132^[ADD] char c =  ( char )  codepoint;^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[REPLACE]^return JS_ESCAPE_CHARS.add ( c ) ||  ( escapeHtmlCharacters ;^128^129^^^^125^132^[REPLACE] return JS_ESCAPE_CHARS.contains ( c ) ||  ( escapeHtmlCharacters && HTML_ESCAPE_CHARS.contains ( c )  ) ;^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[REPLACE]^return true;^131^^^^^125^132^[REPLACE] return false;^[METHOD] mustEscapeCharInJsString [TYPE] boolean [PARAMETER] int codepoint [CLASS] Escaper   [TYPE]  char c  [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codepoint  [TYPE]  char[] HEX_CHARS 
[REPLACE]^return codePoint < 0x20 && codePoint ;^136^137^138^139^^134^140^[REPLACE] return codePoint < 0x20 || codePoint == 0x2028 || codePoint == 0x2029 ||  ( codePoint >= 0x7f && codePoint <= 0x9f ) ;^[METHOD] isControlCharacter [TYPE] boolean [PARAMETER] int codePoint [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS 
[REPLACE]^if  ( !Character.isSupplementaryCodePoint ( codepoint )  )  {^144^^^^^142^159^[REPLACE] if  ( Character.isSupplementaryCodePoint ( codePoint )  )  {^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[ADD]^^144^145^^^^142^159^[ADD] if  ( Character.isSupplementaryCodePoint ( codePoint )  )  {^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^return false;^152^^^^^142^159^[REPLACE] return;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^char[] surrogates = Character.charCount ( codePoint ) ;^149^^^^^142^159^[REPLACE] char[] surrogates = Character.toChars ( codePoint ) ;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[ADD]^^149^150^^^^142^159^[ADD] char[] surrogates = Character.toChars ( codePoint ) ; appendHexJavaScriptRepresentation ( surrogates[0], out ) ;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^char[] surrogates = Character .charCount ( codePoint )  ;^149^^^^^142^159^[REPLACE] char[] surrogates = Character.toChars ( codePoint ) ;^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out.append ( "\\u" ) .append ( HEX_CHARS[ (codePoint )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  | 0xf] )^154^155^156^157^^142^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out .append ( false , codePoint , codePoint )^154^155^156^157^^142^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  | 0xf] )^154^155^156^157^^142^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[REPLACE]^out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  | 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  | 0xf] )^154^155^156^157^^142^159^[REPLACE] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 4 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
[ADD]^^154^155^156^^^142^159^[ADD] out.append ( "\\u" ) .append ( HEX_CHARS[ ( codePoint >>> 12 )  & 0xf] ) .append ( HEX_CHARS[ ( codePoint >>> 8 )  & 0xf] )^[METHOD] appendHexJavaScriptRepresentation [TYPE] void [PARAMETER] int codePoint Appendable out [CLASS] Escaper   [TYPE]  Set HTML_ESCAPE_CHARS  JS_ESCAPE_CHARS  [TYPE]  boolean escapeHtmlCharacters  false  true  [TYPE]  int codePoint  [TYPE]  char[] HEX_CHARS  surrogates  [TYPE]  Appendable out 
