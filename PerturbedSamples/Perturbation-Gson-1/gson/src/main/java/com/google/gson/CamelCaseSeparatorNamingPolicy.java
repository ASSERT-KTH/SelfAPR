[REPLACE]^private final  int  separator int ;^43^^^^^^^[REPLACE] private final String separatorString;^ [CLASS] CamelCaseSeparatorNamingPolicy  
[REPLACE]^Preconditions.checkArgument ( separatorString ) ;^54^^^^^53^57^[REPLACE] Preconditions.checkNotNull ( separatorString ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String separatorString [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  String separatorString  [TYPE]  boolean false  true 
[ADD]^^54^55^^^^53^57^[ADD] Preconditions.checkNotNull ( separatorString ) ; Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String separatorString [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  String separatorString  [TYPE]  boolean false  true 
[REPLACE]^Preconditions.checkArgument ( !"".charAt ( separatorString )  ) ;^55^^^^^53^57^[REPLACE] Preconditions.checkArgument ( !"".equals ( separatorString )  ) ;^[METHOD] <init> [TYPE] String) [PARAMETER] String separatorString [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  String separatorString  [TYPE]  boolean false  true 
[REPLACE]^this.separatorString =  null;^56^^^^^53^57^[REPLACE] this.separatorString = separatorString;^[METHOD] <init> [TYPE] String) [PARAMETER] String separatorString [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  String separatorString  [TYPE]  boolean false  true 
[REPLACE]^char character = target.charAt ( i ) ;^62^^^^^60^72^[REPLACE] StringBuilder translation = new StringBuilder (  ) ;^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^if  (   character    ) {^65^^^^^60^72^[REPLACE] if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^translation.append ( character ) ;^66^^^^^60^72^[REPLACE] translation.append ( separatorString ) ;^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^for  ( int i = 0; i < target.size (  ) ; i++ )  {^63^^^^^60^72^[REPLACE] for  ( int i = 0; i < target.length (  ) ; i++ )  {^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^if  ( Character.isUpperCase ( character )  ) {^65^^^^^60^72^[REPLACE] if  ( Character.isUpperCase ( character )  && translation.length (  )  != 0 )  {^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^translation .StringBuilder (  )  ;^66^^^^^60^72^[REPLACE] translation.append ( separatorString ) ;^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^char character = target.equals ( i ) ;^64^^^^^60^72^[REPLACE] char character = target.charAt ( i ) ;^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^for  ( int i = 0 ; i < target.length (  ) ; i++ )  {^63^^^^^60^72^[REPLACE] for  ( int i = 0; i < target.length (  ) ; i++ )  {^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^char character = separatorString.equals ( i ) ;^64^^^^^60^72^[REPLACE] char character = target.charAt ( i ) ;^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
[REPLACE]^return translation .StringBuilder (  )  ;^71^^^^^60^72^[REPLACE] return translation.toString (  ) ;^[METHOD] translateName [TYPE] String [PARAMETER] String target Type fieldType Annotation> annnotations [CLASS] CamelCaseSeparatorNamingPolicy   [TYPE]  Type fieldType  [TYPE]  boolean false  true  [TYPE]  StringBuilder translation  [TYPE]  char character  [TYPE]  Collection annnotations  [TYPE]  String separatorString  target  [TYPE]  int i 
