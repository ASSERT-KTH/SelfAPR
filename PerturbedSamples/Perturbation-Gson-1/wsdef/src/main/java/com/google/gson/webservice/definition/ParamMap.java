[REPLACE]^protected final Map<String, Object> contents  = null ;^26^^^^^^^[REPLACE] protected final Map<String, Object> contents = new LinkedHashMap<String, Object> (  ) ;^ [CLASS] ParamMap Builder  
[REPLACE]^protected  T spec;^27^^^^^^^[REPLACE] protected final T spec;^ [CLASS] ParamMap Builder  
[REPLACE]^private final Map<String, Object> contents;^52^^^^^^^[REPLACE] protected final Map<String, Object> contents;^ [CLASS] ParamMap Builder  
[REPLACE]^private final ParamMapSpec spec;^53^^^^^^^[REPLACE] protected final ParamMapSpec spec;^ [CLASS] ParamMap Builder  
[REPLACE]^this.spec =  null;^30^^^^^29^31^[REPLACE] this.spec = spec;^[METHOD] <init> [TYPE] ParamMap$Builder(T [PARAMETER] T spec [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^this.spec =  null;^56^^^^^55^58^[REPLACE] this.spec = spec;^[METHOD] <init> [TYPE] Map) [PARAMETER] ParamMapSpec spec Object> contents [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^this.contents =  1;^57^^^^^55^58^[REPLACE] this.contents = contents;^[METHOD] <init> [TYPE] Map) [PARAMETER] ParamMapSpec spec Object> contents [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[ADD]^^57^^^^^55^58^[ADD] this.contents = contents;^[METHOD] <init> [TYPE] Map) [PARAMETER] ParamMapSpec spec Object> contents [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return put ( paramName, content, content.Object (  )  ) ;^37^^^^^36^38^[REPLACE] return put ( paramName, content, content.getClass (  )  ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content [CLASS] ParamMap Builder   [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^spec.checkIfCompatible ( paramName, typeOfContent )  ;^41^^^^^40^44^[REPLACE] Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] ParamMap Builder   [TYPE]  Type typeOfContent  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^41^^^^^40^44^[REPLACE] Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] ParamMap Builder   [TYPE]  Type typeOfContent  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return put ( paramName, content, content.getClass (  )  ) ;^42^^^^^40^44^[REPLACE] contents.put ( paramName, content ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] ParamMap Builder   [TYPE]  Type typeOfContent  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[ADD]^^42^^^^^40^44^[ADD] contents.put ( paramName, content ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] ParamMap Builder   [TYPE]  Type typeOfContent  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return null;^43^^^^^40^44^[REPLACE] return this;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] ParamMap Builder   [TYPE]  Type typeOfContent  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^contents.put ( paramKey .getClassOfT (  )  , param ) ;^47^^^^^46^49^[REPLACE] contents.put ( paramKey.getName (  ) , param ) ;^[METHOD] put [TYPE] <K> [PARAMETER] TypedKey<K> paramKey K param [CLASS] ParamMap Builder   [TYPE]  K param  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  TypedKey paramKey  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REMOVE]^return put ( paramName, content, content.getClass (  )  ) ;^47^^^^^46^49^[REMOVE] ^[METHOD] put [TYPE] <K> [PARAMETER] TypedKey<K> paramKey K param [CLASS] ParamMap Builder   [TYPE]  K param  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  TypedKey paramKey  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return null;^48^^^^^46^49^[REPLACE] return this;^[METHOD] put [TYPE] <K> [PARAMETER] TypedKey<K> paramKey K param [CLASS] ParamMap Builder   [TYPE]  K param  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  TypedKey paramKey  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return contents.entrySet (  ) ;^61^^^^^60^62^[REPLACE] return spec;^[METHOD] getSpec [TYPE] ParamMapSpec [PARAMETER] [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return put ( paramName, content, content.getClass (  )  ) ;^65^^^^^64^66^[REPLACE] return contents.get ( paramName ) ;^[METHOD] get [TYPE] Object [PARAMETER] String paramName [CLASS] ParamMap Builder   [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return  ( T )  get ( key.getClassOfT (  ) , key.getClassOfT (  )  ) ;^70^^^^^69^71^[REPLACE] return  ( T )  get ( key.getName (  ) , key.getClassOfT (  )  ) ;^[METHOD] get [TYPE] <T> [PARAMETER] TypedKey<T> key [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  TypedKey key  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^spec.checkIfCompatible ( key, typeOfValue )  ;^75^76^^^^74^78^[REPLACE] Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[METHOD] get [TYPE] <T> [PARAMETER] String key Type typeOfValue [CLASS] ParamMap Builder   [TYPE]  Type typeOfValue  [TYPE]  String key  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[ADD]^^75^76^^^^74^78^[ADD] Preconditions.checkArgument ( spec.checkIfCompatible ( key, typeOfValue ) , "Incompatible key %s for type %s", key, typeOfValue ) ;^[METHOD] get [TYPE] <T> [PARAMETER] String key Type typeOfValue [CLASS] ParamMap Builder   [TYPE]  Type typeOfValue  [TYPE]  String key  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return  ( T )  contents.entrySet ( key ) ;^77^^^^^74^78^[REPLACE] return  ( T )  contents.get ( key ) ;^[METHOD] get [TYPE] <T> [PARAMETER] String key Type typeOfValue [CLASS] ParamMap Builder   [TYPE]  Type typeOfValue  [TYPE]  String key  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return spec .checkIfCompatible ( headerName , 0 )  ;^81^^^^^80^82^[REPLACE] return spec.getTypeFor ( headerName ) ;^[METHOD] getSpec [TYPE] Type [PARAMETER] String headerName [CLASS] ParamMap Builder   [TYPE]  String headerName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return contents .get ( null )  ;^85^^^^^84^86^[REPLACE] return contents.entrySet (  ) ;^[METHOD] entrySet [TYPE] Set [PARAMETER] [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return contents.entrySet (  ) ;^89^^^^^88^90^[REPLACE] return contents.size (  ) ;^[METHOD] size [TYPE] int [PARAMETER] [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^return   contents   ;^94^^^^^93^95^[REPLACE] return Util.toStringMap ( contents ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] ParamMap Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^protected final Map<String, Object> contents ;^26^^^^^^^[REPLACE] protected final Map<String, Object> contents = new LinkedHashMap<String, Object> (  ) ;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Builder   [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  ParamMapSpec spec 
[REPLACE]^this.spec =  null;^30^^^^^29^31^[REPLACE] this.spec = spec;^[METHOD] <init> [TYPE] ParamMap$Builder(T [PARAMETER] T spec [CLASS] Builder   [TYPE]  T spec  [TYPE]  Map contents  [TYPE]  boolean false  true 
[REPLACE]^return put ( paramName, content, content.Object (  )  ) ;^37^^^^^36^38^[REPLACE] return put ( paramName, content, content.getClass (  )  ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content [CLASS] Builder   [TYPE]  Object content  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents 
[REPLACE]^spec.checkIfCompatible ( paramName, typeOfContent )  ;^41^^^^^40^44^[REPLACE] Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] Builder   [TYPE]  Object content  [TYPE]  Type typeOfContent  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents 
[REPLACE]^contents.put ( paramName, content ) ;^41^^^^^40^44^[REPLACE] Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] Builder   [TYPE]  Object content  [TYPE]  Type typeOfContent  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents 
[ADD]^contents.put ( paramName, content ) ;^41^42^^^^40^44^[ADD] Preconditions.checkArgument ( spec.checkIfCompatible ( paramName, typeOfContent )  ) ; contents.put ( paramName, content ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] Builder   [TYPE]  Object content  [TYPE]  Type typeOfContent  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents 
[REPLACE]^return put ( paramName, content, content.getClass (  )  ) ;^42^^^^^40^44^[REPLACE] contents.put ( paramName, content ) ;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] Builder   [TYPE]  Object content  [TYPE]  Type typeOfContent  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents 
[REPLACE]^return null;^43^^^^^40^44^[REPLACE] return this;^[METHOD] put [TYPE] ParamMap$Builder [PARAMETER] String paramName Object content Type typeOfContent [CLASS] Builder   [TYPE]  Object content  [TYPE]  Type typeOfContent  [TYPE]  String paramName  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  Map contents 
[REPLACE]^contents.put ( this.getName (  ) , param ) ;^47^^^^^46^49^[REPLACE] contents.put ( paramKey.getName (  ) , param ) ;^[METHOD] put [TYPE] <K> [PARAMETER] TypedKey<K> paramKey K param [CLASS] Builder   [TYPE]  K param  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  TypedKey paramKey  [TYPE]  Map contents 
[REPLACE]^return null;^48^^^^^46^49^[REPLACE] return this;^[METHOD] put [TYPE] <K> [PARAMETER] TypedKey<K> paramKey K param [CLASS] Builder   [TYPE]  K param  [TYPE]  boolean false  true  [TYPE]  T spec  [TYPE]  TypedKey paramKey  [TYPE]  Map contents 
