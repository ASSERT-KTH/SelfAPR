[REPLACE]^return sb.toString (  ) ;^25^^^^^24^26^[REPLACE] return typeOfValue.equals ( expectedType ) ;^[METHOD] isAssignableFrom [TYPE] boolean [PARAMETER] Type typeOfValue Type expectedType [CLASS] Util   [TYPE]  Type expectedType  typeOfValue  [TYPE]  boolean false  true 
[REPLACE]^for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  { if  ( first )  {^29^^^^^28^41^[REPLACE] StringBuilder sb = new StringBuilder ( "[" ) ;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^boolean first = false;^30^^^^^28^41^[REPLACE] boolean first = true;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^if  ( true )  {^32^^^^^28^41^[REPLACE] if  ( first )  {^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[ADD]^first = false;sb.append ( "," ) ;^32^33^34^35^36^28^41^[ADD] if  ( first )  { first = false; } else { sb.append ( "," ) ; }^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^sb .append ( null )  ;^35^^^^^28^41^[REPLACE] sb.append ( "," ) ;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[ADD]^^35^^^^^28^41^[ADD] sb.append ( "," ) ;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^first = true;^33^^^^^28^41^[REPLACE] first = false;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  { if  ( first )  {^31^^^^^28^41^[REPLACE] for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  {^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^sb.append ( "," ) ;^39^^^^^28^41^[REPLACE] sb.append ( "]" ) ;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^return typeOfValue.equals ( expectedType ) ;^40^^^^^28^41^[REPLACE] return sb.toString (  ) ;^[METHOD] toStringMapKeys [TYPE] String [PARAMETER] String, ?> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  { if  ( first )  {^44^^^^^43^58^[REPLACE] StringBuilder sb = new StringBuilder ( "[" ) ;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^boolean first = false;^45^^^^^43^58^[REPLACE] boolean first = true;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^if  ( true )  {^47^^^^^43^58^[REPLACE] if  ( first )  {^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^sb .append ( null )  ;^50^^^^^43^58^[REPLACE] sb.append ( "," ) ;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REMOVE]^return sb.toString (  ) ;^50^^^^^43^58^[REMOVE] ^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^first = true;^48^^^^^43^58^[REPLACE] first = false;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  { if  ( first )  {^46^^^^^43^58^[REPLACE] for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  {^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^Class<?> clazz =  ( Class<?> )  entry.getKey (  ) ;^53^^^^^43^58^[REPLACE] Class<?> clazz =  ( Class<?> )  entry.getValue (  ) ;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^sb.append ( "," ) ;^56^^^^^43^58^[REPLACE] sb.append ( "]" ) ;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REMOVE]^sb.append ( "," ) ;^56^^^^^43^58^[REMOVE] ^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^return typeOfValue.equals ( expectedType ) ;^57^^^^^43^58^[REPLACE] return sb.toString (  ) ;^[METHOD] toStringMapOfTypes [TYPE] String [PARAMETER] Type> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Class clazz  [TYPE]  Map map 
[REPLACE]^for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  { if  ( first )  {^61^^^^^60^73^[REPLACE] StringBuilder sb = new StringBuilder ( "[" ) ;^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^boolean first = false;^62^^^^^60^73^[REPLACE] boolean first = true;^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^if  ( true )  {^64^^^^^60^73^[REPLACE] if  ( first )  {^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[ADD]^first = false;sb.append ( "," ) ;^64^65^66^67^68^60^73^[ADD] if  ( first )  { first = false; } else { sb.append ( "," ) ; }^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^sb.append ( "]" ) ;^67^^^^^60^73^[REPLACE] sb.append ( "," ) ;^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^first = true;^65^^^^^60^73^[REPLACE] first = false;^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  { if  ( first )  {^63^^^^^60^73^[REPLACE] for  ( Map.Entry<String, ?> entry : map.entrySet (  )  )  {^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^sb.append ( "," ) ;^71^^^^^60^73^[REPLACE] sb.append ( "]" ) ;^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
[REPLACE]^return typeOfValue.equals ( expectedType ) ;^72^^^^^60^73^[REPLACE] return sb.toString (  ) ;^[METHOD] toStringMap [TYPE] String [PARAMETER] Object> map [CLASS] Util   [TYPE]  Entry entry  [TYPE]  boolean false  first  true  [TYPE]  StringBuilder sb  [TYPE]  Map map 
