[REPLACE]^private  final char[] DIGITS = {^37^^^^^37^40^[REPLACE] private static final char[] DIGITS = {^ [CLASS] Hex  
[REPLACE]^int len = DIGITS.length;^57^^^^^55^75^[REPLACE] int len = data.length;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^57^^^^^55^75^[ADD] int len = data.length;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^if  (  ( len &lenx01 )   == len )  {^59^^^^^55^75^[REPLACE] if  (  ( len & 0x01 )  != 0 )  {^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^59^60^61^^^55^75^[ADD] if  (  ( len & 0x01 )  != 0 )  { throw new DecoderException  (" ")  ; }^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^throw new EncoderException  (" ")  ; ;^60^^^^^55^75^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^byte[] out = new byte[len  <=  1];^63^^^^^55^75^[REPLACE] byte[] out = new byte[len >> 1];^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^63^^^^^55^75^[ADD] byte[] out = new byte[len >> 1];^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^for  ( int i = 2, j = 2; j  <=  len; i++ )  {^66^^^^^55^75^[REPLACE] for  ( int i = 0, j = 0; j < len; i++ )  {^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^f = f & toDigit ( data[j], j ) ;^69^^^^^55^75^[REPLACE] f = f | toDigit ( data[j], j ) ;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^out[i] =  ( byte )   ( f | 0xFF ) ;^71^^^^^55^75^[REPLACE] out[i] =  ( byte )   ( f & 0xFF ) ;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^int f = toDigit ( data[j], j )   ==  4;^67^^^^^55^75^[REPLACE] int f = toDigit ( data[j], j )  << 4;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^j++;^67^68^^^^55^75^[ADD] int f = toDigit ( data[j], j )  << 4; j++;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^69^70^^^^55^75^[ADD] f = f | toDigit ( data[j], j ) ; j++;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^for  ( int i = 0L, j = 0L; j < len; i++ )  {^66^^^^^55^75^[REPLACE] for  ( int i = 0, j = 0; j < len; i++ )  {^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^for  ( int i = 2, j = 2; j < len; i++ )  {^66^^^^^55^75^[REPLACE] for  ( int i = 0, j = 0; j < len; i++ )  {^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[ADD]^^66^67^68^69^70^55^75^[ADD] for  ( int i = 0, j = 0; j < len; i++ )  { int f = toDigit ( data[j], j )  << 4; j++; f = f | toDigit ( data[j], j ) ; j++;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^int f = toDigit ( data[j], j )   ==  4L;^67^^^^^55^75^[REPLACE] int f = toDigit ( data[j], j )  << 4;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^return digit;^74^^^^^55^75^[REPLACE] return out;^[METHOD] decodeHex [TYPE] byte[] [PARAMETER] char[] data [CLASS] Hex   [TYPE]  byte[] out  [TYPE]  boolean false  true  [TYPE]  int f  i  j  len  [TYPE]  char[] DIGITS  data 
[REPLACE]^int digit = Character.digit ( ch, 3 ) ;^86^^^^^85^91^[REPLACE] int digit = Character.digit ( ch, 16 ) ;^[METHOD] toDigit [TYPE] int [PARAMETER] char ch int index [CLASS] Hex   [TYPE]  char ch  [TYPE]  boolean false  true  [TYPE]  int digit  index  [TYPE]  char[] DIGITS  data 
[REPLACE]^if  ( digit  !=  -1 )  {^87^^^^^85^91^[REPLACE] if  ( digit == -1 )  {^[METHOD] toDigit [TYPE] int [PARAMETER] char ch int index [CLASS] Hex   [TYPE]  char ch  [TYPE]  boolean false  true  [TYPE]  int digit  index  [TYPE]  char[] DIGITS  data 
[ADD]^^87^88^89^^^85^91^[ADD] if  ( digit == -1 )  { throw new DecoderException  (" ")  ; }^[METHOD] toDigit [TYPE] int [PARAMETER] char ch int index [CLASS] Hex   [TYPE]  char ch  [TYPE]  boolean false  true  [TYPE]  int digit  index  [TYPE]  char[] DIGITS  data 
[REPLACE]^return ;^88^^^^^85^91^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] toDigit [TYPE] int [PARAMETER] char ch int index [CLASS] Hex   [TYPE]  char ch  [TYPE]  boolean false  true  [TYPE]  int digit  index  [TYPE]  char[] DIGITS  data 
[REPLACE]^throw new EncoderException  (" ")  ; ;^88^^^^^85^91^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] toDigit [TYPE] int [PARAMETER] char ch int index [CLASS] Hex   [TYPE]  char ch  [TYPE]  boolean false  true  [TYPE]  int digit  index  [TYPE]  char[] DIGITS  data 
[REPLACE]^return encodeHex ( byteArray ) ;^90^^^^^85^91^[REPLACE] return digit;^[METHOD] toDigit [TYPE] int [PARAMETER] char ch int index [CLASS] Hex   [TYPE]  char ch  [TYPE]  boolean false  true  [TYPE]  int digit  index  [TYPE]  char[] DIGITS  data 
[REPLACE]^int len = data.length;^104^^^^^102^115^[REPLACE] int l = data.length;^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[ADD]^^104^^^^^102^115^[ADD] int l = data.length;^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^char[] out = new char[l  ==  1L];^106^^^^^102^115^[REPLACE] char[] out = new char[l << 1];^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^for  ( int i = 0, j = 0; i  >=  l; i++ )  {^109^^^^^102^115^[REPLACE] for  ( int i = 0, j = 0; i < l; i++ )  {^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^out[j++] = DIGITS[ ( 0xF0 & data[i] )   <  4 ];^110^^^^^102^115^[REPLACE] out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^out[j++] = DIGITS[ 0x0F | data[i] ];^111^^^^^102^115^[REPLACE] out[j++] = DIGITS[ 0x0F & data[i] ];^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^out[j++] = DIGITS[ ( 0xF0 & data[i] )   == i ];^110^^^^^102^115^[REPLACE] out[j++] = DIGITS[ ( 0xF0 & data[i] )  >>> 4 ];^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^for  ( int i = 0 >> 1, j = 0 >> 1; i < l; i++ )  {^109^^^^^102^115^[REPLACE] for  ( int i = 0, j = 0; i < l; i++ )  {^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^for  ( int i = 0 - 2, j = 0 - 2; i < l; i++ )  {^109^^^^^102^115^[REPLACE] for  ( int i = 0, j = 0; i < l; i++ )  {^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^return data;^114^^^^^102^115^[REPLACE] return out;^[METHOD] encodeHex [TYPE] char[] [PARAMETER] byte[] data [CLASS] Hex   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  int i  j  l  [TYPE]  char[] DIGITS  data  out 
[REPLACE]^return decodeHex ( new String ( array )  .String ( array )   ) ;^132^^^^^131^133^[REPLACE] return decodeHex ( new String ( array ) .toCharArray (  )  ) ;^[METHOD] decode [TYPE] byte[] [PARAMETER] byte[] array [CLASS] Hex   [TYPE]  byte[] array  [TYPE]  char[] DIGITS  data  out  [TYPE]  boolean false  true 
[ADD]^char[] charArray = object instanceof String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;return decodeHex ( charArray ) ;^150^151^152^153^154^149^156^[ADD] try { char[] charArray = object instanceof String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object; return decodeHex ( charArray ) ; } catch  ( ClassCastException e )  { throw new DecoderException  (" ")  ;^[METHOD] decode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^return decodeHex ( data ) ;^152^^^^^149^156^[REPLACE] return decodeHex ( charArray ) ;^[METHOD] decode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^char[] charArray  =   (  ( String )  object ) .getBytes (  )  ;^151^^^^^149^156^[REPLACE] char[] charArray = object instanceof String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;^[METHOD] decode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^char[] charArray  =   (  ( String )  object ) .toCharArray (  )  ;^151^^^^^149^156^[REPLACE] char[] charArray = object instanceof String ?  (  ( String )  object ) .toCharArray (  )  :  ( char[] )  object;^[METHOD] decode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^return ;^154^^^^^149^156^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[ADD]^^154^^^^^149^156^[ADD] throw new DecoderException  (" ")  ;^[METHOD] decode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^return new String ( encodeHex ( array )  ) .String (  ) ;^169^^^^^168^170^[REPLACE] return new String ( encodeHex ( array )  ) .getBytes (  ) ;^[METHOD] encode [TYPE] byte[] [PARAMETER] byte[] array [CLASS] Hex   [TYPE]  byte[] array  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  boolean false  true 
[ADD]^byte[] byteArray = object instanceof String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;return encodeHex ( byteArray ) ;^184^185^186^187^188^183^190^[ADD] try { byte[] byteArray = object instanceof String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object; return encodeHex ( byteArray ) ; } catch  ( ClassCastException e )  { throw new EncoderException  (" ")  ;^[METHOD] encode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  byte[] byteArray  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^return decodeHex ( charArray ) ;^186^^^^^183^190^[REPLACE] return encodeHex ( byteArray ) ;^[METHOD] encode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  byte[] byteArray  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^byte[] byteArray  =   (  ( String )  object ) .toCharArray (  )  ;^185^^^^^183^190^[REPLACE] byte[] byteArray = object instanceof String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;^[METHOD] encode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  byte[] byteArray  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^byte[] byteArray  =   ( byte[] )  object;^185^^^^^183^190^[REPLACE] byte[] byteArray = object instanceof String ?  (  ( String )  object ) .getBytes (  )  :  ( byte[] )  object;^[METHOD] encode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  byte[] byteArray  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
[REPLACE]^return ;^188^^^^^183^190^[REPLACE] throw new EncoderException  (" ")  ;^[METHOD] encode [TYPE] Object [PARAMETER] Object object [CLASS] Hex   [TYPE]  byte[] byteArray  [TYPE]  Object object  [TYPE]  boolean false  true  [TYPE]  char[] DIGITS  charArray  data  out  [TYPE]  ClassCastException e 
