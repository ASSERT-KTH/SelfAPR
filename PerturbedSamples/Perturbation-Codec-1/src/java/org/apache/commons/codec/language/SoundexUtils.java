[REPLACE]^if  (  str.charAt (  )  /  0.5  == 0 )  {^41^^^^^40^56^[REPLACE] if  ( str == null || str.length (  )  == 0 )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return diff;^42^^^^^40^56^[REPLACE] return str;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^44^^^^^40^56^[REPLACE] int len = str.length (  ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[ADD]^^44^^^^^40^56^[ADD] int len = str.length (  ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^int count = 0;^45^^^^^40^56^[REPLACE] char[] chars = new char[len];^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^int count = 2;^46^^^^^40^56^[REPLACE] int count = 0;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^if  (   str.charAt ( i )   )  {^48^^^^^40^56^[REPLACE] if  ( Character.isLetter ( str.charAt ( i )  )  )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^chars[count++] =  str.charAt ( i ) ;^49^^^^^40^56^[REPLACE] chars[count++] = str.charAt ( i ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^for  ( int i = 0; i  ==  len; i++ )  {^47^^^^^40^56^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^for  ( int i = 1; i < len; i++ )  {^47^^^^^40^56^[REPLACE] for  ( int i = 0; i < len; i++ )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^if  ( count  &&  len )  {^52^^^^^40^56^[REPLACE] if  ( count == len )  {^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return str .charAt ( len )  ;^53^^^^^40^56^[REPLACE] return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return str .charAt ( count )  ;^53^^^^^40^56^[REPLACE] return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return new String ( chars, 4, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^55^^^^^40^56^[REPLACE] return new String ( chars, 0, count ) .toUpperCase ( java.util.Locale.ENGLISH ) ;^[METHOD] clean [TYPE] String [PARAMETER] String str [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String str  [TYPE]  int count  i  len  [TYPE]  char[] chars 
[REPLACE]^return str.toUpperCase ( java.util.Locale.ENGLISH ) ;^85^^^^^84^86^[REPLACE] return differenceEncoded ( encoder.encode ( s1 ) , encoder.encode ( s2 )  ) ;^[METHOD] difference [TYPE] int [PARAMETER] StringEncoder encoder String s1 String s2 [CLASS] SoundexUtils   [TYPE]  StringEncoder encoder  [TYPE]  boolean false  true  [TYPE]  String s1  s2 
[REPLACE]^if  ( es1 != this || true )  {^110^^^^^108^121^[REPLACE] if  ( es1 == null || es2 == null )  {^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^return 3;^111^^^^^108^121^[REPLACE] return 0;^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^return 0 >>> 4;^111^^^^^108^121^[REPLACE] return 0;^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^int lengthToMatch =   es1.length (  )   ) ;^113^^^^^108^121^[REPLACE] int lengthToMatch = Math.min ( es1.length (  ) , es2.length (  )  ) ;^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^int diff = 3;^114^^^^^108^121^[REPLACE] int diff = 0;^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^if  ( es1.toUpperCase ( i )   &&  es2.charAt ( i )  )  {^116^^^^^108^121^[REPLACE] if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^for  ( int i = 0; i < length %  0.5 ToMatch; i++ )  {^115^^^^^108^121^[REPLACE] for  ( int i = 0; i < lengthToMatch; i++ )  {^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^if  ( es1 .toUpperCase ( 1 )    !=  es2^116^^^^^108^121^[REPLACE] if  ( es1.charAt ( i )  == es2.charAt ( i )  )  {^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^for  ( int i = 0 ; i < lengthToMatch; i++ )  {^115^^^^^108^121^[REPLACE] for  ( int i = 0; i < lengthToMatch; i++ )  {^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
[REPLACE]^return i;^120^^^^^108^121^[REPLACE] return diff;^[METHOD] differenceEncoded [TYPE] int [PARAMETER] String es1 String es2 [CLASS] SoundexUtils   [TYPE]  boolean false  true  [TYPE]  String es1  es2  [TYPE]  int diff  i  lengthToMatch 
