[REPLACE]^if  ( text != false )  {^69^^^^^66^82^[REPLACE] if  ( text == null )  {^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^return false;^70^^^^^66^82^[REPLACE] return null;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^String charset = text.substring ( from, to ) ;^72^^^^^66^82^[REPLACE] StringBuffer buffer = new StringBuffer (  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer .toString (  )  ;^73^^^^^66^82^[REPLACE] buffer.append ( "=?" ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer.append ( text ) ;^74^^^^^66^82^[REPLACE] buffer.append ( charset ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer.append ( "=?" ) ;^75^^^^^66^82^[REPLACE] buffer.append ( '?' ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[ADD]^^75^76^^^^66^82^[ADD] buffer.append ( '?' ) ; buffer.append ( getEncoding (  )  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer.append ( charset ) ;^76^^^^^66^82^[REPLACE] buffer.append ( getEncoding (  )  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer.append ( "=?" ) ;^77^^^^^66^82^[REPLACE] buffer.append ( '?' ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^byte [] rawdata = doEncoding ( text.endsWith ( charset )  ) ;^78^^^^^66^82^[REPLACE] byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[ADD]^^78^^^^^66^82^[ADD] byte [] rawdata = doEncoding ( text.getBytes ( charset )  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer .toString (  )  ;^79^^^^^66^82^[REPLACE] buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[ADD]^^79^^^^^66^82^[ADD] buffer.append ( new String ( rawdata, CharacterEncodingNames.US_ASCII )  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^buffer.append ( "=?" ) ;^80^^^^^66^82^[REPLACE] buffer.append ( "?=" ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[ADD]^return buffer.toString (  ) ;^80^81^^^^66^82^[ADD] buffer.append ( "?=" ) ; return buffer.toString (  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^return buffer.StringBuffer (  ) ;^81^^^^^66^82^[REPLACE] return buffer.toString (  ) ;^[METHOD] encodeText [TYPE] String [PARAMETER] String text String charset [CLASS] RFC1522Codec   [TYPE]  byte[] rawdata  [TYPE]  StringBuffer buffer  [TYPE]  boolean false  true  [TYPE]  String charset  text 
[REPLACE]^if  (charset != false )  {^100^^^^^99^131^[REPLACE] if  ( text == null )  {^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return false;^101^^^^^99^131^[REPLACE] return null;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^if  (  ( text.startsWith ( "=?" )  )  ) {^103^^^^^99^131^[REPLACE] if  (  ( !text.startsWith ( "=?" )  )  ||  ( !text.endsWith ( "?=" )  )  )  {^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return ;^104^^^^^99^131^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^int termnator = text.length (  )  /  0.5  - 2;^106^^^^^99^131^[REPLACE] int termnator = text.length (  )  - 2;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^int from = 1;^107^^^^^99^131^[REPLACE] int from = 2;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^int to = text.indexOf ( "?", to ) ;^108^^^^^99^131^[REPLACE] int to = text.indexOf ( "?", from ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^if  (  (true )  ) {^109^^^^^99^131^[REPLACE] if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return ;^110^^^^^99^131^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^String charset = charset.substring ( from, to ) ;^112^^^^^99^131^[REPLACE] String charset = text.substring ( from, to ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^if  ( text.getBytes ( "" )  )  {^113^^^^^99^131^[REPLACE] if  ( charset.equals ( "" )  )  {^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return ;^114^^^^^99^131^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[ADD]^^114^^^^^99^131^[ADD] throw new DecoderException  (" ")  ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^from = to +termnator;^116^^^^^99^131^[REPLACE] from = to + 1;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^to =  charset.indexOf ( "?", from ) ;^117^^^^^99^131^[REPLACE] to = text.indexOf ( "?", from ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^if  (   (true )  )  {^118^^^^^99^131^[REPLACE] if  (  ( to == -1 )  ||  ( to == termnator )  )  {^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return ;^119^^^^^99^131^[REPLACE] throw new DecoderException  (" ")  ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^String encoding = charset.indexOf ( from, to ) ;^121^^^^^99^131^[REPLACE] String encoding = text.substring ( from, to ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^if  ( getEncoding (  ) .equalsIgnoreCase ( encoding )  )  {^122^^^^^99^131^[REPLACE] if  ( !getEncoding (  ) .equalsIgnoreCase ( encoding )  )  {^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return ;^123^124^^^^99^131^[REPLACE] throw new DecoderException ( "This codec cannot decode " + encoding + " encoded content" ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^from = to  &&  1;^126^^^^^99^131^[REPLACE] from = to + 1;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^to =  charset.indexOf ( "?", from ) ;^127^^^^^99^131^[REPLACE] to = text.indexOf ( "?", from ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^byte[] data = text.indexOf ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^128^^^^^99^131^[REPLACE] byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[ADD]^^128^129^^^^99^131^[ADD] byte[] data = text.substring ( from, to ) .getBytes ( CharacterEncodingNames.US_ASCII ) ; data = doDecoding ( data ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^data =  doDecoding ( null ) ;^129^^^^^99^131^[REPLACE] data = doDecoding ( data ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
[REPLACE]^return buffer.toString (  ) ;^130^^^^^99^131^[REPLACE] return new String ( data, charset ) ;^[METHOD] decodeText [TYPE] String [PARAMETER] String text [CLASS] RFC1522Codec   [TYPE]  byte[] data  [TYPE]  boolean false  true  [TYPE]  String charset  encoding  text  [TYPE]  int from  termnator  to 
