[REPLACE]^final static EnumTypeLocator instance ;^619^^^^^^^[REPLACE] final static EnumTypeLocator instance = new EnumTypeLocator (  ) ;^ [CLASS] ClassUtil EnumTypeLocator  
[REPLACE]^private  Field enumSetTypeField;^621^^^^^^^[REPLACE] private final Field enumSetTypeField;^ [CLASS] ClassUtil EnumTypeLocator  
[REPLACE]^enumMapTypeField = locateField ( EnumMap.class, "elementType", Class.class ) ; ;^628^^^^^624^630^[REPLACE] enumSetTypeField = locateField ( EnumSet.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[REPLACE]^enumSetTypeField = locateField ( EnumSet.class, "elementType", Class.class ) ; ;^629^^^^^624^630^[REPLACE] enumMapTypeField = locateField ( EnumMap.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[ADD]^^629^^^^^624^630^[ADD] enumMapTypeField = locateField ( EnumMap.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[REPLACE]^return findSuperTypes ( cls, endBefore, new ArrayList<Class<?>> ( 0 )  ) ;^30^^^^^28^31^[REPLACE] return findSuperTypes ( cls, endBefore, new ArrayList<Class<?>> ( 8 )  ) ;^[METHOD] findSuperTypes [TYPE] List [PARAMETER] Class<?> cls Class<?> endBefore [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  endBefore  [TYPE]  boolean false  true 
[REPLACE]^_addSuperTypes ( cls, endBefore, false, true ) ;^35^^^^^33^37^[REPLACE] _addSuperTypes ( cls, endBefore, result, false ) ;^[METHOD] findSuperTypes [TYPE] List [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  endBefore  [TYPE]  List result  [TYPE]  boolean false  true 
[REPLACE]^return null;^36^^^^^33^37^[REPLACE] return result;^[METHOD] findSuperTypes [TYPE] List [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  endBefore  [TYPE]  List result  [TYPE]  boolean false  true 
[REPLACE]^if  ( cls != endBefore ) {^41^^^^^39^54^[REPLACE] if  ( cls == endBefore || cls == null || cls == Object.class )  {^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^return "primitive";^42^^^^^39^54^[REPLACE] return;^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^if  ( true )  {^44^^^^^39^54^[REPLACE] if  ( addClassItself )  {^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^if  ( result.contains ( false )  )  {^45^^^^^39^54^[REPLACE] if  ( result.contains ( cls )  )  {^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^return "primitive";^46^^^^^39^54^[REPLACE] return;^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^if  ( result.contains ( null )  )  {^45^^^^^39^54^[REPLACE] if  ( result.contains ( cls )  )  {^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[ADD]^^45^46^47^^^39^54^[ADD] if  ( result.contains ( cls )  )  { return; }^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^for  ( Class<?> intCls : cls.getInterfaces (  )  )  { _addSuperTypes ( intCls, endBefore, result, true ) ;^50^^^^^39^54^[REPLACE] for  ( Class<?> intCls : cls.getInterfaces (  )  )  {^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^_addSuperTypes ( cls.getSuperclass (  ) , endBefore, result, false ) ;^53^^^^^39^54^[REPLACE] _addSuperTypes ( cls.getSuperclass (  ) , endBefore, result, true ) ;^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[ADD]^^53^54^^^^39^54^[ADD] _addSuperTypes ( cls.getSuperclass (  ) , endBefore, result, true ) ; }^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^_addSuperTypes ( null.getSuperclass (  ) , endBefore, result, true ) ;^53^^^^^39^54^[REPLACE] _addSuperTypes ( cls.getSuperclass (  ) , endBefore, result, true ) ;^[METHOD] _addSuperTypes [TYPE] void [PARAMETER] Class<?> cls Class<?> endBefore Class<?>> result boolean addClassItself [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Collection result  [TYPE]  Class cls  endBefore  intCls  [TYPE]  boolean addClassItself  false  true 
[REPLACE]^if  ( false.isAnnotation (  )  )  {^69^^^^^66^84^[REPLACE] if  ( type.isAnnotation (  )  )  {^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^70^^^^^66^84^[REPLACE] return "annotation";^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( this.isArray (  )  )  {^72^^^^^66^84^[REPLACE] if  ( type.isArray (  )  )  {^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^73^^^^^66^84^[REPLACE] return "array";^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( 1.isEnum (  )  )  {^75^^^^^66^84^[REPLACE] if  ( type.isEnum (  )  )  {^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REMOVE]^if  ( type.isArray (  )  )  {     return "array"; }^75^^^^^66^84^[REMOVE] ^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^76^^^^^66^84^[REPLACE] return "enum";^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( null .isAnnotation (  )   )  {^78^^^^^66^84^[REPLACE] if  ( type.isPrimitive (  )  )  {^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REMOVE]^if  ( type.isArray (  )  )  {     return "array"; }^78^^^^^66^84^[REMOVE] ^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^return Float.class;^79^^^^^66^84^[REPLACE] return "primitive";^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^return true;^83^^^^^66^84^[REPLACE] return null;^[METHOD] canBeABeanType [TYPE] String [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( this (  )  == null )  {^94^^^^^87^113^[REPLACE] if  ( type.getEnclosingMethod (  )  != null )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^return  ( Class<? extends Enum<?>> )  ec;^95^^^^^87^113^[REPLACE] return "local/anonymous";^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( allowNonStatic )  {^102^^^^^87^113^[REPLACE] if  ( !allowNonStatic )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[ADD]^^102^103^104^105^106^87^113^[ADD] if  ( !allowNonStatic )  { if  ( type.getEnclosingClass (  )  != null )  { if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  { return "non-static member class"; }^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( type .getEnclosingMethod (  )   == null )  {^103^^^^^87^113^[REPLACE] if  ( type.getEnclosingClass (  )  != null )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( this.getModifiers (  )  )  )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^return Short.valueOf (  ( short )  0 ) ;^105^^^^^87^113^[REPLACE] return "non-static member class";^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( true.getModifiers (  )  )  )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( type.getEnclosingClass (  )  == this )  {^103^^^^^87^113^[REPLACE] if  ( type.getEnclosingClass (  )  != null )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[ADD]^^103^104^105^106^^87^113^[ADD] if  ( type.getEnclosingClass (  )  != null )  { if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  { return "non-static member class"; }^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( 0.getModifiers (  )  )  )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( false.getModifiers (  )  )  )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[ADD]^return "local/anonymous";^92^93^94^95^96^87^113^[ADD] try {  if  ( type.getEnclosingMethod (  )  != null )  { return "local/anonymous"; }^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( type.getEnclosingMethod (  )  == null )  {^94^^^^^87^113^[REPLACE] if  ( type.getEnclosingMethod (  )  != null )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( null.getEnclosingClass (  )  == false )  {^103^^^^^87^113^[REPLACE] if  ( type.getEnclosingClass (  )  != null )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( null .getDeclaredFields (  )   )  )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier .isPublic ( null )   )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( type .getDeclaredFields (  )   )  )  {^104^^^^^87^113^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[ADD]^^110^111^112^^^87^113^[ADD] catch  ( SecurityException e )  { } catch  ( NullPointerException e )  { } return null;^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^return false;^112^^^^^87^113^[REPLACE] return null;^[METHOD] isLocalType [TYPE] String [PARAMETER] Class<?> type boolean allowNonStatic [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean allowNonStatic  false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( type.forName (  )  == null )  {^123^^^^^118^132^[REPLACE] if  ( type.getEnclosingMethod (  )  != null )  {^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return false;^124^^^^^118^132^[REPLACE] return null;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isStatic ( 0 .getDeclaredFields (  )   )  )  {^126^^^^^118^132^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[ADD]^return type.getEnclosingClass (  ) ;^126^127^128^^^118^132^[ADD] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  { return type.getEnclosingClass (  ) ; }^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return type .getEnclosingMethod (  )  ;^127^^^^^118^132^[REPLACE] return type.getEnclosingClass (  ) ;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[ADD]^return null;^121^122^123^124^125^118^132^[ADD] try {  if  ( type.getEnclosingMethod (  )  != null )  { return null; }^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return true;^124^^^^^118^132^[REPLACE] return null;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^if  ( !Modifier.isPublic ( type.getModifiers (  )  )  )  {^126^^^^^118^132^[REPLACE] if  ( !Modifier.isStatic ( type.getModifiers (  )  )  )  {^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return null.getEnclosingMethod (  ) ;^127^^^^^118^132^[REPLACE] return type.getEnclosingClass (  ) ;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return null .getEnclosingMethod (  )  ;^127^^^^^118^132^[REPLACE] return type.getEnclosingClass (  ) ;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return type.getEnclosingMethod (  ) ;^127^^^^^118^132^[REPLACE] return type.getEnclosingClass (  ) ;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^return this;^131^^^^^118^132^[REPLACE] return null;^[METHOD] getOuterClass [TYPE] Class [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  SecurityException e  [TYPE]  boolean false  true  [TYPE]  NullPointerException e 
[REPLACE]^String name = this.getName (  ) ;^149^^^^^140^157^[REPLACE] String name = type.getName (  ) ;^[METHOD] isProxyType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^if  ( name.startsWith ( "net.sf.cglib.proxy." ) && name.startsWith ( "org.hibernate.proxy." )  )  {^151^152^^^^140^157^[REPLACE] if  ( name.startsWith ( "net.sf.cglib.proxy." ) || name.startsWith ( "org.hibernate.proxy." )  )  {^[METHOD] isProxyType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  String name  [TYPE]  boolean false  true 
[ADD]^^151^152^153^154^^140^157^[ADD] if  ( name.startsWith ( "net.sf.cglib.proxy." ) || name.startsWith ( "org.hibernate.proxy." )  )  { return true; }^[METHOD] isProxyType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return false;^153^^^^^140^157^[REPLACE] return true;^[METHOD] isProxyType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return true;^156^^^^^140^157^[REPLACE] return false;^[METHOD] isProxyType [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^int mod = null.getInterfaces (  ) ;^165^^^^^163^167^[REPLACE] int mod = type.getModifiers (  ) ;^[METHOD] isConcrete [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true  [TYPE]  int mod 
[ADD]^return  ( mod &  ( Modifier.INTERFACE | Modifier.ABSTRACT )  )  == 0;^165^166^167^^^163^167^[ADD] int mod = type.getModifiers (  ) ; return  ( mod &  ( Modifier.INTERFACE | Modifier.ABSTRACT )  )  == 0; }^[METHOD] isConcrete [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true  [TYPE]  int mod 
[REPLACE]^return  ( mod &  ( Modifier.INTERFACE | Modifier.ABSTRACT )  )   !=  0;;^166^^^^^163^167^[REPLACE] return  ( mod &  ( Modifier.INTERFACE | Modifier.ABSTRACT )  )  == 0;^[METHOD] isConcrete [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true  [TYPE]  int mod 
[REPLACE]^int mod = member.getDeclaringClass (  ) ;^171^^^^^169^173^[REPLACE] int mod = member.getModifiers (  ) ;^[METHOD] isConcrete [TYPE] boolean [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  Member member  [TYPE]  int mod 
[REPLACE]^return  ( mod &  ( Modifier.INTERFACE | Modifier.ABSTRACT )  )   &&  0;^172^^^^^169^173^[REPLACE] return  ( mod &  ( Modifier.INTERFACE | Modifier.ABSTRACT )  )  == 0;^[METHOD] isConcrete [TYPE] boolean [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  Member member  [TYPE]  int mod 
[REPLACE]^if  ( this.isArray (  )  )  return false;^177^^^^^175^181^[REPLACE] if  ( type.isArray (  )  )  return true;^[METHOD] isCollectionMapOrArray [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( type.isArray (  )  )  return false;^177^^^^^175^181^[REPLACE] if  ( type.isArray (  )  )  return true;^[METHOD] isCollectionMapOrArray [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( Collection.class.getAnnotation ( type )  )  return false;^178^^^^^175^181^[REPLACE] if  ( Collection.class.isAssignableFrom ( type )  )  return true;^[METHOD] isCollectionMapOrArray [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( Map.class.isAssignableFrom ( type )  )  return true;^178^^^^^175^181^[REPLACE] if  ( Collection.class.isAssignableFrom ( type )  )  return true;^[METHOD] isCollectionMapOrArray [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( Map.class.isAssignableFrom ( type )  )  return false;^179^^^^^175^181^[REPLACE] if  ( Map.class.isAssignableFrom ( type )  )  return true;^[METHOD] isCollectionMapOrArray [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^return true;^180^^^^^175^181^[REPLACE] return false;^[METHOD] isCollectionMapOrArray [TYPE] boolean [PARAMETER] Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class type  [TYPE]  boolean false  true 
[REPLACE]^if  ( classOrInstance != null )  {^196^^^^^194^202^[REPLACE] if  ( classOrInstance == null )  {^[METHOD] getClassDescription [TYPE] String [PARAMETER] Object classOrInstance [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Object classOrInstance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^197^^^^^194^202^[REPLACE] return "unknown";^[METHOD] getClassDescription [TYPE] String [PARAMETER] Object classOrInstance [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Object classOrInstance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^Class<?> cls  =  classOrInstance.getClass (  ) ;^199^200^^^^194^202^[REPLACE] Class<?> cls =  ( classOrInstance instanceof Class<?> )  ? ( Class<?> )  classOrInstance : classOrInstance.getClass (  ) ;^[METHOD] getClassDescription [TYPE] String [PARAMETER] Object classOrInstance [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Object classOrInstance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return cls .forName ( this , false , null )  ;^201^^^^^194^202^[REPLACE] return cls.getName (  ) ;^[METHOD] getClassDescription [TYPE] String [PARAMETER] Object classOrInstance [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Object classOrInstance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( className.indexOf ( '.' )   > null )  {^213^^^^^211^246^[REPLACE] if  ( className.indexOf ( '.' )  < 0 )  {^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "int".startsWith ( className )  )  return Integer.TYPE;^214^^^^^211^246^[REPLACE] if  ( "int".equals ( className )  )  return Integer.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^214^^^^^211^246^[REPLACE] if  ( "int".equals ( className )  )  return Integer.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "long" .startsWith ( className )   )  return Long.TYPE;^215^^^^^211^246^[REPLACE] if  ( "long".equals ( className )  )  return Long.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^215^^^^^211^246^[REPLACE] if  ( "long".equals ( className )  )  return Long.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "float".startsWith ( className )  )  return Float.TYPE;^216^^^^^211^246^[REPLACE] if  ( "float".equals ( className )  )  return Float.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^216^^^^^211^246^[REPLACE] if  ( "float".equals ( className )  )  return Float.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "double" .startsWith ( className )   )  return Double.TYPE;^217^^^^^211^246^[REPLACE] if  ( "double".equals ( className )  )  return Double.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "long".equals ( className )  )  return Long.TYPE;^217^^^^^211^246^[REPLACE] if  ( "double".equals ( className )  )  return Double.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "boolean".startsWith ( className )  )  return Boolean.TYPE;^218^^^^^211^246^[REPLACE] if  ( "boolean".equals ( className )  )  return Boolean.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^^218^219^220^221^222^211^246^[ADD] if  ( "boolean".equals ( className )  )  return Boolean.TYPE; if  ( "byte".equals ( className )  )  return Byte.TYPE; if  ( "char".equals ( className )  )  return Character.TYPE; if  ( "short".equals ( className )  )  return Short.TYPE; if  ( "void".equals ( className )  )  return Void.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^218^^^^^211^246^[REPLACE] if  ( "boolean".equals ( className )  )  return Boolean.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "byte".startsWith ( className )  )  return Byte.TYPE;^219^^^^^211^246^[REPLACE] if  ( "byte".equals ( className )  )  return Byte.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^219^^^^^211^246^[REPLACE] if  ( "byte".equals ( className )  )  return Byte.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "char" .startsWith ( className )   )  return Character.TYPE;^220^^^^^211^246^[REPLACE] if  ( "char".equals ( className )  )  return Character.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^220^^^^^211^246^[REPLACE] if  ( "char".equals ( className )  )  return Character.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short" .startsWith ( className )   )  return Short.TYPE;^221^^^^^211^246^[REPLACE] if  ( "short".equals ( className )  )  return Short.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "float".equals ( className )  )  return Float.TYPE;^221^^^^^211^246^[REPLACE] if  ( "short".equals ( className )  )  return Short.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "void".startsWith ( className )  )  return Void.TYPE;^222^^^^^211^246^[REPLACE] if  ( "void".equals ( className )  )  return Void.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^^222^223^^^^211^246^[ADD] if  ( "void".equals ( className )  )  return Void.TYPE; }^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".equals ( className )  )  return Short.TYPE;^222^^^^^211^246^[REPLACE] if  ( "void".equals ( className )  )  return Void.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "float" .startsWith ( className )   )  return Float.TYPE;^216^^^^^211^246^[REPLACE] if  ( "float".equals ( className )  )  return Float.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "double".startsWith ( className )  )  return Double.TYPE;^217^^^^^211^246^[REPLACE] if  ( "double".equals ( className )  )  return Double.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^if  ( "boolean".equals ( className )  )  return Boolean.TYPE;if  ( "byte".equals ( className )  )  return Byte.TYPE;if  ( "char".equals ( className )  )  return Character.TYPE;if  ( "short".equals ( className )  )  return Short.TYPE;^217^218^219^220^221^211^246^[ADD] if  ( "double".equals ( className )  )  return Double.TYPE; if  ( "boolean".equals ( className )  )  return Boolean.TYPE; if  ( "byte".equals ( className )  )  return Byte.TYPE; if  ( "char".equals ( className )  )  return Character.TYPE; if  ( "short".equals ( className )  )  return Short.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "boolean" .startsWith ( className )   )  return Boolean.TYPE;^218^^^^^211^246^[REPLACE] if  ( "boolean".equals ( className )  )  return Boolean.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^if  ( "char".equals ( className )  )  return Character.TYPE;if  ( "short".equals ( className )  )  return Short.TYPE;if  ( "void".equals ( className )  )  return Void.TYPE;^219^220^221^222^223^211^246^[ADD] if  ( "byte".equals ( className )  )  return Byte.TYPE; if  ( "char".equals ( className )  )  return Character.TYPE; if  ( "short".equals ( className )  )  return Short.TYPE; if  ( "void".equals ( className )  )  return Void.TYPE; }^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "char".startsWith ( className )  )  return Character.TYPE;^220^^^^^211^246^[REPLACE] if  ( "char".equals ( className )  )  return Character.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( "short".startsWith ( className )  )  return Short.TYPE;^221^^^^^211^246^[REPLACE] if  ( "short".equals ( className )  )  return Short.TYPE;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^Throwable prob = false;^225^^^^^211^246^[REPLACE] Throwable prob = null;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^^225^^^^^211^246^[ADD] Throwable prob = null;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^ClassLoader loader = Thread.currentThread (  )  .currentThread (  )  ;^226^^^^^211^246^[REPLACE] ClassLoader loader = Thread.currentThread (  ) .getContextClassLoader (  ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( loader == null )  {^228^^^^^211^246^[REPLACE] if  ( loader != null )  {^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^^228^229^230^231^232^211^246^[ADD] if  ( loader != null )  { try { return Class.forName ( className, true, loader ) ; } catch  ( Exception e )  { prob = getRootCause ( e ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^return Class.forName ( className, true, loader ) ;prob = getRootCause ( e ) ;^229^230^231^232^233^211^246^[ADD] try { return Class.forName ( className, true, loader ) ; } catch  ( Exception e )  { prob = getRootCause ( e ) ; }^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^return Class .forName ( className )  ;^230^^^^^211^246^[REPLACE] return Class.forName ( className, true, loader ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^t = getRootCause ( t ) ; ;^232^^^^^211^246^[REPLACE] prob = getRootCause ( e ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^return Class.forName ( className, false, loader ) ;^230^^^^^211^246^[REPLACE] return Class.forName ( className, true, loader ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( prob != this  )  {^238^^^^^211^246^[REPLACE] if  ( prob == null )  {^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^t = getRootCause ( t ) ; ;^239^^^^^211^246^[REPLACE] prob = getRootCause ( e ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^return Class.forName ( className ) ;prob = getRootCause ( e ) ;^235^236^237^238^239^211^246^[ADD] try { return Class.forName ( className ) ; } catch  ( Exception e )  { if  ( prob == null )  { prob = getRootCause ( e ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^return Class.getAnnotation ( className ) ;^236^^^^^211^246^[REPLACE] return Class.forName ( className ) ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( ! prob instanceof RuntimeException )  {^242^^^^^211^246^[REPLACE] if  ( prob instanceof RuntimeException )  {^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REMOVE]^if  ( primitiveType ==  ( TYPE )  )  {     return class; }^242^^^^^211^246^[REMOVE] ^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^return ;^243^^^^^211^246^[REPLACE] throw  ( RuntimeException )  prob;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[ADD]^^243^^^^^211^246^[ADD] throw  ( RuntimeException )  prob;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^return ;^245^^^^^211^246^[REPLACE] throw new ClassNotFoundException  (" ")  ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^throw new IllegalArgumentException  (" ")  ;^245^^^^^211^246^[REPLACE] throw new ClassNotFoundException  (" ")  ;^[METHOD] findClass [TYPE] Class [PARAMETER] String className [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable prob  [TYPE]  ClassLoader loader  [TYPE]  String className  [TYPE]  Exception e 
[REPLACE]^if  ( Modifier.isStatic ( m.getParameterTypes (  )  )  )  {^257^^^^^254^271^[REPLACE] if  ( Modifier.isStatic ( m.getModifiers (  )  )  )  {^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^return true;^258^^^^^254^271^[REPLACE] return false;^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^Class<?>[] pts = m.getReturnType (  ) ;^261^^^^^254^271^[REPLACE] Class<?>[] pts = m.getParameterTypes (  ) ;^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[ADD]^^261^^^^^254^271^[ADD] Class<?>[] pts = m.getParameterTypes (  ) ;^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^if  ( null != null ) {^262^^^^^254^271^[REPLACE] if  ( pts != null && pts.length != 0 )  {^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^return true;^263^^^^^254^271^[REPLACE] return false;^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^if  ( Void.TYPE  &&  m.getReturnType (  )  )  {^266^^^^^254^271^[REPLACE] if  ( Void.TYPE == m.getReturnType (  )  )  {^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[ADD]^return false;^266^267^268^^^254^271^[ADD] if  ( Void.TYPE == m.getReturnType (  )  )  { return false; }^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^return true;^267^^^^^254^271^[REPLACE] return false;^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^return false;^270^^^^^254^271^[REPLACE] return true;^[METHOD] hasGetterSignature [TYPE] boolean [PARAMETER] Method m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Method m  [TYPE]  Class[] pts  [TYPE]  boolean false  true 
[REPLACE]^while  ( t.getCause (  )  == null )  {^285^^^^^283^289^[REPLACE] while  ( t.getCause (  )  != null )  {^[METHOD] getRootCause [TYPE] Throwable [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^t = getRootCause ( t ) ; ;^286^^^^^283^289^[REPLACE] t = t.getCause (  ) ;^[METHOD] getRootCause [TYPE] Throwable [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^288^^^^^283^289^[REPLACE] return t;^[METHOD] getRootCause [TYPE] Throwable [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^prob = getRootCause ( e ) ; ;^299^^^^^297^304^[REPLACE] t = getRootCause ( t ) ;^[METHOD] throwRootCause [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! t instanceof Exception )  {^300^^^^^297^304^[REPLACE] if  ( t instanceof Exception )  {^[METHOD] throwRootCause [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^return ;^301^^^^^297^304^[REPLACE] throw  ( Exception )  t;^[METHOD] throwRootCause [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^throw  ( Exception )  t; ;^303^^^^^297^304^[REPLACE] throw  ( Error )  t;^[METHOD] throwRootCause [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^t = getRootCause ( t ) ;^312^^^^^310^313^[REPLACE] throwAsIAE ( t, t.getMessage (  )  ) ;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^throwAsIAE ( t, t.getCause (  )  ) ;^312^^^^^310^313^[REPLACE] throwAsIAE ( t, t.getMessage (  )  ) ;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[ADD]^^312^^^^^310^313^[ADD] throwAsIAE ( t, t.getMessage (  )  ) ;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! t instanceof RuntimeException )  {^322^^^^^320^329^[REPLACE] if  ( t instanceof RuntimeException )  {^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[ADD]^^322^323^324^^^320^329^[ADD] if  ( t instanceof RuntimeException )  { throw  ( RuntimeException )  t; }^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^323^^^^^320^329^[REPLACE] throw  ( RuntimeException )  t;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^if  ( ! t instanceof Error )  {^325^^^^^320^329^[REPLACE] if  ( t instanceof Error )  {^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^return ;^326^^^^^320^329^[REPLACE] throw  ( Error )  t;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[ADD]^^326^^^^^320^329^[ADD] throw  ( Error )  t;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^throw  ( Exception )  t; ;^326^^^^^320^329^[REPLACE] throw  ( Error )  t;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^328^^^^^320^329^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] throwAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^throwAsIAE ( getRootCause ( t ) , msg ) ;^338^^^^^336^339^[REPLACE] throwAsIAE ( getRootCause ( t )  ) ;^[METHOD] unwrapAndThrowAsIAE [TYPE] void [PARAMETER] Throwable t [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  boolean false  true 
[REPLACE]^throwAsIAE ( getRootCause ( t )  ) ;^348^^^^^346^349^[REPLACE] throwAsIAE ( getRootCause ( t ) , msg ) ;^[METHOD] unwrapAndThrowAsIAE [TYPE] void [PARAMETER] Throwable t String msg [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  String msg  [TYPE]  boolean false  true 
[REPLACE]^Constructor<T> ctor = findConstructor ( cls, true ) ;^373^^^^^370^383^[REPLACE] Constructor<T> ctor = findConstructor ( cls, canFixAccess ) ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[ADD]^^373^^^^^370^383^[ADD] Constructor<T> ctor = findConstructor ( cls, canFixAccess ) ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^if  ( ctor != null )  {^374^^^^^370^383^[REPLACE] if  ( ctor == null )  {^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^375^^^^^370^383^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^if  ( !Modifier.isPublic ( ctor.getModifiers (  )  )  )  { throw new IllegalArgumentException  (" ")  ;^375^^^^^370^383^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^return ;^375^^^^^370^383^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[ADD]^return ctor.newInstance (  ) ;ClassUtil.unwrapAndThrowAsIAE ( e, "Failed to instantiate class "+cls.getName (  ) +", problem: "+e.getMessage (  )  ) ;return null;^377^378^379^380^381^370^383^[ADD] try { return ctor.newInstance (  ) ; } catch  ( Exception e )  { ClassUtil.unwrapAndThrowAsIAE ( e, "Failed to instantiate class "+cls.getName (  ) +", problem: "+e.getMessage (  )  ) ; return null;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^return ctor.getModifiers (  ) ;^378^^^^^370^383^[REPLACE] return ctor.newInstance (  ) ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^return ctor .getModifiers (  )  ;^378^^^^^370^383^[REPLACE] return ctor.newInstance (  ) ;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^return this;^381^^^^^370^383^[REPLACE] return null;^[METHOD] createInstance [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  Exception e 
[REPLACE]^if  ( t instanceof RuntimeException )  {^390^^^^^385^405^[REPLACE] if  ( canFixAccess )  {^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( Modifier.isPublic ( ctor.getModifiers (  )  )  )  {^394^^^^^385^405^[REPLACE] if  ( !Modifier.isPublic ( ctor.getModifiers (  )  )  )  {^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^395^^^^^385^405^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( !Modifier.isPublic ( ctor.getModifiers (  )  )  )  { throw new IllegalArgumentException  (" ")  ;^395^^^^^385^405^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^checkAndFixAccess ( null ) ;^391^^^^^385^405^[REPLACE] checkAndFixAccess ( ctor ) ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( Modifier.isPublic ( this.getModifiers (  )  )  )  {^394^^^^^385^405^[REPLACE] if  ( !Modifier.isPublic ( ctor.getModifiers (  )  )  )  {^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REMOVE]^throwAsIAE ( getRootCause ( t )  ) ;^395^^^^^385^405^[REMOVE] ^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[ADD]^Constructor<T> ctor = cls.getDeclaredConstructor (  ) ;checkAndFixAccess ( ctor ) ;^388^389^390^391^392^385^405^[ADD] try { Constructor<T> ctor = cls.getDeclaredConstructor (  ) ; if  ( canFixAccess )  { checkAndFixAccess ( ctor ) ; } else {^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[ADD]^^390^391^392^^^385^405^[ADD] if  ( canFixAccess )  { checkAndFixAccess ( ctor ) ; } else {^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^checkAndFixAccess ( true ) ;^391^^^^^385^405^[REPLACE] checkAndFixAccess ( ctor ) ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^return ;^395^^^^^385^405^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^return false;^398^^^^^385^405^[REPLACE] return ctor;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^Constructor<T> ctor = null.getDeclaredConstructor (  ) ;^389^^^^^385^405^[REPLACE] Constructor<T> ctor = cls.getDeclaredConstructor (  ) ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[ADD]^^395^^^^^385^405^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^return null;^398^^^^^385^405^[REPLACE] return ctor;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^Constructor<T> ctor = true.getDeclaredConstructor (  ) ;^389^^^^^385^405^[REPLACE] Constructor<T> ctor = cls.getDeclaredConstructor (  ) ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[ADD]^^389^^^^^385^405^[ADD] Constructor<T> ctor = cls.getDeclaredConstructor (  ) ;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^return true;^404^^^^^385^405^[REPLACE] return null;^[METHOD] findConstructor [TYPE] <T> [PARAMETER] Class<T> cls boolean canFixAccess [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean canFixAccess  false  true  [TYPE]  Constructor ctor  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  Exception e  [TYPE]  NoSuchMethodException e 
[REPLACE]^if  ( cls  ||  Integer.TYPE )  {^419^^^^^418^444^[REPLACE] if  ( cls == Integer.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return   0   ;^420^^^^^418^444^[REPLACE] return Integer.valueOf ( 0 ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( cls  !=  Long.TYPE )  {^422^^^^^418^444^[REPLACE] if  ( cls == Long.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return   0L   ;^423^^^^^418^444^[REPLACE] return Long.valueOf ( 0L ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  (this  ||  Boolean.TYPE )  {^425^^^^^418^444^[REPLACE] if  ( cls == Boolean.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[ADD]^^425^426^427^^^418^444^[ADD] if  ( cls == Boolean.TYPE )  { return Boolean.FALSE; }^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return Boolean.class;^426^^^^^418^444^[REPLACE] return Boolean.FALSE;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  (this  !=  Double.TYPE )  {^428^^^^^418^444^[REPLACE] if  ( cls == Double.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return   0.0   ;^429^^^^^418^444^[REPLACE] return Double.valueOf ( 0.0 ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return   2.0d   ;^429^^^^^418^444^[REPLACE] return Double.valueOf ( 0.0 ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( cls  !=  Float.TYPE )  {^431^^^^^418^444^[REPLACE] if  ( cls == Float.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return   0.0f   ;^432^^^^^418^444^[REPLACE] return Float.valueOf ( 0.0f ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( null  &&  Byte.TYPE )  {^434^^^^^418^444^[REPLACE] if  ( cls == Byte.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return Byte .valueOf ( null )  ;^435^^^^^418^444^[REPLACE] return Byte.valueOf (  ( byte )  0 ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return Short.valueOf (  ( short )  0 ) ;^435^^^^^418^444^[REPLACE] return Byte.valueOf (  ( byte )  0 ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( cls  ||  Short.TYPE )  {^437^^^^^418^444^[REPLACE] if  ( cls == Short.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return Float.class;^438^^^^^418^444^[REPLACE] return Short.valueOf (  ( short )  0 ) ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( cls  &&  Character.TYPE )  {^440^^^^^418^444^[REPLACE] if  ( cls == Character.TYPE )  {^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REMOVE]^if  ( primitiveType ==  ( TYPE )  )  {     return class; }^440^^^^^418^444^[REMOVE] ^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^441^^^^^418^444^[REPLACE] return '\0';^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^443^^^^^418^444^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( !Modifier.isPublic ( ctor.getModifiers (  )  )  )  { throw new IllegalArgumentException  (" ")  ;^443^^^^^418^444^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REMOVE]^throwAsIAE ( getRootCause ( t )  ) ;^443^^^^^418^444^[REMOVE] ^[METHOD] defaultValue [TYPE] Object [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^if  ( primitiveType  !=  Integer.TYPE )  {^452^^^^^451^477^[REPLACE] if  ( primitiveType == Integer.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^453^^^^^451^477^[REPLACE] return Integer.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( this  &&  Long.TYPE )  {^455^^^^^451^477^[REPLACE] if  ( primitiveType == Long.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[ADD]^^455^456^457^^^451^477^[ADD] if  ( primitiveType == Long.TYPE )  { return Long.class; }^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return Float.class;^456^^^^^451^477^[REPLACE] return Long.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( primitiveType  &&  Boolean.TYPE )  {^458^^^^^451^477^[REPLACE] if  ( primitiveType == Boolean.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return Boolean.FALSE;^459^^^^^451^477^[REPLACE] return Boolean.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( primitiveType  &&  Double.TYPE )  {^461^^^^^451^477^[REPLACE] if  ( primitiveType == Double.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[ADD]^return Double.class;^461^462^463^^^451^477^[ADD] if  ( primitiveType == Double.TYPE )  { return Double.class; }^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^462^^^^^451^477^[REPLACE] return Double.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( true  ||  Float.TYPE )  {^464^^^^^451^477^[REPLACE] if  ( primitiveType == Float.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return Long.class;^465^^^^^451^477^[REPLACE] return Float.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( primitiveType  ||  Byte.TYPE )  {^467^^^^^451^477^[REPLACE] if  ( primitiveType == Byte.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return "primitive";^468^^^^^451^477^[REPLACE] return Byte.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( primitiveType  &&  Short.TYPE )  {^470^^^^^451^477^[REPLACE] if  ( primitiveType == Short.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return Float.class;^471^^^^^451^477^[REPLACE] return Short.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( this  !=  Character.TYPE )  {^473^^^^^451^477^[REPLACE] if  ( primitiveType == Character.TYPE )  {^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return Short.valueOf (  ( short )  0 ) ;^474^^^^^451^477^[REPLACE] return Character.class;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^return ;^476^^^^^451^477^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[ADD]^^476^^^^^451^477^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^if  ( !Modifier.isPublic ( ctor.getModifiers (  )  )  )  { throw new IllegalArgumentException  (" ")  ;^476^^^^^451^477^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] wrapperType [TYPE] Class [PARAMETER] Class<?> primitiveType [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class primitiveType  [TYPE]  boolean false  true 
[REPLACE]^String name = type.getName (  ) ;^494^^^^^491^514^[REPLACE] AccessibleObject ao =  ( AccessibleObject )  member;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[ADD]^^494^^^^^491^514^[ADD] AccessibleObject ao =  ( AccessibleObject )  member;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[REPLACE]^if  ( ao.isAccessible (  )  )  {^508^^^^^491^514^[REPLACE] if  ( !ao.isAccessible (  )  )  {^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[REPLACE]^Class<?> declClass = member .getModifiers (  )  ;^509^^^^^491^514^[REPLACE] Class<?> declClass = member.getDeclaringClass (  ) ;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[ADD]^^509^510^^^^491^514^[ADD] Class<?> declClass = member.getDeclaringClass (  ) ; throw new IllegalArgumentException  (" ")  ;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^510^^^^^491^514^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[ADD]^^510^^^^^491^514^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[ADD]^ao.setAccessible ( true ) ;^501^502^503^^505^491^514^[ADD] try { ao.setAccessible ( true ) ; } catch  ( SecurityException se )  {^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[REPLACE]^ao.setAccessible ( false ) ;^502^^^^^491^514^[REPLACE] ao.setAccessible ( true ) ;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[ADD]^throw new IllegalArgumentException  (" ")  ;^509^510^^^^491^514^[ADD] Class<?> declClass = member.getDeclaringClass (  ) ; throw new IllegalArgumentException  (" ")  ;^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[ADD]^^503^504^505^^^491^514^[ADD] catch  ( SecurityException se )  {^[METHOD] checkAndFixAccess [TYPE] void [PARAMETER] Member member [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  AccessibleObject ao  [TYPE]  SecurityException se  [TYPE]  Class declClass  [TYPE]  Member member 
[REPLACE]^if  ( s.isEmpty (  )  )  {^531^^^^^528^536^[REPLACE] if  ( !s.isEmpty (  )  )  {^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumSet<?> s [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet s 
[ADD]^return findEnumType ( s.iterator (  ) .next (  )  ) ;^531^532^533^^^528^536^[ADD] if  ( !s.isEmpty (  )  )  { return findEnumType ( s.iterator (  ) .next (  )  ) ; }^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumSet<?> s [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet s 
[REPLACE]^return findEnumType ( false.iterator (  ) .next (  )  ) ;^532^^^^^528^536^[REPLACE] return findEnumType ( s.iterator (  ) .next (  )  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumSet<?> s [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet s 
[REPLACE]^return findEnumType ( null.iterator (  ) .next (  )  ) ;^532^^^^^528^536^[REPLACE] return findEnumType ( s.iterator (  ) .next (  )  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumSet<?> s [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet s 
[REPLACE]^return EnumTypeLocator.instance .EnumTypeLocator (  )  ;^535^^^^^528^536^[REPLACE] return EnumTypeLocator.instance.enumTypeFor ( s ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumSet<?> s [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet s 
[REPLACE]^if  ( m.isEmpty (  )  )  {^546^^^^^544^551^[REPLACE] if  ( !m.isEmpty (  )  )  {^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumMap<?, ?> m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap m 
[REPLACE]^return findEnumType ( false.keySet (  ) .iterator (  ) .next (  )  ) ;^547^^^^^544^551^[REPLACE] return findEnumType ( m.keySet (  ) .iterator (  ) .next (  )  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumMap<?, ?> m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap m 
[REPLACE]^return findEnumType ( null.keySet (  ) .iterator (  ) .next (  )  ) ;^547^^^^^544^551^[REPLACE] return findEnumType ( m.keySet (  ) .iterator (  ) .next (  )  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumMap<?, ?> m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap m 
[REPLACE]^return EnumTypeLocator.instance.enumTypeFor ( s ) ;^550^^^^^544^551^[REPLACE] return EnumTypeLocator.instance.enumTypeFor ( m ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] EnumMap<?, ?> m [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap m 
[REPLACE]^Class<?> ec = this.getClass (  ) ;^563^^^^^560^568^[REPLACE] Class<?> ec = en.getClass (  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] Enum<?> en [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Enum en  [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class ec  [TYPE]  boolean false  true 
[REPLACE]^if  ( ec.getSuperclass (  )   ==  Enum.class )  {^564^^^^^560^568^[REPLACE] if  ( ec.getSuperclass (  )  != Enum.class )  {^[METHOD] findEnumType [TYPE] Class [PARAMETER] Enum<?> en [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Enum en  [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class ec  [TYPE]  boolean false  true 
[ADD]^^564^565^566^^^560^568^[ADD] if  ( ec.getSuperclass (  )  != Enum.class )  { ec = ec.getSuperclass (  ) ; }^[METHOD] findEnumType [TYPE] Class [PARAMETER] Enum<?> en [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Enum en  [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class ec  [TYPE]  boolean false  true 
[REPLACE]^cls = cls.getSuperclass (  ) ; ;^565^^^^^560^568^[REPLACE] ec = ec.getSuperclass (  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] Enum<?> en [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Enum en  [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class ec  [TYPE]  boolean false  true 
[REPLACE]^return  ( Class<? extends Enum<?>> )  cls;^567^^^^^560^568^[REPLACE] return  ( Class<? extends Enum<?>> )  ec;^[METHOD] findEnumType [TYPE] Class [PARAMETER] Enum<?> en [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Enum en  [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class ec  [TYPE]  boolean false  true 
[REPLACE]^if  (this (  )   ==  Enum.class )  {^580^^^^^577^584^[REPLACE] if  ( cls.getSuperclass (  )  != Enum.class )  {^[METHOD] findEnumType [TYPE] Class [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^ec = ec.getSuperclass (  ) ; ;^581^^^^^577^584^[REPLACE] cls = cls.getSuperclass (  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[ADD]^^581^^^^^577^584^[ADD] cls = cls.getSuperclass (  ) ;^[METHOD] findEnumType [TYPE] Class [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return  ( Class<? extends Enum<?>> )  ec;^583^^^^^577^584^[REPLACE] return  ( Class<? extends Enum<?>> )  cls;^[METHOD] findEnumType [TYPE] Class [PARAMETER] Class<?> cls [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class cls  [TYPE]  boolean false  true 
[REPLACE]^return  ( impl != true )  ;;^600^^^^^599^601^[REPLACE] return  ( impl != null )  && isJacksonStdImpl ( impl.getClass (  )  ) ;^[METHOD] isJacksonStdImpl [TYPE] boolean [PARAMETER] Object impl [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Object impl  [TYPE]  boolean false  true 
[REPLACE]^return  ( implClass.isAssignableFrom ( JacksonStdImpl.class )  != this ) ;^604^^^^^603^605^[REPLACE] return  ( implClass.getAnnotation ( JacksonStdImpl.class )  != null ) ;^[METHOD] isJacksonStdImpl [TYPE] boolean [PARAMETER] Class<?> implClass [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  Class implClass  [TYPE]  boolean false  true 
[REPLACE]^if  ( enumSetTypeField == true )  {^635^^^^^633^639^[REPLACE] if  ( enumSetTypeField != null )  {^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( this, enumSetTypeField ) ;^636^^^^^633^639^[REPLACE] return  ( Class<? extends Enum<?>> )  get ( set, enumSetTypeField ) ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( set, enumMapTypeField ) ;^636^^^^^633^639^[REPLACE] return  ( Class<? extends Enum<?>> )  get ( set, enumSetTypeField ) ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^638^^^^^633^639^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^if  ( enumSetTypeField == null )  {^644^^^^^642^648^[REPLACE] if  ( enumMapTypeField != null )  {^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( null, enumMapTypeField ) ;^645^^^^^642^648^[REPLACE] return  ( Class<? extends Enum<?>> )  get ( set, enumMapTypeField ) ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^647^^^^^642^648^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[ADD]^^647^^^^^642^648^[ADD] throw new IllegalStateException  (" ")  ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[ADD]^return field.get ( bean ) ;^652^653^654^655^656^650^657^[ADD] try { return field.get ( bean ) ; } catch  ( Exception e )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^return field .get ( bean , field )  ;^653^^^^^650^657^[REPLACE] return field.get ( bean ) ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^return enumSetTypeField.get ( bean ) ;^653^^^^^650^657^[REPLACE] return field.get ( bean ) ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^throw new ClassNotFoundException  (" ")  ; ;^655^^^^^650^657^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^Field found = false;^661^^^^^660^686^[REPLACE] Field found = null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^Field[] fields = this.getDeclaredFields (  ) ;^663^^^^^660^686^[REPLACE] Field[] fields = fromClass.getDeclaredFields (  ) ;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^663^^^^^660^686^[ADD] Field[] fields = fromClass.getDeclaredFields (  ) ;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  (  f.get (  )  == null )  {^665^^^^^660^686^[REPLACE] if  ( expectedName.equals ( f.getName (  )  )  && f.getType (  )  == type )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found =  field;^666^^^^^660^686^[REPLACE] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^Field[] fields = fromClass.getDeclaredFields (  ) ;^664^^^^^660^686^[REPLACE] for  ( Field f : fields )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  (field != null )  {^671^^^^^660^686^[REPLACE] if  ( found == null )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( f.getType (  )   &&  type )  {^673^^^^^660^686^[REPLACE] if  ( f.getType (  )  == type )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( field == true )  return true;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^found = f;^675^676^677^^^660^686^[ADD] if  ( found != null )  return null; found = f; }^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != true )  return true;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found =  field;^676^^^^^660^686^[REPLACE] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != this )  return this;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( field == null )  return null;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^675^676^677^^^660^686^[ADD] if  ( found != null )  return null; found = f; }^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != false )  return false;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^Field[] fields = fromClass.getDeclaredFields (  ) ;^672^^^^^660^686^[REPLACE] for  ( Field f : fields )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( f.get (  )   !=  type )  {^673^^^^^660^686^[REPLACE] if  ( f.getType (  )  == type )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found == null )  return null;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REMOVE]^if  ( type.isArray (  )  )  {     return "array"; }^675^^^^^660^686^[REMOVE] ^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^676^^^^^660^686^[ADD] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found == this  )  {^680^^^^^660^686^[REPLACE] if  ( found != null )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^found.setAccessible ( true ) ;^681^682^683^^^660^686^[ADD] try { found.setAccessible ( true ) ; } catch  ( Throwable t )  { }^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found.setAccessible ( false ) ;^682^^^^^660^686^[REPLACE] found.setAccessible ( true ) ;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^return field;^685^^^^^660^686^[REPLACE] return found;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] ClassUtil EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^final static EnumTypeLocator instance ;^619^^^^^^^[REPLACE] final static EnumTypeLocator instance = new EnumTypeLocator (  ) ;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^private  Field enumMapTypeField;^622^^^^^^^[REPLACE] private final Field enumMapTypeField;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^enumMapTypeField = locateField ( EnumMap.class, "elementType", Class.class ) ; ;^628^^^^^624^630^[REPLACE] enumSetTypeField = locateField ( EnumSet.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[ADD]^^628^^^^^624^630^[ADD] enumSetTypeField = locateField ( EnumSet.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[REPLACE]^enumSetTypeField = locateField ( EnumSet.class, "elementType", Class.class ) ; ;^629^^^^^624^630^[REPLACE] enumMapTypeField = locateField ( EnumMap.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[ADD]^^629^^^^^624^630^[ADD] enumMapTypeField = locateField ( EnumMap.class, "elementType", Class.class ) ;^[METHOD] <init> [TYPE] ClassUtil$EnumTypeLocator() [PARAMETER] [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true 
[REPLACE]^if  (enumMapTypeField == this )  {^635^^^^^633^639^[REPLACE] if  ( enumSetTypeField != null )  {^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( this, enumSetTypeField ) ;^636^^^^^633^639^[REPLACE] return  ( Class<? extends Enum<?>> )  get ( set, enumSetTypeField ) ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( false, enumSetTypeField ) ;^636^^^^^633^639^[REPLACE] return  ( Class<? extends Enum<?>> )  get ( set, enumSetTypeField ) ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^638^^^^^633^639^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumSet<?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumSet set 
[REPLACE]^if  (enumSetTypeField == null )  {^644^^^^^642^648^[REPLACE] if  ( enumMapTypeField != null )  {^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( null, enumMapTypeField ) ;^645^^^^^642^648^[REPLACE] return  ( Class<? extends Enum<?>> )  get ( set, enumMapTypeField ) ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[REPLACE]^return ;^647^^^^^642^648^[REPLACE] throw new IllegalStateException  (" ")  ;^[METHOD] enumTypeFor [TYPE] Class [PARAMETER] EnumMap<?, ?> set [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  [TYPE]  EnumTypeLocator instance  [TYPE]  boolean false  true  [TYPE]  EnumMap set 
[ADD]^return field.get ( bean ) ;^652^653^654^655^656^650^657^[ADD] try { return field.get ( bean ) ; } catch  ( Exception e )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^return enumSetTypeField.get ( bean ) ;^653^^^^^650^657^[REPLACE] return field.get ( bean ) ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^return  ( Class<? extends Enum<?>> )  get ( set, enumSetTypeField ) ;^653^^^^^650^657^[REPLACE] return field.get ( bean ) ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^throw new IllegalStateException  (" ")  ; ;^655^^^^^650^657^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[ADD]^^654^655^^^^650^657^[ADD] catch  ( Exception e )  { throw new IllegalArgumentException  (" ")  ;^[METHOD] get [TYPE] Object [PARAMETER] Object bean Field field [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  field  [TYPE]  EnumTypeLocator instance  [TYPE]  Object bean  [TYPE]  boolean false  true  [TYPE]  Exception e 
[REPLACE]^Field found = false;^661^^^^^660^686^[REPLACE] Field found = null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^661^^^^^660^686^[ADD] Field found = null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^Field[] fields = 0.getDeclaredFields (  ) ;^663^^^^^660^686^[REPLACE] Field[] fields = fromClass.getDeclaredFields (  ) ;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( expectedName.equals ( f.getName (  )  )  ) {^665^^^^^660^686^[REPLACE] if  ( expectedName.equals ( f.getName (  )  )  && f.getType (  )  == type )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found =  null;^666^^^^^660^686^[REPLACE] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found =  field;^666^^^^^660^686^[REPLACE] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^666^^^^^660^686^[ADD] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^Field[] fields = fromClass.getDeclaredFields (  ) ;^664^^^^^660^686^[REPLACE] for  ( Field f : fields )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != null )  {^671^^^^^660^686^[REPLACE] if  ( found == null )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^671^672^673^^675^660^686^[ADD] if  ( found == null )  { for  ( Field f : fields )  { if  ( f.getType (  )  == type )  { if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( f .getName (  )    !=  type )  {^673^^^^^660^686^[REPLACE] if  ( f.getType (  )  == type )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( field == this  )  return this ;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != true )  return true;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found =  field;^676^^^^^660^686^[REPLACE] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != this )  return this;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( field == null )  return null;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found =  null;^676^^^^^660^686^[REPLACE] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^676^^^^^660^686^[ADD] found = f;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found != false )  return false;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^Field[] fields = fromClass.getDeclaredFields (  ) ;^672^^^^^660^686^[REPLACE] for  ( Field f : fields )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( field.getType (  )   ||  type )  {^673^^^^^660^686^[REPLACE] if  ( f.getType (  )  == type )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  ( found == null )  return null;^675^^^^^660^686^[REPLACE] if  ( found != null )  return null;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^if  (field == false )  {^680^^^^^660^686^[REPLACE] if  ( found != null )  {^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^found.setAccessible ( true ) ;^681^682^683^^^660^686^[ADD] try { found.setAccessible ( true ) ; } catch  ( Throwable t )  { }^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^found.setAccessible ( false ) ;^682^^^^^660^686^[REPLACE] found.setAccessible ( true ) ;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[ADD]^^683^684^685^^^660^686^[ADD] catch  ( Throwable t )  { } } return found;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
[REPLACE]^return field;^685^^^^^660^686^[REPLACE] return found;^[METHOD] locateField [TYPE] Field [PARAMETER] Class<?> fromClass String expectedName Class<?> type [CLASS] EnumTypeLocator   [TYPE]  Field enumMapTypeField  enumSetTypeField  f  field  found  [TYPE]  boolean false  true  [TYPE]  EnumTypeLocator instance  [TYPE]  Throwable t  [TYPE]  Class fromClass  type  [TYPE]  String expectedName  [TYPE]  Field[] fields 
