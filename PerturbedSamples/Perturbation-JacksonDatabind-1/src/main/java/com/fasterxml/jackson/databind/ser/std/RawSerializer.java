[REPLACE]^super ( cls, true ) ;^27^^^^^26^28^[REPLACE] super ( cls, false ) ;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class<?> cls [CLASS] RawSerializer   [TYPE]  boolean false  true  [TYPE]  Class cls 
[REPLACE]^serialize ( value, jgen, provider ) ;^34^^^^^31^35^[REPLACE] jgen.writeRawValue ( value.toString (  )  ) ;^[METHOD] serialize [TYPE] void [PARAMETER] T value JsonGenerator jgen SerializerProvider provider [CLASS] RawSerializer   [TYPE]  boolean false  true  [TYPE]  T value  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REMOVE]^return createSchemaNode ( "string", true ) ;^34^^^^^31^35^[REMOVE] ^[METHOD] serialize [TYPE] void [PARAMETER] T value JsonGenerator jgen SerializerProvider provider [CLASS] RawSerializer   [TYPE]  boolean false  true  [TYPE]  T value  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^42^^^^^38^45^[REPLACE] typeSer.writeTypePrefixForScalar ( value, jgen ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] T value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] RawSerializer   [TYPE]  boolean false  true  [TYPE]  T value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^jgen.writeRawValue ( value.toString (  )  ) ;^43^^^^^38^45^[REPLACE] serialize ( value, jgen, provider ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] T value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] RawSerializer   [TYPE]  boolean false  true  [TYPE]  T value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^typeSer .writeTypePrefixForScalar ( value , jgen )  ;^44^^^^^38^45^[REPLACE] typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] T value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] RawSerializer   [TYPE]  boolean false  true  [TYPE]  T value  [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  SerializerProvider provider 
[REPLACE]^return createSchemaNode ( "string", true ) ;^58^^^^^55^59^[REPLACE] visitor.expectStringFormat ( typeHint ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] RawSerializer   [TYPE]  JavaType typeHint  [TYPE]  boolean false  true  [TYPE]  JsonFormatVisitorWrapper visitor 
