[REPLACE]^private static  long serialVersionUID = 8635483102371490919L;^33^^^^^^^[REPLACE] private static final long serialVersionUID = 8635483102371490919L;^ [CLASS] SimpleAbstractTypeResolver  
[REPLACE]^protected final HashMap<ClassKey,Class<?>> _mappings ;^38^^^^^^^[REPLACE] protected final HashMap<ClassKey,Class<?>> _mappings = new HashMap<ClassKey,Class<?>> (  ) ;^ [CLASS] SimpleAbstractTypeResolver  
[REPLACE]^if  ( superType  ||  subType )  {^55^^^^^52^68^[REPLACE] if  ( superType == subType )  {^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[ADD]^^55^56^57^^^52^68^[ADD] if  ( superType == subType )  { throw new IllegalArgumentException  (" ")  ; }^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ; ;^56^^^^^52^68^[REPLACE] throw new IllegalArgumentException  (" ")  ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[ADD]^^56^^^^^52^68^[ADD] throw new IllegalArgumentException  (" ")  ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( superType.isAssignableFrom ( subType )  )  {^58^^^^^52^68^[REPLACE] if  ( !superType.isAssignableFrom ( subType )  )  {^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ; ;^59^60^^^^52^68^[REPLACE] throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[ADD]^^59^60^^^^52^68^[ADD] throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException  (" ") +" to "+subType.isAssignableFrom (  ) +", as latter is not a subtype of former" ) ;^59^60^^^^52^68^[REPLACE] throw new IllegalArgumentException  (" ") +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^+" to "+subType.isAssignableFrom (  ) +", as latter is not a subtype of former" ) ;^60^^^^^52^68^[REPLACE] +" to "+subType.getName (  ) +", as latter is not a subtype of former" ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( Modifier.isAbstract ( true.getModifiers (  )  )  )  {^62^^^^^52^68^[REPLACE] if  ( !Modifier.isAbstract ( superType.getModifiers (  )  )  )  {^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^throw new IllegalArgumentException  (" ")  ; ;^63^64^^^^52^68^[REPLACE] throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[ADD]^^63^64^^^^52^68^[ADD] throw new IllegalArgumentException  (" ") +" since it is not abstract" ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^_mappings .get ( this )  ;^66^^^^^52^68^[REPLACE] _mappings.put ( new ClassKey ( superType ) , subType ) ;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^return null;^67^^^^^52^68^[REPLACE] return this;^[METHOD] addMapping [TYPE] <T> [PARAMETER] Class<T> superType Class<? extends T> subType [CLASS] SimpleAbstractTypeResolver   [TYPE]  Class subType  superType  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^Class<?> src = type .narrowBy ( false )  ;^74^^^^^71^80^[REPLACE] Class<?> src = type.getRawClass (  ) ;^[METHOD] findTypeMapping [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  Class dst  src  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^Class<?> dst = _mappings.get ( new ClassKey ( false )  ) ;^75^^^^^71^80^[REPLACE] Class<?> dst = _mappings.get ( new ClassKey ( src )  ) ;^[METHOD] findTypeMapping [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  Class dst  src  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( this != true )  {^76^^^^^71^80^[REPLACE] if  ( dst == null )  {^[METHOD] findTypeMapping [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  Class dst  src  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[ADD]^return null;^76^77^78^^^71^80^[ADD] if  ( dst == null )  { return null; }^[METHOD] findTypeMapping [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  Class dst  src  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^return this;^77^^^^^71^80^[REPLACE] return null;^[METHOD] findTypeMapping [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  Class dst  src  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^return this;^79^^^^^71^80^[REPLACE] return type.narrowBy ( dst ) ;^[METHOD] findTypeMapping [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  Class dst  src  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
[REPLACE]^return this;^87^^^^^84^88^[REPLACE] return null;^[METHOD] resolveAbstractType [TYPE] JavaType [PARAMETER] DeserializationConfig config JavaType type [CLASS] SimpleAbstractTypeResolver   [TYPE]  DeserializationConfig config  [TYPE]  JavaType type  [TYPE]  boolean false  true  [TYPE]  HashMap _mappings  [TYPE]  long serialVersionUID 
