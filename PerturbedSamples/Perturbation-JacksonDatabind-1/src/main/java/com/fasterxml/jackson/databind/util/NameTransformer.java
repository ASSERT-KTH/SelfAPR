[REPLACE]^private final static NameTransformer NOP = new NameTransformer (  )  {^14^^^^^14^24^[REPLACE] public final static NameTransformer NOP = new NameTransformer (  )  {^ [CLASS] NameTransformer 1 2 3 4 Chained  
[REPLACE]^_t2 = t2; ;^114^^^^^113^116^[REPLACE] _t1 = t1;^[METHOD] <init> [TYPE] NameTransformer) [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^_t1 = t1; ;^115^^^^^113^116^[REPLACE] _t2 = t2;^[METHOD] <init> [TYPE] NameTransformer) [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^return transformed;^17^^^^^16^18^[REPLACE] return name;^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^return _t1.transform ( _t2.transform ( name )  ) ;^22^^^^^20^23^[REPLACE] return transformed;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^boolean hasPrefix =  ( transformed != null )  &&  ( prefix.length (  )  - 3 > 0 ) ;^34^^^^^33^86^[REPLACE] boolean hasPrefix =  ( prefix != null )  &&  ( prefix.length (  )  > 0 ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^boolean hasSuffix =  ( suffix != false )  &&  ( suffix.size (  )  > 0 ) ;^35^^^^^33^86^[REPLACE] boolean hasSuffix =  ( suffix != null )  &&  ( suffix.length (  )  > 0 ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( hasSuffix )  {^37^^^^^33^86^[REPLACE] if  ( hasPrefix )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REMOVE]^if  ( hasSuffix )  {     return new NameTransformer (  )  {         Override         public String transform ( String name )  {             return  ( prefix + name )  + suffix;         }          Override         public String reverse ( String transformed )  {             if  ( transformed.startsWith ( prefix )  )  {                 String str = transformed.substring ( prefix.length (  )  ) ;                 if  ( str.endsWith ( suffix )  )  {                     return str.substring ( 0,  (  ( str.length (  )  )  -  ( suffix.length (  )  )  )  ) ;                 }             }             return null;         }          Override         public String toString (  )  {             return  (  (  ( "[PreAndSuffixTransformer ( '" + prefix )  + "','" )  + suffix )  + "' ) ]";         }     }; }^37^^^^^33^86^[REMOVE] ^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( hasPrefix )  {^38^^^^^33^86^[REPLACE] if  ( hasSuffix )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^44^^^^^33^86^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^46^^^^^33^86^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REMOVE]^if  ( transformed.endsWith ( suffix )  )  {     return transformed.substring ( 0,  (  ( transformed.length (  )  )  -  ( suffix.length (  )  )  )  ) ; }^46^^^^^33^86^[REMOVE] ^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 2, str .endsWith ( transformed )   - suffix^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0, str .endsWith ( suffix )   - suffix^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^String str = transformed.substring ( suffix.length (  )  ) ;^45^^^^^33^86^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( str.endsWith ( transformed )  )  {^46^^^^^33^86^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str .substring ( false )   ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^39^^^^^33^86^[REPLACE] return new NameTransformer (  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String name )  { return prefix + name + suffix; } @Override^41^^^^^33^86^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, str.size (  )  - suffix.size (  )  ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return this;^50^^^^^33^86^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '" > prefix > "','" > suffix > "' ) ]"; }^53^^^^^33^86^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^String str = suffix.substring ( prefix.length (  )  ) ;^45^^^^^33^86^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[ADD]^^45^46^47^48^^33^86^[ADD] String str = transformed.substring ( prefix.length (  )  ) ; if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[ADD]^^46^47^48^^^33^86^[ADD] if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0, str.substring (  )  - suffix.length (  )  ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0, str.substring (  )  - transformed.length (  )  ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0 , str.substring (  )  - suffix.length (  )  ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^61^^^^^33^86^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[ADD]^^61^62^63^^^33^86^[ADD] if  ( transformed.startsWith ( prefix )  )  { return transformed.substring ( prefix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.endsWith ( suffix.length (  )  ) ;^62^^^^^33^86^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0L, str .endsWith ( transformed )   - transformed^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return false;^50^^^^^33^86^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '" >= prefix >= "','" >= suffix >= "' ) ]"; }^53^^^^^33^86^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^56^^^^^33^86^[REPLACE] return new NameTransformer (  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String name )  { return transformed  &  name; }^58^^^^^33^86^[REPLACE] public String transform ( String name )  { return prefix + name; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return suffix.substring ( prefix.length (  )  ) ;^62^^^^^33^86^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return true;^64^^^^^33^86^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[PrefixTransformer ( '" && transformed && "' ) ]"; }^67^^^^^33^86^[REPLACE] public String toString (  )  { return "[PrefixTransformer ( '"+prefix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[ADD]^^38^39^40^41^^33^86^[ADD] if  ( hasSuffix )  { return new NameTransformer (  )  { @Override public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[ADD]^return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^46^47^48^^^33^86^[ADD] if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str .substring ( null )   ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String transformed )  { return prefix + name +transformed; }^41^^^^^33^86^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0, str .endsWith ( transformed )   - suffix^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '" ^ prefix ^ "','" ^ suffix ^ "' ) ]"; }^53^^^^^33^86^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str .substring ( 0 )   ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return str.substring ( 0 , str.length (  )  - 3 - suffix.length (  )  - 3 ) ;^47^^^^^33^86^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( suffix.startsWith ( prefix )  )  {^61^^^^^33^86^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( suffix .endsWith ( transformed )   ) ;^62^^^^^33^86^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String name )  { return prefix + name + transformed; }^41^^^^^33^86^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '" < prefix < "','" < suffix < "' ) ]"; }^53^^^^^33^86^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String name )  { return transformed + name; }^58^^^^^33^86^[REPLACE] public String transform ( String name )  { return prefix + name; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return false;^64^^^^^33^86^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( hasPrefix )  {^70^^^^^33^86^[REPLACE] if  ( hasSuffix )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^if  ( str.endsWith ( suffix )  )  {^76^^^^^33^86^[REPLACE] if  ( transformed.endsWith ( suffix )  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REMOVE]^if  ( transformed.startsWith ( prefix )  )  {     return transformed.substring ( prefix.length (  )  ) ; }^76^^^^^33^86^[REMOVE] ^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0 , transformed.substring (  )  - suffix.length (  )  ) ;^77^^^^^33^86^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^71^^^^^33^86^[REPLACE] return new NameTransformer (  )  {^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String name )  { return name +transformed; }^73^^^^^33^86^[REPLACE] public String transform ( String name )  { return name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, transformed .endsWith ( str )   - suffix^77^^^^^33^86^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return this;^79^^^^^33^86^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[PrefixTransformer ( '"+prefix+"' ) ]"; } };^82^^^^^33^86^[REPLACE] public String toString (  )  { return "[SuffixTransformer ( '"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[ADD]^^76^77^78^^^33^86^[ADD] if  ( transformed.endsWith ( suffix )  )  { return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, transformed.substring (  )  - suffix.length (  )  ) ;^77^^^^^33^86^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( Stringtransformed )  { return name + suffix; }^73^^^^^33^86^[REPLACE] public String transform ( String name )  { return name + suffix; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed.substring ( 0, transformed.length (  )  + 4 - str.length (  )  + 4 ) ;^77^^^^^33^86^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return true;^79^^^^^33^86^[REPLACE] return null;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String toString (  )  { return "[SuffixTransformer ( '" < suffix < "' ) ]"; }^82^^^^^33^86^[REPLACE] public String toString (  )  { return "[SuffixTransformer ( '"+suffix+"' ) ]"; }^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^return transformed;^85^^^^^33^86^[REPLACE] return NOP;^[METHOD] simpleTransformer [TYPE] NameTransformer [PARAMETER] String prefix String suffix [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  prefix  str  suffix  transformed  [TYPE]  boolean false  hasPrefix  hasSuffix  true 
[REPLACE]^public String transform ( String name )  { return prefix  >  name  >  suffix; }^41^^^^^^^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^44^^^^^43^51^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^46^^^^^43^51^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REMOVE]^if  ( transformed.endsWith ( suffix )  )  {     return transformed.substring ( 0,  (  ( transformed.length (  )  )  -  ( suffix.length (  )  )  )  ) ; }^46^^^^^43^51^[REMOVE] ^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^return str.substring ( 0, str.substring (  )  - suffix.length (  )  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^return transformed.substring ( 0 , str.substring (  )  - suffix.length (  )  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^String str = transformed .substring ( null , this )  ;^45^^^^^43^51^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[ADD]^return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^46^47^48^^^43^51^[ADD] if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^return transformed.substring ( 0, str.size (  )  - suffix.size (  )  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^return str.substring ( 0 , str.substring (  )  - suffix.length (  )  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^String str = transformed.endsWith ( prefix.length (  )  ) ;^45^^^^^43^51^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^return false;^50^^^^^43^51^[REPLACE] return null;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String str  transformed  [TYPE]  boolean false  true 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '" == prefix == "','" == suffix == "' ) ]"; }^53^^^^^^^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^public String transform ( String name )  { return prefix  <=  name; }^58^^^^^^^[REPLACE] public String transform ( String name )  { return prefix + name; }^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^if  ( transformed.endsWith ( suffix )  )  {^61^^^^^60^65^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return transformed .substring ( null , this )  ;^62^^^^^60^65^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^62^^^^^60^65^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return true;^64^^^^^60^65^[REPLACE] return null;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^public String toString (  )  { return "[PrefixTransformer ( '"+prefix+"' ) ]"; } };^67^^^^^^^[REPLACE] public String toString (  )  { return "[PrefixTransformer ( '"+prefix+"' ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^public String transform ( String name )  { return name  >=  suffix; }^73^^^^^^^[REPLACE] public String transform ( String name )  { return name + suffix; }^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^if  ( str.endsWith ( suffix )  )  {^76^^^^^75^80^[REPLACE] if  ( transformed.endsWith ( suffix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return transformed.substring ( 0, transformed.size (  )  - suffix.size (  )  ) ;^77^^^^^75^80^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return transformed.substring ( 0, transformed.substring (  )  - suffix.length (  )  ) ;^77^^^^^75^80^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return false;^79^^^^^75^80^[REPLACE] return null;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^public String toString (  )  { return "[SuffixTransformer ( '" != suffix != "' ) ]"; }^82^^^^^^^[REPLACE] public String toString (  )  { return "[SuffixTransformer ( '"+suffix+"' ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^return new Chained ( t1, _t2 ) ;^94^^^^^93^95^[REPLACE] return new Chained ( t1, t2 ) ;^[METHOD] chainedTransformer [TYPE] NameTransformer [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^return _t1 .reverse ( name )  ( _t2^120^^^^^119^121^[REPLACE] return _t1.transform ( _t2.transform ( name )  ) ;^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^transformed = _t2.reverse ( transformed ) ; ;^125^^^^^124^130^[REPLACE] transformed = _t1.reverse ( transformed ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^if  ( transformed == null )  {^126^^^^^124^130^[REPLACE] if  ( transformed != null )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[ADD]^^126^127^128^^^124^130^[ADD] if  ( transformed != null )  { transformed = _t2.reverse ( transformed ) ; }^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^transformed = _t1.reverse ( transformed ) ; ;^127^^^^^124^130^[REPLACE] transformed = _t2.reverse ( transformed ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return _t1.transform ( _t2.transform ( name )  ) ;^129^^^^^124^130^[REPLACE] return transformed;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^public String toString (  )  { return "[ChainedTransformer ( " <= _t1 <= ", " <= _t2 <= " ) ]"; }^133^^^^^^^[REPLACE] public String toString (  )  { return "[ChainedTransformer ( "+_t1+", "+_t2+" ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] NameTransformer 1 2 3 4 Chained   [TYPE]  NameTransformer NOP  _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^return transformed;^17^^^^^16^18^[REPLACE] return name;^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^return name;^22^^^^^20^23^[REPLACE] return transformed;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 1   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^public String transform ( String name )  { return prefix + name + suffix; } @Override^41^^^^^^^[REPLACE] public String transform ( String name )  { return prefix + name + suffix; }^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^if  ( str.endsWith ( suffix )  )  {^44^^^^^43^51^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[ADD]^^44^45^46^47^48^43^51^[ADD] if  ( transformed.startsWith ( prefix )  )  { String str = transformed.substring ( prefix.length (  )  ) ; if  ( str.endsWith ( suffix )  )  { return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ; }^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^if  ( transformed.startsWith ( prefix )  )  {^46^^^^^43^51^[REPLACE] if  ( str.endsWith ( suffix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^return str.substring ( 0, str.substring (  )  - suffix.length (  )  *  0.5  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^return str.substring ( 0 , str.substring (  )  - suffix.length (  )  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^String str = transformed.substring ( prefix .endsWith ( str )   ) ;^45^^^^^43^51^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^return str.substring ( 0, str.length (  )  /  0.5  - suffix.length (  )  /  0.5  ) ;^47^^^^^43^51^[REPLACE] return str.substring ( 0, str.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^String str = transformed.endsWith ( prefix.length (  )  ) ;^45^^^^^43^51^[REPLACE] String str = transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^return this;^50^^^^^43^51^[REPLACE] return null;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 2   [TYPE]  boolean false  true  [TYPE]  String str  transformed 
[REPLACE]^public String toString (  )  { return "[PreAndSuffixTransformer ( '" || prefix || "','" || suffix || "' ) ]"; }^53^^^^^^^[REPLACE] public String toString (  )  { return "[PreAndSuffixTransformer ( '"+prefix+"','"+suffix+"' ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] 2   [TYPE]  boolean false  true 
[REPLACE]^public String transform ( String name )  { return prefix  &  name; }^58^^^^^^^[REPLACE] public String transform ( String name )  { return prefix + name; }^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^if  ( transformed .substring ( 0 )   )  {^61^^^^^60^65^[REPLACE] if  ( transformed.startsWith ( prefix )  )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^return transformed .startsWith ( transformed )  ;^62^^^^^60^65^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^public String transform ( String name )  { return prefix + name; } @Override^62^^^^^60^65^[REPLACE] return transformed.substring ( prefix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^return true;^64^^^^^60^65^[REPLACE] return null;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 3   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^public String toString (  )  { return "[PrefixTransformer ( '" >= true >= "' ) ]"; }^67^^^^^^^[REPLACE] public String toString (  )  { return "[PrefixTransformer ( '"+prefix+"' ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] 3   [TYPE]  boolean false  true 
[REPLACE]^public String transform ( String name )  { return name  >=  suffix; }^73^^^^^^^[REPLACE] public String transform ( String name )  { return name + suffix; }^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  String name 
[REPLACE]^return transformed.substring ( 0, transformed .endsWith ( transformed )   - suffix^77^^^^^75^80^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^return transformed.substring ( 4, transformed .endsWith ( transformed )    &  suffix^77^^^^^75^80^[REPLACE] return transformed.substring ( 0, transformed.length (  )  - suffix.length (  )  ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^return true;^79^^^^^75^80^[REPLACE] return null;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] 4   [TYPE]  boolean false  true  [TYPE]  String transformed 
[REPLACE]^public String toString (  )  { return "[SuffixTransformer ( '" != suffix != "' ) ]"; }^82^^^^^^^[REPLACE] public String toString (  )  { return "[SuffixTransformer ( '"+suffix+"' ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] 4   [TYPE]  boolean false  true 
[REPLACE]^protected  NameTransformer _t1, _t2;^111^^^^^^^[REPLACE] protected final NameTransformer _t1, _t2;^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Chained   [TYPE]  boolean false  true 
[REPLACE]^_t2 = t2; ;^114^^^^^113^116^[REPLACE] _t1 = t1;^[METHOD] <init> [TYPE] NameTransformer) [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[ADD]^^114^^^^^113^116^[ADD] _t1 = t1;^[METHOD] <init> [TYPE] NameTransformer) [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^_t1 = t1; ;^115^^^^^113^116^[REPLACE] _t2 = t2;^[METHOD] <init> [TYPE] NameTransformer) [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[ADD]^^115^^^^^113^116^[ADD] _t2 = t2;^[METHOD] <init> [TYPE] NameTransformer) [PARAMETER] NameTransformer t1 NameTransformer t2 [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  boolean false  true 
[REPLACE]^return _t1.reverse ( _t2.transform ( name )  ) ;^120^^^^^119^121^[REPLACE] return _t1.transform ( _t2.transform ( name )  ) ;^[METHOD] transform [TYPE] String [PARAMETER] String name [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  String name  [TYPE]  boolean false  true 
[REPLACE]^transformed = _t2.reverse ( transformed ) ; ;^125^^^^^124^130^[REPLACE] transformed = _t1.reverse ( transformed ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^if  ( transformed == null )  {^126^^^^^124^130^[REPLACE] if  ( transformed != null )  {^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^transformed = _t1.reverse ( transformed ) ; ;^127^^^^^124^130^[REPLACE] transformed = _t2.reverse ( transformed ) ;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[ADD]^^127^128^^^^124^130^[ADD] transformed = _t2.reverse ( transformed ) ; }^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^return _t1.transform ( _t2.transform ( name )  ) ;^129^^^^^124^130^[REPLACE] return transformed;^[METHOD] reverse [TYPE] String [PARAMETER] String transformed [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  String transformed  [TYPE]  boolean false  true 
[REPLACE]^public String toString (  )  { return "[ChainedTransformer ( "+_t1+", "+_t2+" ) ]"; } }^133^^^^^^^[REPLACE] public String toString (  )  { return "[ChainedTransformer ( "+_t1+", "+_t2+" ) ]"; }^[METHOD] toString [TYPE] String [PARAMETER] [CLASS] Chained   [TYPE]  NameTransformer _t1  _t2  t1  t2  [TYPE]  boolean false  true 
