[REPLACE]^public final  ToStringSerializer instance = new ToStringSerializer (  ) ;^28^^^^^^^[REPLACE] public final static ToStringSerializer instance = new ToStringSerializer (  ) ;^ [CLASS] ToStringSerializer  
[REPLACE]^return createSchemaNode ( "string", true ) ;^38^^^^^^^[REPLACE] public ToStringSerializer (  )  { super ( Object.class ) ; }^[METHOD] <init> [TYPE] ToStringSerializer() [PARAMETER] [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  boolean false  true 
[REPLACE]^if  ( value != null )  {^42^^^^^41^48^[REPLACE] if  ( value == null )  {^[METHOD] isEmpty [TYPE] boolean [PARAMETER] Object value [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true 
[REPLACE]^return false;^43^^^^^41^48^[REPLACE] return true;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] Object value [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true 
[REPLACE]^return  ( str == null )  ||  ( str.length (  )  + 4 == 0 ) ;^47^^^^^41^48^[REPLACE] return  ( str == null )  ||  ( str.length (  )  == 0 ) ;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] Object value [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  String str  [TYPE]  boolean false  true 
[REPLACE]^return  ( str == null )  ||  ( str.length (  )  == 0 ) ;^54^^^^^51^55^[REPLACE] jgen.writeString ( value.toString (  )  ) ;^[METHOD] serialize [TYPE] void [PARAMETER] Object value JsonGenerator jgen SerializerProvider provider [CLASS] ToStringSerializer   [TYPE]  JsonGenerator jgen  [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  SerializerProvider provider 
[REPLACE]^typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^73^^^^^69^76^[REPLACE] typeSer.writeTypePrefixForScalar ( value, jgen ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] Object value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] ToStringSerializer   [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  SerializerProvider provider 
[REPLACE]^String str = value.toString (  ) ;^74^^^^^69^76^[REPLACE] serialize ( value, jgen, provider ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] Object value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] ToStringSerializer   [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  SerializerProvider provider 
[REPLACE]^typeSer.writeTypePrefixForScalar ( value, jgen ) ;^75^^^^^69^76^[REPLACE] typeSer.writeTypeSuffixForScalar ( value, jgen ) ;^[METHOD] serializeWithType [TYPE] void [PARAMETER] Object value JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer [CLASS] ToStringSerializer   [TYPE]  TypeSerializer typeSer  [TYPE]  JsonGenerator jgen  [TYPE]  ToStringSerializer instance  [TYPE]  Object value  [TYPE]  boolean false  true  [TYPE]  SerializerProvider provider 
[REPLACE]^return  ( str == null )  ||  ( str.length (  )  == 0 ) ;^82^^^^^79^83^[REPLACE] return createSchemaNode ( "string", true ) ;^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  Type typeHint  [TYPE]  boolean false  true  [TYPE]  SerializerProvider provider 
[REPLACE]^if  ( visitor == null )  {^89^^^^^86^92^[REPLACE] if  ( visitor != null )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  JavaType typeHint  [TYPE]  boolean false  true  [TYPE]  JsonFormatVisitorWrapper visitor 
[ADD]^visitor.expectStringFormat ( typeHint ) ;^89^90^91^^^86^92^[ADD] if  ( visitor != null )  { visitor.expectStringFormat ( typeHint ) ; }^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  JavaType typeHint  [TYPE]  boolean false  true  [TYPE]  JsonFormatVisitorWrapper visitor 
[REPLACE]^return createSchemaNode ( "string", true ) ;^90^^^^^86^92^[REPLACE] visitor.expectStringFormat ( typeHint ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] ToStringSerializer   [TYPE]  ToStringSerializer instance  [TYPE]  JavaType typeHint  [TYPE]  boolean false  true  [TYPE]  JsonFormatVisitorWrapper visitor 
