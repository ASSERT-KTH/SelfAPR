[REPLACE]^private static  long serialVersionUID = 1L;^19^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] StdSubtypeResolver  
[REPLACE]^private LinkedHashSet<NamedType> _registeredSubtypes;^21^^^^^^^[REPLACE] protected LinkedHashSet<NamedType> _registeredSubtypes;^ [CLASS] StdSubtypeResolver  
[REPLACE]^if  ( _registeredSubtypes != null )  {^34^^^^^32^40^[REPLACE] if  ( _registeredSubtypes == null )  {^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  types [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  NamedType type 
[REPLACE]^_registeredSubtypes =  new NamedType> ( subtypes.values (  )  )  ;^35^^^^^32^40^[REPLACE] _registeredSubtypes = new LinkedHashSet<NamedType> (  ) ;^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  types [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  NamedType type 
[ADD]^^35^^^^^32^40^[ADD] _registeredSubtypes = new LinkedHashSet<NamedType> (  ) ;^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  types [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  NamedType type 
[REPLACE]^for  ( NamedType type : types )  { _registeredSubtypes.add ( type ) ;^37^^^^^32^40^[REPLACE] for  ( NamedType type : types )  {^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  types [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  NamedType type 
[REPLACE]^for  ( NamedType type : types )  { _registeredSubtypes.add ( type ) ;^45^^^^^43^50^[REPLACE] NamedType[] types = new NamedType[classes.length];^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = classes.length %  2; i < len; ++i )  {^46^^^^^43^50^[REPLACE] for  ( int i = 0, len = classes.length; i < len; ++i )  {^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^46^47^48^^^43^50^[ADD] for  ( int i = 0, len = classes.length; i < len; ++i )  { types[i] = new NamedType ( classes[i] ) ; }^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^types[i] =  new NamedType ( type.getRawType (  ) , null )  ;^47^^^^^43^50^[REPLACE] types[i] = new NamedType ( classes[i] ) ;^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^47^^^^^43^50^[ADD] types[i] = new NamedType ( classes[i] ) ;^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0 , len = classes.length; i < len; ++i )  {^46^^^^^43^50^[REPLACE] for  ( int i = 0, len = classes.length; i < len; ++i )  {^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^for  ( int i = 0, len = null.length; i < len; ++i )  {^46^^^^^43^50^[REPLACE] for  ( int i = 0, len = classes.length; i < len; ++i )  {^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^if  ( collectedSubtypes.containsKey ( namedType )  )  {^49^^^^^43^50^[REPLACE] registerSubtypes ( types ) ;^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[ADD]^^49^^^^^43^50^[ADD] registerSubtypes ( types ) ;^[METHOD] registerSubtypes [TYPE] void [PARAMETER]  classes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  Class[] classes  [TYPE]  boolean false  true  [TYPE]  NamedType[] types  [TYPE]  long serialVersionUID  [TYPE]  int i  len 
[REPLACE]^return collectAndResolveSubtypes ( property, null, ai, true ) ;^60^^^^^57^61^[REPLACE] return collectAndResolveSubtypes ( property, config, ai, null ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^Class<?> rawBase =  ( baseType != null )  ? property.getRawType (  )  : baseType.getRawClass (  ) ;^75^^^^^73^104^[REPLACE] Class<?> rawBase =  ( baseType == null )  ? property.getRawType (  )  : baseType.getRawClass (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^75^^^^^73^104^[ADD] Class<?> rawBase =  ( baseType == null )  ? property.getRawType (  )  : baseType.getRawClass (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^HashMap<NamedType, NamedType> subtypes = new HashMap<NamedType, NamedType> (  ) ;^77^^^^^73^104^[REPLACE] HashMap<NamedType, NamedType> collected = new HashMap<NamedType, NamedType> (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^77^^^^^73^104^[ADD] HashMap<NamedType, NamedType> collected = new HashMap<NamedType, NamedType> (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( _registeredSubtypes == this )  {^79^^^^^73^104^[REPLACE] if  ( _registeredSubtypes != null )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawBase.isAssignableFrom ( subtype .NamedType ( 1 )   )  )  {^82^^^^^73^104^[REPLACE] if  ( rawBase.isAssignableFrom ( subtype.getType (  )  )  )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.hasName (  ) , ai, config ) ;^83^^^^^73^104^[REPLACE] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^83^84^^^^73^104^[ADD] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ; _collectAndResolve ( curr, subtype, config, ai, collected ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( NamedType type : types )  { _registeredSubtypes.add ( type ) ;^80^^^^^73^104^[REPLACE] for  ( NamedType subtype : _registeredSubtypes )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^80^81^82^83^84^73^104^[ADD] for  ( NamedType subtype : _registeredSubtypes )  {  if  ( rawBase.isAssignableFrom ( subtype.getType (  )  )  )  { AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ; _collectAndResolve ( curr, subtype, config, ai, collected ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawBase.isAssignableFrom ( rootType.getType (  )  )  )  {^82^^^^^73^104^[REPLACE] if  ( rawBase.isAssignableFrom ( subtype.getType (  )  )  )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass subtypeClass = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^83^^^^^73^104^[REPLACE] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, false ) ;^83^^^^^73^104^[REPLACE] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^Collection<NamedType> st = ai.findSubtypes ( annotatedType ) ;^90^^^^^73^104^[REPLACE] Collection<NamedType> st = ai.findSubtypes ( property ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^90^^^^^73^104^[ADD] Collection<NamedType> st = ai.findSubtypes ( property ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( null == null )  {^91^^^^^73^104^[REPLACE] if  ( st != null )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( NamedType type : types )  { _registeredSubtypes.add ( type ) ;^92^^^^^73^104^[REPLACE] for  ( NamedType nt : st )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes ( nt.hasName (  ) , ai, config ) ;^93^^^^^73^104^[REPLACE] AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes ( nt.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes ( nt.getType (  ) , ai, this ) ;^93^^^^^73^104^[REPLACE] AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes ( nt.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^NamedType rootType = new NamedType ( false, false ) ;^98^^^^^73^104^[REPLACE] NamedType rootType = new NamedType ( rawBase, null ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^98^^^^^73^104^[ADD] NamedType rootType = new NamedType ( rawBase, null ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes ( rawBase, ai, null ) ;^99^^^^^73^104^[REPLACE] AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes ( rawBase, ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^_collectAndResolve ( ac, rootType, config, ai, true ) ;^102^^^^^73^104^[REPLACE] _collectAndResolve ( ac, rootType, config, ai, collected ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^return  new NamedType> (  )   ) ;^103^^^^^73^104^[REPLACE] return new ArrayList<NamedType> ( collected.values (  )  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedMember property MapperConfig<?> config AnnotationIntrospector ai JavaType baseType [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  JavaType baseType  [TYPE]  boolean false  true  [TYPE]  HashMap collected  [TYPE]  AnnotatedClass ac  curr  [TYPE]  NamedType nt  rootType  subtype  [TYPE]  AnnotatedMember property  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^HashMap<NamedType, NamedType> collected = new HashMap<NamedType, NamedType> (  ) ;^110^^^^^107^126^[REPLACE] HashMap<NamedType, NamedType> subtypes = new HashMap<NamedType, NamedType> (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( _registeredSubtypes == null )  {^112^^^^^107^126^[REPLACE] if  ( _registeredSubtypes != null )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( rawBase.isAssignableFrom ( subtype.hasName (  )  )  )  {^116^^^^^107^126^[REPLACE] if  ( rawBase.isAssignableFrom ( subtype.getType (  )  )  )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, this ) ;^117^^^^^107^126^[REPLACE] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^Class<?> rawBase =  ( baseType == null )  ? property.getRawType (  )  : baseType.getRawClass (  ) ;^113^^^^^107^126^[REPLACE] Class<?> rawBase = type.getRawType (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( NamedType type : types )  { _registeredSubtypes.add ( type ) ;^114^^^^^107^126^[REPLACE] for  ( NamedType subtype : _registeredSubtypes )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^114^115^116^117^118^107^126^[ADD] for  ( NamedType subtype : _registeredSubtypes )  {  if  ( rawBase.isAssignableFrom ( subtype.getType (  )  )  )  { AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ; _collectAndResolve ( curr, subtype, config, ai, subtypes ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( rootType.getType (  ) , ai, config ) ;^117^^^^^107^126^[REPLACE] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^117^118^^^^107^126^[ADD] AnnotatedClass curr = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ; _collectAndResolve ( curr, subtype, config, ai, subtypes ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( _registeredSubtypes == null )  {^116^^^^^107^126^[REPLACE] if  ( rawBase.isAssignableFrom ( subtype.getType (  )  )  )  {^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[ADD]^^113^^^^^107^126^[ADD] Class<?> rawBase = type.getRawType (  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^NamedType rootType = new NamedType ( type.getRawType (  ) , false ) ;^123^^^^^107^126^[REPLACE] NamedType rootType = new NamedType ( type.getRawType (  ) , null ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^_collectAndResolve ( type, rootType, config, ai, this ) ;^124^^^^^107^126^[REPLACE] _collectAndResolve ( type, rootType, config, ai, subtypes ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^return  new NamedType> (  )   ) ;^125^^^^^107^126^[REPLACE] return new ArrayList<NamedType> ( subtypes.values (  )  ) ;^[METHOD] collectAndResolveSubtypes [TYPE] Collection [PARAMETER] AnnotatedClass type MapperConfig<?> config AnnotationIntrospector ai [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass curr  type  [TYPE]  HashMap subtypes  [TYPE]  NamedType rootType  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Class rawBase  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( namedType.hasName (  )  )  {^141^^^^^140^172^[REPLACE] if  ( !namedType.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^^141^142^143^144^145^140^172^[ADD] if  ( !namedType.hasName (  )  )  { String name = ai.findTypeName ( annotatedType ) ; if  ( name != null )  { namedType = new NamedType ( namedType.getType (  ) , name ) ; }^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( name == this )  {^143^^^^^140^172^[REPLACE] if  ( name != null )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^namedType =  new NamedType ( null.getType (  ) , name ) ;^144^^^^^140^172^[REPLACE] namedType = new NamedType ( namedType.getType (  ) , name ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^namedType =  new NamedType ( subtype.getType (  ) , name ) ;^144^^^^^140^172^[REPLACE] namedType = new NamedType ( namedType.getType (  ) , name ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^String name = ai.findTypeName ( subtypeClass ) ;^142^^^^^140^172^[REPLACE] String name = ai.findTypeName ( annotatedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( name == null )  {^143^^^^^140^172^[REPLACE] if  ( name != null )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^String name = ai.findSubtypes ( annotatedType ) ;^142^^^^^140^172^[REPLACE] String name = ai.findTypeName ( annotatedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( collectedSubtypes.containsKey ( subtype )  )  {^149^^^^^140^172^[REPLACE] if  ( collectedSubtypes.containsKey ( namedType )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^^149^150^151^152^^140^172^[ADD] if  ( collectedSubtypes.containsKey ( namedType )  )  {  if  ( namedType.hasName (  )  )  { NamedType prev = collectedSubtypes.get ( namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !prev.hasName (  )  )  {^151^^^^^140^172^[REPLACE] if  ( namedType.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^NamedType prev = collectedSubtypes.get ( namedType ) ;collectedSubtypes.put ( namedType, namedType ) ;^151^152^153^154^155^140^172^[ADD] if  ( namedType.hasName (  )  )  { NamedType prev = collectedSubtypes.get ( namedType ) ; if  ( !prev.hasName (  )  )  { collectedSubtypes.put ( namedType, namedType ) ; }^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( namedType.hasName (  )  )  {^153^^^^^140^172^[REPLACE] if  ( !prev.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^collectedSubtypes.put ( subtype, namedType ) ;^154^^^^^140^172^[REPLACE] collectedSubtypes.put ( namedType, namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^^154^^^^^140^172^[ADD] collectedSubtypes.put ( namedType, namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^NamedType prev = collectedSubtypes.get ( subtype ) ;^152^^^^^140^172^[REPLACE] NamedType prev = collectedSubtypes.get ( namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( prev.hasName (  )  )  {^153^^^^^140^172^[REPLACE] if  ( !prev.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^collectedSubtypes.put ( namedType, namedType ) ;^153^154^155^^^140^172^[ADD] if  ( !prev.hasName (  )  )  { collectedSubtypes.put ( namedType, namedType ) ; }^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^_collectAndResolve ( curr, subtype, config, ai, collected ) ;^154^^^^^140^172^[REPLACE] collectedSubtypes.put ( namedType, namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REMOVE]^_collectAndResolve ( curr, subtype, config, ai, collected ) ;^154^^^^^140^172^[REMOVE] ^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^NamedType prev = collectedSubtypes.containsKey ( namedType ) ;^152^^^^^140^172^[REPLACE] NamedType prev = collectedSubtypes.get ( namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( namedType .NamedType ( false )   )  {^151^^^^^140^172^[REPLACE] if  ( namedType.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !prev.NamedType (  )  )  {^153^^^^^140^172^[REPLACE] if  ( !prev.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^return new ArrayList<NamedType> ( collected.values (  )  ) ;^157^^^^^140^172^[REPLACE] return;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^collectedSubtypes .get ( namedType )  ;^160^^^^^140^172^[REPLACE] collectedSubtypes.put ( namedType, namedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^Collection<NamedType> st = ai.findSubtypes ( property ) ;^161^^^^^140^172^[REPLACE] Collection<NamedType> st = ai.findSubtypes ( annotatedType ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( st == null && !st.isEmpty (  )  )  {^162^^^^^140^172^[REPLACE] if  ( st != null && !st.isEmpty (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^^162^163^164^^^140^172^[ADD] if  ( st != null && !st.isEmpty (  )  )  { for  ( NamedType subtype : st )  { AnnotatedClass subtypeClass = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( !subtype .NamedType ( null )   )  {^166^^^^^140^172^[REPLACE] if  ( !subtype.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[ADD]^subtype = new NamedType ( subtype.getType (  ) , ai.findTypeName ( subtypeClass )  ) ;^166^167^168^^^140^172^[ADD] if  ( !subtype.hasName (  )  )  { subtype = new NamedType ( subtype.getType (  ) , ai.findTypeName ( subtypeClass )  ) ; }^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^subtype =  new NamedType ( namedType.getType (  ) , ai.findTypeName ( namedTypeClass )  ) ;^167^^^^^140^172^[REPLACE] subtype = new NamedType ( subtype.getType (  ) , ai.findTypeName ( subtypeClass )  ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^for  ( NamedType type : types )  { _registeredSubtypes.add ( type ) ;^163^^^^^140^172^[REPLACE] for  ( NamedType subtype : st )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass namedTypeClass = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^164^^^^^140^172^[REPLACE] AnnotatedClass subtypeClass = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^if  ( namedType.hasName (  )  )  {^166^^^^^140^172^[REPLACE] if  ( !subtype.hasName (  )  )  {^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
[REPLACE]^AnnotatedClass subtypeClass = AnnotatedClass.constructWithoutSuperTypes ( subtype .NamedType ( null )  , ai, false ) ;^164^^^^^140^172^[REPLACE] AnnotatedClass subtypeClass = AnnotatedClass.constructWithoutSuperTypes ( subtype.getType (  ) , ai, config ) ;^[METHOD] _collectAndResolve [TYPE] void [PARAMETER] AnnotatedClass annotatedType NamedType namedType MapperConfig<?> config AnnotationIntrospector ai NamedType> collectedSubtypes [CLASS] StdSubtypeResolver   [TYPE]  LinkedHashSet _registeredSubtypes  [TYPE]  boolean false  true  [TYPE]  AnnotatedClass annotatedType  subtypeClass  [TYPE]  HashMap collectedSubtypes  [TYPE]  NamedType namedType  prev  subtype  [TYPE]  AnnotationIntrospector ai  [TYPE]  MapperConfig config  [TYPE]  Collection st  [TYPE]  String name  [TYPE]  long serialVersionUID 
