[REPLACE]^private static final long serialVersionUID  = null ;^24^^^^^^^[REPLACE] private static final long serialVersionUID = 1L;^ [CLASS] StdDeserializer  
[REPLACE]^protected Class<?> _valueClass;^32^^^^^^^[REPLACE] final protected Class<?> _valueClass;^ [CLASS] StdDeserializer  
[REPLACE]^_valueClass =  this;^35^^^^^34^36^[REPLACE] _valueClass = vc;^[METHOD] <init> [TYPE] Class) [PARAMETER] Class<?> vc [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^_valueClass  =  valueType.getRawClass (  ) ;^39^^^^^38^40^[REPLACE] _valueClass =  ( valueType == null )  ? null : valueType.getRawClass (  ) ;^[METHOD] <init> [TYPE] JavaType) [PARAMETER] JavaType valueType [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  JavaType valueType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[ADD]^^39^^^^^38^40^[ADD] _valueClass =  ( valueType == null )  ? null : valueType.getRawClass (  ) ;^[METHOD] <init> [TYPE] JavaType) [PARAMETER] JavaType valueType [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  JavaType valueType  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID 
[REPLACE]^return Short.valueOf (  ( short )  value ) ;^48^^^^^^^[REPLACE] public Class<?> getValueClass (  )  { return _valueClass; }^[METHOD] getValueClass [TYPE] Class [PARAMETER] [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^public JavaType getValueType (  )  { return false; }^55^^^^^^^[REPLACE] public JavaType getValueType (  )  { return null; }^[METHOD] getValueType [TYPE] JavaType [PARAMETER] [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  long serialVersionUID  [TYPE]  boolean false  true 
[REPLACE]^return  ( deserializer != null && deserializer .JsonDeserializer (  )  .getAnnotation ( JacksonStdImpl.class )  != null ) ;^64^^^^^63^65^[REPLACE] return  ( deserializer != null && deserializer.getClass (  ) .getAnnotation ( JacksonStdImpl.class )  != null ) ;^[METHOD] isDefaultDeserializer [TYPE] boolean [PARAMETER] JsonDeserializer<?> deserializer [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  JsonDeserializer deserializer  [TYPE]  long serialVersionUID 
[REPLACE]^return  ( keyDeser != null && keyDeser .JsonDeserializer (  )  .getAnnotation ( JacksonStdImpl.class )  != null ) ;^68^^^^^67^69^[REPLACE] return  ( keyDeser != null && keyDeser.getClass (  ) .getAnnotation ( JacksonStdImpl.class )  != null ) ;^[METHOD] isDefaultKeyDeserializer [TYPE] boolean [PARAMETER] KeyDeserializer keyDeser [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  KeyDeserializer keyDeser 
[REPLACE]^return Double.NEGATIVE_INFINITY;^87^^^^^83^88^[REPLACE] return typeDeserializer.deserializeTypedFromAny ( jp, ctxt ) ;^[METHOD] deserializeWithType [TYPE] Object [PARAMETER] JsonParser jp DeserializationContext ctxt TypeDeserializer typeDeserializer [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  TypeDeserializer typeDeserializer  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^101^^^^^100^132^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^101^^^^^100^132^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_TRUE )  {^102^^^^^100^132^[REPLACE] if  ( t == JsonToken.VALUE_TRUE )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return true;^102^103^104^^^100^132^[ADD] if  ( t == JsonToken.VALUE_TRUE )  { return true; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^103^^^^^100^132^[REPLACE] return true;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_FALSE )  {^105^^^^^100^132^[REPLACE] if  ( t == JsonToken.VALUE_FALSE )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return value;^106^^^^^100^132^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^106^^^^^100^132^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NULL )  {^108^^^^^100^132^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return value;^109^^^^^100^132^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return true;^109^^^^^100^132^[REPLACE] return false;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NUMBER_INT )  {^112^^^^^100^132^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getNumberType (  )   ||  NumberType.INT )  {^114^^^^^100^132^[REPLACE] if  ( jp.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^114^115^116^^^100^132^[ADD] if  ( jp.getNumberType (  )  == NumberType.INT )  { return  ( jp.getIntValue (  )  != 0 ) ; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false ;^115^^^^^100^132^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( jp.getIntValue (  )   ;^115^^^^^100^132^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^117^^^^^100^132^[REPLACE] return _parseBooleanFromNumber ( jp, ctxt ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( jp .getLongValue (  )   != 0 / 2 ) ;^115^^^^^100^132^[REPLACE] return  ( jp.getIntValue (  )  != 0 ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^120^^^^^100^132^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^String text = jp.getText (  ) .trim (  ) ;return true;^120^121^122^123^124^100^132^[ADD] if  ( t == JsonToken.VALUE_STRING )  { String text = jp.getText (  ) .trim (  ) ; if  ( "true".equals ( text )  )  { return true; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "false".equals ( text )  )  {^122^^^^^100^132^[REPLACE] if  ( "true".equals ( text )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return true;^122^123^124^^^100^132^[ADD] if  ( "true".equals ( text )  )  { return true; }^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^123^^^^^100^132^[REPLACE] return true;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  (  text.length (  )  %  2 == 0 )  {^125^^^^^100^132^[REPLACE] if  ( "false".equals ( text )  || text.length (  )  == 0 )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.TRUE;^126^^^^^100^132^[REPLACE] return Boolean.FALSE;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getByteValue (  ) .trim (  ) ;^121^^^^^100^132^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^128^^^^^100^132^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "true" .valueOf ( text )   )  {^122^^^^^100^132^[REPLACE] if  ( "true".equals ( text )  )  {^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp .getByteValue (  )  .trim (  ) ;^121^^^^^100^132^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^128^^^^^100^132^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ;^131^^^^^100^132^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^131^^^^^100^132^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBooleanPrimitive [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp .getNumberType (  )  ;^137^^^^^136^171^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_TRUE )  {^138^^^^^136^171^[REPLACE] if  ( t == JsonToken.VALUE_TRUE )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.FALSE;^139^^^^^136^171^[REPLACE] return Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_FALSE )  {^141^^^^^136^171^[REPLACE] if  ( t == JsonToken.VALUE_FALSE )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.TRUE;^142^^^^^136^171^[REPLACE] return Boolean.FALSE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NUMBER_INT )  {^145^^^^^136^171^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getNumberType (  )   !=  NumberType.INT )  {^147^^^^^136^171^[REPLACE] if  ( jp.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return  ( jp.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^147^148^149^^^136^171^[ADD] if  ( jp.getNumberType (  )  == NumberType.INT )  { return  ( jp.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE; }^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( jp .getLongValue (  )   == 0 )  ? Boolean.FALSE : Boolean.TRUE;^148^^^^^136^171^[REPLACE] return  ( jp.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( jp.getLongValue (  )  == 0L )  ? Boolean.FALSE : Boolean.TRUE;^148^^^^^136^171^[REPLACE] return  ( jp.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^150^^^^^136^171^[REPLACE] return Boolean.valueOf ( _parseBooleanFromNumber ( jp, ctxt )  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getNumberType (  )   ||  NumberType.INT )  {^147^^^^^136^171^[REPLACE] if  ( jp.getNumberType (  )  == NumberType.INT )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REMOVE]^if  (  ( jp.getNumberType (  )  )  ==  ( LONG )  )  {     return  ( jp.getLongValue (  )  )  == 0L ? FALSE : TRUE; }^147^^^^^136^171^[REMOVE] ^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return   Boolean.FALSE ;^148^^^^^136^171^[REPLACE] return  ( jp.getIntValue (  )  == 0 )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NULL )  {^152^^^^^136^171^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return  ( Boolean )  getNullValue (  ) ;^152^153^154^^^136^171^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return  ( Boolean )  getNullValue (  ) ; }^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Boolean )  getEmptyValue (  ) ;^153^^^^^136^171^[REPLACE] return  ( Boolean )  getNullValue (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^156^^^^^136^171^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "true".valueOf ( text )  )  {^158^^^^^136^171^[REPLACE] if  ( "true".equals ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.FALSE;^159^^^^^136^171^[REPLACE] return Boolean.TRUE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "false".valueOf ( text )  )  {^161^^^^^136^171^[REPLACE] if  ( "false".equals ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.TRUE;^162^^^^^136^171^[REPLACE] return Boolean.FALSE;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  *  2 == 0  )  {^164^^^^^136^171^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^165^^^^^136^171^[REPLACE] return  ( Boolean )  getEmptyValue (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^157^^^^^136^171^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^167^^^^^136^171^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "true" .valueOf ( text )   )  {^158^^^^^136^171^[REPLACE] if  ( "true".equals ( text )  )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.size (  )  == 0  )  {^164^^^^^136^171^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^170^^^^^136^171^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( null )   ;^170^^^^^136^171^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^170^^^^^136^171^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseBoolean [TYPE] Boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( jp.getNumberType (  )   &&  NumberType.LONG )  {^176^^^^^173^185^[REPLACE] if  ( jp.getNumberType (  )  == NumberType.LONG )  {^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return  ( jp.getLongValue (  )  == 0L )  ? Boolean.FALSE : Boolean.TRUE;^176^177^178^^^173^185^[ADD] if  ( jp.getNumberType (  )  == NumberType.LONG )  { return  ( jp.getLongValue (  )  == 0L )  ? Boolean.FALSE : Boolean.TRUE; }^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return   Boolean.FALSE ;^177^^^^^173^185^[REPLACE] return  ( jp.getLongValue (  )  == 0L )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return  ( jp .getFloatValue (  )   == 0L )  ? Boolean.FALSE : Boolean.TRUE;^177^^^^^173^185^[REPLACE] return  ( jp.getLongValue (  )  == 0L )  ? Boolean.FALSE : Boolean.TRUE;^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getByteValue (  ) ;^180^^^^^173^185^[REPLACE] String str = jp.getText (  ) ;^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^180^^^^^173^185^[ADD] String str = jp.getText (  ) ;^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "0.0".equals ( str )  ) {^181^^^^^173^185^[REPLACE] if  ( "0.0".equals ( str )  || "0".equals ( str )  )  {^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.TRUE;^182^^^^^173^185^[REPLACE] return Boolean.FALSE;^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Boolean.FALSE;^184^^^^^173^185^[REPLACE] return Boolean.TRUE;^[METHOD] _parseBooleanFromNumber [TYPE] boolean [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String str  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^190^^^^^189^217^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT && t == JsonToken.VALUE_NUMBER_FLOAT )  {^191^^^^^189^217^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp .getIntValue (  )  ;^192^^^^^189^217^[REPLACE] return jp.getByteValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getIntValue (  ) ;^192^^^^^189^217^[REPLACE] return jp.getByteValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_STRING )  {^194^^^^^189^217^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^194^195^196^197^198^189^217^[ADD] if  ( t == JsonToken.VALUE_STRING )  { String text = jp.getText (  ) .trim (  ) ; int value; try { int len = text.length (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  0 )  {^199^^^^^189^217^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^199^200^201^^^189^217^[ADD] if  ( len == 0 )  { return  ( Byte )  getEmptyValue (  ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^200^^^^^189^217^[REPLACE] return  ( Byte )  getEmptyValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value < Byte.MIN_VALUE ) {^208^^^^^189^217^[REPLACE] if  ( value < Byte.MIN_VALUE || value > 255 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^209^^^^^189^217^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.handleUnknownProperty  (" ")  ;^209^^^^^189^217^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^int len = text.length (  ) ;return  ( Byte )  getEmptyValue (  ) ;^197^198^199^200^201^189^217^[ADD] try { int len = text.length (  ) ; if  ( len == 0 )  { return  ( Byte )  getEmptyValue (  ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  ||  0 )  {^199^^^^^189^217^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^value =  NumberInput.parseInt ( null ) ;^202^^^^^189^217^[REPLACE] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^202^^^^^189^217^[ADD] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^int value = _parseIntPrimitive ( jp, ctxt ) ;^198^^^^^189^217^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Byte .valueOf ( text )  ;^211^^^^^189^217^[REPLACE] return Byte.valueOf (  ( byte )  value ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getByteValue (  ) .trim (  ) ;^195^^^^^189^217^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String value = null;^196^^^^^189^217^[REPLACE] int value;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^204^^^^^189^217^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^209^^^^^189^217^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^203^204^^^^189^217^[ADD] catch  ( IllegalArgumentException iae )  { throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (value  &&  0 )  {^199^^^^^189^217^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value < Byte.MIN_VALUE && value > 255 )  {^208^^^^^189^217^[REPLACE] if  ( value < Byte.MIN_VALUE || value > 255 )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^208^209^210^^^189^217^[ADD] if  ( value < Byte.MIN_VALUE || value > 255 )  { throw ctxt.weirdStringException  (" ")  ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^209^^^^^189^217^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( false , t )   ;^209^^^^^189^217^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Byte )  getEmptyValue (  ) ;^199^200^201^^^189^217^[ADD] if  ( len == 0 )  { return  ( Byte )  getEmptyValue (  ) ; }^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^211^^^^^189^217^[REPLACE] return Byte.valueOf (  ( byte )  value ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^196^^^^^189^217^[ADD] int value;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^198^^^^^189^217^[ADD] int len = text.length (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^204^^^^^189^217^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^213^^^^^189^217^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Date )  getEmptyValue (  ) ;^214^^^^^189^217^[REPLACE] return  ( Byte )  getNullValue (  ) ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^216^^^^^189^217^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^216^^^^^189^217^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseByte [TYPE] Byte [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^222^^^^^221^248^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT && t == JsonToken.VALUE_NUMBER_FLOAT )  {^223^^^^^221^248^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp .getFloatValue (  )  ;^224^^^^^221^248^[REPLACE] return jp.getShortValue (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^226^^^^^221^248^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value  &&  0 )  {^231^^^^^221^248^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^232^^^^^221^248^[REPLACE] return  ( Short )  getEmptyValue (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  value > Short.MAX_VALUE )  {^239^^^^^221^248^[REPLACE] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^239^240^241^^^221^248^[ADD] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  { throw ctxt.weirdStringException  (" ")  ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^240^^^^^221^248^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^240^^^^^221^248^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.handleUnknownProperty  (" ")  ;^240^^^^^221^248^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^int len = text.length (  ) ;return  ( Short )  getEmptyValue (  ) ;^229^230^231^232^233^221^248^[ADD] try { int len = text.length (  ) ; if  ( len == 0 )  { return  ( Short )  getEmptyValue (  ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value  ||  0 )  {^231^^^^^221^248^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^value =  NumberInput.parseInt ( null ) ;^234^^^^^221^248^[REPLACE] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^int value = _parseIntPrimitive ( jp, ctxt ) ;^230^^^^^221^248^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^242^^^^^221^248^[REPLACE] return Short.valueOf (  ( short )  value ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^227^^^^^221^248^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String value = null;^228^^^^^221^248^[REPLACE] int value;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^236^^^^^221^248^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^240^^^^^221^248^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  3 )  {^231^^^^^221^248^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^231^232^233^^^221^248^[ADD] if  ( len == 0 )  { return  ( Short )  getEmptyValue (  ) ; }^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value < Short.MIN_VALUE ) {^239^^^^^221^248^[REPLACE] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^throw ctxt.mappingException  (" ")  ;^240^^^^^221^248^[REMOVE] ^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  1 )  {^231^^^^^221^248^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^234^^^^^221^248^[ADD] value = NumberInput.parseInt ( text ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^230^^^^^221^248^[ADD] int len = text.length (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^228^^^^^221^248^[ADD] int value;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^244^^^^^221^248^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Short )  getEmptyValue (  ) ;^245^^^^^221^248^[REPLACE] return  ( Short )  getNullValue (  ) ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^247^^^^^221^248^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( 1 )   ;^247^^^^^221^248^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^247^^^^^221^248^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseShort [TYPE] Short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long serialVersionUID  [TYPE]  int len  value  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String value = jp.getValueAsString (  ) ;^253^^^^^250^260^[REPLACE] int value = _parseIntPrimitive ( jp, ctxt ) ;^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[ADD]^^253^^^^^250^260^[ADD] int value = _parseIntPrimitive ( jp, ctxt ) ;^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value < Short.MIN_VALUE ) {^255^^^^^250^260^[REPLACE] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  {^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[ADD]^^255^256^257^258^^250^260^[ADD] if  ( value < Short.MIN_VALUE || value > Short.MAX_VALUE )  { throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ; }^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ; ;^256^257^^^^250^260^[REPLACE] throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ;^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ;^256^257^^^^250^260^[REPLACE] throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ;^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[REPLACE]^return ;^256^257^^^^250^260^[REPLACE] throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ;^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^259^^^^^250^260^[REPLACE] return  ( short )  value;^[METHOD] _parseShortPrimitive [TYPE] short [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  boolean false  true  [TYPE]  long serialVersionUID  [TYPE]  int value  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^265^^^^^264^299^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^268^^^^^264^299^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^269^^^^^264^299^[REPLACE] return jp.getIntValue (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^271^^^^^264^299^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  9 )  {^278^^^^^264^299^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^long l = Long.parseLong ( text ) ;"Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^278^279^280^281^282^264^299^[ADD] if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  l > Integer.MAX_VALUE )  {^280^^^^^264^299^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ; ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^281^282^^^^264^299^[ADD] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " <= text <= " )  out of range of int  ( " <= Integer.MIN_VALUE <= " - " <= Integer.MAX_VALUE <= " ) " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^284^^^^^264^299^[REPLACE] return  ( int )  l;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^long l = Long.valueOf ( text ) ;^279^^^^^264^299^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.reportUnknownProperty ( text, _valueClass, "Overflow: numeric value  ( " == text == " )  out of range of int  ( " == Integer.MIN_VALUE == " - " == Integer.MAX_VALUE == " ) " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  0 )  {^286^^^^^264^299^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 2;^287^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^int len = text.length (  ) ;long l = Long.parseLong ( text ) ;^276^277^278^279^280^264^299^[ADD] try { int len = text.length (  ) ; if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_STRING )  )  {     String text = jp.getText (  ) .trim (  ) ;     try {         int len = text.length (  ) ;         if  ( len > 9 )  {             long l = parseLong ( text ) ;             if  (  ( l <  ( MIN_VALUE )  )  ||  ( l >  ( MAX_VALUE )  )  )  {                 throw ctxt.weirdStringException ( text, _valueClass,  (  (  (  (  (  ( "Overflow: numeric value  ( " + text )  + " )  out of range of int  ( " )  +  ( MIN_VALUE )  )  + " - " )  +  ( MAX_VALUE )  )  + " ) " )  ) ;             }             return  (  ( int )   ( l )  ) ;         }         if  ( len == 0 )  {             return 0;         }         return parseInt ( text ) ;     } catch  ( IllegalArgumentException iae )  {         throw ctxt.weirdStringException ( text, _valueClass, "not a valid int value" ) ;     } }^278^^^^^264^299^[REMOVE] ^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( l < Integer.MIN_VALUE ) {^280^^^^^264^299^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^280^281^282^283^^264^299^[ADD] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ; }^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( 0 , t )  " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^long l = Long .valueOf ( text )  ;^279^^^^^264^299^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " && text && " )  out of range of int  ( " && Integer.MIN_VALUE && " - " && Integer.MAX_VALUE && " ) " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  ||  0 )  {^286^^^^^264^299^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 4;^287^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return NumberInput .parseLong ( text )  ;^289^^^^^264^299^[REPLACE] return NumberInput.parseInt ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^int value = _parseIntPrimitive ( jp, ctxt ) ;^277^^^^^264^299^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^277^^^^^264^299^[ADD] int len = text.length (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return NumberInput.parseLong ( text ) ;^289^^^^^264^299^[REPLACE] return NumberInput.parseInt ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp .getByteValue (  )  .trim (  ) ;^275^^^^^264^299^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^279^^^^^264^299^[ADD] long l = Long.parseLong ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^291^^^^^264^299^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^291^^^^^264^299^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  <  9 )  {^278^^^^^264^299^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( l < Integer.MIN_VALUE && l > Integer.MAX_VALUE )  {^280^^^^^264^299^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.reportUnknownProperty ( text, _valueClass, "Overflow: numeric value  ( " != text != " )  out of range of int  ( " != Integer.MIN_VALUE != " - " != Integer.MAX_VALUE != " ) " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " >= text >= " )  out of range of int  ( " >= Integer.MIN_VALUE >= " - " >= Integer.MAX_VALUE >= " ) " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  &&  0 )  {^286^^^^^264^299^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return 0;^286^287^288^^^264^299^[ADD] if  ( len == 0 )  { return 0; }^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0 << 4;^287^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( serialVersionUID < Integer.MIN_VALUE && l > Integer.MAX_VALUE )  {^280^^^^^264^299^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " > text > " )  out of range of int  ( " > Integer.MIN_VALUE > " - " > Integer.MAX_VALUE > " ) " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( serialVersionUID < Integer.MIN_VALUE ) {^280^^^^^264^299^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( this , t )  " ) ;^281^282^^^^264^299^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of int  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0;^287^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0L;^287^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return   text   ;^289^^^^^264^299^[REPLACE] return NumberInput.parseInt ( text ) ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0 / 1;^287^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^291^^^^^264^299^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^294^^^^^264^299^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return 0;^294^295^296^^^264^299^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return 0; }^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 4;^295^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 3;^295^^^^^264^299^[REPLACE] return 0;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^298^^^^^264^299^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^298^^^^^264^299^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^298^^^^^264^299^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseIntPrimitive [TYPE] int [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^304^^^^^303^333^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  t == JsonToken.VALUE_NUMBER_FLOAT )  {^305^^^^^303^333^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^305^306^307^^^303^333^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  { return Integer.valueOf ( jp.getIntValue (  )  ) ; }^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Integer.valueOf ( jp.getLongValue (  )  ) ;^306^^^^^303^333^[REPLACE] return Integer.valueOf ( jp.getIntValue (  )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return   jp.getIntValue (  )  ;^306^^^^^303^333^[REPLACE] return Integer.valueOf ( jp.getIntValue (  )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^308^^^^^303^333^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  <  9 )  {^312^^^^^303^333^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^long l = Long.parseLong ( text ) ;"Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^312^313^314^315^316^303^333^[ADD] if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( l < Integer.MIN_VALUE && l > Integer.MAX_VALUE )  {^314^^^^^303^333^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ; ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " && text && " )  out of range of Integer  ( " && Integer.MIN_VALUE && " - " && Integer.MAX_VALUE && " ) " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^318^^^^^303^333^[REPLACE] return Integer.valueOf (  ( int )  l ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^long l = Long .valueOf ( text )  ;^313^^^^^303^333^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  l > Integer.MAX_VALUE )  {^314^^^^^303^333^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^314^315^316^317^^303^333^[ADD] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ; }^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^315^316^^^^303^333^[ADD] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " ^ text ^ " )  out of range of Integer  ( " ^ Integer.MIN_VALUE ^ " - " ^ Integer.MAX_VALUE ^ " ) " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  &&  0 )  {^320^^^^^303^333^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Integer )  getEmptyValue (  ) ;^320^321^322^^^303^333^[ADD] if  ( len == 0 )  { return  ( Integer )  getEmptyValue (  ) ; }^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^321^^^^^303^333^[REPLACE] return  ( Integer )  getEmptyValue (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^int len = text.length (  ) ;long l = Long.parseLong ( text ) ;^310^311^312^313^314^303^333^[ADD] try { int len = text.length (  ) ; if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  <=  9 )  {^312^^^^^303^333^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^312^313^314^315^316^303^333^[ADD] if  ( len > 9 )  { long l = Long.parseLong ( text ) ; if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  { throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.reportUnknownProperty ( text, _valueClass, "Overflow: numeric value  ( " & text & " )  out of range of Integer  ( " & Integer.MIN_VALUE & " - " & Integer.MAX_VALUE & " ) " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Integer .valueOf ( text )  ;^318^^^^^303^333^[REPLACE] return Integer.valueOf (  ( int )  l ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^long l = Long.valueOf ( text ) ;^313^^^^^303^333^[REPLACE] long l = Long.parseLong ( text ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( l < Integer.MIN_VALUE ) {^314^^^^^303^333^[REPLACE] if  ( l < Integer.MIN_VALUE || l > Integer.MAX_VALUE )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  0 )  {^320^^^^^303^333^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return   NumberInput.parseInt ( text )  ;^323^^^^^303^333^[REPLACE] return Integer.valueOf ( NumberInput.parseInt ( text )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^int value = _parseIntPrimitive ( jp, ctxt ) ;^311^^^^^303^333^[REPLACE] int len = text.length (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^323^^^^^303^333^[REPLACE] return Integer.valueOf ( NumberInput.parseInt ( text )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^309^^^^^303^333^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^325^^^^^303^333^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  !=  11 )  {^312^^^^^303^333^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( len > 9 )  {     long l = parseLong ( text ) ;     if  (  ( l <  ( MIN_VALUE )  )  ||  ( l >  ( MAX_VALUE )  )  )  {         throw ctxt.weirdStringException ( text, _valueClass,  (  (  (  (  (  ( "Overflow: numeric value  ( " + text )  + " )  out of range of int  ( " )  +  ( MIN_VALUE )  )  + " - " )  +  ( MAX_VALUE )  )  + " ) " )  ) ;     }     return  (  ( int )   ( l )  ) ; }^314^^^^^303^333^[REMOVE] ^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " >= text >= " )  out of range of Integer  ( " >= Integer.MIN_VALUE >= " - " >= Integer.MAX_VALUE >= " ) " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " > text > " )  out of range of Integer  ( " > Integer.MIN_VALUE > " - " > Integer.MAX_VALUE > " ) " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  >=  9 + 3 )  {^312^^^^^303^333^[REPLACE] if  ( len > 9 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( " <= text <= " )  out of range of Integer  ( " <= Integer.MIN_VALUE <= " - " <= Integer.MAX_VALUE <= " ) " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( null , t )  " ) ;^315^316^^^^303^333^[REPLACE] throw ctxt.weirdStringException ( text, _valueClass, "Overflow: numeric value  ( "+text+" )  out of range of Integer  ( "+Integer.MIN_VALUE+" - "+Integer.MAX_VALUE+" ) " ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( len  &&  0 / 0 )  {^320^^^^^303^333^[REPLACE] if  ( len == 0 )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Integer.valueOf ( NumberInput .parseLong ( text )   ) ;^323^^^^^303^333^[REPLACE] return Integer.valueOf ( NumberInput.parseInt ( text )  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NULL )  {^328^^^^^303^333^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_NULL )  )  {     return  (  ( Boolean )   ( getNullValue (  )  )  ) ; }^328^^^^^303^333^[REMOVE] ^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Float )  getNullValue (  ) ;^329^^^^^303^333^[REPLACE] return  ( Integer )  getNullValue (  ) ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^332^^^^^303^333^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^332^^^^^303^333^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^332^^^^^303^333^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseInteger [TYPE] Integer [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  int len  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^338^^^^^337^361^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^338^^^^^337^361^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^341^^^^^337^361^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getFloatValue (  ) ;^342^^^^^337^361^[REPLACE] return jp.getLongValue (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_STRING )  {^345^^^^^337^361^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  *  0.5  == 0 )  {^348^^^^^337^361^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Double )  getEmptyValue (  ) ;^349^^^^^337^361^[REPLACE] return  ( Long )  getEmptyValue (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^351^352^353^^^337^361^[ADD] try { return Long.valueOf ( NumberInput.parseLong ( text )  ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return   NumberInput.parseLong ( text )  ;^352^^^^^337^361^[REPLACE] return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Long.valueOf ( NumberInput.parseInt ( text )  ) ;^352^^^^^337^361^[REPLACE] return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getByteValue (  ) .trim (  ) ;^347^^^^^337^361^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^347^^^^^337^361^[ADD] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^354^^^^^337^361^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  + 5 == 0 )  {^348^^^^^337^361^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Long.parseLong ( NumberInput.parseLong ( text )  ) ;^352^^^^^337^361^[REPLACE] return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^347^^^^^337^361^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^354^^^^^337^361^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_NULL )  {^356^^^^^337^361^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^357^^^^^337^361^[REPLACE] return  ( Long )  getNullValue (  ) ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^360^^^^^337^361^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^360^^^^^337^361^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^360^^^^^337^361^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLong [TYPE] Long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^366^^^^^363^384^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  t == JsonToken.VALUE_NUMBER_FLOAT )  {^367^^^^^363^384^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getFloatValue (  ) ;^368^^^^^363^384^[REPLACE] return jp.getLongValue (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^370^^^^^363^384^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^String text = jp.getText (  ) .trim (  ) ;return 0L;^370^371^372^373^374^363^384^[ADD] if  ( t == JsonToken.VALUE_STRING )  { String text = jp.getText (  ) .trim (  ) ; if  ( text.length (  )  == 0 )  { return 0L; }^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  - 4 == 0  )  {^372^^^^^363^384^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0;^373^^^^^363^384^[REPLACE] return 0L;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return NumberInput.parseLong ( text ) ;^375^376^377^^^363^384^[ADD] try { return NumberInput.parseLong ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return NumberInput.parseInt ( text ) ;^376^^^^^363^384^[REPLACE] return NumberInput.parseLong ( text ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getByteValue (  ) .trim (  ) ;^371^^^^^363^384^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^378^^^^^363^384^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.size (  )  == 0 )  {^372^^^^^363^384^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( "true".equals ( text )  )  {     return true; }^372^^^^^363^384^[REMOVE] ^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^371^^^^^363^384^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^378^^^^^363^384^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NULL )  {^380^^^^^363^384^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^380^381^382^^^363^384^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return 0L; }^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0;^381^^^^^363^384^[REPLACE] return 0L;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^383^^^^^363^384^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^383^^^^^363^384^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^383^^^^^363^384^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseLongPrimitive [TYPE] long [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp .getNumberType (  )  ;^390^^^^^388^428^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^390^^^^^388^428^[ADD] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^392^^^^^388^428^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getDoubleValue (  ) ;^393^^^^^388^428^[REPLACE] return jp.getFloatValue (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp .getLongValue (  )  ;^393^^^^^388^428^[REPLACE] return jp.getFloatValue (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^396^^^^^388^428^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  *  2 == 0 )  {^398^^^^^388^428^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^399^^^^^388^428^[REPLACE] return  ( Float )  getEmptyValue (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "Infinity".equals ( text )  && "INF".equals ( text )  )  {^403^^^^^388^428^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^403^404^405^^^388^428^[ADD] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  { return Float.POSITIVE_INFINITY; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Float.NEGATIVE_INFINITY;^404^^^^^388^428^[REPLACE] return Float.POSITIVE_INFINITY;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "NaN".valueOf ( text )  )  {^408^^^^^388^428^[REPLACE] if  ( "NaN".equals ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^409^^^^^388^428^[REPLACE] return Float.NaN;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "-Infinity".equals ( text )  && "-INF".equals ( text )  )  {^413^^^^^388^428^[REPLACE] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_FALSE )  )  {     return FALSE; }^413^^^^^388^428^[REMOVE] ^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Double.NEGATIVE_INFINITY;^414^^^^^388^428^[REPLACE] return Float.NEGATIVE_INFINITY;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Float.parseFloat ( text ) ;^418^419^420^^^388^428^[ADD] try { return Float.parseFloat ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return   text   ;^419^^^^^388^428^[REPLACE] return Float.parseFloat ( text ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^397^^^^^388^428^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^421^^^^^388^428^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^420^421^^^^388^428^[ADD] catch  ( IllegalArgumentException iae )  { } throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  - 5 == 0 )  {^398^^^^^388^428^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_NULL )  )  {     return  (  ( Boolean )   ( getNullValue (  )  )  ) ; }^398^^^^^388^428^[REMOVE] ^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "Infinity" .valueOf ( text )   && "INF"^403^^^^^388^428^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "false".equals ( text )  )  {^408^^^^^388^428^[REPLACE] if  ( "NaN".equals ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^408^409^410^^^388^428^[ADD] if  ( "NaN".equals ( text )  )  { return Float.NaN; }^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "-Infinity".valueOf ( text )  && "-INF".equals ( text )  )  {^413^^^^^388^428^[REPLACE] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getByteValue (  ) .trim (  ) ;^397^^^^^388^428^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^421^^^^^388^428^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^423^^^^^388^428^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Byte )  getNullValue (  ) ;^424^^^^^388^428^[REPLACE] return  ( Float )  getNullValue (  ) ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^427^^^^^388^428^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( this )   ;^427^^^^^388^428^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloat [TYPE] Float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^433^^^^^432^470^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^435^^^^^432^470^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^436^^^^^432^470^[REPLACE] return jp.getFloatValue (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  !=  JsonToken.VALUE_STRING )  {^438^^^^^432^470^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^String text = jp.getText (  ) .trim (  ) ;return 0.0f;^438^439^440^441^442^432^470^[ADD] if  ( t == JsonToken.VALUE_STRING )  { String text = jp.getText (  ) .trim (  ) ; if  ( text.length (  )  == 0 )  { return 0.0f; }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  %  2 == 0  )  {^440^^^^^432^470^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0;^441^^^^^432^470^[REPLACE] return 0.0f;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "Infinity".equals ( text )  ) {^445^^^^^432^470^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^445^446^447^^^432^470^[ADD] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  { return Float.POSITIVE_INFINITY; }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Float.NEGATIVE_INFINITY;^446^^^^^432^470^[REPLACE] return Float.POSITIVE_INFINITY;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "NaN".valueOf ( text )  )  {^450^^^^^432^470^[REPLACE] if  ( "NaN".equals ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^451^^^^^432^470^[REPLACE] return Float.NaN;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "-Infinity".equals ( text )  && "-INF".equals ( text )  )  {^455^^^^^432^470^[REPLACE] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Double.NEGATIVE_INFINITY;^456^^^^^432^470^[REPLACE] return Float.NEGATIVE_INFINITY;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Float.parseFloat ( text ) ;^460^461^462^^^432^470^[ADD] try { return Float.parseFloat ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return   text   ;^461^^^^^432^470^[REPLACE] return Float.parseFloat ( text ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^439^^^^^432^470^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^463^^^^^432^470^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  + 2 == 0  )  {^440^^^^^432^470^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  "INF".equals ( text )  )  {^445^^^^^432^470^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp .getByteValue (  )  .trim (  ) ;^439^^^^^432^470^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^463^^^^^432^470^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NULL )  {^465^^^^^432^470^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0;^466^^^^^432^470^[REPLACE] return 0.0f;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^469^^^^^432^470^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^469^^^^^432^470^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^469^^^^^432^470^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseFloatPrimitive [TYPE] float [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^475^^^^^474^512^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^477^^^^^474^512^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^478^^^^^474^512^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp .getLongValue (  )  ;^478^^^^^474^512^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_STRING )  {^480^^^^^474^512^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  + 2 == 0  )  {^482^^^^^474^512^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_NULL )  )  {     return  (  ( Boolean )   ( getNullValue (  )  )  ) ; }^482^^^^^474^512^[REMOVE] ^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^483^^^^^474^512^[REPLACE] return  ( Double )  getEmptyValue (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "Infinity" .valueOf ( text )   && "INF"^487^^^^^474^512^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Double.NEGATIVE_INFINITY;^488^^^^^474^512^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "NaN".valueOf ( text )  )  {^492^^^^^474^512^[REPLACE] if  ( "NaN".equals ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( "true".equals ( text )  )  {     return true; }^492^^^^^474^512^[REMOVE] ^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Double.NEGATIVE_INFINITY;^493^^^^^474^512^[REPLACE] return Double.NaN;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "-Infinity".equals ( text )  && "-INF".equals ( text )  )  {^497^^^^^474^512^[REPLACE] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Double.NEGATIVE_INFINITY;^497^498^499^^^474^512^[ADD] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  { return Double.NEGATIVE_INFINITY; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Float.NEGATIVE_INFINITY;^498^^^^^474^512^[REPLACE] return Double.NEGATIVE_INFINITY;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return parseDouble ( text ) ;^502^503^504^^^474^512^[ADD] try { return parseDouble ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^503^^^^^474^512^[REPLACE] return parseDouble ( text ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^481^^^^^474^512^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^505^^^^^474^512^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^505^^^^^474^512^[ADD] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  *  0.5  == 0 )  {^482^^^^^474^512^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  "INF".equals ( text )  )  {^487^^^^^474^512^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "NaN" .valueOf ( text )   )  {^492^^^^^474^512^[REPLACE] if  ( "NaN".equals ( text )  )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getByteValue (  ) .trim (  ) ;^481^^^^^474^512^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^505^^^^^474^512^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^504^505^^^^474^512^[ADD] catch  ( IllegalArgumentException iae )  { } throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^507^^^^^474^512^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return  ( Double )  getNullValue (  ) ;^507^508^509^^^474^512^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return  ( Double )  getNullValue (  ) ; }^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Double )  getEmptyValue (  ) ;^508^^^^^474^512^[REPLACE] return  ( Double )  getNullValue (  ) ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^511^^^^^474^512^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^511^^^^^474^512^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDouble [TYPE] Double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^518^^^^^516^556^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t == JsonToken.VALUE_NUMBER_INT ) {^520^^^^^516^556^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^520^521^522^^^516^556^[ADD] if  ( t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT )  { return jp.getDoubleValue (  ) ; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getLongValue (  ) ;^521^^^^^516^556^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return jp.getIntValue (  ) ;^521^^^^^516^556^[REPLACE] return jp.getDoubleValue (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_STRING )  {^524^^^^^516^556^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REMOVE]^if  ( t ==  ( JsonToken.VALUE_STRING )  )  {     String text = jp.getText (  ) .trim (  ) ;     try {         int len = text.length (  ) ;         if  ( len > 9 )  {             long l = parseLong ( text ) ;             if  (  ( l <  ( MIN_VALUE )  )  ||  ( l >  ( MAX_VALUE )  )  )  {                 throw ctxt.weirdStringException ( text, _valueClass,  (  (  (  (  (  ( "Overflow: numeric value  ( " + text )  + " )  out of range of int  ( " )  +  ( MIN_VALUE )  )  + " - " )  +  ( MAX_VALUE )  )  + " ) " )  ) ;             }             return  (  ( int )   ( l )  ) ;         }         if  ( len == 0 )  {             return 0;         }         return parseInt ( text ) ;     } catch  ( IllegalArgumentException iae )  {         throw ctxt.weirdStringException ( text, _valueClass, "not a valid int value" ) ;     } }^524^^^^^516^556^[REMOVE] ^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  - 1 == 0 )  {^526^^^^^516^556^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0D;^527^^^^^516^556^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "Infinity" .valueOf ( text )   && "INF"^531^^^^^516^556^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Double.NEGATIVE_INFINITY;^532^^^^^516^556^[REPLACE] return Double.POSITIVE_INFINITY;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "NaN".valueOf ( text )  )  {^536^^^^^516^556^[REPLACE] if  ( "NaN".equals ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Double.NEGATIVE_INFINITY;^537^^^^^516^556^[REPLACE] return Double.NaN;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "-Infinity".equals ( text )  ) {^541^^^^^516^556^[REPLACE] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Double.NEGATIVE_INFINITY;^541^542^543^^^516^556^[ADD] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  { return Double.NEGATIVE_INFINITY; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return Float.NEGATIVE_INFINITY;^542^^^^^516^556^[REPLACE] return Double.NEGATIVE_INFINITY;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return parseDouble ( text ) ;^546^547^548^^^516^556^[ADD] try { return parseDouble ( text ) ; } catch  ( IllegalArgumentException iae )  { }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^547^^^^^516^556^[REPLACE] return parseDouble ( text ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 1.0d;^527^^^^^516^556^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  ) .getAnnotation (  ) ;^525^^^^^516^556^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^525^^^^^516^556^[ADD] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.mappingException  (" ")  ; ;^549^^^^^516^556^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( text.length (  )  + 3 == 0 )  {^526^^^^^516^556^[REPLACE] if  ( text.length (  )  == 0 )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 2.0d;^527^^^^^516^556^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( "Infinity".equals ( text )  && "INF".equals ( text )  )  {^531^^^^^516^556^[REPLACE] if  ( "Infinity".equals ( text )  || "INF".equals ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return Double.NaN;^536^537^538^^^516^556^[ADD] if  ( "NaN".equals ( text )  )  { return Double.NaN; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  (  "-INF".equals ( text )  )  {^541^^^^^516^556^[REPLACE] if  ( "-Infinity".equals ( text )  || "-INF".equals ( text )  )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0d;^527^^^^^516^556^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String text = jp.getText (  )  .getAnnotation ( null )  ;^525^^^^^516^556^[REPLACE] String text = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^549^^^^^516^556^[REPLACE] throw ctxt.weirdStringException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_NULL )  {^551^^^^^516^556^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^return 0.0;^551^552^553^^^516^556^[ADD] if  ( t == JsonToken.VALUE_NULL )  { return 0.0; }^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 2.0d;^552^^^^^516^556^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return 0.0D;^552^^^^^516^556^[REPLACE] return 0.0;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^555^^^^^516^556^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^555^^^^^516^556^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.findContextualValueDeserializer  (" ")  ;^555^^^^^516^556^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDoublePrimitive [TYPE] double [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String text  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^JsonToken t = jp.getNumberType (  ) ;^561^^^^^558^583^[REPLACE] JsonToken t = jp.getCurrentToken (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NUMBER_INT )  {^562^^^^^558^583^[REPLACE] if  ( t == JsonToken.VALUE_NUMBER_INT )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return new java.util.Date ( jp.getFloatValue (  )  ) ;^563^^^^^558^583^[REPLACE] return new java.util.Date ( jp.getLongValue (  )  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return new java.util.Date ( jp .getFloatValue (  )   ) ;^563^^^^^558^583^[REPLACE] return new java.util.Date ( jp.getLongValue (  )  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  &&  JsonToken.VALUE_NULL )  {^565^^^^^558^583^[REPLACE] if  ( t == JsonToken.VALUE_NULL )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^566^^^^^558^583^[REPLACE] return  ( java.util.Date )  getNullValue (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( t  ||  JsonToken.VALUE_STRING )  {^568^^^^^558^583^[REPLACE] if  ( t == JsonToken.VALUE_STRING )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value.valueOf (  )  %  0.5  == 0 )  {^573^^^^^558^583^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^573^574^575^^^558^583^[ADD] if  ( value.length (  )  == 0 )  { return  ( Date )  getEmptyValue (  ) ; }^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^574^^^^^558^583^[REPLACE] return  ( Date )  getEmptyValue (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^value = jp.getText (  ) .trim (  ) ;return  ( Date )  getEmptyValue (  ) ;^570^571^572^573^574^558^583^[ADD] try {  value = jp.getText (  ) .trim (  ) ; if  ( value.length (  )  == 0 )  { return  ( Date )  getEmptyValue (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value.valueOf (  )  /  0.5  == 0 )  {^573^^^^^558^583^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^value =  null.getText (  ) .trim (  ) ;^572^^^^^558^583^[REPLACE] value = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ctxt .converterInstance ( this )  ;^576^^^^^558^583^[REPLACE] return ctxt.parseDate ( value ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^572^^^^^558^583^[ADD] value = jp.getText (  ) .trim (  ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ctxt.converterInstance ( value ) ;^576^^^^^558^583^[REPLACE] return ctxt.parseDate ( value ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^String value = this;^569^^^^^558^583^[REPLACE] String value = null;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^569^^^^^558^583^[ADD] String value = null;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  , _valueClass, "overflow, value can not be represented as 16-bit value" ) ; ;^578^579^^^^558^583^[REPLACE] throw ctxt.weirdStringException ( value, _valueClass, "not a valid representation  ( error: "+iae.getMessage (  ) +" ) " ) ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value.valueOf (  )  /  2 == 0 )  {^573^^^^^558^583^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value.size (  )  == 0 )  {^573^^^^^558^583^[REPLACE] if  ( value.length (  )  == 0 )  {^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^return ;^582^^^^^558^583^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[ADD]^^582^^^^^558^583^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( null )   ;^582^^^^^558^583^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseDate [TYPE] Date [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JsonToken t  [TYPE]  String value  [TYPE]  long l  serialVersionUID  [TYPE]  IllegalArgumentException iae  [TYPE]  JsonParser jp 
[REPLACE]^if  ( NumberInput.NASTY_SMALL_DOUBLE .valueOf ( numStr )   )  {^593^^^^^589^597^[REPLACE] if  ( NumberInput.NASTY_SMALL_DOUBLE.equals ( numStr )  )  {^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  String numStr  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID 
[ADD]^return Double.MIN_VALUE;^593^594^595^^^589^597^[ADD] if  ( NumberInput.NASTY_SMALL_DOUBLE.equals ( numStr )  )  { return Double.MIN_VALUE; }^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  String numStr  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID 
[REPLACE]^return  ( Long )  getEmptyValue (  ) ;^594^^^^^589^597^[REPLACE] return Double.MIN_VALUE;^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  String numStr  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID 
[REPLACE]^return Double ._parseDouble ( null , null )  ;^596^^^^^589^597^[REPLACE] return Double.parseDouble ( numStr ) ;^[METHOD] parseDouble [TYPE] double [PARAMETER] String numStr [CLASS] StdDeserializer   [TYPE]  Class _valueClass  vc  [TYPE]  String numStr  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID 
[REPLACE]^String value = jp .getCurrentToken (  )  ;^608^^^^^605^613^[REPLACE] String value = jp.getValueAsString (  ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^608^^^^^605^613^[ADD] String value = jp.getValueAsString (  ) ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value == this )  {^609^^^^^605^613^[REPLACE] if  ( value != null )  {^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return value;^609^610^611^^^605^613^[ADD] if  ( value != null )  { return value; }^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return false;^610^^^^^605^613^[REPLACE] return value;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt.weirdStringException  (" ")  ; ;^612^^^^^605^613^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^throw ctxt .mappingException ( null )   ;^612^^^^^605^613^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^612^^^^^605^613^[ADD] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^String str = jp.getText (  ) ;^612^^^^^605^613^[REPLACE] throw ctxt.mappingException  (" ")  ;^[METHOD] _parseString [TYPE] String [PARAMETER] JsonParser jp DeserializationContext ctxt [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  String value  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return ctxt .converterInstance ( null )  ;^634^^^^^630^635^[REPLACE] return ctxt.findContextualValueDeserializer ( type, property ) ;^[METHOD] findDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt JavaType type BeanProperty property [CLASS] StdDeserializer   [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  JavaType type  [TYPE]  boolean false  true  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty property 
[REPLACE]^final AnnotationIntrospector intr = ctxt.getTypeFactory (  ) ;^657^^^^^653^670^[REPLACE] final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector (  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( intr == null ) {^658^^^^^653^670^[REPLACE] if  ( intr != null && prop != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( convDef == null )  {^660^^^^^653^670^[REPLACE] if  ( convDef != null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( existingDeserializer != null )  {^663^^^^^653^670^[REPLACE] if  ( existingDeserializer == null )  {^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^existingDeserializer =  null.findContextualValueDeserializer ( delegateType, prop ) ;^664^^^^^653^670^[REPLACE] existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[ADD]^^664^^^^^653^670^[ADD] existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^return Long.valueOf ( NumberInput.parseLong ( text )  ) ;^666^^^^^653^670^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^Object convDef = intr.findDeserializationContentConverter ( prop.getMember (  )  ) ;^661^^^^^653^670^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[ADD]^^661^^^^^653^670^[ADD] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = conv.getInputType ( ctxt.getAnnotationIntrospector (  )  ) ;^662^^^^^653^670^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[ADD]^^662^^^^^653^670^[ADD] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[ADD]^existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ;^663^664^665^^^653^670^[ADD] if  ( existingDeserializer == null )  { existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ; }^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( null, delegateType, existingDeserializer ) ;^666^^^^^653^670^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^659^^^^^653^670^[REPLACE] Object convDef = intr.findDeserializationContentConverter ( prop.getMember (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt.parseDate ( prop.getMember (  ) , convDef ) ;^661^^^^^653^670^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = this.getInputType ( ctxt.getTypeFactory (  )  ) ;^662^^^^^653^670^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[ADD]^^663^664^665^^^653^670^[ADD] if  ( existingDeserializer == null )  { existingDeserializer = ctxt.findContextualValueDeserializer ( delegateType, prop ) ; }^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( 1, delegateType, existingDeserializer ) ;^666^^^^^653^670^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^return new StdDelegatingDeserializer<Object> ( conv, delegateType, null ) ;^666^^^^^653^670^[REPLACE] return new StdDelegatingDeserializer<Object> ( conv, delegateType, existingDeserializer ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^Converter<Object,Object> conv = ctxt .findContextualValueDeserializer ( delegateType , prop )  ;^661^^^^^653^670^[REPLACE] Converter<Object,Object> conv = ctxt.converterInstance ( prop.getMember (  ) , convDef ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^JavaType delegateType = true.getInputType ( ctxt.getTypeFactory (  )  ) ;^662^^^^^653^670^[REPLACE] JavaType delegateType = conv.getInputType ( ctxt.getTypeFactory (  )  ) ;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^return false;^669^^^^^653^670^[REPLACE] return existingDeserializer;^[METHOD] findConvertingContentDeserializer [TYPE] JsonDeserializer [PARAMETER] DeserializationContext ctxt BeanProperty prop JsonDeserializer<?> existingDeserializer [CLASS] StdDeserializer   [TYPE]  JavaType delegateType  [TYPE]  boolean false  true  [TYPE]  AnnotationIntrospector intr  [TYPE]  DeserializationContext ctxt  [TYPE]  Converter conv  [TYPE]  Class _valueClass  vc  [TYPE]  Object convDef  [TYPE]  JsonDeserializer existingDeserializer  [TYPE]  long l  serialVersionUID  [TYPE]  BeanProperty prop 
[REPLACE]^if  ( instanceOrClass != null )  {^700^^^^^696^714^[REPLACE] if  ( instanceOrClass == null )  {^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^700^701^702^^^696^714^[ADD] if  ( instanceOrClass == null )  { instanceOrClass = getValueClass (  ) ; }^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^instanceOrClass ;^701^^^^^696^714^[REPLACE] instanceOrClass = getValueClass (  ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^^701^^^^^696^714^[ADD] instanceOrClass = getValueClass (  ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^if  ( value.length (  )  == 0 )  {^704^^^^^696^714^[REPLACE] if  ( ctxt.handleUnknownProperty ( jp, this, instanceOrClass, propName )  )  {^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[ADD]^return;^704^705^706^^^696^714^[ADD] if  ( ctxt.handleUnknownProperty ( jp, this, instanceOrClass, propName )  )  { return; }^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^return Float.NaN;^705^^^^^696^714^[REPLACE] return;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^ctxt .handleUnknownProperty ( jp , ctxt , instanceOrClass , propName )  ;^708^^^^^696^714^[REPLACE] ctxt.reportUnknownProperty ( instanceOrClass, propName, this ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
[REPLACE]^jp.getIntValue (  ) ;^713^^^^^696^714^[REPLACE] jp.skipChildren (  ) ;^[METHOD] handleUnknownProperty [TYPE] void [PARAMETER] JsonParser jp DeserializationContext ctxt Object instanceOrClass String propName [CLASS] StdDeserializer   [TYPE]  boolean false  true  [TYPE]  DeserializationContext ctxt  [TYPE]  Class _valueClass  vc  [TYPE]  Object instanceOrClass  [TYPE]  String propName  [TYPE]  long l  serialVersionUID  [TYPE]  JsonParser jp 
