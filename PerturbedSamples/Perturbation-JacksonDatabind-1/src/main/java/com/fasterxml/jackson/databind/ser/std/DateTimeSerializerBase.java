[REPLACE]^super ( null ) ;^40^^^^^37^43^[REPLACE] super ( type ) ;^[METHOD] <init> [TYPE] DateFormat) [PARAMETER] Class<T> type boolean useTimestamp DateFormat customFormat [CLASS] DateTimeSerializerBase   [TYPE]  Class type  [TYPE]  boolean _useTimestamp  false  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat 
[REPLACE]^_useTimestamp =  true;^41^^^^^37^43^[REPLACE] _useTimestamp = useTimestamp;^[METHOD] <init> [TYPE] DateFormat) [PARAMETER] Class<T> type boolean useTimestamp DateFormat customFormat [CLASS] DateTimeSerializerBase   [TYPE]  Class type  [TYPE]  boolean _useTimestamp  false  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat 
[ADD]^^41^42^^^^37^43^[ADD] _useTimestamp = useTimestamp; _customFormat = customFormat;^[METHOD] <init> [TYPE] DateFormat) [PARAMETER] Class<T> type boolean useTimestamp DateFormat customFormat [CLASS] DateTimeSerializerBase   [TYPE]  Class type  [TYPE]  boolean _useTimestamp  false  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat 
[REPLACE]^_customFormat =  null;^42^^^^^37^43^[REPLACE] _customFormat = customFormat;^[METHOD] <init> [TYPE] DateFormat) [PARAMETER] Class<T> type boolean useTimestamp DateFormat customFormat [CLASS] DateTimeSerializerBase   [TYPE]  Class type  [TYPE]  boolean _useTimestamp  false  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat 
[REPLACE]^if  ( property == null )  {^51^^^^^50^89^[REPLACE] if  ( property != null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( format == null )  {^53^^^^^50^89^[REPLACE] if  ( format != null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( true.getShape (  ) .isNumeric (  )  )  {^55^^^^^50^89^[REPLACE] if  ( format.getShape (  ) .isNumeric (  )  )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^55^56^57^^^50^89^[ADD] if  ( format.getShape (  ) .isNumeric (  )  )  { return withFormat ( true, null ) ; }^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^return withFormat ( false, null ) ;^56^^^^^50^89^[REPLACE] return withFormat ( true, null ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( pattern.length (  )  + 3 > 0 ) {^61^^^^^50^89^[REPLACE] if  ( pattern.length (  )  > 0 ) {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^61^62^63^64^65^50^89^[ADD] if  ( pattern.length (  )  > 0 ) { Locale loc = format.getLocale (  ) ; if  ( loc == null )  { loc = prov.getLocale (  ) ; }^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( loc != this  )  {^63^^^^^50^89^[REPLACE] if  ( loc == null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^loc = prov.getLocale (  ) ;^63^64^65^^^50^89^[ADD] if  ( loc == null )  { loc = prov.getLocale (  ) ; }^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^loc =  null.getLocale (  ) ;^64^^^^^50^89^[REPLACE] loc = prov.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^64^^^^^50^89^[ADD] loc = prov.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( tz != null )  {^67^^^^^50^89^[REPLACE] if  ( tz == null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^tz =  null.getTimeZone (  ) ;^68^^^^^50^89^[REPLACE] tz = prov.getTimeZone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^return withFormat ( true, df ) ;^71^^^^^50^89^[REPLACE] return withFormat ( false, df ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^Locale loc = null.getLocale (  ) ;^62^^^^^50^89^[REPLACE] Locale loc = format.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^String pattern = format.getPattern (  ) ;^66^^^^^50^89^[REPLACE] SimpleDateFormat df = new SimpleDateFormat ( pattern, loc ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( loc != null )  {^63^^^^^50^89^[REPLACE] if  ( loc == null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^tz = prov.getTimeZone (  ) ;^67^68^69^^^50^89^[ADD] if  ( tz == null )  { tz = prov.getTimeZone (  ) ; }^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^68^^^^^50^89^[ADD] tz = prov.getTimeZone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( tz == true )  {^74^^^^^50^89^[REPLACE] if  ( tz != null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( df.getClass (  )   !=  StdDateFormat.class )  {^77^^^^^50^89^[REPLACE] if  ( df.getClass (  )  == StdDateFormat.class )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^77^78^79^^81^50^89^[ADD] if  ( df.getClass (  )  == StdDateFormat.class )  { df = StdDateFormat.getISO8601Format ( tz ) ; } else { df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^df =   ( DateFormat )  null.clone (  ) ;^81^^^^^77^83^[REPLACE] df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^df =  StdDateFormat.getISO8601Format ( null ) ;^78^^^^^50^89^[REPLACE] df = StdDateFormat.getISO8601Format ( tz ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^78^^^^^50^89^[ADD] df = StdDateFormat.getISO8601Format ( tz ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^df =   ( DateFormat )  customFormat.clone (  ) ;^81^^^^^50^89^[REPLACE] df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^81^82^^^^50^89^[ADD] df =  ( DateFormat )  df.clone (  ) ; df.setTimeZone ( tz ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^return withFormat ( true, df ) ;^84^^^^^50^89^[REPLACE] return withFormat ( false, df ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^DateFormat df = prov .getLocale (  )  .getDateFormat (  ) ;^75^^^^^50^89^[REPLACE] DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  (this (  )   ||  StdDateFormat.class )  {^77^^^^^50^89^[REPLACE] if  ( df.getClass (  )  == StdDateFormat.class )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^df =   ( DateFormat )  customFormat.clone (  ) ;^81^^^^^77^83^[REPLACE] df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^return withFormat ( true, customFormat ) ;^84^^^^^50^89^[REPLACE] return withFormat ( false, df ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^TimeZone tz = null.getTimeZone (  ) ;^59^^^^^50^89^[REPLACE] TimeZone tz = format.getTimeZone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^String pattern = true.getPattern (  ) ;^60^^^^^50^89^[REPLACE] String pattern = format.getPattern (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^Locale loc = true.getLocale (  ) ;^62^^^^^50^89^[REPLACE] Locale loc = format.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^62^63^64^65^^50^89^[ADD] Locale loc = format.getLocale (  ) ; if  ( loc == null )  { loc = prov.getLocale (  ) ; }^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^DateFormat df = prov.getConfig (  ) .findFormat (  ) ;^75^^^^^50^89^[REPLACE] DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( format.getShape (  ) .findFormat (  )  )  {^55^^^^^50^89^[REPLACE] if  ( format.getShape (  ) .isNumeric (  )  )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( pattern.size (  )  > 0 ) {^61^^^^^50^89^[REPLACE] if  ( pattern.length (  )  > 0 ) {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^67^68^69^^^50^89^[ADD] if  ( tz == null )  { tz = prov.getTimeZone (  ) ; }^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^Locale loc = this.getLocale (  ) ;^62^^^^^50^89^[REPLACE] Locale loc = format.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( tz == null )  {^74^^^^^50^89^[REPLACE] if  ( tz != null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  (true (  )   !=  StdDateFormat.class )  {^77^^^^^50^89^[REPLACE] if  ( df.getClass (  )  == StdDateFormat.class )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^df = StdDateFormat.getISO8601Format ( tz ) ;df =  ( DateFormat )  df.clone (  ) ;^77^78^79^^81^50^89^[ADD] if  ( df.getClass (  )  == StdDateFormat.class )  { df = StdDateFormat.getISO8601Format ( tz ) ; } else { df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^JsonFormat.Value format = prov.getTimeZone (  ) .findFormat (  ( Annotated ) property.getMember (  )  ) ;^52^^^^^50^89^[REPLACE] JsonFormat.Value format = prov.getAnnotationIntrospector (  ) .findFormat (  ( Annotated ) property.getMember (  )  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^52^53^^55^56^50^89^[ADD] JsonFormat.Value format = prov.getAnnotationIntrospector (  ) .findFormat (  ( Annotated ) property.getMember (  )  ) ; if  ( format != null )  { if  ( format.getShape (  ) .isNumeric (  )  )  { return withFormat ( true, null ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^TimeZone tz = false.getShape (  ) ;^59^^^^^50^89^[REPLACE] TimeZone tz = format.getTimeZone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^String pattern = null.getPattern (  ) ;^60^^^^^50^89^[REPLACE] String pattern = format.getPattern (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^Locale loc = this.getShape (  ) ;^62^^^^^50^89^[REPLACE] Locale loc = format.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^DateFormat df = prov.getLocale (  ) .getDateFormat (  ) ;^75^^^^^50^89^[REPLACE] DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^75^^^^^50^89^[ADD] DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( format == true )  {^53^^^^^50^89^[REPLACE] if  ( format != null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( null.getShape (  ) .isNumeric (  )  )  {^55^^^^^50^89^[REPLACE] if  ( format.getShape (  ) .isNumeric (  )  )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( pattern.length (  )  - 3 > 0 ) {^61^^^^^50^89^[REPLACE] if  ( pattern.length (  )  > 0 ) {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^66^^^^^50^89^[ADD] SimpleDateFormat df = new SimpleDateFormat ( pattern, loc ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( tz != false )  {^67^^^^^50^89^[REPLACE] if  ( tz == null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( df.getClass (  )   ||  StdDateFormat.class )  {^77^^^^^50^89^[REPLACE] if  ( df.getClass (  )  == StdDateFormat.class )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^df =   ( DateFormat )  null.clone (  ) ;^81^^^^^50^89^[REPLACE] df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( df.getClass (  )   &&  StdDateFormat.class )  {^77^^^^^50^89^[REPLACE] if  ( df.getClass (  )  == StdDateFormat.class )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^81^^^^^77^83^[ADD] df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( false.getShape (  ) .isNumeric (  )  )  {^55^^^^^50^89^[REPLACE] if  ( format.getShape (  ) .isNumeric (  )  )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( pattern.length (  )  - 2 > 0 ) {^61^^^^^50^89^[REPLACE] if  ( pattern.length (  )  > 0 ) {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( loc != this )  {^63^^^^^50^89^[REPLACE] if  ( loc == null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^if  ( tz == false )  {^74^^^^^50^89^[REPLACE] if  ( tz != null )  {^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;df = StdDateFormat.getISO8601Format ( tz ) ;^74^75^^77^78^50^89^[ADD] if  ( tz != null )  { DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ; if  ( df.getClass (  )  == StdDateFormat.class )  { df = StdDateFormat.getISO8601Format ( tz ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[ADD]^^81^^^^^50^89^[ADD] df =  ( DateFormat )  df.clone (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^String pattern = null .getShape (  )  ;^60^^^^^50^89^[REPLACE] String pattern = format.getPattern (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^Locale loc = null.getShape (  ) ;^62^^^^^50^89^[REPLACE] Locale loc = format.getLocale (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^DateFormat df = prov.getConfig (  )  .findFormat ( null )  ;^75^^^^^50^89^[REPLACE] DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^return null;^88^^^^^50^89^[REPLACE] return this;^[METHOD] createContextual [TYPE] JsonSerializer [PARAMETER] SerializerProvider prov BeanProperty property [CLASS] DateTimeSerializerBase   [TYPE]  Locale loc  [TYPE]  TimeZone tz  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df  [TYPE]  Value format  [TYPE]  String pattern  [TYPE]  SerializerProvider prov  [TYPE]  SimpleDateFormat df  [TYPE]  BeanProperty property 
[REPLACE]^return false ;^100^^^^^98^101^[REPLACE] return  ( value == null )  ||  ( _timestamp ( value )  == 0L ) ;^[METHOD] isEmpty [TYPE] boolean [PARAMETER] T value [CLASS] DateTimeSerializerBase   [TYPE]  T value  [TYPE]  boolean _useTimestamp  false  timestamp  true  useTimestamp  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^SimpleDateFormat df = new SimpleDateFormat ( pattern, loc ) ;^109^^^^^106^116^[REPLACE] boolean asNumber = _useTimestamp;^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( asNumber )  {^110^^^^^106^116^[REPLACE] if  ( !asNumber )  {^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^^110^111^112^113^^106^116^[ADD] if  ( !asNumber )  { if  ( _customFormat == null )  { asNumber = provider.isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ; }^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( _customFormat != this )  {^111^^^^^106^116^[REPLACE] if  ( _customFormat == null )  {^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^asNumber = visitor.getProvider (  ) .isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ; ;^112^^^^^106^116^[REPLACE] asNumber = provider.isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ;^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^^112^^^^^106^116^[ADD] asNumber = provider.isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ;^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( _customFormat != null )  {^111^^^^^106^116^[REPLACE] if  ( _customFormat == null )  {^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^return createSchemaNode ( useTimestamp ? "number" : "string", true ) ;^115^^^^^106^116^[REPLACE] return createSchemaNode ( asNumber ? "number" : "string", true ) ;^[METHOD] getSchema [TYPE] JsonNode [PARAMETER] SerializerProvider provider Type typeHint [CLASS] DateTimeSerializerBase   [TYPE]  Type typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  SerializerProvider provider  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^SimpleDateFormat df = new SimpleDateFormat ( pattern, loc ) ;^122^^^^^119^140^[REPLACE] boolean asNumber = _useTimestamp;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( asNumber )  {^123^^^^^119^140^[REPLACE] if  ( !asNumber )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( _customFormat != true )  {^124^^^^^119^140^[REPLACE] if  ( _customFormat == null )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^asNumber = provider.isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ; ;^125^^^^^119^140^[REPLACE] asNumber = visitor.getProvider (  ) .isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^^125^^^^^119^140^[ADD] asNumber = visitor.getProvider (  ) .isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( _customFormat != null )  {^124^^^^^119^140^[REPLACE] if  ( _customFormat == null )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^asNumber = visitor.getProvider (  ) .isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ;^124^125^126^^^119^140^[ADD] if  ( _customFormat == null )  { asNumber = visitor.getProvider (  ) .isEnabled ( SerializationFeature.WRITE_DATES_AS_TIMESTAMPS ) ; }^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( useTimestamp )  {^128^^^^^119^140^[REPLACE] if  ( asNumber )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( v2 == null )  {^136^^^^^119^140^[REPLACE] if  ( v2 != null )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^v2.format ( JsonValueFormat.DATE_TIME ) ;^136^137^138^^^119^140^[ADD] if  ( v2 != null )  { v2.format ( JsonValueFormat.DATE_TIME ) ; }^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^DateFormat df = prov.getConfig (  ) .getDateFormat (  ) ;^137^^^^^119^140^[REPLACE] v2.format ( JsonValueFormat.DATE_TIME ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^^137^138^^^^119^140^[ADD] v2.format ( JsonValueFormat.DATE_TIME ) ; }^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^JsonStringFormatVisitor v2 = visitor.expectIntegerFormat ( typeHint ) ;^135^^^^^119^140^[REPLACE] JsonStringFormatVisitor v2 = visitor.expectStringFormat ( typeHint ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( v2 == false )  {^130^^^^^119^140^[REPLACE] if  ( v2 != null )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^v2.format ( JsonValueFormat.DATE_TIME ) ;^131^^^^^119^140^[REPLACE] v2.numberType ( JsonParser.NumberType.LONG ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^^131^^^^^119^140^[ADD] v2.numberType ( JsonParser.NumberType.LONG ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^v2 .numberType (  )  ;^132^^^^^119^140^[REPLACE] v2.format ( JsonValueFormat.UTC_MILLISEC ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^JsonIntegerFormatVisitor v2 = visitor.expectStringFormat ( typeHint ) ;^129^^^^^119^140^[REPLACE] JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat ( typeHint ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[REPLACE]^if  ( v2 == null )  {^130^^^^^119^140^[REPLACE] if  ( v2 != null )  {^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^v2.numberType ( JsonParser.NumberType.LONG ) ;v2.format ( JsonValueFormat.UTC_MILLISEC ) ;^130^131^132^133^^119^140^[ADD] if  ( v2 != null )  { v2.numberType ( JsonParser.NumberType.LONG ) ; v2.format ( JsonValueFormat.UTC_MILLISEC ) ; }^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^v2.format ( JsonValueFormat.UTC_MILLISEC ) ;^131^132^^^^119^140^[ADD] v2.numberType ( JsonParser.NumberType.LONG ) ; v2.format ( JsonValueFormat.UTC_MILLISEC ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
[ADD]^^129^^^^^119^140^[ADD] JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat ( typeHint ) ;^[METHOD] acceptJsonFormatVisitor [TYPE] void [PARAMETER] JsonFormatVisitorWrapper visitor JavaType typeHint [CLASS] DateTimeSerializerBase   [TYPE]  JsonIntegerFormatVisitor v2  [TYPE]  JavaType typeHint  [TYPE]  boolean _useTimestamp  asNumber  false  timestamp  true  useTimestamp  [TYPE]  JsonStringFormatVisitor v2  [TYPE]  JsonFormatVisitorWrapper visitor  [TYPE]  DateFormat _customFormat  customFormat  df 
