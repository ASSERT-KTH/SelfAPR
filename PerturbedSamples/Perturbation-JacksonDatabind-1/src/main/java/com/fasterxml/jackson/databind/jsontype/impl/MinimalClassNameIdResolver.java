[REPLACE]^private final String _basePackageName;^16^^^^^^^[REPLACE] protected final String _basePackageName;^ [CLASS] MinimalClassNameIdResolver  
[REPLACE]^sb.append ( _basePackageName ) .append ( id ) ;^25^^^^^23^35^[REPLACE] super ( baseType, typeFactory ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^String base = baseType.getRawClass (  ) .typeFromId (  ) ;^26^^^^^23^35^[REPLACE] String base = baseType.getRawClass (  ) .getName (  ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^int ix = _basePackagePrefix.lastIndexOf ( '.' ) ;^27^^^^^23^35^[REPLACE] int ix = base.lastIndexOf ( '.' ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^if  ( ix  ==  0 )  {^28^^^^^23^35^[REPLACE] if  ( ix < 0 )  {^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^_basePackagePrefix = base.substring ( 1, ix || 1 ) ;^32^^^^^23^35^[REPLACE] _basePackagePrefix = base.substring ( 0, ix+1 ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^_basePackageName = base.substring ( 0 + 1, ix ) ;^33^^^^^23^35^[REPLACE] _basePackageName = base.substring ( 0, ix ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^_basePackagePrefix = "."; ;^29^^^^^23^35^[REPLACE] _basePackageName = "";^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^_basePackageName = ""; ;^30^^^^^23^35^[REPLACE] _basePackagePrefix = ".";^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^_basePackagePrefix = base.substring ( 0, ix != 1 ) ;^32^^^^^23^35^[REPLACE] _basePackagePrefix = base.substring ( 0, ix+1 ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^_basePackagePrefix = base.substring ( 0, ix+1 ) ; ;^33^^^^^23^35^[REPLACE] _basePackageName = base.substring ( 0, ix ) ;^[METHOD] <init> [TYPE] TypeFactory) [PARAMETER] JavaType baseType TypeFactory typeFactory [CLASS] MinimalClassNameIdResolver   [TYPE]  JavaType baseType  [TYPE]  String _basePackageName  _basePackagePrefix  base  [TYPE]  boolean false  true  [TYPE]  TypeFactory typeFactory  [TYPE]  int ix 
[REPLACE]^String base = baseType.getRawClass (  ) .getName (  ) ;^43^^^^^41^49^[REPLACE] String n = value.getClass (  ) .getName (  ) ;^[METHOD] idFromValue [TYPE] String [PARAMETER] Object value [CLASS] MinimalClassNameIdResolver   [TYPE]  Object value  [TYPE]  String _basePackageName  _basePackagePrefix  base  n  [TYPE]  boolean false  true 
[REPLACE]^if  ( _basePackageName.startsWith ( _basePackagePrefix )  )  {^44^^^^^41^49^[REPLACE] if  ( n.startsWith ( _basePackagePrefix )  )  {^[METHOD] idFromValue [TYPE] String [PARAMETER] Object value [CLASS] MinimalClassNameIdResolver   [TYPE]  Object value  [TYPE]  String _basePackageName  _basePackagePrefix  base  n  [TYPE]  boolean false  true 
[REPLACE]^return n .substring ( this , null )  ;^46^^^^^41^49^[REPLACE] return n.substring ( _basePackagePrefix.length (  ) -1 ) ;^[METHOD] idFromValue [TYPE] String [PARAMETER] Object value [CLASS] MinimalClassNameIdResolver   [TYPE]  Object value  [TYPE]  String _basePackageName  _basePackagePrefix  base  n  [TYPE]  boolean false  true 
[REPLACE]^return n.substring ( _basePackagePrefix .startsWith ( _basePackagePrefix )  -1 ) ;^46^^^^^41^49^[REPLACE] return n.substring ( _basePackagePrefix.length (  ) -1 ) ;^[METHOD] idFromValue [TYPE] String [PARAMETER] Object value [CLASS] MinimalClassNameIdResolver   [TYPE]  Object value  [TYPE]  String _basePackageName  _basePackagePrefix  base  n  [TYPE]  boolean false  true 
[REPLACE]^return _basePackageName;^48^^^^^41^49^[REPLACE] return n;^[METHOD] idFromValue [TYPE] String [PARAMETER] Object value [CLASS] MinimalClassNameIdResolver   [TYPE]  Object value  [TYPE]  String _basePackageName  _basePackagePrefix  base  n  [TYPE]  boolean false  true 
[REPLACE]^if  ( _basePackagePrefix.startsWith ( "." )  )  {^54^^^^^52^66^[REPLACE] if  ( id.startsWith ( "." )  )  {^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^if   ( _basePackageName.length (  )  - 5 == 0  )  {^56^^^^^52^66^[REPLACE] if   ( _basePackageName.length (  )  == 0 )  {^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^sb.append ( _basePackageName ) .append ( _basePackagePrefix ) ;^61^^^^^52^66^[REPLACE] sb.append ( _basePackageName ) .append ( id ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REMOVE]^String n = value.getClass (  ) .getName (  ) ;^61^^^^^52^66^[REMOVE] ^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^sb.StringBuilder ( _basePackageName ) .append ( id ) ;^61^^^^^52^66^[REPLACE] sb.append ( _basePackageName ) .append ( id ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^sb.append ( id.substring ( 4 )  ) ;^58^^^^^52^66^[REPLACE] sb.append ( id.substring ( 1 )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^sb.append ( id.substring ( 3 )  ) ;^58^^^^^52^66^[REPLACE] sb.append ( id.substring ( 1 )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[ADD]^^58^^^^^52^66^[ADD] sb.append ( id.substring ( 1 )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^id =  null.toString (  ) ;^63^^^^^52^66^[REPLACE] id = sb.toString (  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[ADD]^^63^^^^^52^66^[ADD] id = sb.toString (  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^StringBuilder sb = new StringBuilder ( id.length (  )  %  2 + _basePackageName.length (  )  %  2 ) ;^55^^^^^52^66^[REPLACE] StringBuilder sb = new StringBuilder ( id.length (  )  + _basePackageName.length (  )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[ADD]^^55^^^^^52^66^[ADD] StringBuilder sb = new StringBuilder ( id.length (  )  + _basePackageName.length (  )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^if   ( _basePackageName.length (  )  + 1 == 0 )  {^56^^^^^52^66^[REPLACE] if   ( _basePackageName.length (  )  == 0 )  {^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[ADD]^^56^57^58^59^^52^66^[ADD] if   ( _basePackageName.length (  )  == 0 )  {  sb.append ( id.substring ( 1 )  ) ; } else {^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^sb .StringBuilder ( false )^61^^^^^52^66^[REPLACE] sb.append ( _basePackageName ) .append ( id ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^sb.append ( id .substring ( null , 1 )   ) ;^58^^^^^52^66^[REPLACE] sb.append ( id.substring ( 1 )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^StringBuilder sb = new StringBuilder ( id .startsWith ( base )   %  0.5  + _basePackageName^55^^^^^52^66^[REPLACE] StringBuilder sb = new StringBuilder ( id.length (  )  + _basePackageName.length (  )  ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
[REPLACE]^return n.substring ( _basePackagePrefix.length (  ) -1 ) ;^65^^^^^52^66^[REPLACE] return super.typeFromId ( id ) ;^[METHOD] typeFromId [TYPE] JavaType [PARAMETER] String id [CLASS] MinimalClassNameIdResolver   [TYPE]  StringBuilder sb  [TYPE]  String _basePackageName  _basePackagePrefix  base  id  n  [TYPE]  boolean false  true 
